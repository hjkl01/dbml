// Generated from C:/Users/rikim/Desktop/Holistics/dbx/dbml/packages/dbml-core/src/parse/ANTLR/parsers/snowflake/SnowflakeParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import SnowflakeParserVisitor from './SnowflakeParserVisitor.js';

const serializedATN = [4,1,903,12595,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,2,513,7,513,
2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,
2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,
2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,
2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,7,549,
2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,2,555,7,555,
2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,2,561,7,561,
2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,2,567,7,567,
2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,2,573,7,573,
2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,2,579,7,579,
2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,
2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,
2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,
2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,1,0,3,0,1208,
8,0,1,0,1,0,1,1,1,1,1,1,5,1,1215,8,1,10,1,12,1,1218,9,1,1,1,3,1,1221,8,1,
1,2,1,2,1,2,1,2,1,2,1,2,3,2,1229,8,2,1,3,1,3,1,3,1,3,3,3,1235,8,3,1,4,1,
4,1,4,1,4,1,4,1,4,3,4,1243,8,4,1,5,1,5,3,5,1247,8,5,1,5,1,5,1,5,3,5,1252,
8,5,1,5,1,5,3,5,1256,8,5,1,6,1,6,3,6,1260,8,6,1,6,1,6,1,6,1,6,3,6,1266,8,
6,1,6,1,6,1,6,1,6,1,6,4,6,1273,8,6,11,6,12,6,1274,4,6,1277,8,6,11,6,12,6,
1278,1,6,1,6,3,6,1283,8,6,1,6,1,6,3,6,1287,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,
7,1295,8,7,1,7,3,7,1298,8,7,1,8,1,8,1,8,1,8,1,8,5,8,1305,8,8,10,8,12,8,1308,
9,8,1,8,1,8,1,9,1,9,1,9,3,9,1315,8,9,1,10,1,10,1,10,1,10,3,10,1321,8,10,
1,10,1,10,1,10,1,10,1,10,1,10,1,11,4,11,1330,8,11,11,11,12,11,1331,1,12,
1,12,1,12,1,12,3,12,1338,8,12,1,12,1,12,4,12,1342,8,12,11,12,12,12,1343,
1,12,1,12,1,12,1,12,1,12,3,12,1351,8,12,1,12,1,12,3,12,1355,8,12,1,13,1,
13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,1367,8,13,10,13,12,13,1370,
9,13,1,13,3,13,1373,8,13,1,14,1,14,1,14,1,14,1,14,3,14,1380,8,14,1,14,1,
14,1,14,1,14,1,14,1,15,1,15,1,15,3,15,1390,8,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,15,5,15,1401,8,15,10,15,12,15,1404,9,15,1,15,1,15,3,15,
1408,8,15,1,15,1,15,3,15,1412,8,15,1,16,1,16,3,16,1416,8,16,1,16,1,16,1,
16,1,16,3,16,1422,8,16,3,16,1424,8,16,1,17,1,17,1,17,1,17,3,17,1430,8,17,
1,17,1,17,1,17,1,17,3,17,1436,8,17,3,17,1438,8,17,1,17,1,17,3,17,1442,8,
17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1453,8,18,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1480,8,19,1,20,1,20,3,20,
1484,8,20,1,20,1,20,3,20,1488,8,20,1,20,1,20,1,20,1,20,3,20,1494,8,20,3,
20,1496,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1506,8,21,1,21,
3,21,1509,8,21,1,21,3,21,1512,8,21,1,21,3,21,1515,8,21,1,21,5,21,1518,8,
21,10,21,12,21,1521,9,21,1,21,1,21,1,21,3,21,1526,8,21,1,21,1,21,1,21,1,
21,1,21,1,21,1,21,3,21,1535,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
3,21,1545,8,21,1,21,1,21,3,21,1549,8,21,1,21,3,21,1552,8,21,1,21,3,21,1555,
8,21,1,21,5,21,1558,8,21,10,21,12,21,1561,9,21,3,21,1563,8,21,1,22,1,22,
1,23,1,23,1,23,1,23,1,23,1,23,5,23,1573,8,23,10,23,12,23,1576,9,23,1,23,
1,23,1,24,1,24,1,24,1,24,1,24,3,24,1585,8,24,1,24,1,24,1,25,1,25,1,25,1,
25,1,26,1,26,1,26,1,26,5,26,1597,8,26,10,26,12,26,1600,9,26,1,27,1,27,1,
27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,4,27,1612,8,27,11,27,12,27,1613,1,
27,1,27,3,27,1618,8,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1626,8,28,1,28,
1,28,1,28,1,28,1,28,1,28,3,28,1634,8,28,1,28,3,28,1637,8,28,1,28,3,28,1640,
8,28,1,28,3,28,1643,8,28,1,28,1,28,1,28,3,28,1648,8,28,1,28,3,28,1651,8,
28,1,29,1,29,3,29,1655,8,29,1,29,1,29,1,29,1,29,3,29,1661,8,29,1,29,1,29,
1,29,1,29,1,29,3,29,1668,8,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,1676,8,
29,1,30,1,30,3,30,1680,8,30,1,30,1,30,1,31,1,31,3,31,1686,8,31,1,32,1,32,
1,32,1,32,1,32,3,32,1693,8,32,1,32,1,32,1,32,1,32,1,32,5,32,1700,8,32,10,
32,12,32,1703,9,32,1,32,1,32,3,32,1707,8,32,1,32,1,32,1,32,3,32,1712,8,32,
1,33,1,33,1,33,1,33,1,34,1,34,1,34,3,34,1721,8,34,1,34,1,34,1,35,1,35,1,
35,1,35,1,36,1,36,1,36,1,36,3,36,1733,8,36,1,36,1,36,3,36,1737,8,36,1,36,
3,36,1740,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
37,1,37,3,37,1755,8,37,3,37,1757,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
1,37,3,37,1767,8,37,3,37,1769,8,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1777,
8,37,1,38,1,38,1,38,1,38,3,38,1783,8,38,3,38,1785,8,38,1,38,1,38,1,38,1,
38,1,38,3,38,1792,8,38,3,38,1794,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
3,38,1803,8,38,1,38,1,38,1,38,1,38,3,38,1809,8,38,3,38,1811,8,38,1,38,1,
38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1821,8,38,1,38,1,38,1,38,3,38,1826,
8,38,3,38,1828,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1839,
8,38,3,38,1841,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
38,3,38,1854,8,38,3,38,1856,8,38,1,38,1,38,1,38,3,38,1861,8,38,3,38,1863,
8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1873,8,38,3,38,1875,8,
38,1,38,1,38,3,38,1879,8,38,1,38,1,38,1,38,1,38,3,38,1885,8,38,1,39,1,39,
1,39,5,39,1890,8,39,10,39,12,39,1893,9,39,1,40,1,40,1,40,1,40,1,40,1,40,
1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1908,8,40,1,40,1,40,1,40,1,40,1,
40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1924,8,40,1,40,1,40,
1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1937,8,40,3,40,1939,8,
40,1,41,1,41,1,41,5,41,1944,8,41,10,41,12,41,1947,9,41,1,42,1,42,1,42,1,
42,1,42,1,42,1,42,1,42,1,42,3,42,1958,8,42,1,43,1,43,1,43,5,43,1963,8,43,
10,43,12,43,1966,9,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
44,1,44,1,44,3,44,1995,8,44,1,44,1,44,1,44,3,44,2000,8,44,1,45,1,45,1,45,
5,45,2005,8,45,10,45,12,45,2008,9,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
1,46,1,46,1,46,3,46,2020,8,46,1,46,1,46,1,46,3,46,2025,8,46,1,47,1,47,1,
47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,
2043,8,47,1,47,1,47,3,47,2047,8,47,1,47,1,47,1,47,1,47,1,48,1,48,1,49,1,
49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,2063,8,49,1,50,1,50,3,50,2067,8,50,
1,51,1,51,1,52,1,52,1,52,1,52,3,52,2075,8,52,1,52,3,52,2078,8,52,1,53,1,
53,1,53,3,53,2083,8,53,1,54,1,54,3,54,2087,8,54,1,54,1,54,1,54,3,54,2092,
8,54,1,55,1,55,1,55,3,55,2097,8,55,1,56,1,56,1,56,1,56,5,56,2103,8,56,10,
56,12,56,2106,9,56,1,56,3,56,2109,8,56,3,56,2111,8,56,1,57,1,57,1,57,1,57,
1,57,3,57,2118,8,57,1,57,1,57,1,57,3,57,2123,8,57,1,57,1,57,1,57,3,57,2128,
8,57,1,57,1,57,1,57,3,57,2133,8,57,1,57,1,57,1,57,3,57,2138,8,57,1,58,1,
58,1,58,1,58,3,58,2144,8,58,1,58,3,58,2147,8,58,1,59,1,59,1,59,1,59,3,59,
2153,8,59,1,59,1,59,1,59,3,59,2158,8,59,3,59,2160,8,59,1,59,1,59,1,59,1,
59,1,59,3,59,2167,8,59,3,59,2169,8,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,
2177,8,59,1,59,1,59,1,59,1,59,3,59,2183,8,59,3,59,2185,8,59,1,59,1,59,1,
59,1,59,1,59,1,59,1,59,1,59,3,59,2195,8,59,1,59,1,59,1,59,3,59,2200,8,59,
3,59,2202,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2212,8,59,3,
59,2214,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2226,
8,59,1,59,1,59,1,59,3,59,2231,8,59,3,59,2233,8,59,1,59,1,59,1,59,1,59,1,
59,1,59,1,59,1,59,3,59,2243,8,59,3,59,2245,8,59,1,59,1,59,3,59,2249,8,59,
1,59,1,59,3,59,2253,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
60,1,60,1,60,1,60,1,60,3,60,2269,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
3,60,2278,8,60,3,60,2280,8,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,
61,1,61,1,61,1,61,3,61,2294,8,61,1,62,1,62,3,62,2298,8,62,1,63,1,63,1,63,
1,63,1,63,1,63,1,63,1,63,1,63,1,63,5,63,2310,8,63,10,63,12,63,2313,9,63,
1,63,1,63,1,63,1,63,1,63,1,63,5,63,2321,8,63,10,63,12,63,2324,9,63,1,63,
1,63,3,63,2328,8,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,3,65,2337,8,65,1,
65,3,65,2340,8,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,2351,
8,66,10,66,12,66,2354,9,66,1,66,1,66,3,66,2358,8,66,1,67,1,67,1,67,1,67,
1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,2400,8,67,1,68,1,68,1,68,1,68,1,
68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,2444,8,68,1,69,1,69,1,69,
1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2471,8,69,1,70,1,70,1,70,1,70,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,2529,8,71,1,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
1,72,1,72,1,72,3,72,2624,8,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,
75,1,75,1,75,3,75,2637,8,75,1,75,1,75,1,75,1,75,4,75,2643,8,75,11,75,12,
75,2644,1,75,1,75,4,75,2649,8,75,11,75,12,75,2650,1,75,1,75,1,75,1,75,1,
75,1,75,1,75,1,75,1,75,1,75,3,75,2663,8,75,1,76,1,76,1,77,1,77,1,77,1,77,
1,77,1,77,1,77,3,77,2674,8,77,1,78,1,78,1,79,1,79,3,79,2680,8,79,1,79,1,
79,3,79,2684,8,79,1,79,1,79,1,79,1,79,1,79,3,79,2691,8,79,1,79,1,79,1,79,
3,79,2696,8,79,1,79,1,79,1,79,3,79,2701,8,79,1,79,3,79,2704,8,79,1,79,1,
79,1,79,1,79,1,79,1,79,3,79,2712,8,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,
2720,8,79,1,79,3,79,2723,8,79,1,79,1,79,3,79,2727,8,79,1,79,1,79,1,79,1,
79,1,79,1,79,3,79,2735,8,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,2743,8,79,
1,79,1,79,3,79,2747,8,79,1,79,1,79,1,79,1,79,1,79,5,79,2754,8,79,10,79,12,
79,2757,9,79,3,79,2759,8,79,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,
3,82,2770,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2780,8,82,1,
82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2790,8,82,1,82,1,82,1,82,1,82,
1,82,3,82,2797,8,82,1,82,1,82,1,82,3,82,2802,8,82,1,82,3,82,2805,8,82,1,
82,3,82,2808,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
1,82,1,82,3,82,2823,8,82,1,82,1,82,1,82,1,82,1,82,5,82,2830,8,82,10,82,12,
82,2833,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,
2846,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2856,8,82,1,82,1,
82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
1,82,1,82,1,82,1,82,1,82,1,82,3,82,2880,8,82,1,82,1,82,1,82,1,82,1,82,3,
82,2887,8,82,1,83,1,83,1,84,1,84,1,84,5,84,2894,8,84,10,84,12,84,2897,9,
84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,2909,8,85,1,86,
1,86,1,86,1,86,3,86,2915,8,86,1,86,1,86,1,86,3,86,2920,8,86,1,86,1,86,1,
86,1,86,3,86,2926,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
1,86,3,86,2939,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
86,3,86,2952,8,86,1,86,1,86,1,86,1,86,1,86,3,86,2959,8,86,1,86,3,86,2962,
8,86,1,86,1,86,1,86,1,86,3,86,2968,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
86,1,86,3,86,2978,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
1,86,5,86,2991,8,86,10,86,12,86,2994,9,86,1,86,1,86,1,86,1,86,1,86,1,86,
1,86,1,86,1,86,3,86,3005,8,86,1,86,1,86,1,86,1,86,1,86,3,86,3012,8,86,1,
87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,5,89,3025,8,89,10,89,
12,89,3028,9,89,1,90,1,90,1,90,5,90,3033,8,90,10,90,12,90,3036,9,90,1,91,
1,91,1,91,5,91,3041,8,91,10,91,12,91,3044,9,91,1,92,1,92,1,92,1,92,3,92,
3050,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,3061,8,92,1,
92,1,92,1,92,1,92,1,92,3,92,3068,8,92,1,92,3,92,3071,8,92,1,92,1,92,1,92,
1,92,3,92,3077,8,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,3085,8,92,1,92,1,
92,1,92,1,92,3,92,3091,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,3,92,3103,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
92,1,92,1,92,3,92,3118,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,3,92,3130,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,
92,3142,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,3,92,3157,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,
92,3169,8,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,3177,8,92,1,92,1,92,1,92,
1,92,3,92,3183,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,
92,3195,8,92,1,92,1,92,1,92,3,92,3200,8,92,1,93,1,93,1,93,1,93,3,93,3206,
8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,3217,8,93,1,93,1,
93,1,93,5,93,3222,8,93,10,93,12,93,3225,9,93,1,93,3,93,3228,8,93,3,93,3230,
8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
1,94,5,94,3261,8,94,10,94,12,94,3264,9,94,1,94,1,94,1,94,1,94,1,94,1,94,
1,94,1,94,5,94,3274,8,94,10,94,12,94,3277,9,94,1,94,1,94,1,94,1,94,1,94,
1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
94,1,94,1,94,1,94,1,94,3,94,3303,8,94,1,95,1,95,1,95,3,95,3308,8,95,1,95,
1,95,1,95,3,95,3313,8,95,1,95,1,95,1,96,1,96,1,96,5,96,3320,8,96,10,96,12,
96,3323,9,96,1,97,1,97,1,97,1,97,3,97,3329,8,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,3,97,3341,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,3,97,3352,8,97,1,97,1,97,1,97,1,97,3,97,3358,8,97,1,98,1,98,
1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
98,1,98,3,98,3378,8,98,1,98,1,98,3,98,3382,8,98,1,98,3,98,3385,8,98,1,98,
1,98,3,98,3389,8,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,3,100,3398,8,100,
1,100,1,100,3,100,3402,8,100,1,100,1,100,1,100,3,100,3407,8,100,1,100,1,
100,3,100,3411,8,100,1,100,1,100,3,100,3415,8,100,1,100,1,100,3,100,3419,
8,100,1,100,1,100,1,100,3,100,3424,8,100,1,100,1,100,3,100,3428,8,100,1,
100,1,100,3,100,3432,8,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,3440,
8,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,3448,8,100,1,100,1,100,1,
100,1,100,1,100,1,100,3,100,3456,8,100,1,101,1,101,1,101,3,101,3461,8,101,
1,101,1,101,1,101,3,101,3466,8,101,1,101,3,101,3469,8,101,1,101,1,101,1,
101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,3484,
8,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,3495,8,
101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,3504,8,101,1,101,1,101,
1,101,1,101,1,101,3,101,3511,8,101,1,101,1,101,1,101,3,101,3516,8,101,3,
101,3518,8,101,1,102,1,102,1,102,3,102,3523,8,102,1,102,1,102,1,102,3,102,
3528,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,3538,8,
102,1,102,1,102,1,102,3,102,3543,8,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,3,102,3552,8,102,1,102,1,102,1,102,3,102,3557,8,102,1,102,1,102,1,
102,1,102,1,102,1,102,1,102,3,102,3566,8,102,1,102,1,102,1,102,3,102,3571,
8,102,1,102,1,102,1,102,1,102,1,102,3,102,3578,8,102,1,103,1,103,1,103,1,
103,3,103,3584,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
3,103,3595,8,103,1,103,1,103,1,103,1,103,1,103,3,103,3602,8,103,1,103,1,
103,1,103,3,103,3607,8,103,1,103,1,103,1,103,1,103,3,103,3613,8,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,5,103,3625,8,103,10,
103,12,103,3628,9,103,1,103,1,103,1,103,3,103,3633,8,103,1,103,1,103,1,103,
1,103,3,103,3639,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,1,103,3,103,3651,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,3,103,3666,8,103,1,103,1,103,1,103,1,103,1,
103,1,103,1,103,1,103,1,103,1,103,3,103,3678,8,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,3,103,3690,8,103,1,103,1,103,1,103,1,
103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,3705,8,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,3717,8,
103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,3725,8,103,1,103,1,103,1,103,
1,103,3,103,3731,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,1,103,3,103,3743,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,
3752,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,3761,8,103,1,
103,1,103,1,103,3,103,3766,8,103,1,104,1,104,1,104,1,104,1,105,1,105,1,105,
1,105,1,106,1,106,1,106,1,106,1,106,1,106,5,106,3782,8,106,10,106,12,106,
3785,9,106,1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,
108,1,108,3,108,3799,8,108,1,108,1,108,1,108,3,108,3804,8,108,1,108,3,108,
3807,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,3815,8,108,1,108,1,
108,1,108,3,108,3820,8,108,3,108,3822,8,108,1,108,1,108,1,108,1,108,1,108,
5,108,3829,8,108,10,108,12,108,3832,9,108,3,108,3834,8,108,3,108,3836,8,
108,1,109,1,109,1,109,3,109,3841,8,109,1,109,1,109,1,109,1,109,1,109,1,109,
1,109,1,109,3,109,3851,8,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,
109,3860,8,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,3869,8,109,
1,109,1,109,1,109,1,109,1,109,1,109,3,109,3877,8,109,1,109,1,109,1,109,3,
109,3882,8,109,1,110,1,110,1,110,1,110,1,110,3,110,3889,8,110,1,110,1,110,
1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,3902,8,110,1,
110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,3914,8,110,
1,110,1,110,1,110,1,110,3,110,3920,8,110,1,111,1,111,1,111,3,111,3925,8,
111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3935,8,111,1,111,
1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3945,8,111,1,111,1,111,1,
111,1,111,1,111,3,111,3952,8,111,1,111,1,111,1,111,3,111,3957,8,111,1,111,
3,111,3960,8,111,1,111,3,111,3963,8,111,1,111,1,111,1,111,3,111,3968,8,111,
1,111,1,111,1,111,1,111,1,111,1,111,3,111,3976,8,111,1,111,1,111,1,111,1,
111,1,111,1,111,3,111,3984,8,111,1,111,1,111,1,111,1,111,1,111,5,111,3991,
8,111,10,111,12,111,3994,9,111,1,111,1,111,1,111,3,111,3999,8,111,1,111,
1,111,1,111,1,111,1,111,3,111,4006,8,111,1,112,1,112,1,113,1,113,1,113,3,
113,4013,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,4023,
8,113,1,113,1,113,3,113,4027,8,113,1,113,1,113,3,113,4031,8,113,1,113,3,
113,4034,8,113,1,113,3,113,4037,8,113,1,113,1,113,1,113,3,113,4042,8,113,
1,113,1,113,1,113,3,113,4047,8,113,1,113,1,113,3,113,4051,8,113,1,113,1,
113,1,113,3,113,4056,8,113,1,113,1,113,1,113,1,113,3,113,4062,8,113,1,114,
1,114,3,114,4066,8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,4075,
8,114,1,114,1,114,1,114,3,114,4080,8,114,1,114,1,114,1,114,3,114,4085,8,
114,1,114,1,114,1,114,3,114,4090,8,114,1,114,1,114,1,114,1,114,1,114,1,114,
1,114,3,114,4099,8,114,3,114,4101,8,114,1,114,1,114,1,114,3,114,4106,8,114,
1,114,1,114,1,114,3,114,4111,8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,
114,3,114,4120,8,114,3,114,4122,8,114,1,114,1,114,1,114,3,114,4127,8,114,
1,114,1,114,1,114,3,114,4132,8,114,1,114,1,114,1,114,1,114,1,114,1,114,3,
114,4140,8,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,4148,8,114,1,114,
1,114,1,114,1,114,1,114,1,114,3,114,4156,8,114,1,114,1,114,1,114,3,114,4161,
8,114,1,114,1,114,1,114,3,114,4166,8,114,1,114,1,114,3,114,4170,8,114,1,
114,1,114,3,114,4174,8,114,1,114,1,114,1,114,1,114,1,114,5,114,4181,8,114,
10,114,12,114,4184,9,114,1,114,1,114,3,114,4188,8,114,1,114,1,114,1,114,
1,114,1,114,1,114,3,114,4196,8,114,1,114,1,114,1,114,1,114,3,114,4202,8,
114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,4212,8,115,1,116,
1,116,3,116,4216,8,116,1,116,1,116,3,116,4220,8,116,1,116,1,116,1,116,1,
116,1,116,3,116,4227,8,116,1,116,3,116,4230,8,116,1,116,1,116,1,116,3,116,
4235,8,116,1,116,1,116,1,116,3,116,4240,8,116,1,116,1,116,1,116,1,116,1,
116,1,116,1,116,3,116,4249,8,116,3,116,4251,8,116,1,116,1,116,1,116,3,116,
4256,8,116,1,116,1,116,1,116,3,116,4261,8,116,1,116,1,116,1,116,1,116,1,
116,1,116,1,116,3,116,4270,8,116,3,116,4272,8,116,1,116,1,116,1,116,3,116,
4277,8,116,1,116,1,116,1,116,3,116,4282,8,116,1,116,1,116,1,116,1,116,1,
116,1,116,3,116,4290,8,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,4298,
8,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,4306,8,116,1,116,1,116,1,
116,1,116,1,116,3,116,4313,8,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,
4321,8,116,1,116,1,116,3,116,4325,8,116,1,116,1,116,1,116,1,116,1,116,5,
116,4332,8,116,10,116,12,116,4335,9,116,1,116,1,116,3,116,4339,8,116,1,116,
1,116,1,116,1,116,1,116,1,116,3,116,4347,8,116,1,116,1,116,1,116,1,116,3,
116,4353,8,116,1,117,1,117,1,118,1,118,3,118,4359,8,118,1,118,1,118,3,118,
4363,8,118,1,118,1,118,1,118,1,118,1,118,3,118,4370,8,118,1,118,3,118,4373,
8,118,1,118,1,118,1,118,3,118,4378,8,118,1,118,1,118,1,118,3,118,4383,8,
118,1,118,1,118,1,118,3,118,4388,8,118,1,118,1,118,1,118,3,118,4393,8,118,
1,118,1,118,1,118,3,118,4398,8,118,1,118,1,118,1,118,3,118,4403,8,118,1,
118,1,118,1,118,3,118,4408,8,118,1,118,1,118,1,118,3,118,4413,8,118,1,118,
1,118,1,118,3,118,4418,8,118,1,118,1,118,1,118,3,118,4423,8,118,1,118,1,
118,1,118,3,118,4428,8,118,1,118,1,118,1,118,3,118,4433,8,118,1,118,1,118,
1,118,3,118,4438,8,118,1,118,1,118,3,118,4442,8,118,1,118,1,118,3,118,4446,
8,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,4454,8,118,1,118,1,118,1,
118,1,118,1,118,1,118,3,118,4462,8,118,1,118,1,118,1,118,1,118,3,118,4468,
8,118,1,119,1,119,3,119,4472,8,119,1,119,1,119,3,119,4476,8,119,1,119,1,
119,1,119,1,119,1,119,3,119,4483,8,119,1,119,1,119,1,119,3,119,4488,8,119,
1,119,3,119,4491,8,119,1,119,1,119,3,119,4495,8,119,1,119,1,119,3,119,4499,
8,119,1,119,1,119,1,119,1,119,1,119,5,119,4506,8,119,10,119,12,119,4509,
9,119,1,119,1,119,3,119,4513,8,119,1,119,1,119,1,119,1,119,1,119,1,119,3,
119,4521,8,119,1,119,1,119,1,119,1,119,3,119,4527,8,119,1,120,1,120,1,121,
1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,5,121,4541,8,121,10,
121,12,121,4544,9,121,3,121,4546,8,121,1,122,1,122,1,122,1,122,3,122,4552,
8,122,1,122,1,122,1,122,5,122,4557,8,122,10,122,12,122,4560,9,122,1,122,
1,122,1,122,1,122,3,122,4566,8,122,1,122,1,122,1,122,1,122,3,122,4572,8,
122,1,122,1,122,1,122,1,122,3,122,4578,8,122,1,122,1,122,1,122,1,122,1,122,
1,122,1,122,1,122,1,122,3,122,4589,8,122,1,122,1,122,1,122,3,122,4594,8,
122,3,122,4596,8,122,1,123,1,123,1,123,1,123,3,123,4602,8,123,1,123,1,123,
1,123,5,123,4607,8,123,10,123,12,123,4610,9,123,1,123,1,123,1,123,1,123,
3,123,4616,8,123,1,123,1,123,1,123,1,123,3,123,4622,8,123,1,123,1,123,1,
123,1,123,3,123,4628,8,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
1,123,3,123,4639,8,123,1,123,1,123,1,123,3,123,4644,8,123,3,123,4646,8,123,
1,124,1,124,1,124,3,124,4651,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,
124,5,124,4660,8,124,10,124,12,124,4663,9,124,1,124,1,124,1,124,3,124,4668,
8,124,1,124,1,124,1,124,3,124,4673,8,124,1,124,1,124,1,124,1,124,1,124,1,
124,1,124,5,124,4682,8,124,10,124,12,124,4685,9,124,1,124,1,124,1,124,3,
124,4690,8,124,1,124,1,124,1,124,3,124,4695,8,124,1,124,1,124,1,124,1,124,
1,124,1,124,1,124,5,124,4704,8,124,10,124,12,124,4707,9,124,3,124,4709,8,
124,1,124,3,124,4712,8,124,1,124,1,124,1,124,3,124,4717,8,124,1,124,1,124,
1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,4730,8,124,1,
124,1,124,1,124,1,124,3,124,4736,8,124,1,125,1,125,3,125,4740,8,125,1,125,
1,125,3,125,4744,8,125,1,125,1,125,1,125,3,125,4749,8,125,1,125,3,125,4752,
8,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,4760,8,125,1,125,1,125,1,
125,1,125,1,125,1,125,3,125,4768,8,125,1,125,3,125,4771,8,125,1,125,1,125,
3,125,4775,8,125,1,125,1,125,3,125,4779,8,125,1,125,1,125,1,125,1,125,1,
125,3,125,4786,8,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,4794,8,125,
1,125,1,125,3,125,4798,8,125,1,125,1,125,1,125,1,125,3,125,4804,8,125,1,
126,1,126,1,126,3,126,4809,8,126,1,126,1,126,1,126,3,126,4814,8,126,1,126,
3,126,4817,8,126,1,126,1,126,1,126,3,126,4822,8,126,1,126,1,126,1,126,1,
126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,4835,8,126,1,126,1,126,
1,126,1,126,3,126,4841,8,126,1,127,1,127,1,127,3,127,4846,8,127,1,127,1,
127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,4856,8,127,1,127,1,127,1,127,
1,127,1,127,1,127,1,127,1,127,3,127,4866,8,127,1,127,1,127,1,127,1,127,3,
127,4872,8,127,1,127,1,127,1,127,3,127,4877,8,127,1,127,1,127,1,127,1,127,
1,127,1,127,3,127,4885,8,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,4893,
8,127,1,127,1,127,1,127,3,127,4898,8,127,1,127,1,127,1,127,1,127,1,127,1,
127,3,127,4906,8,127,1,127,1,127,1,127,3,127,4911,8,127,1,127,1,127,1,127,
3,127,4916,8,127,1,127,1,127,1,127,3,127,4921,8,127,1,127,3,127,4924,8,127,
1,127,3,127,4927,8,127,1,127,1,127,1,127,3,127,4932,8,127,1,127,1,127,1,
127,1,127,1,127,1,127,3,127,4940,8,127,1,127,1,127,1,127,1,127,1,127,1,127,
3,127,4948,8,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,4958,
8,127,1,127,1,127,1,127,3,127,4963,8,127,1,127,1,127,1,127,1,127,1,127,1,
127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,4977,8,127,1,127,1,127,1,127,
1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,4989,8,127,1,127,1,127,1,
127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,
127,1,127,1,127,1,127,3,127,5009,8,127,1,127,1,127,1,127,1,127,1,127,1,127,
1,127,3,127,5018,8,127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,
128,1,128,3,128,5030,8,128,1,128,1,128,3,128,5034,8,128,1,128,1,128,1,128,
1,128,1,128,1,128,3,128,5042,8,128,1,129,1,129,3,129,5046,8,129,1,129,3,
129,5049,8,129,1,129,1,129,1,129,5,129,5054,8,129,10,129,12,129,5057,9,129,
1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,5,129,
5070,8,129,10,129,12,129,5073,9,129,1,129,1,129,1,129,1,129,1,129,5,129,
5080,8,129,10,129,12,129,5083,9,129,3,129,5085,8,129,1,129,1,129,1,129,1,
129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,5101,
8,129,1,129,3,129,5104,8,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,
129,1,129,1,129,1,129,5,129,5117,8,129,10,129,12,129,5120,9,129,1,129,1,
129,1,129,1,129,5,129,5126,8,129,10,129,12,129,5129,9,129,1,129,1,129,3,
129,5133,8,129,1,129,3,129,5136,8,129,1,129,3,129,5139,8,129,1,130,3,130,
5142,8,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,
130,5154,8,130,1,130,1,130,1,130,1,130,1,130,3,130,5161,8,130,1,130,1,130,
3,130,5165,8,130,1,130,3,130,5168,8,130,1,130,1,130,1,130,1,130,1,130,3,
130,5175,8,130,1,131,1,131,3,131,5179,8,131,1,131,1,131,3,131,5183,8,131,
1,131,5,131,5186,8,131,10,131,12,131,5189,9,131,1,131,1,131,1,131,1,131,
1,131,1,131,1,131,3,131,5198,8,131,1,131,1,131,3,131,5202,8,131,1,132,3,
132,5205,8,132,1,132,1,132,1,133,3,133,5210,8,133,1,133,1,133,1,134,1,134,
1,134,1,135,1,135,3,135,5219,8,135,1,135,1,135,1,135,1,135,3,135,5225,8,
135,1,135,1,135,3,135,5229,8,135,1,136,1,136,1,136,1,136,1,137,1,137,1,137,
1,137,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,139,3,139,5248,8,
139,1,140,5,140,5251,8,140,10,140,12,140,5254,9,140,1,140,1,140,3,140,5258,
8,140,1,140,1,140,3,140,5262,8,140,1,140,1,140,3,140,5266,8,140,3,140,5268,
8,140,3,140,5270,8,140,1,141,1,141,3,141,5274,8,141,1,141,1,141,1,141,1,
141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,3,
141,5291,8,141,1,141,3,141,5294,8,141,1,142,1,142,1,142,1,142,1,142,1,142,
1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,5310,8,142,1,142,1,
142,3,142,5314,8,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
3,142,5325,8,142,1,142,3,142,5328,8,142,1,142,3,142,5331,8,142,1,142,1,142,
1,142,3,142,5336,8,142,1,143,1,143,1,143,1,143,1,143,1,143,1,143,5,143,5345,
8,143,10,143,12,143,5348,9,143,3,143,5350,8,143,1,143,1,143,1,143,1,143,
1,143,1,143,1,143,5,143,5359,8,143,10,143,12,143,5362,9,143,3,143,5364,8,
143,3,143,5366,8,143,1,144,1,144,1,144,1,144,3,144,5372,8,144,1,144,1,144,
1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,3,145,5385,8,145,1,
145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,
145,1,145,1,145,1,145,1,145,3,145,5404,8,145,1,145,3,145,5407,8,145,1,145,
1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,
1,145,1,145,1,145,1,145,5,145,5426,8,145,10,145,12,145,5429,9,145,1,145,
1,145,1,145,1,145,1,145,1,145,1,145,5,145,5438,8,145,10,145,12,145,5441,
9,145,3,145,5443,8,145,1,146,1,146,1,146,5,146,5448,8,146,10,146,12,146,
5451,9,146,1,147,3,147,5454,8,147,1,147,1,147,1,147,1,148,1,148,1,148,1,
148,1,148,1,148,1,148,1,148,1,148,3,148,5468,8,148,1,148,1,148,1,148,1,148,
1,148,3,148,5475,8,148,1,148,1,148,3,148,5479,8,148,1,148,3,148,5482,8,148,
1,148,1,148,1,148,1,148,3,148,5488,8,148,1,149,3,149,5491,8,149,1,149,1,
149,1,149,1,150,1,150,1,150,1,150,1,151,1,151,1,151,3,151,5503,8,151,1,151,
1,151,1,151,1,152,1,152,1,152,3,152,5511,8,152,1,152,1,152,1,152,1,152,1,
152,1,152,3,152,5519,8,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
3,152,5529,8,152,1,152,1,152,1,152,1,152,1,152,3,152,5536,8,152,1,152,3,
152,5539,8,152,1,152,3,152,5542,8,152,1,152,3,152,5545,8,152,1,152,3,152,
5548,8,152,1,152,3,152,5551,8,152,1,152,3,152,5554,8,152,1,152,1,152,1,152,
3,152,5559,8,152,1,152,1,152,1,152,3,152,5564,8,152,1,152,3,152,5567,8,152,
1,152,3,152,5570,8,152,1,152,3,152,5573,8,152,1,152,3,152,5576,8,152,1,152,
3,152,5579,8,152,1,152,3,152,5582,8,152,1,152,1,152,1,152,3,152,5587,8,152,
1,152,1,152,1,152,1,152,1,152,1,152,3,152,5595,8,152,1,152,1,152,1,152,1,
152,1,152,1,152,3,152,5603,8,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
1,152,3,152,5613,8,152,1,152,1,152,1,152,1,152,1,152,3,152,5620,8,152,1,
153,1,153,1,153,3,153,5625,8,153,1,153,1,153,1,153,1,154,1,154,1,154,3,154,
5633,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,5643,8,
154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,5652,8,154,1,154,1,154,
1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
1,154,1,154,1,154,1,154,1,154,3,154,5673,8,154,1,154,1,154,1,154,1,154,1,
154,1,154,3,154,5681,8,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,5689,
8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
1,154,3,154,5703,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,
154,1,154,3,154,5715,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,5735,8,
154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,
154,3,154,5749,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
1,154,1,154,1,154,3,154,5763,8,154,1,154,3,154,5766,8,154,1,154,1,154,1,
154,1,154,1,154,3,154,5773,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
1,154,1,154,1,154,3,154,5785,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,
154,1,154,1,154,1,154,1,154,3,154,5798,8,154,1,155,1,155,1,156,1,156,1,156,
3,156,5805,8,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,
157,1,157,1,157,1,157,1,157,1,157,5,157,5822,8,157,10,157,12,157,5825,9,
157,1,157,3,157,5828,8,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
1,157,1,157,1,157,1,157,1,157,3,157,5843,8,157,1,157,1,157,1,157,1,157,3,
157,5849,8,157,1,157,1,157,1,157,1,157,1,157,3,157,5856,8,157,1,157,1,157,
1,157,1,157,3,157,5862,8,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,
158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,
158,1,158,1,158,1,158,1,158,1,158,1,158,3,158,5890,8,158,1,158,1,158,1,158,
1,158,1,158,1,158,3,158,5898,8,158,1,159,1,159,1,159,1,159,1,159,1,159,1,
159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,5,159,5915,8,159,10,
159,12,159,5918,9,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,5,
159,5928,8,159,10,159,12,159,5931,9,159,1,159,1,159,1,159,1,159,3,159,5937,
8,159,1,160,3,160,5940,8,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,
160,3,160,5950,8,160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,5958,8,160,
1,160,3,160,5961,8,160,1,160,3,160,5964,8,160,1,160,1,160,1,160,1,160,1,
160,1,160,1,160,1,160,1,160,3,160,5975,8,160,1,161,3,161,5978,8,161,1,161,
1,161,1,161,3,161,5983,8,161,3,161,5985,8,161,1,161,3,161,5988,8,161,1,161,
1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
1,161,1,161,1,161,1,161,1,161,1,161,5,161,6009,8,161,10,161,12,161,6012,
9,161,1,161,1,161,1,161,1,161,1,161,5,161,6019,8,161,10,161,12,161,6022,
9,161,3,161,6024,8,161,1,162,1,162,3,162,6028,8,162,1,162,3,162,6031,8,162,
1,162,3,162,6034,8,162,1,162,1,162,1,162,1,162,3,162,6040,8,162,1,162,1,
162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,3,
162,6055,8,162,1,162,1,162,1,162,1,162,1,162,3,162,6062,8,162,1,163,1,163,
1,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,5,164,6076,8,
164,10,164,12,164,6079,9,164,1,165,1,165,1,165,1,165,1,165,5,165,6086,8,
165,10,165,12,165,6089,9,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,
166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,
166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,
166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,
166,3,166,6135,8,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
1,167,1,167,1,167,3,167,6149,8,167,1,167,1,167,1,167,3,167,6154,8,167,1,
167,1,167,1,167,1,167,1,167,1,167,3,167,6162,8,167,1,167,1,167,1,167,1,167,
1,167,1,167,3,167,6170,8,167,1,167,1,167,1,167,3,167,6175,8,167,1,167,3,
167,6178,8,167,1,168,1,168,3,168,6182,8,168,1,168,1,168,3,168,6186,8,168,
1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
1,168,1,168,1,168,1,168,1,168,1,169,1,169,1,169,3,169,6208,8,169,1,170,1,
170,1,171,1,171,3,171,6214,8,171,1,171,1,171,1,171,3,171,6219,8,171,1,171,
1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,6231,8,171,1,
171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,6244,
8,171,1,171,1,171,1,171,1,171,3,171,6250,8,171,1,171,1,171,3,171,6254,8,
171,1,171,1,171,1,171,3,171,6259,8,171,1,171,1,171,1,171,1,171,1,171,1,171,
1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,6274,8,171,1,171,1,171,1,
171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,6287,8,171,1,171,
1,171,1,171,1,171,3,171,6293,8,171,1,171,1,171,1,171,1,171,1,171,1,171,1,
171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,
171,1,171,1,171,1,171,1,171,3,171,6318,8,171,1,171,1,171,1,171,1,171,3,171,
6324,8,171,3,171,6326,8,171,1,172,1,172,3,172,6330,8,172,1,172,1,172,3,172,
6334,8,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,
172,1,172,1,172,1,172,3,172,6350,8,172,1,172,1,172,3,172,6354,8,172,1,172,
1,172,3,172,6358,8,172,1,172,1,172,1,172,1,172,1,172,1,172,3,172,6366,8,
172,1,172,3,172,6369,8,172,1,172,1,172,1,172,1,172,3,172,6375,8,172,1,173,
1,173,1,173,3,173,6380,8,173,1,173,1,173,3,173,6384,8,173,1,173,1,173,1,
173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,6395,8,173,3,173,6397,8,173,
1,174,1,174,3,174,6401,8,174,1,174,3,174,6404,8,174,1,174,1,174,3,174,6408,
8,174,1,174,1,174,3,174,6412,8,174,1,174,1,174,1,174,3,174,6417,8,174,1,
174,1,174,1,174,3,174,6422,8,174,1,174,3,174,6425,8,174,1,174,3,174,6428,
8,174,1,174,3,174,6431,8,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,
175,1,175,1,175,1,175,1,175,1,175,3,175,6446,8,175,1,175,1,175,3,175,6450,
8,175,1,176,1,176,1,177,1,177,1,177,1,177,1,178,1,178,1,179,1,179,1,179,
1,179,1,180,1,180,3,180,6466,8,180,1,180,1,180,1,180,1,180,1,180,1,180,1,
180,3,180,6475,8,180,1,180,1,180,1,180,1,180,1,180,1,180,1,181,1,181,3,181,
6485,8,181,1,181,1,181,1,181,3,181,6490,8,181,1,181,1,181,3,181,6494,8,181,
1,181,1,181,1,181,3,181,6499,8,181,1,181,1,181,1,181,3,181,6504,8,181,1,
181,3,181,6507,8,181,1,181,1,181,1,181,3,181,6512,8,181,1,181,3,181,6515,
8,181,1,181,3,181,6518,8,181,1,181,3,181,6521,8,181,1,181,3,181,6524,8,181,
1,181,3,181,6527,8,181,1,182,1,182,3,182,6531,8,182,1,182,3,182,6534,8,182,
1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,5,182,6546,8,
182,10,182,12,182,6549,9,182,3,182,6551,8,182,1,182,1,182,1,182,1,182,3,
182,6557,8,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
3,182,6569,8,182,3,182,6571,8,182,1,182,3,182,6574,8,182,1,182,3,182,6577,
8,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,5,182,6588,8,
182,10,182,12,182,6591,9,182,1,182,1,182,3,182,6595,8,182,1,182,1,182,1,
182,1,182,1,182,1,182,5,182,6603,8,182,10,182,12,182,6606,9,182,1,182,1,
182,3,182,6610,8,182,1,182,1,182,1,182,3,182,6615,8,182,1,182,3,182,6618,
8,182,1,182,1,182,1,182,3,182,6623,8,182,1,182,1,182,1,182,3,182,6628,8,
182,1,182,1,182,1,182,1,183,1,183,3,183,6635,8,183,1,183,1,183,1,183,3,183,
6640,8,183,1,183,1,183,1,183,1,183,1,183,3,183,6647,8,183,1,183,3,183,6650,
8,183,1,183,3,183,6653,8,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,6661,
8,183,1,183,1,183,1,183,3,183,6666,8,183,1,183,3,183,6669,8,183,1,183,1,
183,1,183,1,183,3,183,6675,8,183,1,183,3,183,6678,8,183,1,183,3,183,6681,
8,183,1,183,3,183,6684,8,183,1,183,3,183,6687,8,183,1,183,1,183,3,183,6691,
8,183,1,183,1,183,1,183,3,183,6696,8,183,1,183,1,183,1,183,1,183,1,183,3,
183,6703,8,183,1,183,3,183,6706,8,183,1,183,3,183,6709,8,183,1,183,1,183,
1,183,1,183,1,183,1,183,1,183,1,183,3,183,6719,8,183,1,183,3,183,6722,8,
183,1,183,3,183,6725,8,183,1,183,3,183,6728,8,183,1,183,1,183,3,183,6732,
8,183,1,183,1,183,1,183,3,183,6737,8,183,1,183,1,183,1,183,1,183,1,183,3,
183,6744,8,183,1,183,3,183,6747,8,183,1,183,3,183,6750,8,183,1,183,1,183,
1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,6762,8,183,1,183,3,
183,6765,8,183,1,183,3,183,6768,8,183,1,183,3,183,6771,8,183,1,183,3,183,
6774,8,183,3,183,6776,8,183,1,184,1,184,1,184,1,184,1,184,3,184,6783,8,184,
1,184,3,184,6786,8,184,1,185,1,185,1,185,5,185,6791,8,185,10,185,12,185,
6794,9,185,1,186,1,186,1,186,1,186,1,187,1,187,1,187,1,187,3,187,6804,8,
187,1,188,1,188,1,188,1,188,3,188,6810,8,188,1,188,1,188,1,188,1,188,1,188,
1,188,5,188,6818,8,188,10,188,12,188,6821,9,188,1,188,1,188,1,188,1,188,
1,188,5,188,6828,8,188,10,188,12,188,6831,9,188,3,188,6833,8,188,1,188,1,
188,1,188,1,188,1,188,5,188,6840,8,188,10,188,12,188,6843,9,188,3,188,6845,
8,188,1,188,1,188,1,188,1,188,1,188,5,188,6852,8,188,10,188,12,188,6855,
9,188,3,188,6857,8,188,1,188,1,188,1,188,1,188,1,188,5,188,6864,8,188,10,
188,12,188,6867,9,188,1,188,1,188,1,188,3,188,6872,8,188,1,188,1,188,1,188,
3,188,6877,8,188,1,188,1,188,1,188,1,188,3,188,6883,8,188,1,188,1,188,1,
188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,6895,8,188,1,189,1,189,
1,190,1,190,3,190,6901,8,190,1,190,1,190,1,190,3,190,6906,8,190,1,190,1,
190,1,190,1,190,3,190,6912,8,190,1,190,5,190,6915,8,190,10,190,12,190,6918,
9,190,1,190,3,190,6921,8,190,1,191,1,191,1,191,3,191,6926,8,191,1,192,1,
192,1,192,1,193,1,193,1,193,3,193,6934,8,193,1,194,1,194,1,194,1,194,1,194,
1,195,1,195,3,195,6943,8,195,1,196,1,196,3,196,6947,8,196,1,196,3,196,6950,
8,196,1,196,1,196,3,196,6954,8,196,1,196,1,196,1,196,1,196,1,196,5,196,6961,
8,196,10,196,12,196,6964,9,196,3,196,6966,8,196,1,196,1,196,1,196,1,196,
1,196,1,196,1,196,1,196,5,196,6976,8,196,10,196,12,196,6979,9,196,3,196,
6981,8,196,1,196,3,196,6984,8,196,1,196,3,196,6987,8,196,1,196,1,196,3,196,
6991,8,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,3,
196,7003,8,196,1,196,3,196,7006,8,196,1,196,1,196,1,196,1,196,1,196,1,196,
3,196,7014,8,196,1,196,1,196,1,196,1,196,3,196,7020,8,196,3,196,7022,8,196,
1,196,1,196,1,196,1,196,1,196,1,196,3,196,7030,8,196,1,196,1,196,1,196,1,
196,1,196,1,196,3,196,7038,8,196,1,196,1,196,1,196,3,196,7043,8,196,1,196,
3,196,7046,8,196,1,196,1,196,1,196,1,196,1,196,3,196,7053,8,196,1,196,3,
196,7056,8,196,1,196,1,196,1,196,1,196,1,196,1,196,5,196,7064,8,196,10,196,
12,196,7067,9,196,3,196,7069,8,196,1,196,1,196,1,196,1,196,1,196,1,196,1,
196,1,196,5,196,7079,8,196,10,196,12,196,7082,9,196,3,196,7084,8,196,1,196,
3,196,7087,8,196,1,196,3,196,7090,8,196,1,196,1,196,1,196,1,196,1,196,1,
196,1,196,1,196,1,196,1,196,3,196,7102,8,196,1,196,3,196,7105,8,196,1,196,
3,196,7108,8,196,1,196,3,196,7111,8,196,1,196,1,196,1,196,3,196,7116,8,196,
1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
1,197,1,197,1,197,1,197,1,197,3,197,7135,8,197,1,198,1,198,3,198,7139,8,
198,1,198,1,198,1,198,3,198,7144,8,198,1,198,1,198,1,198,1,198,1,198,1,198,
1,198,1,198,1,198,3,198,7155,8,198,1,198,1,198,1,198,1,198,1,198,1,198,3,
198,7163,8,198,1,199,1,199,1,199,1,199,1,200,1,200,1,200,1,200,1,201,1,201,
3,201,7175,8,201,1,201,3,201,7178,8,201,1,201,1,201,1,201,3,201,7183,8,201,
1,201,1,201,1,201,1,201,1,201,3,201,7190,8,201,1,201,5,201,7193,8,201,10,
201,12,201,7196,9,201,1,201,3,201,7199,8,201,1,201,3,201,7202,8,201,1,201,
3,201,7205,8,201,1,201,3,201,7208,8,201,1,201,3,201,7211,8,201,1,201,1,201,
1,201,1,202,1,202,3,202,7218,8,202,1,202,1,202,1,202,1,202,1,202,1,202,1,
202,3,202,7227,8,202,1,202,1,202,1,202,1,202,1,202,3,202,7234,8,202,1,202,
3,202,7237,8,202,1,202,3,202,7240,8,202,1,203,1,203,1,203,1,203,1,203,1,
203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,7258,
8,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
1,204,1,204,1,204,3,204,7286,8,204,1,205,1,205,3,205,7290,8,205,1,205,1,
205,1,205,3,205,7295,8,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
1,205,3,205,7306,8,205,1,205,1,205,3,205,7310,8,205,1,205,1,205,1,205,3,
205,7315,8,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
1,205,1,205,3,205,7329,8,205,3,205,7331,8,205,1,206,1,206,3,206,7335,8,206,
1,206,1,206,3,206,7339,8,206,1,206,1,206,1,206,1,206,3,206,7345,8,206,1,
206,1,206,1,206,3,206,7350,8,206,1,206,1,206,1,206,3,206,7355,8,206,1,206,
1,206,1,206,3,206,7360,8,206,1,206,3,206,7363,8,206,1,206,1,206,1,206,1,
207,1,207,1,208,1,208,1,208,1,208,1,209,1,209,3,209,7376,8,209,1,210,1,210,
1,210,1,211,1,211,3,211,7383,8,211,1,211,1,211,1,211,1,211,1,211,1,211,5,
211,7391,8,211,10,211,12,211,7394,9,211,3,211,7396,8,211,1,211,1,211,1,211,
1,211,1,211,1,211,1,211,1,211,5,211,7406,8,211,10,211,12,211,7409,9,211,
3,211,7411,8,211,1,211,3,211,7414,8,211,1,211,3,211,7417,8,211,1,211,1,211,
1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,7431,8,
211,1,211,3,211,7434,8,211,1,211,3,211,7437,8,211,1,211,3,211,7440,8,211,
1,211,1,211,1,211,1,211,1,211,3,211,7447,8,211,1,211,3,211,7450,8,211,1,
211,1,211,1,211,1,211,1,211,1,211,5,211,7458,8,211,10,211,12,211,7461,9,
211,3,211,7463,8,211,1,211,1,211,1,211,1,211,3,211,7469,8,211,1,211,1,211,
1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,7483,8,
211,1,211,3,211,7486,8,211,1,211,3,211,7489,8,211,1,211,3,211,7492,8,211,
1,211,1,211,1,211,1,211,1,211,3,211,7499,8,211,1,211,3,211,7502,8,211,1,
211,1,211,1,211,1,211,1,211,1,211,5,211,7510,8,211,10,211,12,211,7513,9,
211,3,211,7515,8,211,1,211,1,211,1,211,1,211,3,211,7521,8,211,1,211,1,211,
1,211,1,211,1,211,5,211,7528,8,211,10,211,12,211,7531,9,211,3,211,7533,8,
211,1,211,3,211,7536,8,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
1,211,1,211,1,211,3,211,7549,8,211,1,211,1,211,1,211,1,211,1,211,1,211,1,
211,1,211,1,211,3,211,7560,8,211,1,211,3,211,7563,8,211,1,211,1,211,1,211,
3,211,7568,8,211,1,212,1,212,1,212,1,212,3,212,7574,8,212,1,212,1,212,1,
212,1,212,1,212,1,212,5,212,7582,8,212,10,212,12,212,7585,9,212,1,212,1,
212,1,212,1,212,1,212,5,212,7592,8,212,10,212,12,212,7595,9,212,3,212,7597,
8,212,1,212,1,212,1,212,1,212,1,212,5,212,7604,8,212,10,212,12,212,7607,
9,212,3,212,7609,8,212,1,212,1,212,1,212,1,212,1,212,5,212,7616,8,212,10,
212,12,212,7619,9,212,3,212,7621,8,212,1,212,1,212,1,212,1,212,1,212,5,212,
7628,8,212,10,212,12,212,7631,9,212,1,212,1,212,1,212,3,212,7636,8,212,1,
212,1,212,1,212,3,212,7641,8,212,1,212,1,212,1,212,1,212,3,212,7647,8,212,
1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,7659,8,
212,1,213,1,213,3,213,7663,8,213,1,213,1,213,1,213,1,213,1,213,3,213,7670,
8,213,1,213,3,213,7673,8,213,1,213,1,213,1,213,1,213,3,213,7679,8,213,3,
213,7681,8,213,1,213,1,213,1,213,3,213,7686,8,213,1,213,3,213,7689,8,213,
1,213,1,213,4,213,7693,8,213,11,213,12,213,7694,3,213,7697,8,213,1,214,1,
214,3,214,7701,8,214,1,214,1,214,3,214,7705,8,214,1,214,1,214,3,214,7709,
8,214,1,214,3,214,7712,8,214,1,215,1,215,3,215,7716,8,215,1,215,1,215,1,
215,1,215,3,215,7722,8,215,1,215,1,215,1,215,1,215,1,215,1,215,5,215,7730,
8,215,10,215,12,215,7733,9,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,
7741,8,215,1,216,1,216,3,216,7745,8,216,1,216,3,216,7748,8,216,1,216,1,216,
3,216,7752,8,216,1,216,1,216,3,216,7756,8,216,1,216,1,216,1,216,3,216,7761,
8,216,1,216,1,216,1,216,3,216,7766,8,216,1,216,1,216,1,216,3,216,7771,8,
216,1,216,3,216,7774,8,216,1,216,3,216,7777,8,216,1,216,3,216,7780,8,216,
1,217,1,217,3,217,7784,8,217,1,217,1,217,1,217,3,217,7789,8,217,1,217,1,
217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,
217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,7811,8,217,1,217,1,217,1,217,
1,217,1,217,1,217,3,217,7819,8,217,1,217,1,217,1,217,1,217,1,217,1,217,1,
217,3,217,7828,8,217,3,217,7830,8,217,1,217,1,217,1,217,1,217,1,217,1,217,
3,217,7838,8,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,7846,8,217,1,
217,1,217,1,217,3,217,7851,8,217,1,217,1,217,1,217,3,217,7856,8,217,1,217,
1,217,1,217,1,217,1,217,1,217,3,217,7864,8,217,1,217,1,217,1,217,3,217,7869,
8,217,1,217,1,217,1,217,3,217,7874,8,217,1,218,1,218,1,219,1,219,3,219,7880,
8,219,1,219,1,219,1,219,3,219,7885,8,219,1,219,1,219,1,219,1,219,1,219,1,
219,1,219,1,219,1,219,1,219,1,219,3,219,7898,8,219,1,219,1,219,1,219,3,219,
7903,8,219,1,219,1,219,1,219,3,219,7908,8,219,1,219,1,219,1,219,3,219,7913,
8,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,7921,8,219,1,219,3,219,7924,
8,219,1,219,1,219,3,219,7928,8,219,1,219,1,219,1,219,3,219,7933,8,219,1,
219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,7946,
8,219,1,219,1,219,1,219,3,219,7951,8,219,1,219,1,219,1,219,3,219,7956,8,
219,1,219,1,219,1,219,3,219,7961,8,219,1,219,1,219,1,219,1,219,1,219,1,219,
3,219,7969,8,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,7977,8,219,1,
219,1,219,1,219,3,219,7982,8,219,1,219,1,219,1,219,3,219,7987,8,219,1,219,
3,219,7990,8,219,1,219,1,219,1,219,3,219,7995,8,219,1,219,1,219,1,219,3,
219,8000,8,219,1,219,3,219,8003,8,219,3,219,8005,8,219,1,220,1,220,3,220,
8009,8,220,1,220,1,220,1,220,3,220,8014,8,220,1,220,1,220,1,220,1,220,1,
220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,
220,1,220,1,220,3,220,8035,8,220,1,220,1,220,1,220,3,220,8040,8,220,1,220,
1,220,1,220,3,220,8045,8,220,1,220,1,220,1,220,3,220,8050,8,220,1,220,1,
220,1,220,3,220,8055,8,220,1,220,1,220,1,220,3,220,8060,8,220,1,220,1,220,
1,220,3,220,8065,8,220,1,220,1,220,1,220,3,220,8070,8,220,1,220,1,220,1,
220,3,220,8075,8,220,1,221,1,221,3,221,8079,8,221,1,221,1,221,1,221,3,221,
8084,8,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,
221,3,221,8097,8,221,1,221,1,221,1,221,3,221,8102,8,221,1,221,3,221,8105,
8,221,1,222,1,222,1,222,1,222,1,223,1,223,1,224,1,224,3,224,8115,8,224,1,
224,3,224,8118,8,224,1,224,1,224,1,225,1,225,3,225,8124,8,225,1,225,3,225,
8127,8,225,1,225,1,225,1,226,1,226,3,226,8133,8,226,1,226,1,226,3,226,8137,
8,226,1,226,1,226,3,226,8141,8,226,1,226,3,226,8144,8,226,1,226,3,226,8147,
8,226,1,226,3,226,8150,8,226,1,226,3,226,8153,8,226,1,227,1,227,3,227,8157,
8,227,1,227,1,227,1,227,3,227,8162,8,227,1,227,1,227,5,227,8166,8,227,10,
227,12,227,8169,9,227,1,228,1,228,1,228,1,228,1,228,3,228,8176,8,228,1,229,
1,229,1,230,1,230,3,230,8182,8,230,1,230,1,230,1,230,3,230,8187,8,230,1,
230,1,230,5,230,8191,8,230,10,230,12,230,8194,9,230,1,231,1,231,1,231,1,
231,1,231,3,231,8201,8,231,1,232,1,232,1,233,1,233,3,233,8207,8,233,1,233,
1,233,1,233,3,233,8212,8,233,1,234,1,234,1,235,1,235,1,235,1,235,1,235,1,
235,1,235,3,235,8223,8,235,1,235,1,235,1,235,1,235,3,235,8229,8,235,1,235,
1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
3,235,8244,8,235,1,235,1,235,1,235,1,235,3,235,8250,8,235,1,235,1,235,1,
235,1,235,3,235,8256,8,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
3,235,8266,8,235,1,235,1,235,1,235,1,235,1,235,3,235,8273,8,235,1,235,1,
235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,3,235,8284,8,235,1,235,1,235,
1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,3,235,8308,8,235,1,235,1,
235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,
235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,
235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,
235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,3,
235,8359,8,235,1,236,1,236,1,236,1,236,1,236,1,236,1,236,3,236,8368,8,236,
1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,
1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,3,236,
8393,8,236,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,238,1,238,1,
238,1,238,1,239,1,239,1,239,1,239,1,240,1,240,1,240,1,240,1,241,1,241,1,
241,1,241,3,241,8419,8,241,1,241,1,241,1,241,3,241,8424,8,241,3,241,8426,
8,241,1,241,1,241,1,242,1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,244,
1,244,1,244,1,244,1,245,1,245,1,245,1,245,1,246,1,246,1,246,3,246,8449,8,
246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,
246,1,246,3,246,8464,8,246,1,247,1,247,1,247,1,247,1,247,1,247,1,248,1,248,
1,248,1,248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,
8485,8,249,1,250,1,250,1,250,3,250,8490,8,250,1,250,1,250,1,250,1,250,1,
250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,3,250,8505,8,250,1,251,
1,251,1,251,1,251,1,251,1,251,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
3,252,8520,8,252,1,252,3,252,8523,8,252,1,252,1,252,3,252,8527,8,252,1,253,
1,253,1,253,1,253,3,253,8533,8,253,1,253,1,253,3,253,8537,8,253,1,253,3,
253,8540,8,253,1,253,1,253,1,253,1,253,3,253,8546,8,253,1,253,1,253,3,253,
8550,8,253,1,253,3,253,8553,8,253,1,253,1,253,1,253,1,253,3,253,8559,8,253,
1,253,1,253,3,253,8563,8,253,1,253,3,253,8566,8,253,3,253,8568,8,253,1,254,
1,254,1,255,1,255,1,255,1,255,1,256,1,256,1,256,1,256,1,257,1,257,1,257,
1,257,1,258,1,258,1,258,1,258,1,259,1,259,1,259,1,259,1,259,3,259,8593,8,
259,1,259,1,259,1,259,1,259,1,259,1,259,3,259,8601,8,259,1,259,1,259,1,260,
1,260,1,260,1,260,1,260,3,260,8610,8,260,1,260,3,260,8613,8,260,1,260,1,
260,1,260,1,260,1,260,1,260,1,260,3,260,8622,8,260,1,260,3,260,8625,8,260,
1,260,3,260,8628,8,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,8637,
8,260,1,260,3,260,8640,8,260,1,260,3,260,8643,8,260,1,260,1,260,3,260,8647,
8,260,1,261,1,261,3,261,8651,8,261,1,261,3,261,8654,8,261,1,261,1,261,3,
261,8658,8,261,1,261,1,261,3,261,8662,8,261,1,261,3,261,8665,8,261,1,261,
1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,5,261,8677,8,261,10,
261,12,261,8680,9,261,3,261,8682,8,261,1,261,1,261,3,261,8686,8,261,1,261,
1,261,1,261,1,261,1,261,1,261,3,261,8694,8,261,1,261,3,261,8697,8,261,1,
261,3,261,8700,8,261,1,261,1,261,3,261,8704,8,261,1,261,3,261,8707,8,261,
1,261,1,261,3,261,8711,8,261,1,261,1,261,1,261,3,261,8716,8,261,1,261,1,
261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,5,261,8728,8,261,10,
261,12,261,8731,9,261,3,261,8733,8,261,1,261,1,261,3,261,8737,8,261,1,261,
1,261,1,261,1,261,1,261,1,261,3,261,8745,8,261,1,261,3,261,8748,8,261,1,
261,3,261,8751,8,261,3,261,8753,8,261,1,262,1,262,1,262,3,262,8758,8,262,
1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,3,262,8768,8,262,1,262,1,
262,1,262,1,262,1,262,1,262,3,262,8776,8,262,1,262,1,262,1,262,1,262,1,262,
1,262,3,262,8784,8,262,1,262,1,262,1,262,3,262,8789,8,262,1,262,3,262,8792,
8,262,1,262,1,262,1,262,1,262,1,262,1,262,3,262,8800,8,262,1,262,3,262,8803,
8,262,3,262,8805,8,262,1,263,1,263,1,263,3,263,8810,8,263,1,263,1,263,1,
264,1,264,1,264,1,264,1,265,1,265,1,265,3,265,8821,8,265,1,265,3,265,8824,
8,265,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,3,266,8835,8,
266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,3,266,8846,8,266,
1,267,1,267,1,267,1,267,1,267,1,267,3,267,8854,8,267,1,267,1,267,1,267,3,
267,8859,8,267,1,268,1,268,1,268,1,268,1,269,1,269,3,269,8867,8,269,1,269,
1,269,1,269,3,269,8872,8,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,
269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,
269,8893,8,269,1,269,3,269,8896,8,269,1,270,1,270,1,270,1,271,1,271,1,271,
1,271,1,272,1,272,1,272,1,272,1,273,1,273,1,273,1,273,1,274,1,274,1,274,
1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,3,274,
8927,8,274,1,274,1,274,1,275,1,275,3,275,8933,8,275,1,275,1,275,3,275,8937,
8,275,1,275,1,275,3,275,8941,8,275,1,275,1,275,1,275,1,275,3,275,8947,8,
275,1,275,3,275,8950,8,275,1,275,3,275,8953,8,275,1,275,3,275,8956,8,275,
1,275,1,275,3,275,8960,8,275,1,275,1,275,3,275,8964,8,275,1,275,1,275,3,
275,8968,8,275,1,275,1,275,1,275,1,275,1,275,3,275,8975,8,275,1,275,3,275,
8978,8,275,1,275,3,275,8981,8,275,1,275,1,275,3,275,8985,8,275,1,275,1,275,
3,275,8989,8,275,1,275,1,275,3,275,8993,8,275,1,275,1,275,1,275,1,275,3,
275,8999,8,275,1,275,1,275,3,275,9003,8,275,1,275,1,275,3,275,9007,8,275,
1,275,1,275,3,275,9011,8,275,1,275,1,275,1,275,1,275,3,275,9017,8,275,1,
275,3,275,9020,8,275,1,275,3,275,9023,8,275,1,275,3,275,9026,8,275,3,275,
9028,8,275,1,276,1,276,1,277,3,277,9033,8,277,1,277,1,277,3,277,9037,8,277,
1,277,3,277,9040,8,277,1,278,3,278,9043,8,278,1,278,1,278,1,278,1,278,1,
278,5,278,9050,8,278,10,278,12,278,9053,9,278,1,278,1,278,1,279,3,279,9058,
8,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,5,279,9069,8,
279,10,279,12,279,9072,9,279,1,279,1,279,1,280,1,280,1,280,3,280,9079,8,
280,1,280,1,280,1,281,1,281,1,281,1,281,1,282,3,282,9088,8,282,1,282,1,282,
1,282,1,282,1,282,3,282,9095,8,282,1,283,1,283,1,283,1,284,1,284,1,285,1,
285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,
285,3,285,9116,8,285,1,285,3,285,9119,8,285,3,285,9121,8,285,1,286,1,286,
1,286,1,287,1,287,1,287,1,288,1,288,3,288,9131,8,288,1,288,1,288,3,288,9135,
8,288,1,288,1,288,5,288,9139,8,288,10,288,12,288,9142,9,288,1,288,1,288,
1,288,1,288,1,288,1,288,1,288,3,288,9151,8,288,1,289,1,289,1,289,1,289,1,
289,1,289,3,289,9159,8,289,5,289,9161,8,289,10,289,12,289,9164,9,289,1,289,
3,289,9167,8,289,1,289,3,289,9170,8,289,1,289,1,289,3,289,9174,8,289,1,290,
1,290,3,290,9178,8,290,1,291,1,291,1,291,5,291,9183,8,291,10,291,12,291,
9186,9,291,1,292,1,292,3,292,9190,8,292,1,292,3,292,9193,8,292,1,292,1,292,
3,292,9197,8,292,1,292,1,292,1,292,3,292,9202,8,292,3,292,9204,8,292,1,292,
3,292,9207,8,292,1,292,1,292,1,292,3,292,9212,8,292,3,292,9214,8,292,1,293,
1,293,1,293,1,293,1,294,1,294,3,294,9222,8,294,1,294,3,294,9225,8,294,1,
294,3,294,9228,8,294,1,294,3,294,9231,8,294,1,294,3,294,9234,8,294,1,294,
1,294,1,294,1,294,1,294,1,294,3,294,9242,8,294,1,294,1,294,1,294,3,294,9247,
8,294,1,294,1,294,1,294,3,294,9252,8,294,1,294,3,294,9255,8,294,1,294,3,
294,9258,8,294,1,294,3,294,9261,8,294,1,294,3,294,9264,8,294,1,294,3,294,
9267,8,294,1,294,3,294,9270,8,294,1,295,1,295,3,295,9274,8,295,1,295,3,295,
9277,8,295,1,295,1,295,3,295,9281,8,295,1,295,1,295,1,295,3,295,9286,8,295,
3,295,9288,8,295,1,295,1,295,1,295,1,295,3,295,9294,8,295,1,295,3,295,9297,
8,295,1,295,3,295,9300,8,295,1,295,3,295,9303,8,295,1,295,3,295,9306,8,295,
1,295,3,295,9309,8,295,1,295,1,295,1,295,1,296,1,296,3,296,9316,8,296,1,
296,3,296,9319,8,296,1,296,1,296,3,296,9323,8,296,1,296,1,296,1,296,1,296,
3,296,9329,8,296,1,296,3,296,9332,8,296,1,297,1,297,3,297,9336,8,297,1,297,
1,297,3,297,9340,8,297,1,297,1,297,3,297,9344,8,297,1,297,3,297,9347,8,297,
1,298,1,298,1,298,1,299,1,299,1,300,1,300,1,300,5,300,9357,8,300,10,300,
12,300,9360,9,300,1,301,1,301,1,301,5,301,9365,8,301,10,301,12,301,9368,
9,301,1,302,1,302,3,302,9372,8,302,1,302,1,302,3,302,9376,8,302,1,302,1,
302,5,302,9380,8,302,10,302,12,302,9383,9,302,1,302,3,302,9386,8,302,1,302,
3,302,9389,8,302,1,302,1,302,1,302,1,302,5,302,9395,8,302,10,302,12,302,
9398,9,302,3,302,9400,8,302,1,302,1,302,3,302,9404,8,302,1,302,1,302,1,302,
1,303,1,303,1,303,1,303,1,303,1,303,1,303,3,303,9416,8,303,1,304,1,304,1,
304,1,304,1,304,1,304,1,304,3,304,9425,8,304,3,304,9427,8,304,1,305,1,305,
1,305,1,305,1,306,1,306,1,306,1,306,1,307,1,307,1,307,1,307,1,308,1,308,
1,308,1,308,1,309,1,309,1,309,1,309,1,310,1,310,1,310,1,310,1,310,3,310,
9454,8,310,1,311,1,311,1,311,1,311,3,311,9460,8,311,1,311,1,311,1,312,1,
312,3,312,9466,8,312,1,312,1,312,3,312,9470,8,312,1,312,1,312,3,312,9474,
8,312,1,312,3,312,9477,8,312,1,312,3,312,9480,8,312,1,313,1,313,1,313,1,
313,1,314,1,314,3,314,9488,8,314,1,314,3,314,9491,8,314,1,314,3,314,9494,
8,314,1,314,1,314,3,314,9498,8,314,1,314,1,314,1,314,1,314,1,314,3,314,9505,
8,314,1,314,5,314,9508,8,314,10,314,12,314,9511,9,314,1,314,3,314,9514,8,
314,1,314,3,314,9517,8,314,1,314,3,314,9520,8,314,1,314,3,314,9523,8,314,
1,314,1,314,1,314,1,315,1,315,3,315,9530,8,315,1,315,1,315,3,315,9534,8,
315,1,315,1,315,3,315,9538,8,315,1,315,4,315,9541,8,315,11,315,12,315,9542,
3,315,9545,8,315,1,315,5,315,9548,8,315,10,315,12,315,9551,9,315,1,316,1,
316,1,317,1,317,1,318,1,318,1,318,1,318,1,318,3,318,9562,8,318,1,318,1,318,
1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,
1,318,1,318,3,318,9580,8,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,
318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,3,
318,9601,8,318,1,319,1,319,1,319,1,319,1,319,1,319,1,319,1,319,1,319,1,319,
3,319,9613,8,319,3,319,9615,8,319,1,320,1,320,1,320,1,320,1,320,1,320,1,
321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,
321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,
321,1,321,1,321,3,321,9650,8,321,1,322,1,322,1,323,1,323,1,323,1,323,1,323,
1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,
1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,
1,323,1,323,1,323,1,323,3,323,9687,8,323,1,324,1,324,1,324,1,324,1,324,3,
324,9694,8,324,1,325,1,325,1,325,1,325,1,326,1,326,1,326,3,326,9703,8,326,
1,326,1,326,1,327,1,327,1,327,3,327,9710,8,327,1,327,1,327,3,327,9714,8,
327,1,328,1,328,1,328,1,328,1,328,1,329,1,329,1,329,1,329,3,329,9725,8,329,
1,329,1,329,3,329,9729,8,329,1,330,1,330,1,330,1,330,3,330,9735,8,330,1,
330,1,330,1,331,1,331,1,331,1,331,3,331,9743,8,331,1,331,1,331,1,332,1,332,
1,332,3,332,9750,8,332,1,332,1,332,1,332,1,333,1,333,3,333,9757,8,333,1,
333,1,333,3,333,9761,8,333,1,333,1,333,1,334,1,334,1,334,1,334,1,334,1,335,
1,335,1,335,1,335,1,335,1,336,1,336,1,336,1,336,3,336,9779,8,336,1,336,1,
336,1,337,1,337,1,337,1,337,3,337,9787,8,337,1,337,1,337,1,338,1,338,1,338,
3,338,9794,8,338,1,338,1,338,1,339,1,339,1,339,3,339,9801,8,339,1,339,1,
339,1,339,1,340,1,340,1,340,1,340,3,340,9810,8,340,1,340,1,340,1,341,1,341,
1,341,1,341,1,341,1,342,1,342,1,342,3,342,9822,8,342,1,342,1,342,1,343,1,
343,1,343,1,343,1,343,3,343,9831,8,343,1,343,1,343,1,344,1,344,1,344,3,344,
9838,8,344,1,344,1,344,3,344,9842,8,344,1,345,1,345,1,345,3,345,9847,8,345,
1,345,1,345,3,345,9851,8,345,1,346,1,346,1,346,1,346,3,346,9857,8,346,1,
346,1,346,1,347,1,347,1,347,1,347,3,347,9865,8,347,1,347,1,347,1,348,1,348,
1,348,1,348,1,349,1,349,1,349,3,349,9876,8,349,1,349,1,349,1,350,1,350,1,
350,3,350,9883,8,350,1,350,1,350,3,350,9887,8,350,1,351,1,351,1,351,3,351,
9892,8,351,1,351,1,351,1,352,1,352,1,352,3,352,9899,8,352,1,352,1,352,1,
353,1,353,1,353,3,353,9906,8,353,1,353,1,353,1,354,1,354,1,354,3,354,9913,
8,354,1,354,1,354,1,355,1,355,1,355,3,355,9920,8,355,1,355,1,355,1,356,1,
356,1,357,1,357,3,357,9928,8,357,1,357,1,357,1,358,1,358,1,358,1,358,3,358,
9936,8,358,1,359,1,359,1,359,1,359,1,360,1,360,1,360,1,360,1,361,1,361,1,
361,1,361,1,362,1,362,1,362,1,362,1,363,1,363,1,363,1,363,1,363,3,363,9959,
8,363,1,364,1,364,1,364,1,364,1,365,1,365,1,365,1,365,1,366,1,366,3,366,
9971,8,366,1,366,1,366,1,366,3,366,9976,8,366,1,366,1,366,1,367,1,367,1,
367,1,367,1,367,1,368,1,368,1,368,1,368,1,369,1,369,1,369,1,369,1,370,1,
370,1,370,1,371,1,371,1,371,1,372,1,372,1,372,1,372,1,373,1,373,1,373,1,
374,1,374,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,
375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,
375,1,375,1,375,1,375,1,375,1,375,1,375,3,375,10037,8,375,1,376,1,376,1,
376,1,376,1,377,1,377,1,377,1,377,1,378,1,378,1,378,1,378,1,378,1,379,1,
379,1,379,1,379,1,379,1,380,1,380,3,380,10059,8,380,1,380,1,380,1,380,1,
380,1,380,3,380,10066,8,380,1,381,1,381,1,381,1,381,1,381,1,382,1,382,1,
382,1,382,1,382,1,383,1,383,3,383,10080,8,383,1,383,1,383,1,383,1,384,1,
384,1,384,1,384,1,384,1,385,1,385,1,385,1,385,1,385,1,386,1,386,1,386,1,
386,1,386,1,387,1,387,1,387,1,387,1,388,1,388,1,388,1,388,1,388,1,389,1,
389,1,389,1,389,1,389,1,389,3,389,10115,8,389,1,390,1,390,1,390,1,390,1,
390,1,390,1,391,1,391,1,391,1,391,1,392,1,392,1,392,1,392,1,392,1,392,1,
393,1,393,1,393,1,393,1,394,1,394,1,394,1,394,1,394,1,395,1,395,1,395,1,
395,1,395,1,396,1,396,1,396,1,396,1,397,1,397,1,397,1,397,1,398,1,398,1,
398,1,398,1,398,1,398,3,398,10161,8,398,1,399,1,399,1,399,1,399,1,400,1,
400,1,400,1,400,1,401,1,401,1,401,1,401,1,402,1,402,1,402,1,402,1,403,1,
403,1,403,1,403,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,
404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,
404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,
404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,
404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,1,404,3,404,10237,8,404,1,
405,1,405,3,405,10241,8,405,1,405,1,405,3,405,10245,8,405,1,405,1,405,1,
405,1,405,3,405,10251,8,405,1,405,1,405,3,405,10255,8,405,3,405,10257,8,
405,3,405,10259,8,405,1,405,3,405,10262,8,405,1,405,3,405,10265,8,405,1,
406,1,406,1,406,3,406,10270,8,406,1,406,1,406,1,406,1,406,3,406,10276,8,
406,1,406,1,406,3,406,10280,8,406,1,406,1,406,3,406,10284,8,406,1,406,3,
406,10287,8,406,3,406,10289,8,406,1,407,1,407,1,407,3,407,10294,8,407,1,
407,1,407,1,407,1,407,3,407,10300,8,407,1,407,1,407,3,407,10304,8,407,1,
407,1,407,3,407,10308,8,407,1,407,1,407,1,407,3,407,10313,8,407,1,407,3,
407,10316,8,407,3,407,10318,8,407,1,408,1,408,1,408,3,408,10323,8,408,1,
409,1,409,1,409,1,409,1,410,1,410,1,410,1,410,3,410,10333,8,410,1,411,1,
411,3,411,10337,8,411,1,411,1,411,3,411,10341,8,411,1,411,3,411,10344,8,
411,1,411,3,411,10347,8,411,1,411,3,411,10350,8,411,1,412,1,412,1,412,1,
412,1,412,1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,413,1,413,1,414,1,
414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,
414,1,414,1,414,3,414,10382,8,414,1,415,1,415,1,415,1,415,3,415,10388,8,
415,1,415,1,415,1,415,1,415,3,415,10394,8,415,1,415,3,415,10397,8,415,1,
415,3,415,10400,8,415,3,415,10402,8,415,3,415,10404,8,415,1,415,3,415,10407,
8,415,1,415,3,415,10410,8,415,1,416,1,416,3,416,10414,8,416,1,416,1,416,
1,416,3,416,10419,8,416,1,416,1,416,1,416,1,416,3,416,10425,8,416,1,416,
3,416,10428,8,416,1,416,3,416,10431,8,416,3,416,10433,8,416,3,416,10435,
8,416,1,416,3,416,10438,8,416,1,416,3,416,10441,8,416,1,417,1,417,1,417,
1,417,3,417,10447,8,417,1,418,1,418,3,418,10451,8,418,1,418,1,418,1,418,
3,418,10456,8,418,1,418,1,418,1,418,1,418,3,418,10462,8,418,1,418,3,418,
10465,8,418,1,418,3,418,10468,8,418,3,418,10470,8,418,3,418,10472,8,418,
1,418,3,418,10475,8,418,1,418,3,418,10478,8,418,1,419,1,419,1,419,1,419,
1,419,1,419,3,419,10486,8,419,1,420,1,420,1,420,1,420,3,420,10492,8,420,
1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,3,420,10503,8,420,
3,420,10505,8,420,1,421,1,421,1,421,3,421,10510,8,421,1,421,1,421,1,421,
1,421,1,421,1,421,1,421,1,421,1,421,3,421,10521,8,421,3,421,10523,8,421,
1,422,1,422,1,422,1,422,3,422,10529,8,422,1,423,1,423,1,423,3,423,10534,
8,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,
1,423,3,423,10548,8,423,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,
1,424,1,424,1,424,1,424,1,424,3,424,10563,8,424,1,424,1,424,1,424,1,424,
1,424,1,424,3,424,10571,8,424,1,425,1,425,3,425,10575,8,425,1,425,1,425,
3,425,10579,8,425,1,426,1,426,1,426,1,426,3,426,10585,8,426,1,427,1,427,
1,427,1,427,3,427,10591,8,427,1,428,1,428,1,428,1,428,3,428,10597,8,428,
1,428,3,428,10600,8,428,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,
1,429,3,429,10611,8,429,1,430,1,430,1,430,1,430,3,430,10617,8,430,1,430,
1,430,3,430,10621,8,430,1,430,1,430,1,430,3,430,10626,8,430,1,431,1,431,
1,431,1,431,3,431,10632,8,431,1,431,3,431,10635,8,431,1,432,1,432,1,432,
1,432,1,433,1,433,1,433,3,433,10644,8,433,1,433,3,433,10647,8,433,1,434,
1,434,1,434,1,434,3,434,10653,8,434,1,435,1,435,1,436,1,436,1,436,3,436,
10660,8,436,1,436,1,436,1,436,1,436,1,436,3,436,10667,8,436,1,436,1,436,
3,436,10671,8,436,1,436,1,436,3,436,10675,8,436,3,436,10677,8,436,1,437,
1,437,1,437,3,437,10682,8,437,1,437,3,437,10685,8,437,1,438,1,438,3,438,
10689,8,438,1,438,1,438,1,438,3,438,10694,8,438,1,439,1,439,1,439,3,439,
10699,8,439,1,439,3,439,10702,8,439,1,440,1,440,1,440,3,440,10707,8,440,
1,441,1,441,1,441,1,441,3,441,10713,8,441,1,442,1,442,1,442,1,442,3,442,
10719,8,442,1,442,1,442,1,442,1,442,1,442,1,442,3,442,10727,8,442,1,443,
1,443,1,443,1,443,1,443,1,443,3,443,10735,8,443,1,444,1,444,1,444,1,444,
3,444,10741,8,444,1,445,1,445,1,445,3,445,10746,8,445,1,446,1,446,1,446,
1,446,1,446,3,446,10753,8,446,1,446,3,446,10756,8,446,1,447,1,447,3,447,
10760,8,447,1,447,1,447,3,447,10764,8,447,1,447,3,447,10767,8,447,1,447,
1,447,1,447,1,447,3,447,10773,8,447,3,447,10775,8,447,3,447,10777,8,447,
1,447,3,447,10780,8,447,1,447,3,447,10783,8,447,1,448,1,448,1,448,3,448,
10788,8,448,1,448,3,448,10791,8,448,1,449,1,449,1,449,1,449,1,450,1,450,
1,450,1,450,1,451,1,451,1,451,3,451,10804,8,451,1,452,1,452,1,452,1,452,
1,452,1,452,1,452,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,454,1,454,
1,454,3,454,10823,8,454,1,454,3,454,10826,8,454,1,455,1,455,1,455,3,455,
10831,8,455,1,455,3,455,10834,8,455,1,456,1,456,1,456,3,456,10839,8,456,
1,456,1,456,1,456,1,456,1,456,1,456,1,456,1,456,1,456,3,456,10850,8,456,
1,457,1,457,3,457,10854,8,457,1,457,1,457,3,457,10858,8,457,1,457,1,457,
1,457,1,457,3,457,10864,8,457,1,457,3,457,10867,8,457,1,457,3,457,10870,
8,457,3,457,10872,8,457,3,457,10874,8,457,1,457,3,457,10877,8,457,1,457,
3,457,10880,8,457,1,458,1,458,1,458,1,458,3,458,10886,8,458,1,459,1,459,
1,459,1,459,3,459,10892,8,459,1,459,3,459,10895,8,459,1,460,1,460,3,460,
10899,8,460,1,460,1,460,3,460,10903,8,460,1,460,1,460,1,460,3,460,10908,
8,460,1,460,1,460,3,460,10912,8,460,1,460,1,460,3,460,10916,8,460,1,461,
1,461,1,461,3,461,10921,8,461,1,462,1,462,3,462,10925,8,462,1,462,1,462,
3,462,10929,8,462,1,462,1,462,1,462,1,462,3,462,10935,8,462,1,462,3,462,
10938,8,462,1,462,3,462,10941,8,462,3,462,10943,8,462,3,462,10945,8,462,
1,462,3,462,10948,8,462,1,462,3,462,10951,8,462,1,463,1,463,1,463,3,463,
10956,8,463,1,464,1,464,1,464,1,465,1,465,1,466,1,466,1,466,1,466,1,466,
3,466,10968,8,466,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,
1,467,1,467,1,467,3,467,10982,8,467,1,468,1,468,1,468,5,468,10987,8,468,
10,468,12,468,10990,9,468,1,469,1,469,1,470,1,470,1,471,1,471,1,472,1,472,
1,473,1,473,1,474,1,474,1,475,1,475,1,476,1,476,1,476,5,476,11009,8,476,
10,476,12,476,11012,9,476,1,477,1,477,1,477,1,477,1,477,1,477,3,477,11020,
8,477,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,
1,478,1,478,3,478,11035,8,478,1,479,1,479,1,480,1,480,1,481,1,481,1,482,
1,482,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,1,483,
1,483,3,483,11057,8,483,1,484,1,484,1,484,1,484,1,484,3,484,11064,8,484,
1,485,1,485,1,485,1,485,1,485,3,485,11071,8,485,1,486,1,486,1,487,1,487,
1,487,1,487,1,488,1,488,1,488,3,488,11082,8,488,1,488,1,488,1,489,1,489,
1,489,5,489,11089,8,489,10,489,12,489,11092,9,489,1,490,1,490,1,490,3,490,
11097,8,490,1,490,1,490,1,490,1,490,3,490,11103,8,490,5,490,11105,8,490,
10,490,12,490,11108,9,490,1,491,1,491,1,491,1,491,1,491,1,491,1,491,1,491,
1,491,1,491,1,491,3,491,11121,8,491,1,492,1,492,1,492,1,492,1,492,1,492,
3,492,11129,8,492,1,493,1,493,1,494,1,494,1,494,5,494,11136,8,494,10,494,
12,494,11139,9,494,1,495,1,495,3,495,11143,8,495,1,495,1,495,1,495,3,495,
11148,8,495,5,495,11150,8,495,10,495,12,495,11153,9,495,1,496,1,496,1,496,
1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,4,496,11166,8,496,11,496,
12,496,11167,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,3,496,
11179,8,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,
1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,3,496,
11202,8,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,
1,496,3,496,11215,8,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,
1,496,1,496,1,496,1,496,1,496,3,496,11230,8,496,1,496,1,496,1,496,1,496,
3,496,11236,8,496,1,496,1,496,1,496,1,496,3,496,11242,8,496,1,496,1,496,
1,496,1,496,3,496,11248,8,496,1,496,1,496,3,496,11252,8,496,1,496,1,496,
1,496,1,496,1,496,1,496,5,496,11260,8,496,10,496,12,496,11263,9,496,1,496,
1,496,1,496,3,496,11268,8,496,5,496,11270,8,496,10,496,12,496,11273,9,496,
1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,498,1,498,1,498,
1,498,1,498,5,498,11289,8,498,10,498,12,498,11292,9,498,1,498,1,498,1,499,
1,499,1,499,1,499,1,499,1,499,1,499,1,500,1,500,1,500,1,500,1,500,1,500,
1,500,1,500,1,500,3,500,11312,8,500,1,501,1,501,1,501,1,501,5,501,11318,
8,501,10,501,12,501,11321,9,501,1,501,1,501,1,501,1,501,3,501,11327,8,501,
1,502,1,502,1,502,1,502,1,503,1,503,1,504,1,504,1,504,1,504,5,504,11339,
8,504,10,504,12,504,11342,9,504,1,504,1,504,1,504,1,504,3,504,11348,8,504,
1,505,1,505,1,505,1,505,1,506,1,506,1,506,1,506,1,506,1,506,3,506,11360,
8,506,1,506,1,506,3,506,11364,8,506,1,506,1,506,1,506,1,506,1,506,3,506,
11371,8,506,1,506,1,506,3,506,11375,8,506,1,506,1,506,3,506,11379,8,506,
1,506,1,506,3,506,11383,8,506,1,506,1,506,3,506,11387,8,506,1,506,1,506,
3,506,11391,8,506,1,506,1,506,3,506,11395,8,506,1,506,1,506,3,506,11399,
8,506,1,506,1,506,3,506,11403,8,506,1,506,1,506,1,506,1,506,1,506,3,506,
11410,8,506,1,507,1,507,1,507,1,507,1,507,5,507,11417,8,507,10,507,12,507,
11420,9,507,1,507,1,507,1,507,1,507,1,507,3,507,11427,8,507,1,508,1,508,
1,508,1,508,1,509,1,509,1,510,1,510,1,510,1,510,3,510,11439,8,510,1,510,
1,510,1,510,1,510,1,510,1,510,1,510,3,510,11448,8,510,1,511,1,511,1,511,
1,511,1,511,1,511,5,511,11456,8,511,10,511,12,511,11459,9,511,1,511,1,511,
1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,
1,511,1,511,5,511,11477,8,511,10,511,12,511,11480,9,511,1,511,1,511,1,511,
1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,
1,511,3,511,11498,8,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,
1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,
1,511,1,511,1,511,1,511,1,511,1,511,1,511,3,511,11527,8,511,1,512,1,512,
1,512,5,512,11532,8,512,10,512,12,512,11535,9,512,1,513,1,513,1,513,1,513,
1,514,1,514,1,514,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,
1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,3,515,11562,8,515,
1,515,1,515,3,515,11566,8,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,
3,515,11575,8,515,1,515,1,515,3,515,11579,8,515,1,516,1,516,1,516,3,516,
11584,8,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,
1,516,3,516,11597,8,516,1,516,1,516,1,516,3,516,11602,8,516,1,516,1,516,
1,516,1,516,1,516,1,516,1,516,3,516,11611,8,516,3,516,11613,8,516,1,517,
1,517,3,517,11617,8,517,1,517,1,517,3,517,11621,8,517,1,517,1,517,1,517,
1,517,3,517,11627,8,517,1,518,1,518,1,519,3,519,11632,8,519,1,519,1,519,
3,519,11636,8,519,1,519,1,519,3,519,11640,8,519,1,519,1,519,1,519,3,519,
11645,8,519,1,519,1,519,3,519,11649,8,519,1,519,1,519,1,519,3,519,11654,
8,519,1,519,1,519,1,519,3,519,11659,8,519,1,520,1,520,1,520,1,520,1,520,
1,520,1,520,1,520,3,520,11669,8,520,1,521,1,521,1,521,4,521,11674,8,521,
11,521,12,521,11675,1,521,1,521,3,521,11680,8,521,1,521,1,521,1,521,1,521,
4,521,11686,8,521,11,521,12,521,11687,1,521,1,521,3,521,11692,8,521,1,521,
1,521,3,521,11696,8,521,1,522,1,522,1,522,1,522,1,522,1,523,1,523,1,523,
1,523,1,523,1,524,3,524,11709,8,524,1,524,1,524,5,524,11713,8,524,10,524,
12,524,11716,9,524,1,525,1,525,1,525,1,525,5,525,11722,8,525,10,525,12,525,
11725,9,525,1,526,1,526,1,526,1,526,1,526,3,526,11732,8,526,1,526,1,526,
1,526,1,526,5,526,11738,8,526,10,526,12,526,11741,9,526,1,526,1,526,1,527,
1,527,1,527,3,527,11748,8,527,1,527,1,527,1,527,3,527,11753,8,527,1,528,
1,528,3,528,11757,8,528,1,528,1,528,1,528,3,528,11762,8,528,1,528,1,528,
1,528,1,528,1,528,3,528,11769,8,528,1,529,3,529,11772,8,529,1,529,3,529,
11775,8,529,1,529,3,529,11778,8,529,1,529,1,529,3,529,11782,8,529,1,529,
3,529,11785,8,529,1,529,3,529,11788,8,529,1,530,1,530,1,530,1,531,1,531,
1,531,1,532,3,532,11797,8,532,1,532,1,532,1,533,3,533,11802,8,533,1,533,
3,533,11805,8,533,1,533,1,533,1,534,1,534,1,534,5,534,11812,8,534,10,534,
12,534,11815,9,534,1,534,3,534,11818,8,534,1,535,1,535,3,535,11822,8,535,
1,535,1,535,1,535,3,535,11827,8,535,3,535,11829,8,535,1,536,3,536,11832,
8,536,1,536,1,536,1,537,3,537,11837,8,537,1,537,1,537,3,537,11841,8,537,
1,537,1,537,3,537,11845,8,537,1,538,1,538,1,538,1,538,3,538,11851,8,538,
1,539,3,539,11854,8,539,1,539,1,539,1,540,1,540,3,540,11860,8,540,1,541,
1,541,1,542,1,542,1,543,1,543,1,543,1,544,1,544,1,544,1,545,1,545,1,545,
5,545,11875,8,545,10,545,12,545,11878,9,545,1,546,1,546,1,546,1,547,1,547,
1,547,1,548,1,548,1,548,5,548,11889,8,548,10,548,12,548,11892,9,548,1,549,
1,549,1,550,1,550,5,550,11898,8,550,10,550,12,550,11901,9,550,1,550,1,550,
1,550,1,550,5,550,11907,8,550,10,550,12,550,11910,9,550,3,550,11912,8,550,
1,551,1,551,3,551,11916,8,551,1,551,3,551,11919,8,551,1,551,3,551,11922,
8,551,1,551,3,551,11925,8,551,1,551,3,551,11928,8,551,1,551,3,551,11931,
8,551,1,551,3,551,11934,8,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,
3,551,11943,8,551,1,551,1,551,1,551,1,551,1,551,3,551,11950,8,551,1,551,
3,551,11953,8,551,1,551,3,551,11956,8,551,1,551,1,551,3,551,11960,8,551,
1,551,3,551,11963,8,551,1,551,1,551,1,551,1,551,3,551,11969,8,551,1,551,
3,551,11972,8,551,1,551,3,551,11975,8,551,1,551,1,551,1,551,3,551,11980,
8,551,1,551,3,551,11983,8,551,3,551,11985,8,551,1,552,1,552,1,552,1,552,
1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,3,552,11999,8,552,1,553,
1,553,1,553,1,553,3,553,12005,8,553,1,553,1,553,1,553,5,553,12010,8,553,
10,553,12,553,12013,9,553,1,553,1,553,1,554,1,554,1,554,1,554,1,554,1,554,
1,554,1,555,1,555,1,555,5,555,12027,8,555,10,555,12,555,12030,9,555,1,556,
3,556,12033,8,556,1,556,1,556,1,556,3,556,12038,8,556,1,556,1,556,1,557,
1,557,3,557,12044,8,557,1,558,1,558,3,558,12048,8,558,1,559,3,559,12051,
8,559,1,559,1,559,1,559,1,559,3,559,12057,8,559,1,559,1,559,1,559,1,559,
1,559,3,559,12064,8,559,3,559,12066,8,559,1,559,1,559,3,559,12070,8,559,
1,559,1,559,1,559,1,559,1,559,3,559,12077,8,559,1,560,1,560,1,560,1,560,
1,560,1,560,1,560,1,560,1,560,1,560,1,560,1,560,1,560,1,560,3,560,12093,
8,560,1,560,1,560,1,560,1,560,1,560,1,560,1,560,1,560,1,560,3,560,12104,
8,560,1,561,1,561,1,561,1,561,1,561,1,561,1,561,1,561,1,561,1,561,1,561,
3,561,12117,8,561,1,561,1,561,1,562,1,562,1,562,1,562,1,562,1,562,1,562,
1,562,3,562,12129,8,562,1,563,1,563,1,564,1,564,1,564,1,564,1,565,1,565,
1,566,1,566,3,566,12141,8,566,1,566,1,566,1,566,1,566,3,566,12147,8,566,
1,566,1,566,5,566,12151,8,566,10,566,12,566,12154,9,566,1,567,1,567,1,567,
1,568,1,568,1,568,1,568,1,568,1,568,1,568,1,568,1,568,3,568,12168,8,568,
1,569,1,569,1,569,1,569,1,569,1,569,1,569,1,569,3,569,12178,8,569,1,569,
3,569,12181,8,569,1,570,1,570,1,571,1,571,1,572,1,572,1,572,1,572,1,572,
1,572,1,572,1,572,1,572,1,572,1,572,3,572,12198,8,572,1,572,3,572,12201,
8,572,1,573,1,573,1,573,1,573,1,573,1,573,1,573,1,573,5,573,12211,8,573,
10,573,12,573,12214,9,573,1,574,1,574,1,574,1,575,1,575,1,575,3,575,12222,
8,575,1,575,3,575,12225,8,575,1,575,3,575,12228,8,575,1,575,3,575,12231,
8,575,1,575,3,575,12234,8,575,1,575,3,575,12237,8,575,1,575,3,575,12240,
8,575,1,575,1,575,1,576,1,576,1,576,1,576,1,576,1,576,1,576,1,576,1,576,
1,576,1,576,1,576,1,576,5,576,12257,8,576,10,576,12,576,12260,9,576,1,576,
1,576,1,576,1,576,3,576,12266,8,576,3,576,12268,8,576,1,576,1,576,1,576,
1,576,1,576,1,576,1,576,1,576,1,576,1,576,1,576,3,576,12281,8,576,1,577,
1,577,1,577,1,577,5,577,12287,8,577,10,577,12,577,12290,9,577,1,577,1,577,
1,578,1,578,1,578,1,578,1,579,1,579,1,579,1,579,1,579,3,579,12303,8,579,
3,579,12305,8,579,1,579,1,579,1,579,3,579,12310,8,579,3,579,12312,8,579,
3,579,12314,8,579,1,580,1,580,1,580,1,580,5,580,12320,8,580,10,580,12,580,
12323,9,580,1,581,1,581,3,581,12327,8,581,1,582,1,582,1,582,1,582,1,582,
1,583,1,583,1,583,3,583,12337,8,583,1,583,1,583,3,583,12341,8,583,1,584,
1,584,3,584,12345,8,584,1,584,1,584,1,585,1,585,5,585,12351,8,585,10,585,
12,585,12354,9,585,1,585,1,585,1,585,1,585,1,585,3,585,12361,8,585,1,585,
1,585,1,585,1,585,1,585,1,585,5,585,12369,8,585,10,585,12,585,12372,9,585,
1,586,1,586,1,587,3,587,12377,8,587,1,587,1,587,1,588,1,588,1,589,1,589,
1,589,1,589,1,589,1,589,1,589,1,589,1,589,1,589,1,589,1,589,1,589,1,589,
3,589,12397,8,589,1,589,1,589,1,589,1,589,1,589,1,589,1,589,3,589,12406,
8,589,1,589,1,589,1,589,1,589,3,589,12412,8,589,1,589,1,589,1,589,1,589,
3,589,12418,8,589,1,589,1,589,1,589,1,589,3,589,12424,8,589,1,589,1,589,
3,589,12428,8,589,1,589,1,589,1,589,1,589,1,589,3,589,12435,8,589,1,589,
1,589,1,589,1,589,1,589,1,589,5,589,12443,8,589,10,589,12,589,12446,9,589,
1,589,1,589,1,589,3,589,12451,8,589,1,589,1,589,1,589,1,589,1,589,3,589,
12458,8,589,1,590,1,590,1,590,1,591,1,591,1,591,3,591,12466,8,591,1,592,
1,592,1,592,5,592,12471,8,592,10,592,12,592,12474,9,592,1,593,1,593,1,593,
1,593,3,593,12480,8,593,1,593,1,593,1,593,1,593,1,593,1,593,3,593,12488,
8,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,3,593,12497,8,593,1,594,
1,594,1,594,1,595,1,595,1,595,1,596,1,596,1,596,3,596,12508,8,596,1,596,
3,596,12511,8,596,1,596,1,596,3,596,12515,8,596,1,597,1,597,1,597,1,597,
1,597,5,597,12522,8,597,10,597,12,597,12525,9,597,1,598,1,598,1,599,1,599,
1,600,1,600,1,600,1,600,3,600,12535,8,600,1,600,1,600,3,600,12539,8,600,
1,600,3,600,12542,8,600,1,600,1,600,3,600,12546,8,600,1,600,1,600,3,600,
12550,8,600,1,600,3,600,12553,8,600,3,600,12555,8,600,1,601,1,601,1,602,
1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,
5,602,12572,8,602,10,602,12,602,12575,9,602,1,602,1,602,1,602,1,602,1,602,
1,602,1,602,1,602,1,602,5,602,12586,8,602,10,602,12,602,12589,9,602,1,602,
1,602,3,602,12593,8,602,1,602,0,2,992,1170,603,0,2,4,6,8,10,12,14,16,18,
20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,
508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,
544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,
580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,
616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,
652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,
688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,
724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,
760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,
796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,
832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,
868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,
904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,
940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,
976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,
1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,
1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,
1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,
1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,
1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,
1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,
1190,1192,1194,1196,1198,1200,1202,1204,0,117,2,0,17,17,265,265,2,0,750,
750,807,807,2,0,579,580,582,582,2,0,863,863,865,866,3,0,349,349,714,714,
847,847,2,0,148,148,584,584,2,0,235,235,775,775,3,0,550,550,633,633,775,
775,6,0,7,7,476,476,532,532,631,631,706,706,778,778,8,0,55,55,94,94,97,97,
183,183,300,300,425,425,543,543,819,819,2,0,577,577,700,700,3,0,134,134,
622,622,796,796,4,0,35,35,37,37,134,134,209,209,4,0,134,134,166,166,175,
175,395,395,4,0,524,524,551,551,577,577,700,700,2,0,134,134,629,629,2,0,
565,565,573,573,8,0,134,134,136,136,146,146,307,307,392,392,565,565,573,
573,629,629,2,0,134,134,209,209,5,0,162,162,413,413,421,421,800,800,818,
818,3,0,433,433,700,700,702,702,2,0,192,192,208,208,4,0,71,71,161,161,460,
460,511,511,3,0,192,192,208,208,210,210,2,0,321,321,425,425,2,0,209,209,
245,245,3,0,134,134,420,420,705,705,2,0,10,10,557,557,3,0,134,134,209,209,
687,687,2,0,180,180,318,318,2,0,435,435,787,787,3,0,277,277,490,490,647,
647,2,0,174,174,439,439,2,0,428,428,556,556,3,0,224,224,288,288,698,698,
2,0,28,28,410,410,2,0,10,10,200,200,3,0,95,95,222,222,674,674,3,0,164,164,
623,623,708,708,2,0,46,46,81,81,4,0,49,49,183,183,300,300,425,425,2,0,320,
320,795,795,6,0,61,62,155,156,349,350,473,474,488,489,813,814,3,0,343,344,
535,535,668,668,2,0,100,100,483,483,3,0,76,76,286,286,462,462,3,0,1,1,287,
287,461,461,2,0,378,378,709,710,2,0,637,637,639,639,1,0,494,504,19,0,1,1,
50,50,62,62,73,73,76,76,93,93,156,156,285,287,350,350,426,426,455,455,461,
462,474,474,489,489,602,602,661,661,814,814,821,821,873,873,8,0,49,50,94,
94,97,97,183,183,300,300,425,425,543,543,819,819,3,0,80,80,308,308,786,786,
1,0,659,660,1,0,863,864,2,0,257,257,758,758,1,0,720,721,2,0,293,293,373,
373,2,0,427,427,475,475,2,0,53,53,311,311,50,0,3,3,24,24,26,26,51,52,87,
88,115,125,166,166,170,171,175,175,211,211,214,214,221,221,227,228,242,242,
289,290,331,331,345,347,351,352,376,376,394,395,407,407,415,415,420,420,
510,510,514,514,521,522,539,539,541,541,566,567,595,595,617,617,644,644,
648,648,669,669,680,681,693,693,703,703,728,728,730,730,732,732,734,736,
738,738,741,741,743,744,752,753,763,763,771,771,781,782,784,784,801,802,
5,0,358,358,398,398,656,656,812,812,815,816,2,0,809,811,817,817,2,0,661,
661,674,674,2,0,202,202,674,674,14,0,16,16,165,165,338,338,516,516,588,588,
624,624,671,671,691,691,711,711,716,716,719,719,779,779,794,794,797,797,
4,0,32,32,430,430,630,630,683,683,2,0,101,101,574,574,2,0,17,17,425,425,
1,0,188,189,2,0,133,133,670,670,2,0,269,269,325,325,4,0,164,164,623,623,
718,718,796,796,39,0,6,6,9,9,15,15,46,46,127,127,134,134,139,139,149,149,
190,190,205,205,267,268,278,278,312,312,348,348,353,353,357,357,367,367,
394,394,408,408,427,427,475,475,479,479,517,517,548,548,553,553,587,587,
590,590,596,596,634,634,636,636,670,670,715,715,717,717,720,720,764,764,
777,777,789,790,796,796,799,799,56,0,7,7,13,13,42,42,114,114,131,131,140,
140,163,163,182,182,186,186,199,199,201,201,203,203,205,205,231,231,237,
237,239,239,266,267,293,293,310,311,327,327,333,333,340,340,344,344,360,
361,364,364,373,373,417,417,419,419,459,459,466,466,471,471,476,476,478,
478,491,491,493,504,506,507,518,518,529,532,542,542,569,570,572,572,574,
574,576,576,592,592,620,620,631,631,663,663,678,678,682,682,706,706,741,
741,774,774,778,778,789,790,792,792,799,799,15,0,31,31,60,60,105,105,150,
150,159,160,268,268,292,292,310,310,379,379,402,402,667,667,699,699,746,
746,762,762,773,773,4,0,106,106,591,591,759,760,835,835,2,0,314,314,442,
442,2,0,747,747,827,827,1,0,697,698,3,0,167,167,725,725,739,739,3,0,168,
168,726,726,740,740,3,0,129,129,137,138,304,304,1,0,901,902,1,0,898,900,
2,0,883,883,901,902,2,0,317,317,368,368,3,0,380,380,599,599,756,756,4,0,
340,340,724,724,727,727,827,827,6,0,336,336,822,822,825,825,838,838,845,
845,848,848,3,0,441,441,829,829,841,841,2,0,830,834,844,844,2,0,110,111,
839,839,5,0,826,826,840,840,842,843,846,847,850,850,2,0,823,823,849,849,
2,0,44,44,188,188,1,0,366,367,2,0,315,315,572,572,3,0,187,187,542,542,596,
596,2,0,356,356,364,364,2,0,267,267,362,362,2,0,42,42,852,852,1,0,871,872,
2,0,17,17,197,197,3,0,93,93,455,455,821,821,3,0,277,277,365,365,585,585,
2,0,40,40,174,174,2,0,265,265,359,359,2,0,83,83,593,593,2,0,89,89,707,707,
2,0,559,559,632,632,2,0,618,618,712,712,1,0,876,882,3,0,17,17,30,30,662,
662,1,0,593,594,2,0,265,265,422,422,1,0,301,302,14502,0,1207,1,0,0,0,2,1211,
1,0,0,0,4,1228,1,0,0,0,6,1234,1,0,0,0,8,1242,1,0,0,0,10,1244,1,0,0,0,12,
1286,1,0,0,0,14,1288,1,0,0,0,16,1299,1,0,0,0,18,1314,1,0,0,0,20,1316,1,0,
0,0,22,1329,1,0,0,0,24,1354,1,0,0,0,26,1372,1,0,0,0,28,1374,1,0,0,0,30,1386,
1,0,0,0,32,1423,1,0,0,0,34,1425,1,0,0,0,36,1443,1,0,0,0,38,1479,1,0,0,0,
40,1495,1,0,0,0,42,1562,1,0,0,0,44,1564,1,0,0,0,46,1566,1,0,0,0,48,1579,
1,0,0,0,50,1588,1,0,0,0,52,1592,1,0,0,0,54,1617,1,0,0,0,56,1619,1,0,0,0,
58,1675,1,0,0,0,60,1677,1,0,0,0,62,1683,1,0,0,0,64,1711,1,0,0,0,66,1713,
1,0,0,0,68,1717,1,0,0,0,70,1724,1,0,0,0,72,1728,1,0,0,0,74,1741,1,0,0,0,
76,1778,1,0,0,0,78,1886,1,0,0,0,80,1938,1,0,0,0,82,1940,1,0,0,0,84,1957,
1,0,0,0,86,1959,1,0,0,0,88,1999,1,0,0,0,90,2001,1,0,0,0,92,2024,1,0,0,0,
94,2026,1,0,0,0,96,2052,1,0,0,0,98,2054,1,0,0,0,100,2066,1,0,0,0,102,2068,
1,0,0,0,104,2070,1,0,0,0,106,2079,1,0,0,0,108,2084,1,0,0,0,110,2093,1,0,
0,0,112,2098,1,0,0,0,114,2112,1,0,0,0,116,2139,1,0,0,0,118,2148,1,0,0,0,
120,2254,1,0,0,0,122,2285,1,0,0,0,124,2295,1,0,0,0,126,2327,1,0,0,0,128,
2329,1,0,0,0,130,2334,1,0,0,0,132,2357,1,0,0,0,134,2399,1,0,0,0,136,2443,
1,0,0,0,138,2470,1,0,0,0,140,2472,1,0,0,0,142,2528,1,0,0,0,144,2623,1,0,
0,0,146,2625,1,0,0,0,148,2629,1,0,0,0,150,2633,1,0,0,0,152,2664,1,0,0,0,
154,2673,1,0,0,0,156,2675,1,0,0,0,158,2758,1,0,0,0,160,2760,1,0,0,0,162,
2762,1,0,0,0,164,2886,1,0,0,0,166,2888,1,0,0,0,168,2890,1,0,0,0,170,2898,
1,0,0,0,172,3011,1,0,0,0,174,3013,1,0,0,0,176,3017,1,0,0,0,178,3021,1,0,
0,0,180,3029,1,0,0,0,182,3037,1,0,0,0,184,3199,1,0,0,0,186,3229,1,0,0,0,
188,3302,1,0,0,0,190,3304,1,0,0,0,192,3316,1,0,0,0,194,3357,1,0,0,0,196,
3359,1,0,0,0,198,3390,1,0,0,0,200,3455,1,0,0,0,202,3517,1,0,0,0,204,3577,
1,0,0,0,206,3765,1,0,0,0,208,3767,1,0,0,0,210,3771,1,0,0,0,212,3775,1,0,
0,0,214,3788,1,0,0,0,216,3794,1,0,0,0,218,3881,1,0,0,0,220,3919,1,0,0,0,
222,4005,1,0,0,0,224,4007,1,0,0,0,226,4061,1,0,0,0,228,4201,1,0,0,0,230,
4211,1,0,0,0,232,4352,1,0,0,0,234,4354,1,0,0,0,236,4467,1,0,0,0,238,4526,
1,0,0,0,240,4528,1,0,0,0,242,4545,1,0,0,0,244,4595,1,0,0,0,246,4645,1,0,
0,0,248,4735,1,0,0,0,250,4803,1,0,0,0,252,4840,1,0,0,0,254,5017,1,0,0,0,
256,5041,1,0,0,0,258,5138,1,0,0,0,260,5141,1,0,0,0,262,5178,1,0,0,0,264,
5204,1,0,0,0,266,5209,1,0,0,0,268,5213,1,0,0,0,270,5228,1,0,0,0,272,5230,
1,0,0,0,274,5234,1,0,0,0,276,5238,1,0,0,0,278,5247,1,0,0,0,280,5269,1,0,
0,0,282,5293,1,0,0,0,284,5335,1,0,0,0,286,5365,1,0,0,0,288,5367,1,0,0,0,
290,5442,1,0,0,0,292,5444,1,0,0,0,294,5453,1,0,0,0,296,5487,1,0,0,0,298,
5490,1,0,0,0,300,5495,1,0,0,0,302,5499,1,0,0,0,304,5619,1,0,0,0,306,5621,
1,0,0,0,308,5797,1,0,0,0,310,5799,1,0,0,0,312,5801,1,0,0,0,314,5861,1,0,
0,0,316,5897,1,0,0,0,318,5936,1,0,0,0,320,5974,1,0,0,0,322,6023,1,0,0,0,
324,6061,1,0,0,0,326,6063,1,0,0,0,328,6066,1,0,0,0,330,6080,1,0,0,0,332,
6134,1,0,0,0,334,6136,1,0,0,0,336,6179,1,0,0,0,338,6207,1,0,0,0,340,6209,
1,0,0,0,342,6325,1,0,0,0,344,6374,1,0,0,0,346,6376,1,0,0,0,348,6398,1,0,
0,0,350,6432,1,0,0,0,352,6451,1,0,0,0,354,6453,1,0,0,0,356,6457,1,0,0,0,
358,6459,1,0,0,0,360,6463,1,0,0,0,362,6482,1,0,0,0,364,6528,1,0,0,0,366,
6775,1,0,0,0,368,6777,1,0,0,0,370,6787,1,0,0,0,372,6795,1,0,0,0,374,6803,
1,0,0,0,376,6894,1,0,0,0,378,6896,1,0,0,0,380,6898,1,0,0,0,382,6922,1,0,
0,0,384,6927,1,0,0,0,386,6930,1,0,0,0,388,6935,1,0,0,0,390,6942,1,0,0,0,
392,7115,1,0,0,0,394,7117,1,0,0,0,396,7136,1,0,0,0,398,7164,1,0,0,0,400,
7168,1,0,0,0,402,7172,1,0,0,0,404,7215,1,0,0,0,406,7257,1,0,0,0,408,7285,
1,0,0,0,410,7330,1,0,0,0,412,7332,1,0,0,0,414,7367,1,0,0,0,416,7369,1,0,
0,0,418,7375,1,0,0,0,420,7377,1,0,0,0,422,7567,1,0,0,0,424,7658,1,0,0,0,
426,7660,1,0,0,0,428,7698,1,0,0,0,430,7713,1,0,0,0,432,7742,1,0,0,0,434,
7781,1,0,0,0,436,7875,1,0,0,0,438,8004,1,0,0,0,440,8006,1,0,0,0,442,8076,
1,0,0,0,444,8106,1,0,0,0,446,8110,1,0,0,0,448,8112,1,0,0,0,450,8121,1,0,
0,0,452,8130,1,0,0,0,454,8154,1,0,0,0,456,8175,1,0,0,0,458,8177,1,0,0,0,
460,8179,1,0,0,0,462,8200,1,0,0,0,464,8202,1,0,0,0,466,8204,1,0,0,0,468,
8213,1,0,0,0,470,8358,1,0,0,0,472,8392,1,0,0,0,474,8394,1,0,0,0,476,8402,
1,0,0,0,478,8406,1,0,0,0,480,8410,1,0,0,0,482,8414,1,0,0,0,484,8429,1,0,
0,0,486,8433,1,0,0,0,488,8437,1,0,0,0,490,8441,1,0,0,0,492,8463,1,0,0,0,
494,8465,1,0,0,0,496,8471,1,0,0,0,498,8484,1,0,0,0,500,8504,1,0,0,0,502,
8506,1,0,0,0,504,8526,1,0,0,0,506,8567,1,0,0,0,508,8569,1,0,0,0,510,8571,
1,0,0,0,512,8575,1,0,0,0,514,8579,1,0,0,0,516,8583,1,0,0,0,518,8587,1,0,
0,0,520,8646,1,0,0,0,522,8752,1,0,0,0,524,8804,1,0,0,0,526,8806,1,0,0,0,
528,8813,1,0,0,0,530,8817,1,0,0,0,532,8845,1,0,0,0,534,8858,1,0,0,0,536,
8860,1,0,0,0,538,8864,1,0,0,0,540,8897,1,0,0,0,542,8900,1,0,0,0,544,8904,
1,0,0,0,546,8908,1,0,0,0,548,8912,1,0,0,0,550,9027,1,0,0,0,552,9029,1,0,
0,0,554,9039,1,0,0,0,556,9042,1,0,0,0,558,9057,1,0,0,0,560,9075,1,0,0,0,
562,9082,1,0,0,0,564,9087,1,0,0,0,566,9096,1,0,0,0,568,9099,1,0,0,0,570,
9120,1,0,0,0,572,9122,1,0,0,0,574,9125,1,0,0,0,576,9130,1,0,0,0,578,9152,
1,0,0,0,580,9177,1,0,0,0,582,9179,1,0,0,0,584,9187,1,0,0,0,586,9215,1,0,
0,0,588,9230,1,0,0,0,590,9271,1,0,0,0,592,9313,1,0,0,0,594,9333,1,0,0,0,
596,9348,1,0,0,0,598,9351,1,0,0,0,600,9353,1,0,0,0,602,9361,1,0,0,0,604,
9369,1,0,0,0,606,9415,1,0,0,0,608,9426,1,0,0,0,610,9428,1,0,0,0,612,9432,
1,0,0,0,614,9436,1,0,0,0,616,9440,1,0,0,0,618,9444,1,0,0,0,620,9453,1,0,
0,0,622,9455,1,0,0,0,624,9463,1,0,0,0,626,9481,1,0,0,0,628,9485,1,0,0,0,
630,9527,1,0,0,0,632,9552,1,0,0,0,634,9554,1,0,0,0,636,9600,1,0,0,0,638,
9614,1,0,0,0,640,9616,1,0,0,0,642,9649,1,0,0,0,644,9651,1,0,0,0,646,9686,
1,0,0,0,648,9688,1,0,0,0,650,9695,1,0,0,0,652,9699,1,0,0,0,654,9706,1,0,
0,0,656,9715,1,0,0,0,658,9720,1,0,0,0,660,9730,1,0,0,0,662,9738,1,0,0,0,
664,9746,1,0,0,0,666,9754,1,0,0,0,668,9764,1,0,0,0,670,9769,1,0,0,0,672,
9774,1,0,0,0,674,9782,1,0,0,0,676,9790,1,0,0,0,678,9797,1,0,0,0,680,9805,
1,0,0,0,682,9813,1,0,0,0,684,9818,1,0,0,0,686,9825,1,0,0,0,688,9834,1,0,
0,0,690,9843,1,0,0,0,692,9852,1,0,0,0,694,9860,1,0,0,0,696,9868,1,0,0,0,
698,9872,1,0,0,0,700,9879,1,0,0,0,702,9888,1,0,0,0,704,9895,1,0,0,0,706,
9902,1,0,0,0,708,9909,1,0,0,0,710,9916,1,0,0,0,712,9923,1,0,0,0,714,9925,
1,0,0,0,716,9935,1,0,0,0,718,9937,1,0,0,0,720,9941,1,0,0,0,722,9945,1,0,
0,0,724,9949,1,0,0,0,726,9958,1,0,0,0,728,9960,1,0,0,0,730,9964,1,0,0,0,
732,9968,1,0,0,0,734,9979,1,0,0,0,736,9984,1,0,0,0,738,9988,1,0,0,0,740,
9992,1,0,0,0,742,9995,1,0,0,0,744,9998,1,0,0,0,746,10002,1,0,0,0,748,10005,
1,0,0,0,750,10036,1,0,0,0,752,10038,1,0,0,0,754,10042,1,0,0,0,756,10046,
1,0,0,0,758,10051,1,0,0,0,760,10056,1,0,0,0,762,10067,1,0,0,0,764,10072,
1,0,0,0,766,10077,1,0,0,0,768,10084,1,0,0,0,770,10089,1,0,0,0,772,10094,
1,0,0,0,774,10099,1,0,0,0,776,10103,1,0,0,0,778,10108,1,0,0,0,780,10116,
1,0,0,0,782,10122,1,0,0,0,784,10126,1,0,0,0,786,10132,1,0,0,0,788,10136,
1,0,0,0,790,10141,1,0,0,0,792,10146,1,0,0,0,794,10150,1,0,0,0,796,10154,
1,0,0,0,798,10162,1,0,0,0,800,10166,1,0,0,0,802,10170,1,0,0,0,804,10174,
1,0,0,0,806,10178,1,0,0,0,808,10236,1,0,0,0,810,10238,1,0,0,0,812,10266,
1,0,0,0,814,10290,1,0,0,0,816,10319,1,0,0,0,818,10324,1,0,0,0,820,10328,
1,0,0,0,822,10334,1,0,0,0,824,10351,1,0,0,0,826,10358,1,0,0,0,828,10381,
1,0,0,0,830,10383,1,0,0,0,832,10411,1,0,0,0,834,10442,1,0,0,0,836,10448,
1,0,0,0,838,10479,1,0,0,0,840,10487,1,0,0,0,842,10506,1,0,0,0,844,10524,
1,0,0,0,846,10547,1,0,0,0,848,10570,1,0,0,0,850,10572,1,0,0,0,852,10580,
1,0,0,0,854,10586,1,0,0,0,856,10592,1,0,0,0,858,10601,1,0,0,0,860,10612,
1,0,0,0,862,10627,1,0,0,0,864,10636,1,0,0,0,866,10640,1,0,0,0,868,10648,
1,0,0,0,870,10654,1,0,0,0,872,10656,1,0,0,0,874,10678,1,0,0,0,876,10686,
1,0,0,0,878,10695,1,0,0,0,880,10703,1,0,0,0,882,10708,1,0,0,0,884,10714,
1,0,0,0,886,10728,1,0,0,0,888,10736,1,0,0,0,890,10742,1,0,0,0,892,10747,
1,0,0,0,894,10757,1,0,0,0,896,10784,1,0,0,0,898,10792,1,0,0,0,900,10796,
1,0,0,0,902,10800,1,0,0,0,904,10805,1,0,0,0,906,10812,1,0,0,0,908,10819,
1,0,0,0,910,10827,1,0,0,0,912,10835,1,0,0,0,914,10851,1,0,0,0,916,10881,
1,0,0,0,918,10887,1,0,0,0,920,10896,1,0,0,0,922,10917,1,0,0,0,924,10922,
1,0,0,0,926,10952,1,0,0,0,928,10957,1,0,0,0,930,10960,1,0,0,0,932,10967,
1,0,0,0,934,10981,1,0,0,0,936,10983,1,0,0,0,938,10991,1,0,0,0,940,10993,
1,0,0,0,942,10995,1,0,0,0,944,10997,1,0,0,0,946,10999,1,0,0,0,948,11001,
1,0,0,0,950,11003,1,0,0,0,952,11005,1,0,0,0,954,11019,1,0,0,0,956,11034,
1,0,0,0,958,11036,1,0,0,0,960,11038,1,0,0,0,962,11040,1,0,0,0,964,11042,
1,0,0,0,966,11056,1,0,0,0,968,11063,1,0,0,0,970,11070,1,0,0,0,972,11072,
1,0,0,0,974,11074,1,0,0,0,976,11081,1,0,0,0,978,11085,1,0,0,0,980,11093,
1,0,0,0,982,11120,1,0,0,0,984,11128,1,0,0,0,986,11130,1,0,0,0,988,11132,
1,0,0,0,990,11140,1,0,0,0,992,11178,1,0,0,0,994,11274,1,0,0,0,996,11283,
1,0,0,0,998,11295,1,0,0,0,1000,11311,1,0,0,0,1002,11326,1,0,0,0,1004,11328,
1,0,0,0,1006,11332,1,0,0,0,1008,11347,1,0,0,0,1010,11349,1,0,0,0,1012,11409,
1,0,0,0,1014,11426,1,0,0,0,1016,11428,1,0,0,0,1018,11432,1,0,0,0,1020,11447,
1,0,0,0,1022,11526,1,0,0,0,1024,11528,1,0,0,0,1026,11536,1,0,0,0,1028,11540,
1,0,0,0,1030,11578,1,0,0,0,1032,11612,1,0,0,0,1034,11626,1,0,0,0,1036,11628,
1,0,0,0,1038,11658,1,0,0,0,1040,11668,1,0,0,0,1042,11695,1,0,0,0,1044,11697,
1,0,0,0,1046,11702,1,0,0,0,1048,11708,1,0,0,0,1050,11717,1,0,0,0,1052,11726,
1,0,0,0,1054,11752,1,0,0,0,1056,11768,1,0,0,0,1058,11771,1,0,0,0,1060,11789,
1,0,0,0,1062,11792,1,0,0,0,1064,11796,1,0,0,0,1066,11801,1,0,0,0,1068,11808,
1,0,0,0,1070,11828,1,0,0,0,1072,11831,1,0,0,0,1074,11844,1,0,0,0,1076,11850,
1,0,0,0,1078,11853,1,0,0,0,1080,11859,1,0,0,0,1082,11861,1,0,0,0,1084,11863,
1,0,0,0,1086,11865,1,0,0,0,1088,11868,1,0,0,0,1090,11871,1,0,0,0,1092,11879,
1,0,0,0,1094,11882,1,0,0,0,1096,11885,1,0,0,0,1098,11893,1,0,0,0,1100,11911,
1,0,0,0,1102,11984,1,0,0,0,1104,11998,1,0,0,0,1106,12000,1,0,0,0,1108,12016,
1,0,0,0,1110,12023,1,0,0,0,1112,12032,1,0,0,0,1114,12041,1,0,0,0,1116,12047,
1,0,0,0,1118,12076,1,0,0,0,1120,12103,1,0,0,0,1122,12105,1,0,0,0,1124,12120,
1,0,0,0,1126,12130,1,0,0,0,1128,12132,1,0,0,0,1130,12136,1,0,0,0,1132,12138,
1,0,0,0,1134,12155,1,0,0,0,1136,12167,1,0,0,0,1138,12177,1,0,0,0,1140,12182,
1,0,0,0,1142,12184,1,0,0,0,1144,12186,1,0,0,0,1146,12202,1,0,0,0,1148,12215,
1,0,0,0,1150,12218,1,0,0,0,1152,12280,1,0,0,0,1154,12282,1,0,0,0,1156,12293,
1,0,0,0,1158,12313,1,0,0,0,1160,12315,1,0,0,0,1162,12326,1,0,0,0,1164,12328,
1,0,0,0,1166,12333,1,0,0,0,1168,12342,1,0,0,0,1170,12348,1,0,0,0,1172,12373,
1,0,0,0,1174,12376,1,0,0,0,1176,12380,1,0,0,0,1178,12457,1,0,0,0,1180,12459,
1,0,0,0,1182,12465,1,0,0,0,1184,12467,1,0,0,0,1186,12496,1,0,0,0,1188,12498,
1,0,0,0,1190,12501,1,0,0,0,1192,12507,1,0,0,0,1194,12516,1,0,0,0,1196,12526,
1,0,0,0,1198,12528,1,0,0,0,1200,12554,1,0,0,0,1202,12556,1,0,0,0,1204,12592,
1,0,0,0,1206,1208,3,2,1,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,
1,0,0,0,1209,1210,5,0,0,1,1210,1,1,0,0,0,1211,1216,3,4,2,0,1212,1213,5,895,
0,0,1213,1215,3,4,2,0,1214,1212,1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,0,
0,0,1216,1217,1,0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1219,1221,5,895,
0,0,1220,1219,1,0,0,0,1220,1221,1,0,0,0,1221,3,1,0,0,0,1222,1229,3,6,3,0,
1223,1229,3,8,4,0,1224,1229,3,808,404,0,1225,1229,3,726,363,0,1226,1229,
3,750,375,0,1227,1229,3,38,19,0,1228,1222,1,0,0,0,1228,1223,1,0,0,0,1228,
1224,1,0,0,0,1228,1225,1,0,0,0,1228,1226,1,0,0,0,1228,1227,1,0,0,0,1229,
5,1,0,0,0,1230,1235,3,134,67,0,1231,1235,3,332,166,0,1232,1235,3,646,323,
0,1233,1235,3,716,358,0,1234,1230,1,0,0,0,1234,1231,1,0,0,0,1234,1232,1,
0,0,0,1234,1233,1,0,0,0,1235,7,1,0,0,0,1236,1243,3,1048,524,0,1237,1243,
3,10,5,0,1238,1243,3,12,6,0,1239,1243,3,30,15,0,1240,1243,3,34,17,0,1241,
1243,3,20,10,0,1242,1236,1,0,0,0,1242,1237,1,0,0,0,1242,1238,1,0,0,0,1242,
1239,1,0,0,0,1242,1240,1,0,0,0,1242,1241,1,0,0,0,1243,9,1,0,0,0,1244,1246,
5,334,0,0,1245,1247,5,482,0,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,1248,
1,0,0,0,1248,1249,5,341,0,0,1249,1251,3,982,491,0,1250,1252,3,400,200,0,
1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1255,1,0,0,0,1253,1256,3,36,18,
0,1254,1256,3,1048,524,0,1255,1253,1,0,0,0,1255,1254,1,0,0,0,1256,11,1,0,
0,0,1257,1259,5,334,0,0,1258,1260,5,482,0,0,1259,1258,1,0,0,0,1259,1260,
1,0,0,0,1260,1261,1,0,0,0,1261,1262,5,17,0,0,1262,1287,3,14,7,0,1263,1265,
5,334,0,0,1264,1266,5,482,0,0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,1266,1267,
1,0,0,0,1267,1276,7,0,0,0,1268,1269,5,803,0,0,1269,1270,3,1178,589,0,1270,
1272,5,723,0,0,1271,1273,3,14,7,0,1272,1271,1,0,0,0,1273,1274,1,0,0,0,1274,
1272,1,0,0,0,1274,1275,1,0,0,0,1275,1277,1,0,0,0,1276,1268,1,0,0,0,1277,
1278,1,0,0,0,1278,1276,1,0,0,0,1278,1279,1,0,0,0,1279,1282,1,0,0,0,1280,
1281,5,204,0,0,1281,1283,3,14,7,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,
1284,1,0,0,0,1284,1285,3,1176,588,0,1285,1287,1,0,0,0,1286,1257,1,0,0,0,
1286,1263,1,0,0,0,1287,13,1,0,0,0,1288,1289,5,341,0,0,1289,1294,3,982,491,
0,1290,1291,5,888,0,0,1291,1292,3,978,489,0,1292,1293,5,889,0,0,1293,1295,
1,0,0,0,1294,1290,1,0,0,0,1294,1295,1,0,0,0,1295,1297,1,0,0,0,1296,1298,
3,16,8,0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,1298,15,1,0,0,0,1299,1300,5,
790,0,0,1300,1301,5,888,0,0,1301,1306,3,18,9,0,1302,1303,5,894,0,0,1303,
1305,3,18,9,0,1304,1302,1,0,0,0,1305,1308,1,0,0,0,1306,1304,1,0,0,0,1306,
1307,1,0,0,0,1307,1309,1,0,0,0,1308,1306,1,0,0,0,1309,1310,5,889,0,0,1310,
17,1,0,0,0,1311,1315,3,976,488,0,1312,1315,5,174,0,0,1313,1315,5,439,0,0,
1314,1311,1,0,0,0,1314,1312,1,0,0,0,1314,1313,1,0,0,0,1315,19,1,0,0,0,1316,
1317,5,400,0,0,1317,1318,5,341,0,0,1318,1320,3,982,491,0,1319,1321,3,1078,
539,0,1320,1319,1,0,0,0,1320,1321,1,0,0,0,1321,1322,1,0,0,0,1322,1323,5,
785,0,0,1323,1324,3,1098,549,0,1324,1325,5,465,0,0,1325,1326,3,1170,585,
0,1326,1327,3,22,11,0,1327,21,1,0,0,0,1328,1330,3,24,12,0,1329,1328,1,0,
0,0,1330,1331,1,0,0,0,1331,1329,1,0,0,0,1331,1332,1,0,0,0,1332,23,1,0,0,
0,1333,1334,5,803,0,0,1334,1337,5,387,0,0,1335,1336,5,29,0,0,1336,1338,3,
1170,585,0,1337,1335,1,0,0,0,1337,1338,1,0,0,0,1338,1339,1,0,0,0,1339,1340,
5,723,0,0,1340,1342,3,26,13,0,1341,1333,1,0,0,0,1342,1343,1,0,0,0,1343,1341,
1,0,0,0,1343,1344,1,0,0,0,1344,1355,1,0,0,0,1345,1346,5,803,0,0,1346,1347,
5,429,0,0,1347,1350,5,387,0,0,1348,1349,5,29,0,0,1349,1351,3,1170,585,0,
1350,1348,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1353,5,723,0,
0,1353,1355,3,28,14,0,1354,1341,1,0,0,0,1354,1345,1,0,0,0,1355,25,1,0,0,
0,1356,1357,5,772,0,0,1357,1358,5,640,0,0,1358,1359,3,976,488,0,1359,1360,
5,878,0,0,1360,1368,3,992,496,0,1361,1362,5,894,0,0,1362,1363,3,976,488,
0,1363,1364,5,878,0,0,1364,1365,3,992,496,0,1365,1367,1,0,0,0,1366,1361,
1,0,0,0,1367,1370,1,0,0,0,1368,1366,1,0,0,0,1368,1369,1,0,0,0,1369,1373,
1,0,0,0,1370,1368,1,0,0,0,1371,1373,5,185,0,0,1372,1356,1,0,0,0,1372,1371,
1,0,0,0,1373,27,1,0,0,0,1374,1379,5,334,0,0,1375,1376,5,888,0,0,1376,1377,
3,978,489,0,1377,1378,5,889,0,0,1378,1380,1,0,0,0,1379,1375,1,0,0,0,1379,
1380,1,0,0,0,1380,1381,1,0,0,0,1381,1382,5,790,0,0,1382,1383,5,888,0,0,1383,
1384,3,988,494,0,1384,1385,5,889,0,0,1385,29,1,0,0,0,1386,1387,5,772,0,0,
1387,1389,3,982,491,0,1388,1390,3,1078,539,0,1389,1388,1,0,0,0,1389,1390,
1,0,0,0,1390,1391,1,0,0,0,1391,1392,5,640,0,0,1392,1393,3,976,488,0,1393,
1394,5,878,0,0,1394,1402,3,992,496,0,1395,1396,5,894,0,0,1396,1397,3,976,
488,0,1397,1398,5,878,0,0,1398,1399,3,992,496,0,1399,1401,1,0,0,0,1400,1395,
1,0,0,0,1401,1404,1,0,0,0,1402,1400,1,0,0,0,1402,1403,1,0,0,0,1403,1407,
1,0,0,0,1404,1402,1,0,0,0,1405,1406,5,276,0,0,1406,1408,3,1096,548,0,1407,
1405,1,0,0,0,1407,1408,1,0,0,0,1408,1411,1,0,0,0,1409,1410,5,804,0,0,1410,
1412,3,1170,585,0,1411,1409,1,0,0,0,1411,1412,1,0,0,0,1412,31,1,0,0,0,1413,
1415,3,982,491,0,1414,1416,3,1078,539,0,1415,1414,1,0,0,0,1415,1416,1,0,
0,0,1416,1424,1,0,0,0,1417,1418,5,888,0,0,1418,1419,3,1176,588,0,1419,1421,
5,889,0,0,1420,1422,3,1078,539,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,
1424,1,0,0,0,1423,1413,1,0,0,0,1423,1417,1,0,0,0,1424,33,1,0,0,0,1425,1426,
5,185,0,0,1426,1427,5,276,0,0,1427,1429,3,982,491,0,1428,1430,3,1078,539,
0,1429,1428,1,0,0,0,1429,1430,1,0,0,0,1430,1437,1,0,0,0,1431,1432,5,785,
0,0,1432,1435,3,32,16,0,1433,1434,5,894,0,0,1434,1436,3,32,16,0,1435,1433,
1,0,0,0,1435,1436,1,0,0,0,1436,1438,1,0,0,0,1437,1431,1,0,0,0,1437,1438,
1,0,0,0,1438,1441,1,0,0,0,1439,1440,5,804,0,0,1440,1442,3,1170,585,0,1441,
1439,1,0,0,0,1441,1442,1,0,0,0,1442,35,1,0,0,0,1443,1444,5,790,0,0,1444,
1445,5,888,0,0,1445,1446,3,988,494,0,1446,1452,5,889,0,0,1447,1448,5,894,
0,0,1448,1449,5,888,0,0,1449,1450,3,988,494,0,1450,1451,5,889,0,0,1451,1453,
1,0,0,0,1452,1447,1,0,0,0,1452,1453,1,0,0,0,1453,37,1,0,0,0,1454,1480,3,
42,21,0,1455,1480,3,56,28,0,1456,1480,3,58,29,0,1457,1480,3,62,31,0,1458,
1480,3,64,32,0,1459,1480,3,66,33,0,1460,1480,3,68,34,0,1461,1480,3,72,36,
0,1462,1480,3,74,37,0,1463,1480,3,76,38,0,1464,1480,3,94,47,0,1465,1480,
3,98,49,0,1466,1480,3,104,52,0,1467,1480,3,114,57,0,1468,1480,3,116,58,0,
1469,1480,3,118,59,0,1470,1480,3,120,60,0,1471,1480,3,122,61,0,1472,1480,
3,124,62,0,1473,1480,3,126,63,0,1474,1480,3,128,64,0,1475,1480,3,130,65,
0,1476,1480,3,132,66,0,1477,1480,3,622,311,0,1478,1480,3,40,20,0,1479,1454,
1,0,0,0,1479,1455,1,0,0,0,1479,1456,1,0,0,0,1479,1457,1,0,0,0,1479,1458,
1,0,0,0,1479,1459,1,0,0,0,1479,1460,1,0,0,0,1479,1461,1,0,0,0,1479,1462,
1,0,0,0,1479,1463,1,0,0,0,1479,1464,1,0,0,0,1479,1465,1,0,0,0,1479,1466,
1,0,0,0,1479,1467,1,0,0,0,1479,1468,1,0,0,0,1479,1469,1,0,0,0,1479,1470,
1,0,0,0,1479,1471,1,0,0,0,1479,1472,1,0,0,0,1479,1473,1,0,0,0,1479,1474,
1,0,0,0,1479,1475,1,0,0,0,1479,1476,1,0,0,0,1479,1477,1,0,0,0,1479,1478,
1,0,0,0,1480,39,1,0,0,0,1481,1483,5,82,0,0,1482,1484,7,1,0,0,1483,1482,1,
0,0,0,1483,1484,1,0,0,0,1484,1487,1,0,0,0,1485,1486,5,417,0,0,1486,1488,
3,956,478,0,1487,1485,1,0,0,0,1487,1488,1,0,0,0,1488,1496,1,0,0,0,1489,1490,
5,675,0,0,1490,1493,5,750,0,0,1491,1492,5,417,0,0,1492,1494,3,956,478,0,
1493,1491,1,0,0,0,1493,1494,1,0,0,0,1494,1496,1,0,0,0,1495,1481,1,0,0,0,
1495,1489,1,0,0,0,1496,41,1,0,0,0,1497,1498,5,148,0,0,1498,1499,5,341,0,
0,1499,1500,3,982,491,0,1500,1505,5,276,0,0,1501,1506,3,108,54,0,1502,1506,
3,106,53,0,1503,1506,3,110,55,0,1504,1506,3,44,22,0,1505,1501,1,0,0,0,1505,
1502,1,0,0,0,1505,1503,1,0,0,0,1505,1504,1,0,0,0,1506,1508,1,0,0,0,1507,
1509,3,46,23,0,1508,1507,1,0,0,0,1508,1509,1,0,0,0,1509,1511,1,0,0,0,1510,
1512,3,974,487,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1514,1,0,0,0,1513,
1515,3,48,24,0,1514,1513,1,0,0,0,1514,1515,1,0,0,0,1515,1519,1,0,0,0,1516,
1518,3,472,236,0,1517,1516,1,0,0,0,1518,1521,1,0,0,0,1519,1517,1,0,0,0,1519,
1520,1,0,0,0,1520,1525,1,0,0,0,1521,1519,1,0,0,0,1522,1523,5,788,0,0,1523,
1524,5,878,0,0,1524,1526,7,2,0,0,1525,1522,1,0,0,0,1525,1526,1,0,0,0,1526,
1563,1,0,0,0,1527,1528,5,148,0,0,1528,1529,5,341,0,0,1529,1534,3,982,491,
0,1530,1531,5,888,0,0,1531,1532,3,978,489,0,1532,1533,5,889,0,0,1533,1535,
1,0,0,0,1534,1530,1,0,0,0,1534,1535,1,0,0,0,1535,1536,1,0,0,0,1536,1537,
5,276,0,0,1537,1538,5,888,0,0,1538,1539,5,633,0,0,1539,1540,3,1068,534,0,
1540,1544,5,276,0,0,1541,1545,3,108,54,0,1542,1545,3,106,53,0,1543,1545,
3,110,55,0,1544,1541,1,0,0,0,1544,1542,1,0,0,0,1544,1543,1,0,0,0,1545,1546,
1,0,0,0,1546,1548,5,889,0,0,1547,1549,3,46,23,0,1548,1547,1,0,0,0,1548,1549,
1,0,0,0,1549,1551,1,0,0,0,1550,1552,3,974,487,0,1551,1550,1,0,0,0,1551,1552,
1,0,0,0,1552,1554,1,0,0,0,1553,1555,3,48,24,0,1554,1553,1,0,0,0,1554,1555,
1,0,0,0,1555,1559,1,0,0,0,1556,1558,3,472,236,0,1557,1556,1,0,0,0,1558,1561,
1,0,0,0,1559,1557,1,0,0,0,1559,1560,1,0,0,0,1560,1563,1,0,0,0,1561,1559,
1,0,0,0,1562,1497,1,0,0,0,1562,1527,1,0,0,0,1563,43,1,0,0,0,1564,1565,7,
3,0,0,1565,45,1,0,0,0,1566,1567,5,262,0,0,1567,1568,5,878,0,0,1568,1569,
5,888,0,0,1569,1574,3,950,475,0,1570,1571,5,894,0,0,1571,1573,3,950,475,
0,1572,1570,1,0,0,0,1573,1576,1,0,0,0,1574,1572,1,0,0,0,1574,1575,1,0,0,
0,1575,1577,1,0,0,0,1576,1574,1,0,0,0,1577,1578,5,889,0,0,1578,47,1,0,0,
0,1579,1580,5,264,0,0,1580,1581,5,878,0,0,1581,1584,5,888,0,0,1582,1585,
3,50,25,0,1583,1585,3,52,26,0,1584,1582,1,0,0,0,1584,1583,1,0,0,0,1585,1586,
1,0,0,0,1586,1587,5,889,0,0,1587,49,1,0,0,0,1588,1589,5,274,0,0,1589,1590,
5,878,0,0,1590,1591,3,950,475,0,1591,51,1,0,0,0,1592,1593,5,764,0,0,1593,
1594,5,878,0,0,1594,1598,3,378,189,0,1595,1597,3,470,235,0,1596,1595,1,0,
0,0,1597,1600,1,0,0,0,1598,1596,1,0,0,0,1598,1599,1,0,0,0,1599,53,1,0,0,
0,1600,1598,1,0,0,0,1601,1602,5,673,0,0,1602,1603,5,878,0,0,1603,1604,5,
888,0,0,1604,1605,5,274,0,0,1605,1606,5,878,0,0,1606,1618,3,950,475,0,1607,
1608,5,764,0,0,1608,1609,5,878,0,0,1609,1611,3,378,189,0,1610,1612,3,470,
235,0,1611,1610,1,0,0,0,1612,1613,1,0,0,0,1613,1611,1,0,0,0,1613,1614,1,
0,0,0,1614,1615,1,0,0,0,1615,1616,5,889,0,0,1616,1618,1,0,0,0,1617,1601,
1,0,0,0,1617,1607,1,0,0,0,1618,55,1,0,0,0,1619,1620,5,148,0,0,1620,1625,
5,341,0,0,1621,1626,3,108,54,0,1622,1626,3,106,53,0,1623,1626,3,110,55,0,
1624,1626,3,44,22,0,1625,1621,1,0,0,0,1625,1622,1,0,0,0,1625,1623,1,0,0,
0,1625,1624,1,0,0,0,1626,1627,1,0,0,0,1627,1633,5,276,0,0,1628,1634,3,982,
491,0,1629,1630,5,888,0,0,1630,1631,3,1048,524,0,1631,1632,5,889,0,0,1632,
1634,1,0,0,0,1633,1628,1,0,0,0,1633,1629,1,0,0,0,1634,1636,1,0,0,0,1635,
1637,3,1128,564,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1639,1,0,0,0,
1638,1640,3,48,24,0,1639,1638,1,0,0,0,1639,1640,1,0,0,0,1640,1642,1,0,0,
0,1641,1643,3,472,236,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1647,1,
0,0,0,1644,1645,5,788,0,0,1645,1646,5,878,0,0,1646,1648,5,583,0,0,1647,1644,
1,0,0,0,1647,1648,1,0,0,0,1648,1650,1,0,0,0,1649,1651,5,306,0,0,1650,1649,
1,0,0,0,1650,1651,1,0,0,0,1651,57,1,0,0,0,1652,1654,5,134,0,0,1653,1655,
3,742,371,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,0,0,0,1656,1657,
5,465,0,0,1657,1658,3,642,321,0,1658,1660,3,982,491,0,1659,1661,3,60,30,
0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1663,5,342,
0,0,1663,1664,3,950,475,0,1664,1676,1,0,0,0,1665,1667,5,134,0,0,1666,1668,
3,742,371,0,1667,1666,1,0,0,0,1667,1668,1,0,0,0,1668,1669,1,0,0,0,1669,1670,
5,465,0,0,1670,1671,5,132,0,0,1671,1672,3,1038,519,0,1672,1673,5,342,0,0,
1673,1674,3,950,475,0,1674,1676,1,0,0,0,1675,1652,1,0,0,0,1675,1665,1,0,
0,0,1676,59,1,0,0,0,1677,1679,5,888,0,0,1678,1680,3,192,96,0,1679,1678,1,
0,0,0,1679,1680,1,0,0,0,1680,1681,1,0,0,0,1681,1682,5,889,0,0,1682,61,1,
0,0,0,1683,1685,5,135,0,0,1684,1686,5,807,0,0,1685,1684,1,0,0,0,1685,1686,
1,0,0,0,1686,63,1,0,0,0,1687,1688,5,234,0,0,1688,1692,5,318,0,0,1689,1693,
3,950,475,0,1690,1693,3,956,478,0,1691,1693,5,862,0,0,1692,1689,1,0,0,0,
1692,1690,1,0,0,0,1692,1691,1,0,0,0,1693,1706,1,0,0,0,1694,1695,5,785,0,
0,1695,1696,5,888,0,0,1696,1701,3,956,478,0,1697,1698,5,894,0,0,1698,1700,
3,956,478,0,1699,1697,1,0,0,0,1700,1703,1,0,0,0,1701,1699,1,0,0,0,1701,1702,
1,0,0,0,1702,1704,1,0,0,0,1703,1701,1,0,0,0,1704,1705,5,889,0,0,1705,1707,
1,0,0,0,1706,1694,1,0,0,0,1706,1707,1,0,0,0,1707,1712,1,0,0,0,1708,1709,
5,234,0,0,1709,1710,5,318,0,0,1710,1712,5,868,0,0,1711,1687,1,0,0,0,1711,
1708,1,0,0,0,1712,65,1,0,0,0,1713,1714,5,234,0,0,1714,1715,5,718,0,0,1715,
1716,3,982,491,0,1716,67,1,0,0,0,1717,1720,5,238,0,0,1718,1719,5,785,0,0,
1719,1721,7,4,0,0,1720,1718,1,0,0,0,1720,1721,1,0,0,0,1721,1722,1,0,0,0,
1722,1723,3,4,2,0,1723,69,1,0,0,0,1724,1725,5,486,0,0,1725,1726,5,878,0,
0,1726,1727,3,986,493,0,1727,71,1,0,0,0,1728,1732,5,291,0,0,1729,1733,3,
110,55,0,1730,1733,3,106,53,0,1731,1733,3,108,54,0,1732,1729,1,0,0,0,1732,
1730,1,0,0,0,1732,1731,1,0,0,0,1733,1734,1,0,0,0,1734,1736,5,867,0,0,1735,
1737,3,70,35,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,1739,1,0,0,0,1738,
1740,3,974,487,0,1739,1738,1,0,0,0,1739,1740,1,0,0,0,1740,73,1,0,0,0,1741,
1742,5,295,0,0,1742,1768,5,484,0,0,1743,1756,5,465,0,0,1744,1745,3,642,321,
0,1745,1746,3,982,491,0,1746,1757,1,0,0,0,1747,1748,5,17,0,0,1748,1749,3,
644,322,0,1749,1754,5,325,0,0,1750,1751,5,164,0,0,1751,1755,3,956,478,0,
1752,1753,5,623,0,0,1753,1755,3,932,466,0,1754,1750,1,0,0,0,1754,1752,1,
0,0,0,1755,1757,1,0,0,0,1756,1744,1,0,0,0,1756,1747,1,0,0,0,1757,1769,1,
0,0,0,1758,1759,5,465,0,0,1759,1760,5,280,0,0,1760,1761,3,644,322,0,1761,
1766,5,325,0,0,1762,1763,5,164,0,0,1763,1767,3,956,478,0,1764,1765,5,623,
0,0,1765,1767,3,932,466,0,1766,1762,1,0,0,0,1766,1764,1,0,0,0,1767,1769,
1,0,0,0,1768,1743,1,0,0,0,1768,1758,1,0,0,0,1769,1770,1,0,0,0,1770,1771,
5,745,0,0,1771,1772,5,587,0,0,1772,1776,3,956,478,0,1773,1774,7,5,0,0,1774,
1775,5,158,0,0,1775,1777,5,296,0,0,1776,1773,1,0,0,0,1776,1777,1,0,0,0,1777,
75,1,0,0,0,1778,1874,5,295,0,0,1779,1785,3,78,39,0,1780,1782,5,17,0,0,1781,
1783,5,526,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1785,1,0,0,0,1784,
1779,1,0,0,0,1784,1780,1,0,0,0,1785,1786,1,0,0,0,1786,1787,5,465,0,0,1787,
1875,5,6,0,0,1788,1794,3,82,41,0,1789,1791,5,17,0,0,1790,1792,5,526,0,0,
1791,1790,1,0,0,0,1791,1792,1,0,0,0,1792,1794,1,0,0,0,1793,1788,1,0,0,0,
1793,1789,1,0,0,0,1794,1795,1,0,0,0,1795,1802,5,465,0,0,1796,1803,5,777,
0,0,1797,1798,5,569,0,0,1798,1803,5,411,0,0,1799,1803,5,796,0,0,1800,1803,
5,164,0,0,1801,1803,5,337,0,0,1802,1796,1,0,0,0,1802,1797,1,0,0,0,1802,1799,
1,0,0,0,1802,1800,1,0,0,0,1802,1801,1,0,0,0,1803,1804,1,0,0,0,1804,1875,
3,982,491,0,1805,1811,3,86,43,0,1806,1808,5,17,0,0,1807,1809,5,526,0,0,1808,
1807,1,0,0,0,1808,1809,1,0,0,0,1809,1811,1,0,0,0,1810,1805,1,0,0,0,1810,
1806,1,0,0,0,1811,1812,1,0,0,0,1812,1820,5,465,0,0,1813,1814,5,623,0,0,1814,
1821,3,932,466,0,1815,1816,5,17,0,0,1816,1817,5,624,0,0,1817,1818,5,325,
0,0,1818,1819,5,164,0,0,1819,1821,3,956,478,0,1820,1813,1,0,0,0,1820,1815,
1,0,0,0,1821,1875,1,0,0,0,1822,1828,3,86,43,0,1823,1825,5,17,0,0,1824,1826,
5,526,0,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1828,1,0,0,0,1827,1822,
1,0,0,0,1827,1823,1,0,0,0,1828,1829,1,0,0,0,1829,1830,5,465,0,0,1830,1831,
5,280,0,0,1831,1832,5,624,0,0,1832,1833,5,325,0,0,1833,1834,5,164,0,0,1834,
1875,3,956,478,0,1835,1841,3,90,45,0,1836,1838,5,17,0,0,1837,1839,5,526,
0,0,1838,1837,1,0,0,0,1838,1839,1,0,0,0,1839,1841,1,0,0,0,1840,1835,1,0,
0,0,1840,1836,1,0,0,0,1841,1842,1,0,0,0,1842,1855,5,465,0,0,1843,1844,3,
934,467,0,1844,1845,3,982,491,0,1845,1856,1,0,0,0,1846,1847,5,17,0,0,1847,
1848,3,644,322,0,1848,1853,5,325,0,0,1849,1850,5,164,0,0,1850,1854,3,956,
478,0,1851,1852,5,623,0,0,1852,1854,3,932,466,0,1853,1849,1,0,0,0,1853,1851,
1,0,0,0,1854,1856,1,0,0,0,1855,1843,1,0,0,0,1855,1846,1,0,0,0,1856,1875,
1,0,0,0,1857,1863,3,90,45,0,1858,1860,5,17,0,0,1859,1861,5,526,0,0,1860,
1859,1,0,0,0,1860,1861,1,0,0,0,1861,1863,1,0,0,0,1862,1857,1,0,0,0,1862,
1858,1,0,0,0,1863,1864,1,0,0,0,1864,1865,5,465,0,0,1865,1866,5,280,0,0,1866,
1867,3,644,322,0,1867,1872,5,325,0,0,1868,1869,5,164,0,0,1869,1873,3,956,
478,0,1870,1871,5,623,0,0,1871,1873,3,932,466,0,1872,1868,1,0,0,0,1872,1870,
1,0,0,0,1873,1875,1,0,0,0,1874,1784,1,0,0,0,1874,1793,1,0,0,0,1874,1810,
1,0,0,0,1874,1827,1,0,0,0,1874,1840,1,0,0,0,1874,1862,1,0,0,0,1875,1876,
1,0,0,0,1876,1878,5,745,0,0,1877,1879,5,587,0,0,1878,1877,1,0,0,0,1878,1879,
1,0,0,0,1879,1880,1,0,0,0,1880,1884,3,956,478,0,1881,1882,5,805,0,0,1882,
1883,5,295,0,0,1883,1885,5,471,0,0,1884,1881,1,0,0,0,1884,1885,1,0,0,0,1885,
77,1,0,0,0,1886,1891,3,80,40,0,1887,1888,5,894,0,0,1888,1890,3,80,40,0,1889,
1887,1,0,0,0,1890,1893,1,0,0,0,1891,1889,1,0,0,0,1891,1892,1,0,0,0,1892,
79,1,0,0,0,1893,1891,1,0,0,0,1894,1907,5,151,0,0,1895,1908,5,6,0,0,1896,
1897,5,163,0,0,1897,1898,5,233,0,0,1898,1908,5,372,0,0,1899,1908,5,164,0,
0,1900,1908,5,337,0,0,1901,1902,5,419,0,0,1902,1908,5,517,0,0,1903,1908,
5,587,0,0,1904,1908,5,642,0,0,1905,1908,5,777,0,0,1906,1908,5,796,0,0,1907,
1895,1,0,0,0,1907,1896,1,0,0,0,1907,1899,1,0,0,0,1907,1900,1,0,0,0,1907,
1901,1,0,0,0,1907,1903,1,0,0,0,1907,1904,1,0,0,0,1907,1905,1,0,0,0,1907,
1906,1,0,0,0,1908,1939,1,0,0,0,1909,1910,5,41,0,0,1910,1911,5,384,0,0,1911,
1924,5,517,0,0,1912,1913,5,41,0,0,1913,1914,5,593,0,0,1914,1915,5,5,0,0,
1915,1924,5,517,0,0,1916,1917,5,41,0,0,1917,1918,5,636,0,0,1918,1924,5,517,
0,0,1919,1920,5,41,0,0,1920,1924,5,715,0,0,1921,1922,5,45,0,0,1922,1924,
5,517,0,0,1923,1909,1,0,0,0,1923,1912,1,0,0,0,1923,1916,1,0,0,0,1923,1919,
1,0,0,0,1923,1921,1,0,0,0,1924,1939,1,0,0,0,1925,1926,5,234,0,0,1926,1937,
5,718,0,0,1927,1928,5,322,0,0,1928,1937,5,642,0,0,1929,1930,5,382,0,0,1930,
1937,5,296,0,0,1931,1932,5,411,0,0,1932,1937,7,6,0,0,1933,1934,5,481,0,0,
1934,1935,5,642,0,0,1935,1937,5,575,0,0,1936,1925,1,0,0,0,1936,1927,1,0,
0,0,1936,1929,1,0,0,0,1936,1931,1,0,0,0,1936,1933,1,0,0,0,1937,1939,1,0,
0,0,1938,1894,1,0,0,0,1938,1923,1,0,0,0,1938,1936,1,0,0,0,1939,81,1,0,0,
0,1940,1945,3,84,42,0,1941,1942,5,894,0,0,1942,1944,3,84,42,0,1943,1941,
1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,83,1,
0,0,0,1947,1945,1,0,0,0,1948,1958,5,411,0,0,1949,1958,5,410,0,0,1950,1958,
5,775,0,0,1951,1958,5,469,0,0,1952,1953,5,151,0,0,1953,1958,5,623,0,0,1954,
1955,5,324,0,0,1955,1958,5,526,0,0,1956,1958,5,783,0,0,1957,1948,1,0,0,0,
1957,1949,1,0,0,0,1957,1950,1,0,0,0,1957,1951,1,0,0,0,1957,1952,1,0,0,0,
1957,1954,1,0,0,0,1957,1956,1,0,0,0,1958,85,1,0,0,0,1959,1964,3,88,44,0,
1960,1961,5,894,0,0,1961,1963,3,88,44,0,1962,1960,1,0,0,0,1963,1966,1,0,
0,0,1964,1962,1,0,0,0,1964,1965,1,0,0,0,1965,87,1,0,0,0,1966,1964,1,0,0,
0,1967,2000,5,410,0,0,1968,2000,5,411,0,0,1969,2000,5,775,0,0,1970,1994,
5,151,0,0,1971,1995,5,708,0,0,1972,1973,5,240,0,0,1973,1995,5,708,0,0,1974,
1995,5,793,0,0,1975,1976,5,391,0,0,1976,1995,5,793,0,0,1977,1978,5,384,0,
0,1978,1995,5,517,0,0,1979,1980,5,593,0,0,1980,1981,5,5,0,0,1981,1995,5,
517,0,0,1982,1983,5,636,0,0,1983,1995,5,517,0,0,1984,1995,5,715,0,0,1985,
1995,5,634,0,0,1986,1995,5,278,0,0,1987,1995,5,527,0,0,1988,1989,5,261,0,
0,1989,1995,5,272,0,0,1990,1995,5,670,0,0,1991,1995,5,512,0,0,1992,1995,
5,690,0,0,1993,1995,5,718,0,0,1994,1971,1,0,0,0,1994,1972,1,0,0,0,1994,1974,
1,0,0,0,1994,1975,1,0,0,0,1994,1977,1,0,0,0,1994,1979,1,0,0,0,1994,1982,
1,0,0,0,1994,1984,1,0,0,0,1994,1985,1,0,0,0,1994,1986,1,0,0,0,1994,1987,
1,0,0,0,1994,1988,1,0,0,0,1994,1990,1,0,0,0,1994,1991,1,0,0,0,1994,1992,
1,0,0,0,1994,1993,1,0,0,0,1995,2000,1,0,0,0,1996,1997,5,10,0,0,1997,1998,
5,627,0,0,1998,2000,5,470,0,0,1999,1967,1,0,0,0,1999,1968,1,0,0,0,1999,1969,
1,0,0,0,1999,1970,1,0,0,0,1999,1996,1,0,0,0,2000,89,1,0,0,0,2001,2006,3,
92,46,0,2002,2003,5,894,0,0,2003,2005,3,92,46,0,2004,2002,1,0,0,0,2005,2008,
1,0,0,0,2006,2004,1,0,0,0,2006,2007,1,0,0,0,2007,91,1,0,0,0,2008,2006,1,
0,0,0,2009,2025,5,633,0,0,2010,2025,5,334,0,0,2011,2025,5,772,0,0,2012,2025,
5,185,0,0,2013,2025,5,760,0,0,2014,2025,5,549,0,0,2015,2025,5,775,0,0,2016,
2019,5,544,0,0,2017,2018,5,894,0,0,2018,2020,5,808,0,0,2019,2017,1,0,0,0,
2019,2020,1,0,0,0,2020,2025,1,0,0,0,2021,2025,5,411,0,0,2022,2025,5,469,
0,0,2023,2025,5,41,0,0,2024,2009,1,0,0,0,2024,2010,1,0,0,0,2024,2011,1,0,
0,0,2024,2012,1,0,0,0,2024,2013,1,0,0,0,2024,2014,1,0,0,0,2024,2015,1,0,
0,0,2024,2016,1,0,0,0,2024,2021,1,0,0,0,2024,2022,1,0,0,0,2024,2023,1,0,
0,0,2025,93,1,0,0,0,2026,2027,5,295,0,0,2027,2028,3,96,48,0,2028,2046,5,
465,0,0,2029,2030,5,164,0,0,2030,2047,3,956,478,0,2031,2032,5,623,0,0,2032,
2047,3,956,478,0,2033,2034,5,278,0,0,2034,2047,3,956,478,0,2035,2036,5,708,
0,0,2036,2043,3,982,491,0,2037,2038,5,17,0,0,2038,2039,5,711,0,0,2039,2040,
5,325,0,0,2040,2041,5,623,0,0,2041,2043,3,932,466,0,2042,2035,1,0,0,0,2042,
2037,1,0,0,0,2043,2047,1,0,0,0,2044,2045,5,793,0,0,2045,2047,3,956,478,0,
2046,2029,1,0,0,0,2046,2031,1,0,0,0,2046,2033,1,0,0,0,2046,2042,1,0,0,0,
2046,2044,1,0,0,0,2047,2048,1,0,0,0,2048,2049,5,745,0,0,2049,2050,5,642,
0,0,2050,2051,3,956,478,0,2051,95,1,0,0,0,2052,2053,7,7,0,0,2053,97,1,0,
0,0,2054,2055,5,295,0,0,2055,2056,5,587,0,0,2056,2057,3,100,50,0,2057,2062,
5,745,0,0,2058,2059,5,587,0,0,2059,2063,3,100,50,0,2060,2061,5,777,0,0,2061,
2063,3,956,478,0,2062,2058,1,0,0,0,2062,2060,1,0,0,0,2063,99,1,0,0,0,2064,
2067,3,102,51,0,2065,2067,3,956,478,0,2066,2064,1,0,0,0,2066,2065,1,0,0,
0,2067,101,1,0,0,0,2068,2069,7,8,0,0,2069,103,1,0,0,0,2070,2074,5,371,0,
0,2071,2075,3,106,53,0,2072,2075,3,108,54,0,2073,2075,3,110,55,0,2074,2071,
1,0,0,0,2074,2072,1,0,0,0,2074,2073,1,0,0,0,2075,2077,1,0,0,0,2076,2078,
3,974,487,0,2077,2076,1,0,0,0,2077,2078,1,0,0,0,2078,105,1,0,0,0,2079,2080,
5,885,0,0,2080,2082,5,903,0,0,2081,2083,3,112,56,0,2082,2081,1,0,0,0,2082,
2083,1,0,0,0,2083,107,1,0,0,0,2084,2086,5,885,0,0,2085,2087,3,932,466,0,
2086,2085,1,0,0,0,2086,2087,1,0,0,0,2087,2088,1,0,0,0,2088,2089,5,900,0,
0,2089,2091,3,956,478,0,2090,2092,3,112,56,0,2091,2090,1,0,0,0,2091,2092,
1,0,0,0,2092,109,1,0,0,0,2093,2094,5,885,0,0,2094,2096,3,982,491,0,2095,
2097,3,112,56,0,2096,2095,1,0,0,0,2096,2097,1,0,0,0,2097,111,1,0,0,0,2098,
2110,5,899,0,0,2099,2104,5,861,0,0,2100,2101,5,899,0,0,2101,2103,5,861,0,
0,2102,2100,1,0,0,0,2103,2106,1,0,0,0,2104,2102,1,0,0,0,2104,2105,1,0,0,
0,2105,2108,1,0,0,0,2106,2104,1,0,0,0,2107,2109,5,899,0,0,2108,2107,1,0,
0,0,2108,2109,1,0,0,0,2109,2111,1,0,0,0,2110,2099,1,0,0,0,2110,2111,1,0,
0,0,2111,113,1,0,0,0,2112,2113,5,534,0,0,2113,2117,5,867,0,0,2114,2118,3,
108,54,0,2115,2118,3,106,53,0,2116,2118,3,110,55,0,2117,2114,1,0,0,0,2117,
2115,1,0,0,0,2117,2116,1,0,0,0,2118,2122,1,0,0,0,2119,2120,5,486,0,0,2120,
2121,5,878,0,0,2121,2123,3,986,493,0,2122,2119,1,0,0,0,2122,2123,1,0,0,0,
2123,2127,1,0,0,0,2124,2125,5,54,0,0,2125,2126,5,878,0,0,2126,2128,3,508,
254,0,2127,2124,1,0,0,0,2127,2128,1,0,0,0,2128,2132,1,0,0,0,2129,2130,5,
664,0,0,2130,2131,5,878,0,0,2131,2133,7,9,0,0,2132,2129,1,0,0,0,2132,2133,
1,0,0,0,2133,2137,1,0,0,0,2134,2135,5,482,0,0,2135,2136,5,878,0,0,2136,2138,
3,508,254,0,2137,2134,1,0,0,0,2137,2138,1,0,0,0,2138,115,1,0,0,0,2139,2143,
5,557,0,0,2140,2144,3,108,54,0,2141,2144,3,106,53,0,2142,2144,3,110,55,0,
2143,2140,1,0,0,0,2143,2141,1,0,0,0,2143,2142,1,0,0,0,2144,2146,1,0,0,0,
2145,2147,3,974,487,0,2146,2145,1,0,0,0,2146,2147,1,0,0,0,2147,117,1,0,0,
0,2148,2152,5,584,0,0,2149,2150,5,295,0,0,2150,2151,5,471,0,0,2151,2153,
5,269,0,0,2152,2149,1,0,0,0,2152,2153,1,0,0,0,2153,2244,1,0,0,0,2154,2160,
3,80,40,0,2155,2157,5,17,0,0,2156,2158,5,526,0,0,2157,2156,1,0,0,0,2157,
2158,1,0,0,0,2158,2160,1,0,0,0,2159,2154,1,0,0,0,2159,2155,1,0,0,0,2160,
2161,1,0,0,0,2161,2162,5,465,0,0,2162,2245,5,6,0,0,2163,2169,3,82,41,0,2164,
2166,5,17,0,0,2165,2167,5,526,0,0,2166,2165,1,0,0,0,2166,2167,1,0,0,0,2167,
2169,1,0,0,0,2168,2163,1,0,0,0,2168,2164,1,0,0,0,2169,2170,1,0,0,0,2170,
2176,5,465,0,0,2171,2172,5,569,0,0,2172,2177,5,411,0,0,2173,2177,5,796,0,
0,2174,2177,5,164,0,0,2175,2177,5,337,0,0,2176,2171,1,0,0,0,2176,2173,1,
0,0,0,2176,2174,1,0,0,0,2176,2175,1,0,0,0,2177,2178,1,0,0,0,2178,2245,3,
982,491,0,2179,2185,3,86,43,0,2180,2182,5,17,0,0,2181,2183,5,526,0,0,2182,
2181,1,0,0,0,2182,2183,1,0,0,0,2183,2185,1,0,0,0,2184,2179,1,0,0,0,2184,
2180,1,0,0,0,2185,2186,1,0,0,0,2186,2194,5,465,0,0,2187,2188,5,623,0,0,2188,
2195,3,932,466,0,2189,2190,5,17,0,0,2190,2191,5,624,0,0,2191,2192,5,325,
0,0,2192,2193,5,164,0,0,2193,2195,3,956,478,0,2194,2187,1,0,0,0,2194,2189,
1,0,0,0,2195,2245,1,0,0,0,2196,2202,3,86,43,0,2197,2199,5,17,0,0,2198,2200,
5,526,0,0,2199,2198,1,0,0,0,2199,2200,1,0,0,0,2200,2202,1,0,0,0,2201,2196,
1,0,0,0,2201,2197,1,0,0,0,2202,2203,1,0,0,0,2203,2204,5,465,0,0,2204,2205,
5,280,0,0,2205,2206,5,624,0,0,2206,2207,5,325,0,0,2207,2245,5,164,0,0,2208,
2214,3,90,45,0,2209,2211,5,17,0,0,2210,2212,5,526,0,0,2211,2210,1,0,0,0,
2211,2212,1,0,0,0,2212,2214,1,0,0,0,2213,2208,1,0,0,0,2213,2209,1,0,0,0,
2214,2215,1,0,0,0,2215,2225,5,465,0,0,2216,2217,3,934,467,0,2217,2218,3,
982,491,0,2218,2226,1,0,0,0,2219,2220,5,17,0,0,2220,2221,3,644,322,0,2221,
2222,5,325,0,0,2222,2223,5,623,0,0,2223,2224,3,932,466,0,2224,2226,1,0,0,
0,2225,2216,1,0,0,0,2225,2219,1,0,0,0,2226,2245,1,0,0,0,2227,2233,3,90,45,
0,2228,2230,5,17,0,0,2229,2231,5,526,0,0,2230,2229,1,0,0,0,2230,2231,1,0,
0,0,2231,2233,1,0,0,0,2232,2227,1,0,0,0,2232,2228,1,0,0,0,2233,2234,1,0,
0,0,2234,2235,5,465,0,0,2235,2236,5,280,0,0,2236,2237,3,644,322,0,2237,2242,
5,325,0,0,2238,2239,5,164,0,0,2239,2243,3,956,478,0,2240,2241,5,623,0,0,
2241,2243,3,932,466,0,2242,2238,1,0,0,0,2242,2240,1,0,0,0,2243,2245,1,0,
0,0,2244,2159,1,0,0,0,2244,2168,1,0,0,0,2244,2184,1,0,0,0,2244,2201,1,0,
0,0,2244,2213,1,0,0,0,2244,2232,1,0,0,0,2245,2246,1,0,0,0,2246,2248,5,276,
0,0,2247,2249,5,587,0,0,2248,2247,1,0,0,0,2248,2249,1,0,0,0,2249,2250,1,
0,0,0,2250,2252,3,956,478,0,2251,2253,3,712,356,0,2252,2251,1,0,0,0,2252,
2253,1,0,0,0,2253,119,1,0,0,0,2254,2255,5,584,0,0,2255,2256,3,96,48,0,2256,
2279,5,465,0,0,2257,2258,5,164,0,0,2258,2280,3,956,478,0,2259,2260,5,623,
0,0,2260,2280,3,932,466,0,2261,2262,5,708,0,0,2262,2269,3,982,491,0,2263,
2264,5,17,0,0,2264,2265,5,711,0,0,2265,2266,5,325,0,0,2266,2267,5,623,0,
0,2267,2269,3,932,466,0,2268,2261,1,0,0,0,2268,2263,1,0,0,0,2269,2280,1,
0,0,0,2270,2271,5,793,0,0,2271,2278,3,982,491,0,2272,2273,5,17,0,0,2273,
2274,5,794,0,0,2274,2275,5,325,0,0,2275,2276,5,623,0,0,2276,2278,3,932,466,
0,2277,2270,1,0,0,0,2277,2272,1,0,0,0,2278,2280,1,0,0,0,2279,2257,1,0,0,
0,2279,2259,1,0,0,0,2279,2268,1,0,0,0,2279,2277,1,0,0,0,2280,2281,1,0,0,
0,2281,2282,5,276,0,0,2282,2283,5,642,0,0,2283,2284,3,956,478,0,2284,121,
1,0,0,0,2285,2286,5,584,0,0,2286,2287,5,587,0,0,2287,2288,3,100,50,0,2288,
2293,5,276,0,0,2289,2290,5,587,0,0,2290,2294,3,100,50,0,2291,2292,5,777,
0,0,2292,2294,3,956,478,0,2293,2289,1,0,0,0,2293,2291,1,0,0,0,2294,123,1,
0,0,0,2295,2297,5,589,0,0,2296,2298,5,807,0,0,2297,2296,1,0,0,0,2297,2298,
1,0,0,0,2298,125,1,0,0,0,2299,2300,5,640,0,0,2300,2301,3,956,478,0,2301,
2302,5,878,0,0,2302,2303,3,992,496,0,2303,2328,1,0,0,0,2304,2305,5,640,0,
0,2305,2306,5,888,0,0,2306,2311,3,956,478,0,2307,2308,5,894,0,0,2308,2310,
3,956,478,0,2309,2307,1,0,0,0,2310,2313,1,0,0,0,2311,2309,1,0,0,0,2311,2312,
1,0,0,0,2312,2314,1,0,0,0,2313,2311,1,0,0,0,2314,2315,5,889,0,0,2315,2316,
5,878,0,0,2316,2317,5,888,0,0,2317,2322,3,992,496,0,2318,2319,5,894,0,0,
2319,2321,3,992,496,0,2320,2318,1,0,0,0,2321,2324,1,0,0,0,2322,2320,1,0,
0,0,2322,2323,1,0,0,0,2323,2325,1,0,0,0,2324,2322,1,0,0,0,2325,2326,5,889,
0,0,2326,2328,1,0,0,0,2327,2299,1,0,0,0,2327,2304,1,0,0,0,2328,127,1,0,0,
0,2329,2330,5,760,0,0,2330,2331,5,391,0,0,2331,2332,5,793,0,0,2332,2333,
3,982,491,0,2333,129,1,0,0,0,2334,2336,5,760,0,0,2335,2337,5,708,0,0,2336,
2335,1,0,0,0,2336,2337,1,0,0,0,2337,2339,1,0,0,0,2338,2340,3,742,371,0,2339,
2338,1,0,0,0,2339,2340,1,0,0,0,2340,2341,1,0,0,0,2341,2342,3,982,491,0,2342,
131,1,0,0,0,2343,2344,5,770,0,0,2344,2358,3,956,478,0,2345,2346,5,770,0,
0,2346,2347,5,888,0,0,2347,2352,3,956,478,0,2348,2349,5,894,0,0,2349,2351,
3,956,478,0,2350,2348,1,0,0,0,2351,2354,1,0,0,0,2352,2350,1,0,0,0,2352,2353,
1,0,0,0,2353,2355,1,0,0,0,2354,2352,1,0,0,0,2355,2356,5,889,0,0,2356,2358,
1,0,0,0,2357,2343,1,0,0,0,2357,2345,1,0,0,0,2358,133,1,0,0,0,2359,2400,3,
146,73,0,2360,2400,3,150,75,0,2361,2400,3,158,79,0,2362,2400,3,162,81,0,
2363,2400,3,164,82,0,2364,2400,3,170,85,0,2365,2400,3,172,86,0,2366,2400,
3,184,92,0,2367,2400,3,186,93,0,2368,2400,3,188,94,0,2369,2400,3,194,97,
0,2370,2400,3,196,98,0,2371,2400,3,198,99,0,2372,2400,3,200,100,0,2373,2400,
3,246,123,0,2374,2400,3,202,101,0,2375,2400,3,204,102,0,2376,2400,3,206,
103,0,2377,2400,3,216,108,0,2378,2400,3,218,109,0,2379,2400,3,220,110,0,
2380,2400,3,222,111,0,2381,2400,3,228,114,0,2382,2400,3,232,116,0,2383,2400,
3,236,118,0,2384,2400,3,238,119,0,2385,2400,3,226,113,0,2386,2400,3,242,
121,0,2387,2400,3,244,122,0,2388,2400,3,248,124,0,2389,2400,3,524,262,0,
2390,2400,3,250,125,0,2391,2400,3,252,126,0,2392,2400,3,254,127,0,2393,2400,
3,290,145,0,2394,2400,3,302,151,0,2395,2400,3,304,152,0,2396,2400,3,306,
153,0,2397,2400,3,308,154,0,2398,2400,3,312,156,0,2399,2359,1,0,0,0,2399,
2360,1,0,0,0,2399,2361,1,0,0,0,2399,2362,1,0,0,0,2399,2363,1,0,0,0,2399,
2364,1,0,0,0,2399,2365,1,0,0,0,2399,2366,1,0,0,0,2399,2367,1,0,0,0,2399,
2368,1,0,0,0,2399,2369,1,0,0,0,2399,2370,1,0,0,0,2399,2371,1,0,0,0,2399,
2372,1,0,0,0,2399,2373,1,0,0,0,2399,2374,1,0,0,0,2399,2375,1,0,0,0,2399,
2376,1,0,0,0,2399,2377,1,0,0,0,2399,2378,1,0,0,0,2399,2379,1,0,0,0,2399,
2380,1,0,0,0,2399,2381,1,0,0,0,2399,2382,1,0,0,0,2399,2383,1,0,0,0,2399,
2384,1,0,0,0,2399,2385,1,0,0,0,2399,2386,1,0,0,0,2399,2387,1,0,0,0,2399,
2388,1,0,0,0,2399,2389,1,0,0,0,2399,2390,1,0,0,0,2399,2391,1,0,0,0,2399,
2392,1,0,0,0,2399,2393,1,0,0,0,2399,2394,1,0,0,0,2399,2395,1,0,0,0,2399,
2396,1,0,0,0,2399,2397,1,0,0,0,2399,2398,1,0,0,0,2400,135,1,0,0,0,2401,2402,
5,26,0,0,2402,2403,5,878,0,0,2403,2444,3,508,254,0,2404,2405,5,116,0,0,2405,
2406,5,878,0,0,2406,2444,3,986,493,0,2407,2408,5,221,0,0,2408,2409,5,878,
0,0,2409,2444,3,508,254,0,2410,2411,5,242,0,0,2411,2412,5,878,0,0,2412,2444,
3,508,254,0,2413,2414,5,331,0,0,2414,2415,5,878,0,0,2415,2444,3,986,493,
0,2416,2417,5,420,0,0,2417,2418,5,878,0,0,2418,2444,3,950,475,0,2419,2420,
5,510,0,0,2420,2421,5,878,0,0,2421,2444,3,508,254,0,2422,2423,5,521,0,0,
2423,2424,5,878,0,0,2424,2444,3,508,254,0,2425,2426,5,522,0,0,2426,2427,
5,878,0,0,2427,2444,3,508,254,0,2428,2429,5,566,0,0,2429,2430,5,878,0,0,
2430,2444,3,508,254,0,2431,2432,5,567,0,0,2432,2433,5,878,0,0,2433,2444,
3,508,254,0,2434,2435,5,617,0,0,2435,2436,5,878,0,0,2436,2444,3,1002,501,
0,2437,2438,5,638,0,0,2438,2439,5,878,0,0,2439,2444,3,950,475,0,2440,2441,
5,669,0,0,2441,2442,5,878,0,0,2442,2444,3,508,254,0,2443,2401,1,0,0,0,2443,
2404,1,0,0,0,2443,2407,1,0,0,0,2443,2410,1,0,0,0,2443,2413,1,0,0,0,2443,
2416,1,0,0,0,2443,2419,1,0,0,0,2443,2422,1,0,0,0,2443,2425,1,0,0,0,2443,
2428,1,0,0,0,2443,2431,1,0,0,0,2443,2434,1,0,0,0,2443,2437,1,0,0,0,2443,
2440,1,0,0,0,2444,137,1,0,0,0,2445,2446,5,166,0,0,2446,2447,5,878,0,0,2447,
2471,3,986,493,0,2448,2449,5,395,0,0,2449,2450,5,878,0,0,2450,2471,3,986,
493,0,2451,2471,3,140,70,0,2452,2453,5,394,0,0,2453,2454,5,878,0,0,2454,
2471,3,986,493,0,2455,2456,5,420,0,0,2456,2457,5,878,0,0,2457,2471,3,950,
475,0,2458,2459,5,514,0,0,2459,2460,5,878,0,0,2460,2471,3,508,254,0,2461,
2462,5,638,0,0,2462,2463,5,878,0,0,2463,2471,3,950,475,0,2464,2465,5,680,
0,0,2465,2466,5,878,0,0,2466,2471,3,986,493,0,2467,2468,5,681,0,0,2468,2469,
5,878,0,0,2469,2471,3,986,493,0,2470,2445,1,0,0,0,2470,2448,1,0,0,0,2470,
2451,1,0,0,0,2470,2452,1,0,0,0,2470,2455,1,0,0,0,2470,2458,1,0,0,0,2470,
2461,1,0,0,0,2470,2464,1,0,0,0,2470,2467,1,0,0,0,2471,139,1,0,0,0,2472,2473,
5,175,0,0,2473,2474,5,878,0,0,2474,2475,3,950,475,0,2475,141,1,0,0,0,2476,
2477,5,493,0,0,2477,2478,5,878,0,0,2478,2529,3,950,475,0,2479,2480,5,377,
0,0,2480,2481,5,878,0,0,2481,2529,3,950,475,0,2482,2483,5,196,0,0,2483,2484,
5,878,0,0,2484,2529,3,950,475,0,2485,2486,5,266,0,0,2486,2487,5,878,0,0,
2487,2529,3,950,475,0,2488,2489,5,401,0,0,2489,2490,5,878,0,0,2490,2529,
3,950,475,0,2491,2492,5,360,0,0,2492,2493,5,878,0,0,2493,2529,3,950,475,
0,2494,2495,5,205,0,0,2495,2496,5,878,0,0,2496,2529,3,950,475,0,2497,2498,
5,416,0,0,2498,2499,5,878,0,0,2499,2529,3,508,254,0,2500,2501,5,193,0,0,
2501,2502,5,878,0,0,2502,2529,3,508,254,0,2503,2504,5,173,0,0,2504,2505,
5,878,0,0,2505,2529,3,986,493,0,2506,2507,5,404,0,0,2507,2508,5,878,0,0,
2508,2529,3,986,493,0,2509,2510,5,178,0,0,2510,2511,5,878,0,0,2511,2529,
3,950,475,0,2512,2513,5,176,0,0,2513,2514,5,878,0,0,2514,2529,3,950,475,
0,2515,2516,5,177,0,0,2516,2517,5,878,0,0,2517,2529,3,950,475,0,2518,2519,
5,403,0,0,2519,2520,5,878,0,0,2520,2529,3,986,493,0,2521,2522,5,597,0,0,
2522,2523,5,878,0,0,2523,2529,3,950,475,0,2524,2525,5,598,0,0,2525,2526,
5,878,0,0,2526,2529,3,950,475,0,2527,2529,3,738,369,0,2528,2476,1,0,0,0,
2528,2479,1,0,0,0,2528,2482,1,0,0,0,2528,2485,1,0,0,0,2528,2488,1,0,0,0,
2528,2491,1,0,0,0,2528,2494,1,0,0,0,2528,2497,1,0,0,0,2528,2500,1,0,0,0,
2528,2503,1,0,0,0,2528,2506,1,0,0,0,2528,2509,1,0,0,0,2528,2512,1,0,0,0,
2528,2515,1,0,0,0,2528,2518,1,0,0,0,2528,2521,1,0,0,0,2528,2524,1,0,0,0,
2528,2527,1,0,0,0,2529,143,1,0,0,0,2530,2531,5,3,0,0,2531,2532,5,878,0,0,
2532,2624,3,508,254,0,2533,2534,5,51,0,0,2534,2535,5,878,0,0,2535,2624,3,
508,254,0,2536,2537,5,87,0,0,2537,2538,5,878,0,0,2538,2624,3,950,475,0,2539,
2540,5,88,0,0,2540,2541,5,878,0,0,2541,2624,3,950,475,0,2542,2543,5,170,
0,0,2543,2544,5,878,0,0,2544,2624,3,950,475,0,2545,2546,5,171,0,0,2546,2547,
5,878,0,0,2547,2624,3,950,475,0,2548,2549,5,227,0,0,2549,2550,5,878,0,0,
2550,2624,3,508,254,0,2551,2552,5,228,0,0,2552,2553,5,878,0,0,2553,2624,
3,508,254,0,2554,2555,5,351,0,0,2555,2556,5,878,0,0,2556,2624,3,986,493,
0,2557,2558,5,376,0,0,2558,2559,5,878,0,0,2559,2624,3,986,493,0,2560,2561,
5,539,0,0,2561,2562,5,878,0,0,2562,2624,3,950,475,0,2563,2564,5,595,0,0,
2564,2565,5,878,0,0,2565,2624,3,986,493,0,2566,2567,5,648,0,0,2567,2568,
5,878,0,0,2568,2624,3,950,475,0,2569,2570,5,681,0,0,2570,2571,5,878,0,0,
2571,2624,3,986,493,0,2572,2573,5,693,0,0,2573,2574,5,878,0,0,2574,2624,
3,508,254,0,2575,2576,5,728,0,0,2576,2577,5,878,0,0,2577,2624,3,508,254,
0,2578,2579,5,730,0,0,2579,2580,5,878,0,0,2580,2624,3,950,475,0,2581,2582,
5,732,0,0,2582,2583,5,878,0,0,2583,2624,3,950,475,0,2584,2585,5,734,0,0,
2585,2586,5,878,0,0,2586,2624,3,950,475,0,2587,2588,5,735,0,0,2588,2589,
5,878,0,0,2589,2624,3,950,475,0,2590,2591,5,736,0,0,2591,2592,5,878,0,0,
2592,2624,3,950,475,0,2593,2594,5,738,0,0,2594,2595,5,878,0,0,2595,2624,
3,950,475,0,2596,2597,5,741,0,0,2597,2598,5,878,0,0,2598,2624,3,950,475,
0,2599,2600,5,743,0,0,2600,2601,5,878,0,0,2601,2624,3,950,475,0,2602,2603,
5,744,0,0,2603,2604,5,878,0,0,2604,2624,3,950,475,0,2605,2606,5,753,0,0,
2606,2607,5,878,0,0,2607,2624,3,950,475,0,2608,2609,5,763,0,0,2609,2610,
5,878,0,0,2610,2624,3,986,493,0,2611,2612,5,771,0,0,2612,2613,5,878,0,0,
2613,2624,3,950,475,0,2614,2615,5,784,0,0,2615,2616,5,878,0,0,2616,2624,
3,508,254,0,2617,2618,5,801,0,0,2618,2619,5,878,0,0,2619,2624,3,986,493,
0,2620,2621,5,802,0,0,2621,2622,5,878,0,0,2622,2624,3,986,493,0,2623,2530,
1,0,0,0,2623,2533,1,0,0,0,2623,2536,1,0,0,0,2623,2539,1,0,0,0,2623,2542,
1,0,0,0,2623,2545,1,0,0,0,2623,2548,1,0,0,0,2623,2551,1,0,0,0,2623,2554,
1,0,0,0,2623,2557,1,0,0,0,2623,2560,1,0,0,0,2623,2563,1,0,0,0,2623,2566,
1,0,0,0,2623,2569,1,0,0,0,2623,2572,1,0,0,0,2623,2575,1,0,0,0,2623,2578,
1,0,0,0,2623,2581,1,0,0,0,2623,2584,1,0,0,0,2623,2587,1,0,0,0,2623,2590,
1,0,0,0,2623,2593,1,0,0,0,2623,2596,1,0,0,0,2623,2599,1,0,0,0,2623,2602,
1,0,0,0,2623,2605,1,0,0,0,2623,2608,1,0,0,0,2623,2611,1,0,0,0,2623,2614,
1,0,0,0,2623,2617,1,0,0,0,2623,2620,1,0,0,0,2624,145,1,0,0,0,2625,2626,5,
28,0,0,2626,2627,5,6,0,0,2627,2628,3,324,162,0,2628,147,1,0,0,0,2629,2630,
5,209,0,0,2630,2631,5,878,0,0,2631,2632,3,508,254,0,2632,149,1,0,0,0,2633,
2634,5,28,0,0,2634,2636,5,15,0,0,2635,2637,3,742,371,0,2636,2635,1,0,0,0,
2636,2637,1,0,0,0,2637,2638,1,0,0,0,2638,2662,3,956,478,0,2639,2663,3,152,
76,0,2640,2642,5,640,0,0,2641,2643,3,154,77,0,2642,2641,1,0,0,0,2643,2644,
1,0,0,0,2644,2642,1,0,0,0,2644,2645,1,0,0,0,2645,2663,1,0,0,0,2646,2648,
5,770,0,0,2647,2649,3,156,78,0,2648,2647,1,0,0,0,2649,2650,1,0,0,0,2650,
2648,1,0,0,0,2650,2651,1,0,0,0,2651,2663,1,0,0,0,2652,2653,5,410,0,0,2653,
2654,5,139,0,0,2654,2655,5,236,0,0,2655,2656,5,888,0,0,2656,2657,3,338,169,
0,2657,2658,5,889,0,0,2658,2663,1,0,0,0,2659,2660,5,410,0,0,2660,2661,5,
9,0,0,2661,2663,3,340,170,0,2662,2639,1,0,0,0,2662,2640,1,0,0,0,2662,2646,
1,0,0,0,2662,2652,1,0,0,0,2662,2659,1,0,0,0,2663,151,1,0,0,0,2664,2665,7,
10,0,0,2665,153,1,0,0,0,2666,2667,5,796,0,0,2667,2668,5,878,0,0,2668,2674,
3,956,478,0,2669,2670,5,622,0,0,2670,2671,5,878,0,0,2671,2674,3,950,475,
0,2672,2674,3,738,369,0,2673,2666,1,0,0,0,2673,2669,1,0,0,0,2673,2672,1,
0,0,0,2674,155,1,0,0,0,2675,2676,7,11,0,0,2676,157,1,0,0,0,2677,2679,5,28,
0,0,2678,2680,5,32,0,0,2679,2678,1,0,0,0,2679,2680,1,0,0,0,2680,2681,1,0,
0,0,2681,2683,5,337,0,0,2682,2684,3,742,371,0,2683,2682,1,0,0,0,2683,2684,
1,0,0,0,2684,2685,1,0,0,0,2685,2686,3,956,478,0,2686,2690,5,640,0,0,2687,
2688,5,34,0,0,2688,2689,5,878,0,0,2689,2691,3,950,475,0,2690,2687,1,0,0,
0,2690,2691,1,0,0,0,2691,2695,1,0,0,0,2692,2693,5,72,0,0,2693,2694,5,878,
0,0,2694,2696,3,950,475,0,2695,2692,1,0,0,0,2695,2696,1,0,0,0,2696,2700,
1,0,0,0,2697,2698,5,37,0,0,2698,2699,5,878,0,0,2699,2701,3,950,475,0,2700,
2697,1,0,0,0,2700,2701,1,0,0,0,2701,2703,1,0,0,0,2702,2704,3,148,74,0,2703,
2702,1,0,0,0,2703,2704,1,0,0,0,2704,2711,1,0,0,0,2705,2706,5,33,0,0,2706,
2707,5,878,0,0,2707,2708,5,888,0,0,2708,2709,3,950,475,0,2709,2710,5,889,
0,0,2710,2712,1,0,0,0,2711,2705,1,0,0,0,2711,2712,1,0,0,0,2712,2719,1,0,
0,0,2713,2714,5,35,0,0,2714,2715,5,878,0,0,2715,2716,5,888,0,0,2716,2717,
3,950,475,0,2717,2718,5,889,0,0,2718,2720,1,0,0,0,2719,2713,1,0,0,0,2719,
2720,1,0,0,0,2720,2722,1,0,0,0,2721,2723,3,738,369,0,2722,2721,1,0,0,0,2722,
2723,1,0,0,0,2723,2759,1,0,0,0,2724,2726,5,28,0,0,2725,2727,5,32,0,0,2726,
2725,1,0,0,0,2726,2727,1,0,0,0,2727,2728,1,0,0,0,2728,2729,5,337,0,0,2729,
2730,3,956,478,0,2730,2731,3,326,163,0,2731,2759,1,0,0,0,2732,2734,5,28,
0,0,2733,2735,5,32,0,0,2734,2733,1,0,0,0,2734,2735,1,0,0,0,2735,2736,1,0,
0,0,2736,2737,5,337,0,0,2737,2738,3,956,478,0,2738,2739,3,330,165,0,2739,
2759,1,0,0,0,2740,2742,5,28,0,0,2741,2743,5,32,0,0,2742,2741,1,0,0,0,2742,
2743,1,0,0,0,2743,2744,1,0,0,0,2744,2746,5,337,0,0,2745,2747,3,742,371,0,
2746,2745,1,0,0,0,2746,2747,1,0,0,0,2747,2748,1,0,0,0,2748,2749,3,956,478,
0,2749,2750,5,770,0,0,2750,2755,3,160,80,0,2751,2752,5,894,0,0,2752,2754,
3,160,80,0,2753,2751,1,0,0,0,2754,2757,1,0,0,0,2755,2753,1,0,0,0,2755,2756,
1,0,0,0,2756,2759,1,0,0,0,2757,2755,1,0,0,0,2758,2677,1,0,0,0,2758,2724,
1,0,0,0,2758,2732,1,0,0,0,2758,2740,1,0,0,0,2759,159,1,0,0,0,2760,2761,7,
12,0,0,2761,161,1,0,0,0,2762,2763,5,28,0,0,2763,2764,5,142,0,0,2764,2765,
3,314,157,0,2765,163,1,0,0,0,2766,2767,5,28,0,0,2767,2769,5,164,0,0,2768,
2770,3,742,371,0,2769,2768,1,0,0,0,2769,2770,1,0,0,0,2770,2771,1,0,0,0,2771,
2772,3,956,478,0,2772,2773,5,558,0,0,2773,2774,5,745,0,0,2774,2775,3,956,
478,0,2775,2887,1,0,0,0,2776,2777,5,28,0,0,2777,2779,5,164,0,0,2778,2780,
3,742,371,0,2779,2778,1,0,0,0,2779,2780,1,0,0,0,2780,2781,1,0,0,0,2781,2782,
3,956,478,0,2782,2783,5,704,0,0,2783,2784,5,805,0,0,2784,2785,3,956,478,
0,2785,2887,1,0,0,0,2786,2787,5,28,0,0,2787,2789,5,164,0,0,2788,2790,3,742,
371,0,2789,2788,1,0,0,0,2789,2790,1,0,0,0,2790,2791,1,0,0,0,2791,2792,3,
956,478,0,2792,2796,5,640,0,0,2793,2794,5,166,0,0,2794,2795,5,878,0,0,2795,
2797,3,986,493,0,2796,2793,1,0,0,0,2796,2797,1,0,0,0,2797,2801,1,0,0,0,2798,
2799,5,395,0,0,2799,2800,5,878,0,0,2800,2802,3,986,493,0,2801,2798,1,0,0,
0,2801,2802,1,0,0,0,2802,2804,1,0,0,0,2803,2805,3,140,70,0,2804,2803,1,0,
0,0,2804,2805,1,0,0,0,2805,2807,1,0,0,0,2806,2808,3,738,369,0,2807,2806,
1,0,0,0,2807,2808,1,0,0,0,2808,2887,1,0,0,0,2809,2810,5,28,0,0,2810,2811,
5,164,0,0,2811,2812,3,956,478,0,2812,2813,3,326,163,0,2813,2887,1,0,0,0,
2814,2815,5,28,0,0,2815,2816,5,164,0,0,2816,2817,3,956,478,0,2817,2818,3,
330,165,0,2818,2887,1,0,0,0,2819,2820,5,28,0,0,2820,2822,5,164,0,0,2821,
2823,3,742,371,0,2822,2821,1,0,0,0,2822,2823,1,0,0,0,2823,2824,1,0,0,0,2824,
2825,3,956,478,0,2825,2826,5,770,0,0,2826,2831,3,166,83,0,2827,2828,5,894,
0,0,2828,2830,3,166,83,0,2829,2827,1,0,0,0,2830,2833,1,0,0,0,2831,2829,1,
0,0,0,2831,2832,1,0,0,0,2832,2887,1,0,0,0,2833,2831,1,0,0,0,2834,2835,5,
28,0,0,2835,2836,5,164,0,0,2836,2837,3,956,478,0,2837,2838,5,208,0,0,2838,
2839,5,563,0,0,2839,2840,5,745,0,0,2840,2841,5,8,0,0,2841,2845,3,168,84,
0,2842,2843,5,315,0,0,2843,2844,5,203,0,0,2844,2846,5,113,0,0,2845,2842,
1,0,0,0,2845,2846,1,0,0,0,2846,2887,1,0,0,0,2847,2848,5,28,0,0,2848,2849,
5,164,0,0,2849,2850,3,956,478,0,2850,2851,5,192,0,0,2851,2855,5,563,0,0,
2852,2853,5,745,0,0,2853,2854,5,8,0,0,2854,2856,3,168,84,0,2855,2852,1,0,
0,0,2855,2856,1,0,0,0,2856,2887,1,0,0,0,2857,2858,5,28,0,0,2858,2859,5,164,
0,0,2859,2860,3,956,478,0,2860,2861,5,551,0,0,2861,2887,1,0,0,0,2862,2863,
5,28,0,0,2863,2864,5,164,0,0,2864,2865,3,956,478,0,2865,2866,5,208,0,0,2866,
2867,5,256,0,0,2867,2868,5,745,0,0,2868,2869,5,8,0,0,2869,2870,3,168,84,
0,2870,2887,1,0,0,0,2871,2872,5,28,0,0,2872,2873,5,164,0,0,2873,2874,3,956,
478,0,2874,2875,5,192,0,0,2875,2879,5,256,0,0,2876,2877,5,745,0,0,2877,2878,
5,8,0,0,2878,2880,3,168,84,0,2879,2876,1,0,0,0,2879,2880,1,0,0,0,2880,2887,
1,0,0,0,2881,2882,5,28,0,0,2882,2883,5,164,0,0,2883,2884,3,956,478,0,2884,
2885,5,524,0,0,2885,2887,1,0,0,0,2886,2766,1,0,0,0,2886,2776,1,0,0,0,2886,
2786,1,0,0,0,2886,2809,1,0,0,0,2886,2814,1,0,0,0,2886,2819,1,0,0,0,2886,
2834,1,0,0,0,2886,2847,1,0,0,0,2886,2857,1,0,0,0,2886,2862,1,0,0,0,2886,
2871,1,0,0,0,2886,2881,1,0,0,0,2887,165,1,0,0,0,2888,2889,7,13,0,0,2889,
167,1,0,0,0,2890,2895,3,930,465,0,2891,2892,5,894,0,0,2892,2894,3,930,465,
0,2893,2891,1,0,0,0,2894,2897,1,0,0,0,2895,2893,1,0,0,0,2895,2896,1,0,0,
0,2896,169,1,0,0,0,2897,2895,1,0,0,0,2898,2899,5,28,0,0,2899,2900,5,201,
0,0,2900,2901,5,708,0,0,2901,2908,3,956,478,0,2902,2909,3,152,76,0,2903,
2909,5,551,0,0,2904,2905,5,640,0,0,2905,2906,5,796,0,0,2906,2907,5,878,0,
0,2907,2909,3,956,478,0,2908,2902,1,0,0,0,2908,2903,1,0,0,0,2908,2904,1,
0,0,0,2909,171,1,0,0,0,2910,2911,5,28,0,0,2911,2912,5,240,0,0,2912,2914,
5,708,0,0,2913,2915,3,742,371,0,2914,2913,1,0,0,0,2914,2915,1,0,0,0,2915,
2916,1,0,0,0,2916,2917,3,982,491,0,2917,2919,5,551,0,0,2918,2920,3,950,475,
0,2919,2918,1,0,0,0,2919,2920,1,0,0,0,2920,3012,1,0,0,0,2921,2922,5,28,0,
0,2922,2923,5,240,0,0,2923,2925,5,708,0,0,2924,2926,3,742,371,0,2925,2924,
1,0,0,0,2925,2926,1,0,0,0,2926,2927,1,0,0,0,2927,2928,3,982,491,0,2928,2929,
5,10,0,0,2929,2930,5,262,0,0,2930,2931,5,888,0,0,2931,2932,3,952,476,0,2932,
2933,5,889,0,0,2933,3012,1,0,0,0,2934,2935,5,28,0,0,2935,2936,5,240,0,0,
2936,2938,5,708,0,0,2937,2939,3,742,371,0,2938,2937,1,0,0,0,2938,2939,1,
0,0,0,2939,2940,1,0,0,0,2940,2941,3,982,491,0,2941,2942,5,557,0,0,2942,2943,
5,262,0,0,2943,2944,5,888,0,0,2944,2945,3,952,476,0,2945,2946,5,889,0,0,
2946,3012,1,0,0,0,2947,2948,5,28,0,0,2948,2949,5,240,0,0,2949,2951,5,708,
0,0,2950,2952,3,742,371,0,2951,2950,1,0,0,0,2951,2952,1,0,0,0,2952,2953,
1,0,0,0,2953,2954,3,982,491,0,2954,2958,5,640,0,0,2955,2956,5,57,0,0,2956,
2957,5,878,0,0,2957,2959,3,508,254,0,2958,2955,1,0,0,0,2958,2959,1,0,0,0,
2959,2961,1,0,0,0,2960,2962,3,328,164,0,2961,2960,1,0,0,0,2961,2962,1,0,
0,0,2962,3012,1,0,0,0,2963,2964,5,28,0,0,2964,2965,5,240,0,0,2965,2967,5,
708,0,0,2966,2968,3,742,371,0,2967,2966,1,0,0,0,2967,2968,1,0,0,0,2968,2969,
1,0,0,0,2969,2970,3,982,491,0,2970,2971,3,330,165,0,2971,3012,1,0,0,0,2972,
2973,5,28,0,0,2973,2974,5,240,0,0,2974,2975,5,708,0,0,2975,2977,3,982,491,
0,2976,2978,3,742,371,0,2977,2976,1,0,0,0,2977,2978,1,0,0,0,2978,2979,1,
0,0,0,2979,2980,5,10,0,0,2980,2981,5,491,0,0,2981,2982,5,888,0,0,2982,2983,
3,976,488,0,2983,2984,5,878,0,0,2984,2992,3,950,475,0,2985,2986,5,894,0,
0,2986,2987,3,976,488,0,2987,2988,5,878,0,0,2988,2989,3,950,475,0,2989,2991,
1,0,0,0,2990,2985,1,0,0,0,2991,2994,1,0,0,0,2992,2990,1,0,0,0,2992,2993,
1,0,0,0,2993,2995,1,0,0,0,2994,2992,1,0,0,0,2995,2996,5,889,0,0,2996,2997,
5,374,0,0,2997,2998,3,950,475,0,2998,3012,1,0,0,0,2999,3000,5,28,0,0,3000,
3001,5,240,0,0,3001,3002,5,708,0,0,3002,3004,3,982,491,0,3003,3005,3,742,
371,0,3004,3003,1,0,0,0,3004,3005,1,0,0,0,3005,3006,1,0,0,0,3006,3007,5,
200,0,0,3007,3008,5,491,0,0,3008,3009,5,374,0,0,3009,3010,3,950,475,0,3010,
3012,1,0,0,0,3011,2910,1,0,0,0,3011,2921,1,0,0,0,3011,2934,1,0,0,0,3011,
2947,1,0,0,0,3011,2963,1,0,0,0,3011,2972,1,0,0,0,3011,2999,1,0,0,0,3012,
173,1,0,0,0,3013,3014,5,315,0,0,3014,3015,5,203,0,0,3015,3016,5,113,0,0,
3016,175,1,0,0,0,3017,3018,5,564,0,0,3018,3019,5,878,0,0,3019,3020,3,950,
475,0,3020,177,1,0,0,0,3021,3026,3,956,478,0,3022,3023,5,894,0,0,3023,3025,
3,956,478,0,3024,3022,1,0,0,0,3025,3028,1,0,0,0,3026,3024,1,0,0,0,3026,3027,
1,0,0,0,3027,179,1,0,0,0,3028,3026,1,0,0,0,3029,3034,3,956,478,0,3030,3031,
5,894,0,0,3031,3033,3,956,478,0,3032,3030,1,0,0,0,3033,3036,1,0,0,0,3034,
3032,1,0,0,0,3034,3035,1,0,0,0,3035,181,1,0,0,0,3036,3034,1,0,0,0,3037,3042,
3,372,186,0,3038,3039,5,894,0,0,3039,3041,3,372,186,0,3040,3038,1,0,0,0,
3041,3044,1,0,0,0,3042,3040,1,0,0,0,3042,3043,1,0,0,0,3043,183,1,0,0,0,3044,
3042,1,0,0,0,3045,3046,5,28,0,0,3046,3047,5,256,0,0,3047,3049,5,297,0,0,
3048,3050,3,742,371,0,3049,3048,1,0,0,0,3049,3050,1,0,0,0,3050,3051,1,0,
0,0,3051,3052,3,956,478,0,3052,3053,5,558,0,0,3053,3054,5,745,0,0,3054,3055,
3,956,478,0,3055,3200,1,0,0,0,3056,3057,5,28,0,0,3057,3058,5,256,0,0,3058,
3060,5,297,0,0,3059,3061,3,742,371,0,3060,3059,1,0,0,0,3060,3061,1,0,0,0,
3061,3062,1,0,0,0,3062,3063,3,956,478,0,3063,3067,5,640,0,0,3064,3065,5,
457,0,0,3065,3066,5,878,0,0,3066,3068,3,936,468,0,3067,3064,1,0,0,0,3067,
3068,1,0,0,0,3068,3070,1,0,0,0,3069,3071,3,176,88,0,3070,3069,1,0,0,0,3070,
3071,1,0,0,0,3071,3200,1,0,0,0,3072,3073,5,28,0,0,3073,3074,5,256,0,0,3074,
3076,5,297,0,0,3075,3077,3,742,371,0,3076,3075,1,0,0,0,3076,3077,1,0,0,0,
3077,3078,1,0,0,0,3078,3079,3,956,478,0,3079,3080,5,640,0,0,3080,3081,5,
457,0,0,3081,3082,5,878,0,0,3082,3084,3,936,468,0,3083,3085,3,176,88,0,3084,
3083,1,0,0,0,3084,3085,1,0,0,0,3085,3200,1,0,0,0,3086,3087,5,28,0,0,3087,
3088,5,256,0,0,3088,3090,5,297,0,0,3089,3091,3,742,371,0,3090,3089,1,0,0,
0,3090,3091,1,0,0,0,3091,3092,1,0,0,0,3092,3093,3,956,478,0,3093,3094,5,
10,0,0,3094,3095,3,178,89,0,3095,3096,5,745,0,0,3096,3097,5,19,0,0,3097,
3200,1,0,0,0,3098,3099,5,28,0,0,3099,3100,5,256,0,0,3100,3102,5,297,0,0,
3101,3103,3,742,371,0,3102,3101,1,0,0,0,3102,3103,1,0,0,0,3103,3104,1,0,
0,0,3104,3105,3,956,478,0,3105,3106,5,414,0,0,3106,3107,5,165,0,0,3107,3108,
3,178,89,0,3108,3109,5,745,0,0,3109,3110,5,256,0,0,3110,3111,5,297,0,0,3111,
3112,3,956,478,0,3112,3200,1,0,0,0,3113,3114,5,28,0,0,3114,3115,5,256,0,
0,3115,3117,5,297,0,0,3116,3118,3,742,371,0,3117,3116,1,0,0,0,3117,3118,
1,0,0,0,3118,3119,1,0,0,0,3119,3120,3,956,478,0,3120,3121,5,557,0,0,3121,
3122,3,178,89,0,3122,3123,5,276,0,0,3123,3124,5,19,0,0,3124,3200,1,0,0,0,
3125,3126,5,28,0,0,3126,3127,5,256,0,0,3127,3129,5,297,0,0,3128,3130,3,742,
371,0,3129,3128,1,0,0,0,3129,3130,1,0,0,0,3130,3131,1,0,0,0,3131,3132,3,
956,478,0,3132,3133,5,10,0,0,3133,3134,3,180,90,0,3134,3135,5,745,0,0,3135,
3136,5,22,0,0,3136,3200,1,0,0,0,3137,3138,5,28,0,0,3138,3139,5,256,0,0,3139,
3141,5,297,0,0,3140,3142,3,742,371,0,3141,3140,1,0,0,0,3141,3142,1,0,0,0,
3142,3143,1,0,0,0,3143,3144,3,956,478,0,3144,3145,5,414,0,0,3145,3146,5,
643,0,0,3146,3147,3,180,90,0,3147,3148,5,745,0,0,3148,3149,5,256,0,0,3149,
3150,5,297,0,0,3150,3151,3,956,478,0,3151,3200,1,0,0,0,3152,3153,5,28,0,
0,3153,3154,5,256,0,0,3154,3156,5,297,0,0,3155,3157,3,742,371,0,3156,3155,
1,0,0,0,3156,3157,1,0,0,0,3157,3158,1,0,0,0,3158,3159,3,956,478,0,3159,3160,
5,557,0,0,3160,3161,3,180,90,0,3161,3162,5,276,0,0,3162,3163,5,22,0,0,3163,
3200,1,0,0,0,3164,3165,5,28,0,0,3165,3166,5,256,0,0,3166,3168,5,297,0,0,
3167,3169,3,742,371,0,3168,3167,1,0,0,0,3168,3169,1,0,0,0,3169,3170,1,0,
0,0,3170,3171,3,956,478,0,3171,3172,5,10,0,0,3172,3173,3,182,91,0,3173,3174,
5,745,0,0,3174,3176,5,18,0,0,3175,3177,3,174,87,0,3176,3175,1,0,0,0,3176,
3177,1,0,0,0,3177,3200,1,0,0,0,3178,3179,5,28,0,0,3179,3180,5,256,0,0,3180,
3182,5,297,0,0,3181,3183,3,742,371,0,3182,3181,1,0,0,0,3182,3183,1,0,0,0,
3183,3184,1,0,0,0,3184,3185,3,956,478,0,3185,3186,5,557,0,0,3186,3187,3,
182,91,0,3187,3188,5,276,0,0,3188,3189,5,18,0,0,3189,3200,1,0,0,0,3190,3191,
5,28,0,0,3191,3192,5,256,0,0,3192,3194,5,297,0,0,3193,3195,3,742,371,0,3194,
3193,1,0,0,0,3194,3195,1,0,0,0,3195,3196,1,0,0,0,3196,3197,3,956,478,0,3197,
3198,7,14,0,0,3198,3200,1,0,0,0,3199,3045,1,0,0,0,3199,3056,1,0,0,0,3199,
3072,1,0,0,0,3199,3086,1,0,0,0,3199,3098,1,0,0,0,3199,3113,1,0,0,0,3199,
3125,1,0,0,0,3199,3137,1,0,0,0,3199,3152,1,0,0,0,3199,3164,1,0,0,0,3199,
3178,1,0,0,0,3199,3190,1,0,0,0,3200,185,1,0,0,0,3201,3202,5,28,0,0,3202,
3203,5,261,0,0,3203,3205,5,272,0,0,3204,3206,3,742,371,0,3205,3204,1,0,0,
0,3205,3206,1,0,0,0,3206,3207,1,0,0,0,3207,3208,3,956,478,0,3208,3209,5,
558,0,0,3209,3210,5,745,0,0,3210,3211,3,956,478,0,3211,3230,1,0,0,0,3212,
3213,5,28,0,0,3213,3214,5,261,0,0,3214,3216,5,272,0,0,3215,3217,3,742,371,
0,3216,3215,1,0,0,0,3216,3217,1,0,0,0,3217,3218,1,0,0,0,3218,3219,3,956,
478,0,3219,3223,5,640,0,0,3220,3222,3,470,235,0,3221,3220,1,0,0,0,3222,3225,
1,0,0,0,3223,3221,1,0,0,0,3223,3224,1,0,0,0,3224,3227,1,0,0,0,3225,3223,
1,0,0,0,3226,3228,3,738,369,0,3227,3226,1,0,0,0,3227,3228,1,0,0,0,3228,3230,
1,0,0,0,3229,3201,1,0,0,0,3229,3212,1,0,0,0,3230,187,1,0,0,0,3231,3232,3,
190,95,0,3232,3233,5,558,0,0,3233,3234,5,745,0,0,3234,3235,3,956,478,0,3235,
3303,1,0,0,0,3236,3237,3,190,95,0,3237,3238,5,640,0,0,3238,3239,3,738,369,
0,3239,3303,1,0,0,0,3240,3241,3,190,95,0,3241,3242,5,640,0,0,3242,3243,5,
629,0,0,3243,3303,1,0,0,0,3244,3245,3,190,95,0,3245,3246,5,770,0,0,3246,
3247,7,15,0,0,3247,3303,1,0,0,0,3248,3249,3,190,95,0,3249,3250,5,640,0,0,
3250,3251,5,36,0,0,3251,3252,5,878,0,0,3252,3253,3,956,478,0,3253,3303,1,
0,0,0,3254,3255,3,190,95,0,3255,3256,5,640,0,0,3256,3257,5,307,0,0,3257,
3258,5,878,0,0,3258,3262,5,888,0,0,3259,3261,3,354,177,0,3260,3259,1,0,0,
0,3261,3264,1,0,0,0,3262,3260,1,0,0,0,3262,3263,1,0,0,0,3263,3265,1,0,0,
0,3264,3262,1,0,0,0,3265,3266,5,889,0,0,3266,3303,1,0,0,0,3267,3268,3,190,
95,0,3268,3269,5,640,0,0,3269,3270,5,146,0,0,3270,3271,5,878,0,0,3271,3275,
5,888,0,0,3272,3274,3,956,478,0,3273,3272,1,0,0,0,3274,3277,1,0,0,0,3275,
3273,1,0,0,0,3275,3276,1,0,0,0,3276,3278,1,0,0,0,3277,3275,1,0,0,0,3278,
3279,5,889,0,0,3279,3303,1,0,0,0,3280,3281,3,190,95,0,3281,3282,5,640,0,
0,3282,3283,5,392,0,0,3283,3284,5,878,0,0,3284,3285,3,986,493,0,3285,3303,
1,0,0,0,3286,3287,3,190,95,0,3287,3288,5,640,0,0,3288,3289,5,136,0,0,3289,
3290,5,878,0,0,3290,3291,3,356,178,0,3291,3303,1,0,0,0,3292,3293,3,190,95,
0,3293,3294,5,640,0,0,3294,3295,7,16,0,0,3295,3296,5,878,0,0,3296,3297,3,
956,478,0,3297,3303,1,0,0,0,3298,3299,3,190,95,0,3299,3300,5,770,0,0,3300,
3301,7,17,0,0,3301,3303,1,0,0,0,3302,3231,1,0,0,0,3302,3236,1,0,0,0,3302,
3240,1,0,0,0,3302,3244,1,0,0,0,3302,3248,1,0,0,0,3302,3254,1,0,0,0,3302,
3267,1,0,0,0,3302,3280,1,0,0,0,3302,3286,1,0,0,0,3302,3292,1,0,0,0,3302,
3298,1,0,0,0,3303,189,1,0,0,0,3304,3305,5,28,0,0,3305,3307,5,278,0,0,3306,
3308,3,742,371,0,3307,3306,1,0,0,0,3307,3308,1,0,0,0,3308,3309,1,0,0,0,3309,
3310,3,956,478,0,3310,3312,5,888,0,0,3311,3313,3,192,96,0,3312,3311,1,0,
0,0,3312,3313,1,0,0,0,3313,3314,1,0,0,0,3314,3315,5,889,0,0,3315,191,1,0,
0,0,3316,3321,3,1012,506,0,3317,3318,5,894,0,0,3318,3320,3,1012,506,0,3319,
3317,1,0,0,0,3320,3323,1,0,0,0,3321,3319,1,0,0,0,3321,3322,1,0,0,0,3322,
193,1,0,0,0,3323,3321,1,0,0,0,3324,3325,5,28,0,0,3325,3326,5,384,0,0,3326,
3328,5,517,0,0,3327,3329,3,742,371,0,3328,3327,1,0,0,0,3328,3329,1,0,0,0,
3329,3330,1,0,0,0,3330,3331,3,956,478,0,3331,3332,5,640,0,0,3332,3333,5,
92,0,0,3333,3334,5,874,0,0,3334,3335,3,992,496,0,3335,3358,1,0,0,0,3336,
3337,5,28,0,0,3337,3338,5,384,0,0,3338,3340,5,517,0,0,3339,3341,3,742,371,
0,3340,3339,1,0,0,0,3340,3341,1,0,0,0,3341,3342,1,0,0,0,3342,3343,3,956,
478,0,3343,3344,5,558,0,0,3344,3345,5,745,0,0,3345,3346,3,956,478,0,3346,
3358,1,0,0,0,3347,3348,5,28,0,0,3348,3349,5,384,0,0,3349,3351,5,517,0,0,
3350,3352,3,742,371,0,3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,3353,1,0,
0,0,3353,3354,3,956,478,0,3354,3355,5,640,0,0,3355,3356,3,738,369,0,3356,
3358,1,0,0,0,3357,3324,1,0,0,0,3357,3336,1,0,0,0,3357,3347,1,0,0,0,3358,
195,1,0,0,0,3359,3360,5,28,0,0,3360,3361,5,391,0,0,3361,3362,5,793,0,0,3362,
3388,3,956,478,0,3363,3364,5,558,0,0,3364,3365,5,745,0,0,3365,3389,3,956,
478,0,3366,3367,5,127,0,0,3367,3368,5,96,0,0,3368,3369,5,888,0,0,3369,3370,
3,988,494,0,3370,3371,5,889,0,0,3371,3389,1,0,0,0,3372,3373,5,200,0,0,3373,
3374,5,128,0,0,3374,3389,5,353,0,0,3375,3377,3,152,76,0,3376,3378,5,546,
0,0,3377,3376,1,0,0,0,3377,3378,1,0,0,0,3378,3389,1,0,0,0,3379,3381,5,640,
0,0,3380,3382,5,629,0,0,3381,3380,1,0,0,0,3381,3382,1,0,0,0,3382,3384,1,
0,0,0,3383,3385,3,738,369,0,3384,3383,1,0,0,0,3384,3385,1,0,0,0,3385,3389,
1,0,0,0,3386,3387,5,770,0,0,3387,3389,7,15,0,0,3388,3363,1,0,0,0,3388,3366,
1,0,0,0,3388,3372,1,0,0,0,3388,3375,1,0,0,0,3388,3379,1,0,0,0,3388,3386,
1,0,0,0,3389,197,1,0,0,0,3390,3391,5,28,0,0,3391,3392,5,419,0,0,3392,3393,
5,517,0,0,3393,3394,3,320,160,0,3394,199,1,0,0,0,3395,3397,5,28,0,0,3396,
3398,5,430,0,0,3397,3396,1,0,0,0,3397,3398,1,0,0,0,3398,3399,1,0,0,0,3399,
3401,5,337,0,0,3400,3402,3,742,371,0,3401,3400,1,0,0,0,3401,3402,1,0,0,0,
3402,3403,1,0,0,0,3403,3404,3,956,478,0,3404,3406,5,640,0,0,3405,3407,3,
148,74,0,3406,3405,1,0,0,0,3406,3407,1,0,0,0,3407,3408,1,0,0,0,3408,3410,
3,406,203,0,3409,3411,3,738,369,0,3410,3409,1,0,0,0,3410,3411,1,0,0,0,3411,
3456,1,0,0,0,3412,3414,5,28,0,0,3413,3415,5,430,0,0,3414,3413,1,0,0,0,3414,
3415,1,0,0,0,3415,3416,1,0,0,0,3416,3418,5,337,0,0,3417,3419,3,742,371,0,
3418,3417,1,0,0,0,3418,3419,1,0,0,0,3419,3420,1,0,0,0,3420,3421,3,956,478,
0,3421,3423,5,640,0,0,3422,3424,3,148,74,0,3423,3422,1,0,0,0,3423,3424,1,
0,0,0,3424,3425,1,0,0,0,3425,3427,3,408,204,0,3426,3428,3,738,369,0,3427,
3426,1,0,0,0,3427,3428,1,0,0,0,3428,3456,1,0,0,0,3429,3431,5,28,0,0,3430,
3432,5,430,0,0,3431,3430,1,0,0,0,3431,3432,1,0,0,0,3432,3433,1,0,0,0,3433,
3434,5,337,0,0,3434,3435,3,956,478,0,3435,3436,3,326,163,0,3436,3456,1,0,
0,0,3437,3439,5,28,0,0,3438,3440,5,430,0,0,3439,3438,1,0,0,0,3439,3440,1,
0,0,0,3440,3441,1,0,0,0,3441,3442,5,337,0,0,3442,3443,3,956,478,0,3443,3444,
3,330,165,0,3444,3456,1,0,0,0,3445,3447,5,28,0,0,3446,3448,5,430,0,0,3447,
3446,1,0,0,0,3447,3448,1,0,0,0,3448,3449,1,0,0,0,3449,3450,5,337,0,0,3450,
3451,3,742,371,0,3451,3452,3,956,478,0,3452,3453,5,770,0,0,3453,3454,7,18,
0,0,3454,3456,1,0,0,0,3455,3395,1,0,0,0,3455,3412,1,0,0,0,3455,3429,1,0,
0,0,3455,3437,1,0,0,0,3455,3445,1,0,0,0,3456,201,1,0,0,0,3457,3458,5,28,
0,0,3458,3460,5,512,0,0,3459,3461,3,742,371,0,3460,3459,1,0,0,0,3460,3461,
1,0,0,0,3461,3462,1,0,0,0,3462,3463,3,956,478,0,3463,3465,5,640,0,0,3464,
3466,3,142,71,0,3465,3464,1,0,0,0,3465,3466,1,0,0,0,3466,3468,1,0,0,0,3467,
3469,3,738,369,0,3468,3467,1,0,0,0,3468,3469,1,0,0,0,3469,3518,1,0,0,0,3470,
3471,5,28,0,0,3471,3472,5,512,0,0,3472,3473,3,956,478,0,3473,3474,3,326,
163,0,3474,3518,1,0,0,0,3475,3476,5,28,0,0,3476,3477,5,512,0,0,3477,3478,
3,956,478,0,3478,3479,3,330,165,0,3479,3518,1,0,0,0,3480,3481,5,28,0,0,3481,
3483,5,512,0,0,3482,3484,3,742,371,0,3483,3482,1,0,0,0,3483,3484,1,0,0,0,
3484,3485,1,0,0,0,3485,3486,3,956,478,0,3486,3487,5,770,0,0,3487,3488,5,
514,0,0,3488,3489,5,878,0,0,3489,3490,3,508,254,0,3490,3518,1,0,0,0,3491,
3492,5,28,0,0,3492,3494,5,512,0,0,3493,3495,3,742,371,0,3494,3493,1,0,0,
0,3494,3495,1,0,0,0,3495,3496,1,0,0,0,3496,3497,3,956,478,0,3497,3498,5,
770,0,0,3498,3499,5,134,0,0,3499,3518,1,0,0,0,3500,3501,5,28,0,0,3501,3503,
5,512,0,0,3502,3504,3,742,371,0,3503,3502,1,0,0,0,3503,3504,1,0,0,0,3504,
3505,1,0,0,0,3505,3506,3,956,478,0,3506,3510,5,551,0,0,3507,3508,5,519,0,
0,3508,3509,5,878,0,0,3509,3511,3,950,475,0,3510,3507,1,0,0,0,3510,3511,
1,0,0,0,3511,3515,1,0,0,0,3512,3513,5,409,0,0,3513,3514,5,878,0,0,3514,3516,
3,950,475,0,3515,3512,1,0,0,0,3515,3516,1,0,0,0,3516,3518,1,0,0,0,3517,3457,
1,0,0,0,3517,3470,1,0,0,0,3517,3475,1,0,0,0,3517,3480,1,0,0,0,3517,3491,
1,0,0,0,3517,3500,1,0,0,0,3518,203,1,0,0,0,3519,3520,5,28,0,0,3520,3522,
5,527,0,0,3521,3523,3,742,371,0,3522,3521,1,0,0,0,3522,3523,1,0,0,0,3523,
3524,1,0,0,0,3524,3525,3,956,478,0,3525,3527,5,888,0,0,3526,3528,3,192,96,
0,3527,3526,1,0,0,0,3527,3528,1,0,0,0,3528,3529,1,0,0,0,3529,3530,5,889,
0,0,3530,3531,5,558,0,0,3531,3532,5,745,0,0,3532,3533,3,956,478,0,3533,3578,
1,0,0,0,3534,3535,5,28,0,0,3535,3537,5,527,0,0,3536,3538,3,742,371,0,3537,
3536,1,0,0,0,3537,3538,1,0,0,0,3538,3539,1,0,0,0,3539,3540,3,956,478,0,3540,
3542,5,888,0,0,3541,3543,3,192,96,0,3542,3541,1,0,0,0,3542,3543,1,0,0,0,
3543,3544,1,0,0,0,3544,3545,5,889,0,0,3545,3546,5,640,0,0,3546,3547,3,738,
369,0,3547,3578,1,0,0,0,3548,3549,5,28,0,0,3549,3551,5,527,0,0,3550,3552,
3,742,371,0,3551,3550,1,0,0,0,3551,3552,1,0,0,0,3552,3553,1,0,0,0,3553,3554,
3,956,478,0,3554,3556,5,888,0,0,3555,3557,3,192,96,0,3556,3555,1,0,0,0,3556,
3557,1,0,0,0,3557,3558,1,0,0,0,3558,3559,5,889,0,0,3559,3560,5,770,0,0,3560,
3561,5,134,0,0,3561,3578,1,0,0,0,3562,3563,5,28,0,0,3563,3565,5,527,0,0,
3564,3566,3,742,371,0,3565,3564,1,0,0,0,3565,3566,1,0,0,0,3566,3567,1,0,
0,0,3567,3568,3,956,478,0,3568,3570,5,888,0,0,3569,3571,3,192,96,0,3570,
3569,1,0,0,0,3570,3571,1,0,0,0,3571,3572,1,0,0,0,3572,3573,5,889,0,0,3573,
3574,5,234,0,0,3574,3575,5,43,0,0,3575,3576,3,414,207,0,3576,3578,1,0,0,
0,3577,3519,1,0,0,0,3577,3534,1,0,0,0,3577,3548,1,0,0,0,3577,3562,1,0,0,
0,3578,205,1,0,0,0,3579,3580,5,28,0,0,3580,3581,5,563,0,0,3581,3583,5,297,
0,0,3582,3584,3,742,371,0,3583,3582,1,0,0,0,3583,3584,1,0,0,0,3584,3585,
1,0,0,0,3585,3586,3,956,478,0,3586,3587,5,558,0,0,3587,3588,5,745,0,0,3588,
3589,3,956,478,0,3589,3766,1,0,0,0,3590,3591,5,28,0,0,3591,3592,5,563,0,
0,3592,3594,5,297,0,0,3593,3595,3,742,371,0,3594,3593,1,0,0,0,3594,3595,
1,0,0,0,3595,3596,1,0,0,0,3596,3597,3,956,478,0,3597,3601,5,640,0,0,3598,
3599,5,457,0,0,3599,3600,5,878,0,0,3600,3602,3,936,468,0,3601,3598,1,0,0,
0,3601,3602,1,0,0,0,3602,3606,1,0,0,0,3603,3604,5,564,0,0,3604,3605,5,878,
0,0,3605,3607,3,950,475,0,3606,3603,1,0,0,0,3606,3607,1,0,0,0,3607,3766,
1,0,0,0,3608,3609,5,28,0,0,3609,3610,5,563,0,0,3610,3612,5,297,0,0,3611,
3613,3,742,371,0,3612,3611,1,0,0,0,3612,3613,1,0,0,0,3613,3614,1,0,0,0,3614,
3615,3,956,478,0,3615,3616,5,640,0,0,3616,3617,5,457,0,0,3617,3618,5,878,
0,0,3618,3619,3,936,468,0,3619,3620,5,20,0,0,3620,3621,5,878,0,0,3621,3626,
3,374,187,0,3622,3623,5,894,0,0,3623,3625,3,374,187,0,3624,3622,1,0,0,0,
3625,3628,1,0,0,0,3626,3624,1,0,0,0,3626,3627,1,0,0,0,3627,3632,1,0,0,0,
3628,3626,1,0,0,0,3629,3630,5,564,0,0,3630,3631,5,878,0,0,3631,3633,3,950,
475,0,3632,3629,1,0,0,0,3632,3633,1,0,0,0,3633,3766,1,0,0,0,3634,3635,5,
28,0,0,3635,3636,5,563,0,0,3636,3638,5,297,0,0,3637,3639,3,742,371,0,3638,
3637,1,0,0,0,3638,3639,1,0,0,0,3639,3640,1,0,0,0,3640,3641,3,956,478,0,3641,
3642,5,10,0,0,3642,3643,3,178,89,0,3643,3644,5,745,0,0,3644,3645,5,19,0,
0,3645,3766,1,0,0,0,3646,3647,5,28,0,0,3647,3648,5,563,0,0,3648,3650,5,297,
0,0,3649,3651,3,742,371,0,3650,3649,1,0,0,0,3650,3651,1,0,0,0,3651,3652,
1,0,0,0,3652,3653,3,956,478,0,3653,3654,5,414,0,0,3654,3655,5,165,0,0,3655,
3656,3,178,89,0,3656,3657,5,745,0,0,3657,3658,5,563,0,0,3658,3659,5,297,
0,0,3659,3660,3,956,478,0,3660,3766,1,0,0,0,3661,3662,5,28,0,0,3662,3663,
5,563,0,0,3663,3665,5,297,0,0,3664,3666,3,742,371,0,3665,3664,1,0,0,0,3665,
3666,1,0,0,0,3666,3667,1,0,0,0,3667,3668,3,956,478,0,3668,3669,5,557,0,0,
3669,3670,3,178,89,0,3670,3671,5,276,0,0,3671,3672,5,19,0,0,3672,3766,1,
0,0,0,3673,3674,5,28,0,0,3674,3675,5,563,0,0,3675,3677,5,297,0,0,3676,3678,
3,742,371,0,3677,3676,1,0,0,0,3677,3678,1,0,0,0,3678,3679,1,0,0,0,3679,3680,
3,956,478,0,3680,3681,5,10,0,0,3681,3682,3,180,90,0,3682,3683,5,745,0,0,
3683,3684,5,22,0,0,3684,3766,1,0,0,0,3685,3686,5,28,0,0,3686,3687,5,563,
0,0,3687,3689,5,297,0,0,3688,3690,3,742,371,0,3689,3688,1,0,0,0,3689,3690,
1,0,0,0,3690,3691,1,0,0,0,3691,3692,3,956,478,0,3692,3693,5,414,0,0,3693,
3694,5,643,0,0,3694,3695,3,180,90,0,3695,3696,5,745,0,0,3696,3697,5,563,
0,0,3697,3698,5,297,0,0,3698,3699,3,956,478,0,3699,3766,1,0,0,0,3700,3701,
5,28,0,0,3701,3702,5,563,0,0,3702,3704,5,297,0,0,3703,3705,3,742,371,0,3704,
3703,1,0,0,0,3704,3705,1,0,0,0,3705,3706,1,0,0,0,3706,3707,3,956,478,0,3707,
3708,5,557,0,0,3708,3709,3,180,90,0,3709,3710,5,276,0,0,3710,3711,5,22,0,
0,3711,3766,1,0,0,0,3712,3713,5,28,0,0,3713,3714,5,563,0,0,3714,3716,5,297,
0,0,3715,3717,3,742,371,0,3716,3715,1,0,0,0,3716,3717,1,0,0,0,3717,3718,
1,0,0,0,3718,3719,3,956,478,0,3719,3720,5,10,0,0,3720,3721,3,168,84,0,3721,
3722,5,745,0,0,3722,3724,5,18,0,0,3723,3725,3,174,87,0,3724,3723,1,0,0,0,
3724,3725,1,0,0,0,3725,3766,1,0,0,0,3726,3727,5,28,0,0,3727,3728,5,563,0,
0,3728,3730,5,297,0,0,3729,3731,3,742,371,0,3730,3729,1,0,0,0,3730,3731,
1,0,0,0,3731,3732,1,0,0,0,3732,3733,3,956,478,0,3733,3734,5,557,0,0,3734,
3735,3,168,84,0,3735,3736,5,276,0,0,3736,3737,5,18,0,0,3737,3766,1,0,0,0,
3738,3739,5,28,0,0,3739,3740,5,563,0,0,3740,3742,5,297,0,0,3741,3743,3,742,
371,0,3742,3741,1,0,0,0,3742,3743,1,0,0,0,3743,3744,1,0,0,0,3744,3745,3,
956,478,0,3745,3746,5,551,0,0,3746,3766,1,0,0,0,3747,3748,5,28,0,0,3748,
3749,5,563,0,0,3749,3751,5,297,0,0,3750,3752,3,742,371,0,3751,3750,1,0,0,
0,3751,3752,1,0,0,0,3752,3753,1,0,0,0,3753,3754,3,956,478,0,3754,3755,5,
700,0,0,3755,3766,1,0,0,0,3756,3757,5,28,0,0,3757,3758,5,563,0,0,3758,3760,
5,297,0,0,3759,3761,3,742,371,0,3760,3759,1,0,0,0,3760,3761,1,0,0,0,3761,
3762,1,0,0,0,3762,3763,3,956,478,0,3763,3764,5,577,0,0,3764,3766,1,0,0,0,
3765,3579,1,0,0,0,3765,3590,1,0,0,0,3765,3608,1,0,0,0,3765,3634,1,0,0,0,
3765,3646,1,0,0,0,3765,3661,1,0,0,0,3765,3673,1,0,0,0,3765,3685,1,0,0,0,
3765,3700,1,0,0,0,3765,3712,1,0,0,0,3765,3726,1,0,0,0,3765,3738,1,0,0,0,
3765,3747,1,0,0,0,3765,3756,1,0,0,0,3766,207,1,0,0,0,3767,3768,5,153,0,0,
3768,3769,5,878,0,0,3769,3770,3,986,493,0,3770,209,1,0,0,0,3771,3772,5,275,
0,0,3772,3773,5,878,0,0,3773,3774,7,19,0,0,3774,211,1,0,0,0,3775,3776,5,
434,0,0,3776,3777,5,878,0,0,3777,3778,5,888,0,0,3778,3783,3,956,478,0,3779,
3780,5,894,0,0,3780,3782,3,956,478,0,3781,3779,1,0,0,0,3782,3785,1,0,0,0,
3783,3781,1,0,0,0,3783,3784,1,0,0,0,3784,3786,1,0,0,0,3785,3783,1,0,0,0,
3786,3787,5,889,0,0,3787,213,1,0,0,0,3788,3789,5,465,0,0,3789,3790,3,986,
493,0,3790,3791,5,509,0,0,3791,3792,5,198,0,0,3792,3793,7,20,0,0,3793,215,
1,0,0,0,3794,3795,5,28,0,0,3795,3796,5,569,0,0,3796,3798,5,411,0,0,3797,
3799,3,742,371,0,3798,3797,1,0,0,0,3798,3799,1,0,0,0,3799,3800,1,0,0,0,3800,
3821,3,956,478,0,3801,3803,5,640,0,0,3802,3804,3,208,104,0,3803,3802,1,0,
0,0,3803,3804,1,0,0,0,3804,3806,1,0,0,0,3805,3807,3,210,105,0,3806,3805,
1,0,0,0,3806,3807,1,0,0,0,3807,3814,1,0,0,0,3808,3809,5,677,0,0,3809,3810,
5,878,0,0,3810,3811,5,888,0,0,3811,3815,3,950,475,0,3812,3813,5,319,0,0,
3813,3815,5,889,0,0,3814,3808,1,0,0,0,3814,3812,1,0,0,0,3814,3815,1,0,0,
0,3815,3819,1,0,0,0,3816,3817,5,218,0,0,3817,3818,5,878,0,0,3818,3820,3,
950,475,0,3819,3816,1,0,0,0,3819,3820,1,0,0,0,3820,3822,1,0,0,0,3821,3801,
1,0,0,0,3821,3822,1,0,0,0,3822,3835,1,0,0,0,3823,3833,3,212,106,0,3824,3825,
5,755,0,0,3825,3830,3,214,107,0,3826,3827,5,894,0,0,3827,3829,3,214,107,
0,3828,3826,1,0,0,0,3829,3832,1,0,0,0,3830,3828,1,0,0,0,3830,3831,1,0,0,
0,3831,3834,1,0,0,0,3832,3830,1,0,0,0,3833,3824,1,0,0,0,3833,3834,1,0,0,
0,3834,3836,1,0,0,0,3835,3823,1,0,0,0,3835,3836,1,0,0,0,3836,217,1,0,0,0,
3837,3838,5,28,0,0,3838,3840,5,587,0,0,3839,3841,3,742,371,0,3840,3839,1,
0,0,0,3840,3841,1,0,0,0,3841,3842,1,0,0,0,3842,3843,3,956,478,0,3843,3844,
5,558,0,0,3844,3845,5,745,0,0,3845,3846,3,956,478,0,3846,3882,1,0,0,0,3847,
3848,5,28,0,0,3848,3850,5,587,0,0,3849,3851,3,742,371,0,3850,3849,1,0,0,
0,3850,3851,1,0,0,0,3851,3852,1,0,0,0,3852,3853,3,956,478,0,3853,3854,5,
640,0,0,3854,3855,3,738,369,0,3855,3882,1,0,0,0,3856,3857,5,28,0,0,3857,
3859,5,587,0,0,3858,3860,3,742,371,0,3859,3858,1,0,0,0,3859,3860,1,0,0,0,
3860,3861,1,0,0,0,3861,3862,3,956,478,0,3862,3863,5,770,0,0,3863,3864,5,
134,0,0,3864,3882,1,0,0,0,3865,3866,5,28,0,0,3866,3868,5,587,0,0,3867,3869,
3,742,371,0,3868,3867,1,0,0,0,3868,3869,1,0,0,0,3869,3870,1,0,0,0,3870,3871,
3,956,478,0,3871,3872,3,326,163,0,3872,3882,1,0,0,0,3873,3874,5,28,0,0,3874,
3876,5,587,0,0,3875,3877,3,742,371,0,3876,3875,1,0,0,0,3876,3877,1,0,0,0,
3877,3878,1,0,0,0,3878,3879,3,956,478,0,3879,3880,3,330,165,0,3880,3882,
1,0,0,0,3881,3837,1,0,0,0,3881,3847,1,0,0,0,3881,3856,1,0,0,0,3881,3865,
1,0,0,0,3881,3873,1,0,0,0,3882,219,1,0,0,0,3883,3884,5,28,0,0,3884,3885,
5,593,0,0,3885,3886,5,5,0,0,3886,3888,5,517,0,0,3887,3889,3,742,371,0,3888,
3887,1,0,0,0,3888,3889,1,0,0,0,3889,3890,1,0,0,0,3890,3891,3,956,478,0,3891,
3892,5,640,0,0,3892,3893,5,92,0,0,3893,3894,5,874,0,0,3894,3895,3,992,496,
0,3895,3920,1,0,0,0,3896,3897,5,28,0,0,3897,3898,5,593,0,0,3898,3899,5,5,
0,0,3899,3901,5,517,0,0,3900,3902,3,742,371,0,3901,3900,1,0,0,0,3901,3902,
1,0,0,0,3902,3903,1,0,0,0,3903,3904,3,956,478,0,3904,3905,5,558,0,0,3905,
3906,5,745,0,0,3906,3907,3,956,478,0,3907,3920,1,0,0,0,3908,3909,5,28,0,
0,3909,3910,5,593,0,0,3910,3911,5,5,0,0,3911,3913,5,517,0,0,3912,3914,3,
742,371,0,3913,3912,1,0,0,0,3913,3914,1,0,0,0,3914,3915,1,0,0,0,3915,3916,
3,956,478,0,3916,3917,5,640,0,0,3917,3918,3,738,369,0,3918,3920,1,0,0,0,
3919,3883,1,0,0,0,3919,3896,1,0,0,0,3919,3908,1,0,0,0,3920,221,1,0,0,0,3921,
3922,5,28,0,0,3922,3924,5,623,0,0,3923,3925,3,742,371,0,3924,3923,1,0,0,
0,3924,3925,1,0,0,0,3925,3926,1,0,0,0,3926,3927,3,932,466,0,3927,3928,5,
558,0,0,3928,3929,5,745,0,0,3929,3930,3,932,466,0,3930,4006,1,0,0,0,3931,
3932,5,28,0,0,3932,3934,5,623,0,0,3933,3935,3,742,371,0,3934,3933,1,0,0,
0,3934,3935,1,0,0,0,3935,3936,1,0,0,0,3936,3937,3,932,466,0,3937,3938,5,
704,0,0,3938,3939,5,805,0,0,3939,3940,3,932,466,0,3940,4006,1,0,0,0,3941,
3942,5,28,0,0,3942,3944,5,623,0,0,3943,3945,3,742,371,0,3944,3943,1,0,0,
0,3944,3945,1,0,0,0,3945,3946,1,0,0,0,3946,3947,3,932,466,0,3947,3951,5,
640,0,0,3948,3949,5,166,0,0,3949,3950,5,878,0,0,3950,3952,3,986,493,0,3951,
3948,1,0,0,0,3951,3952,1,0,0,0,3952,3956,1,0,0,0,3953,3954,5,395,0,0,3954,
3955,5,878,0,0,3955,3957,3,986,493,0,3956,3953,1,0,0,0,3956,3957,1,0,0,0,
3957,3959,1,0,0,0,3958,3960,3,140,70,0,3959,3958,1,0,0,0,3959,3960,1,0,0,
0,3960,3962,1,0,0,0,3961,3963,3,738,369,0,3962,3961,1,0,0,0,3962,3963,1,
0,0,0,3963,4006,1,0,0,0,3964,3965,5,28,0,0,3965,3967,5,623,0,0,3966,3968,
3,742,371,0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,3969,1,0,0,0,3969,3970,
3,932,466,0,3970,3971,3,326,163,0,3971,4006,1,0,0,0,3972,3973,5,28,0,0,3973,
3975,5,623,0,0,3974,3976,3,742,371,0,3975,3974,1,0,0,0,3975,3976,1,0,0,0,
3976,3977,1,0,0,0,3977,3978,3,932,466,0,3978,3979,3,330,165,0,3979,4006,
1,0,0,0,3980,3981,5,28,0,0,3981,3983,5,623,0,0,3982,3984,3,742,371,0,3983,
3982,1,0,0,0,3983,3984,1,0,0,0,3984,3985,1,0,0,0,3985,3986,3,932,466,0,3986,
3987,5,770,0,0,3987,3992,3,224,112,0,3988,3989,5,894,0,0,3989,3991,3,224,
112,0,3990,3988,1,0,0,0,3991,3994,1,0,0,0,3992,3990,1,0,0,0,3992,3993,1,
0,0,0,3993,4006,1,0,0,0,3994,3992,1,0,0,0,3995,3996,5,28,0,0,3996,3998,5,
623,0,0,3997,3999,3,742,371,0,3998,3997,1,0,0,0,3998,3999,1,0,0,0,3999,4000,
1,0,0,0,4000,4001,3,932,466,0,4001,4002,7,21,0,0,4002,4003,5,383,0,0,4003,
4004,5,5,0,0,4004,4006,1,0,0,0,4005,3921,1,0,0,0,4005,3931,1,0,0,0,4005,
3941,1,0,0,0,4005,3964,1,0,0,0,4005,3972,1,0,0,0,4005,3980,1,0,0,0,4005,
3995,1,0,0,0,4006,223,1,0,0,0,4007,4008,7,13,0,0,4008,225,1,0,0,0,4009,4010,
5,28,0,0,4010,4012,5,634,0,0,4011,4013,3,742,371,0,4012,4011,1,0,0,0,4012,
4013,1,0,0,0,4013,4014,1,0,0,0,4014,4015,3,982,491,0,4015,4016,5,558,0,0,
4016,4017,5,745,0,0,4017,4018,3,982,491,0,4018,4062,1,0,0,0,4019,4020,5,
28,0,0,4020,4022,5,634,0,0,4021,4023,3,742,371,0,4022,4021,1,0,0,0,4022,
4023,1,0,0,0,4023,4024,1,0,0,0,4024,4026,3,982,491,0,4025,4027,5,640,0,0,
4026,4025,1,0,0,0,4026,4027,1,0,0,0,4027,4036,1,0,0,0,4028,4030,5,326,0,
0,4029,4031,5,96,0,0,4030,4029,1,0,0,0,4030,4031,1,0,0,0,4031,4033,1,0,0,
0,4032,4034,5,878,0,0,4033,4032,1,0,0,0,4033,4034,1,0,0,0,4034,4035,1,0,
0,0,4035,4037,3,986,493,0,4036,4028,1,0,0,0,4036,4037,1,0,0,0,4037,4062,
1,0,0,0,4038,4039,5,28,0,0,4039,4041,5,634,0,0,4040,4042,3,742,371,0,4041,
4040,1,0,0,0,4041,4042,1,0,0,0,4042,4043,1,0,0,0,4043,4044,3,982,491,0,4044,
4050,5,640,0,0,4045,4047,3,568,284,0,4046,4045,1,0,0,0,4046,4047,1,0,0,0,
4047,4048,1,0,0,0,4048,4051,3,738,369,0,4049,4051,3,568,284,0,4050,4046,
1,0,0,0,4050,4049,1,0,0,0,4051,4062,1,0,0,0,4052,4053,5,28,0,0,4053,4055,
5,634,0,0,4054,4056,3,742,371,0,4055,4054,1,0,0,0,4055,4056,1,0,0,0,4056,
4057,1,0,0,0,4057,4058,3,982,491,0,4058,4059,5,770,0,0,4059,4060,5,134,0,
0,4060,4062,1,0,0,0,4061,4009,1,0,0,0,4061,4019,1,0,0,0,4061,4038,1,0,0,
0,4061,4052,1,0,0,0,4062,227,1,0,0,0,4063,4065,5,28,0,0,4064,4066,5,630,
0,0,4065,4064,1,0,0,0,4065,4066,1,0,0,0,4066,4067,1,0,0,0,4067,4068,5,337,
0,0,4068,4069,3,742,371,0,4069,4070,3,956,478,0,4070,4074,5,640,0,0,4071,
4072,5,764,0,0,4072,4073,5,878,0,0,4073,4075,5,241,0,0,4074,4071,1,0,0,0,
4074,4075,1,0,0,0,4075,4079,1,0,0,0,4076,4077,5,209,0,0,4077,4078,5,878,
0,0,4078,4080,3,508,254,0,4079,4076,1,0,0,0,4079,4080,1,0,0,0,4080,4084,
1,0,0,0,4081,4082,5,254,0,0,4082,4083,5,878,0,0,4083,4085,7,22,0,0,4084,
4081,1,0,0,0,4084,4085,1,0,0,0,4085,4089,1,0,0,0,4086,4087,5,247,0,0,4087,
4088,5,878,0,0,4088,4090,3,950,475,0,4089,4086,1,0,0,0,4089,4090,1,0,0,0,
4090,4100,1,0,0,0,4091,4092,5,253,0,0,4092,4098,5,878,0,0,4093,4099,3,950,
475,0,4094,4095,5,888,0,0,4095,4096,3,952,476,0,4096,4097,5,889,0,0,4097,
4099,1,0,0,0,4098,4093,1,0,0,0,4098,4094,1,0,0,0,4099,4101,1,0,0,0,4100,
4091,1,0,0,0,4100,4101,1,0,0,0,4101,4105,1,0,0,0,4102,4103,5,252,0,0,4103,
4104,5,878,0,0,4104,4106,3,950,475,0,4105,4102,1,0,0,0,4105,4106,1,0,0,0,
4106,4110,1,0,0,0,4107,4108,5,248,0,0,4108,4109,5,878,0,0,4109,4111,3,950,
475,0,4110,4107,1,0,0,0,4110,4111,1,0,0,0,4111,4121,1,0,0,0,4112,4113,5,
248,0,0,4113,4119,5,878,0,0,4114,4120,3,950,475,0,4115,4116,5,888,0,0,4116,
4117,3,952,476,0,4117,4118,5,889,0,0,4118,4120,1,0,0,0,4119,4114,1,0,0,0,
4119,4115,1,0,0,0,4120,4122,1,0,0,0,4121,4112,1,0,0,0,4121,4122,1,0,0,0,
4122,4126,1,0,0,0,4123,4124,5,249,0,0,4124,4125,5,878,0,0,4125,4127,3,950,
475,0,4126,4123,1,0,0,0,4126,4127,1,0,0,0,4127,4131,1,0,0,0,4128,4129,5,
250,0,0,4129,4130,5,878,0,0,4130,4132,3,950,475,0,4131,4128,1,0,0,0,4131,
4132,1,0,0,0,4132,4139,1,0,0,0,4133,4134,5,246,0,0,4134,4135,5,878,0,0,4135,
4136,5,888,0,0,4136,4137,3,952,476,0,4137,4138,5,889,0,0,4138,4140,1,0,0,
0,4139,4133,1,0,0,0,4139,4140,1,0,0,0,4140,4147,1,0,0,0,4141,4142,5,243,
0,0,4142,4143,5,878,0,0,4143,4144,5,888,0,0,4144,4145,3,952,476,0,4145,4146,
5,889,0,0,4146,4148,1,0,0,0,4147,4141,1,0,0,0,4147,4148,1,0,0,0,4148,4155,
1,0,0,0,4149,4150,5,245,0,0,4150,4151,5,878,0,0,4151,4152,5,888,0,0,4152,
4153,3,950,475,0,4153,4154,5,889,0,0,4154,4156,1,0,0,0,4155,4149,1,0,0,0,
4155,4156,1,0,0,0,4156,4160,1,0,0,0,4157,4158,5,244,0,0,4158,4159,5,878,
0,0,4159,4161,7,23,0,0,4160,4157,1,0,0,0,4160,4161,1,0,0,0,4161,4165,1,0,
0,0,4162,4163,5,244,0,0,4163,4164,5,878,0,0,4164,4166,3,950,475,0,4165,4162,
1,0,0,0,4165,4166,1,0,0,0,4166,4202,1,0,0,0,4167,4169,5,28,0,0,4168,4170,
5,630,0,0,4169,4168,1,0,0,0,4169,4170,1,0,0,0,4170,4171,1,0,0,0,4171,4173,
5,337,0,0,4172,4174,3,742,371,0,4173,4172,1,0,0,0,4173,4174,1,0,0,0,4174,
4175,1,0,0,0,4175,4176,3,956,478,0,4176,4177,5,770,0,0,4177,4182,3,230,115,
0,4178,4179,5,894,0,0,4179,4181,3,230,115,0,4180,4178,1,0,0,0,4181,4184,
1,0,0,0,4182,4180,1,0,0,0,4182,4183,1,0,0,0,4183,4202,1,0,0,0,4184,4182,
1,0,0,0,4185,4187,5,28,0,0,4186,4188,5,630,0,0,4187,4186,1,0,0,0,4187,4188,
1,0,0,0,4188,4189,1,0,0,0,4189,4190,5,337,0,0,4190,4191,3,956,478,0,4191,
4192,3,326,163,0,4192,4202,1,0,0,0,4193,4195,5,28,0,0,4194,4196,5,630,0,
0,4195,4194,1,0,0,0,4195,4196,1,0,0,0,4196,4197,1,0,0,0,4197,4198,5,337,
0,0,4198,4199,3,956,478,0,4199,4200,3,330,165,0,4200,4202,1,0,0,0,4201,4063,
1,0,0,0,4201,4167,1,0,0,0,4201,4185,1,0,0,0,4201,4193,1,0,0,0,4202,229,1,
0,0,0,4203,4212,5,209,0,0,4204,4212,5,420,0,0,4205,4212,5,447,0,0,4206,4212,
5,448,0,0,4207,4208,5,453,0,0,4208,4209,5,878,0,0,4209,4212,7,24,0,0,4210,
4212,5,134,0,0,4211,4203,1,0,0,0,4211,4204,1,0,0,0,4211,4205,1,0,0,0,4211,
4206,1,0,0,0,4211,4207,1,0,0,0,4211,4210,1,0,0,0,4212,231,1,0,0,0,4213,4215,
5,28,0,0,4214,4216,5,630,0,0,4215,4214,1,0,0,0,4215,4216,1,0,0,0,4216,4217,
1,0,0,0,4217,4219,5,337,0,0,4218,4220,3,742,371,0,4219,4218,1,0,0,0,4219,
4220,1,0,0,0,4220,4221,1,0,0,0,4221,4222,3,956,478,0,4222,4226,5,640,0,0,
4223,4224,5,764,0,0,4224,4225,5,878,0,0,4225,4227,5,241,0,0,4226,4223,1,
0,0,0,4226,4227,1,0,0,0,4227,4229,1,0,0,0,4228,4230,3,148,74,0,4229,4228,
1,0,0,0,4229,4230,1,0,0,0,4230,4234,1,0,0,0,4231,4232,5,254,0,0,4232,4233,
5,878,0,0,4233,4235,7,22,0,0,4234,4231,1,0,0,0,4234,4235,1,0,0,0,4235,4239,
1,0,0,0,4236,4237,5,247,0,0,4237,4238,5,878,0,0,4238,4240,3,950,475,0,4239,
4236,1,0,0,0,4239,4240,1,0,0,0,4240,4250,1,0,0,0,4241,4242,5,253,0,0,4242,
4248,5,878,0,0,4243,4249,3,950,475,0,4244,4245,5,888,0,0,4245,4246,3,952,
476,0,4246,4247,5,889,0,0,4247,4249,1,0,0,0,4248,4243,1,0,0,0,4248,4244,
1,0,0,0,4249,4251,1,0,0,0,4250,4241,1,0,0,0,4250,4251,1,0,0,0,4251,4255,
1,0,0,0,4252,4253,5,252,0,0,4253,4254,5,878,0,0,4254,4256,3,950,475,0,4255,
4252,1,0,0,0,4255,4256,1,0,0,0,4256,4260,1,0,0,0,4257,4258,5,248,0,0,4258,
4259,5,878,0,0,4259,4261,3,950,475,0,4260,4257,1,0,0,0,4260,4261,1,0,0,0,
4261,4271,1,0,0,0,4262,4263,5,248,0,0,4263,4269,5,878,0,0,4264,4270,3,950,
475,0,4265,4266,5,888,0,0,4266,4267,3,952,476,0,4267,4268,5,889,0,0,4268,
4270,1,0,0,0,4269,4264,1,0,0,0,4269,4265,1,0,0,0,4270,4272,1,0,0,0,4271,
4262,1,0,0,0,4271,4272,1,0,0,0,4272,4276,1,0,0,0,4273,4274,5,249,0,0,4274,
4275,5,878,0,0,4275,4277,3,950,475,0,4276,4273,1,0,0,0,4276,4277,1,0,0,0,
4277,4281,1,0,0,0,4278,4279,5,250,0,0,4279,4280,5,878,0,0,4280,4282,3,950,
475,0,4281,4278,1,0,0,0,4281,4282,1,0,0,0,4282,4289,1,0,0,0,4283,4284,5,
246,0,0,4284,4285,5,878,0,0,4285,4286,5,888,0,0,4286,4287,3,952,476,0,4287,
4288,5,889,0,0,4288,4290,1,0,0,0,4289,4283,1,0,0,0,4289,4290,1,0,0,0,4290,
4297,1,0,0,0,4291,4292,5,243,0,0,4292,4293,5,878,0,0,4293,4294,5,888,0,0,
4294,4295,3,952,476,0,4295,4296,5,889,0,0,4296,4298,1,0,0,0,4297,4291,1,
0,0,0,4297,4298,1,0,0,0,4298,4305,1,0,0,0,4299,4300,5,245,0,0,4300,4301,
5,878,0,0,4301,4302,5,888,0,0,4302,4303,3,950,475,0,4303,4304,5,889,0,0,
4304,4306,1,0,0,0,4305,4299,1,0,0,0,4305,4306,1,0,0,0,4306,4312,1,0,0,0,
4307,4308,5,244,0,0,4308,4309,5,878,0,0,4309,4313,5,192,0,0,4310,4313,5,
208,0,0,4311,4313,5,210,0,0,4312,4307,1,0,0,0,4312,4310,1,0,0,0,4312,4311,
1,0,0,0,4312,4313,1,0,0,0,4313,4314,1,0,0,0,4314,4315,5,251,0,0,4315,4316,
5,878,0,0,4316,4317,3,950,475,0,4317,4353,1,0,0,0,4318,4320,5,28,0,0,4319,
4321,5,630,0,0,4320,4319,1,0,0,0,4320,4321,1,0,0,0,4321,4322,1,0,0,0,4322,
4324,5,337,0,0,4323,4325,3,742,371,0,4324,4323,1,0,0,0,4324,4325,1,0,0,0,
4325,4326,1,0,0,0,4326,4327,3,956,478,0,4327,4328,5,770,0,0,4328,4333,3,
234,117,0,4329,4330,5,894,0,0,4330,4332,3,234,117,0,4331,4329,1,0,0,0,4332,
4335,1,0,0,0,4333,4331,1,0,0,0,4333,4334,1,0,0,0,4334,4353,1,0,0,0,4335,
4333,1,0,0,0,4336,4338,5,28,0,0,4337,4339,5,630,0,0,4338,4337,1,0,0,0,4338,
4339,1,0,0,0,4339,4340,1,0,0,0,4340,4341,5,337,0,0,4341,4342,3,956,478,0,
4342,4343,3,326,163,0,4343,4353,1,0,0,0,4344,4346,5,28,0,0,4345,4347,5,630,
0,0,4346,4345,1,0,0,0,4346,4347,1,0,0,0,4347,4348,1,0,0,0,4348,4349,5,337,
0,0,4349,4350,3,956,478,0,4350,4351,3,330,165,0,4351,4353,1,0,0,0,4352,4213,
1,0,0,0,4352,4318,1,0,0,0,4352,4336,1,0,0,0,4352,4344,1,0,0,0,4353,233,1,
0,0,0,4354,4355,7,25,0,0,4355,235,1,0,0,0,4356,4358,5,28,0,0,4357,4359,5,
630,0,0,4358,4357,1,0,0,0,4358,4359,1,0,0,0,4359,4360,1,0,0,0,4360,4362,
5,337,0,0,4361,4363,3,742,371,0,4362,4361,1,0,0,0,4362,4363,1,0,0,0,4363,
4364,1,0,0,0,4364,4365,3,956,478,0,4365,4369,5,640,0,0,4366,4367,5,764,0,
0,4367,4368,5,878,0,0,4368,4370,5,603,0,0,4369,4366,1,0,0,0,4369,4370,1,
0,0,0,4370,4372,1,0,0,0,4371,4373,3,148,74,0,4372,4371,1,0,0,0,4372,4373,
1,0,0,0,4373,4377,1,0,0,0,4374,4375,5,606,0,0,4375,4376,5,878,0,0,4376,4378,
3,950,475,0,4377,4374,1,0,0,0,4377,4378,1,0,0,0,4378,4382,1,0,0,0,4379,4380,
5,615,0,0,4380,4381,5,878,0,0,4381,4383,3,950,475,0,4382,4379,1,0,0,0,4382,
4383,1,0,0,0,4383,4387,1,0,0,0,4384,4385,5,608,0,0,4385,4386,5,878,0,0,4386,
4388,3,950,475,0,4387,4384,1,0,0,0,4387,4388,1,0,0,0,4388,4392,1,0,0,0,4389,
4390,5,616,0,0,4390,4391,5,878,0,0,4391,4393,3,950,475,0,4392,4389,1,0,0,
0,4392,4393,1,0,0,0,4393,4397,1,0,0,0,4394,4395,5,614,0,0,4395,4396,5,878,
0,0,4396,4398,3,950,475,0,4397,4394,1,0,0,0,4397,4398,1,0,0,0,4398,4402,
1,0,0,0,4399,4400,5,604,0,0,4400,4401,5,878,0,0,4401,4403,3,508,254,0,4402,
4399,1,0,0,0,4402,4403,1,0,0,0,4403,4407,1,0,0,0,4404,4405,5,613,0,0,4405,
4406,5,878,0,0,4406,4408,3,950,475,0,4407,4404,1,0,0,0,4407,4408,1,0,0,0,
4408,4412,1,0,0,0,4409,4410,5,610,0,0,4410,4411,5,878,0,0,4411,4413,3,508,
254,0,4412,4409,1,0,0,0,4412,4413,1,0,0,0,4413,4417,1,0,0,0,4414,4415,5,
609,0,0,4415,4416,5,878,0,0,4416,4418,3,950,475,0,4417,4414,1,0,0,0,4417,
4418,1,0,0,0,4418,4422,1,0,0,0,4419,4420,5,607,0,0,4420,4421,5,878,0,0,4421,
4423,3,950,475,0,4422,4419,1,0,0,0,4422,4423,1,0,0,0,4423,4427,1,0,0,0,4424,
4425,5,605,0,0,4425,4426,5,878,0,0,4426,4428,3,508,254,0,4427,4424,1,0,0,
0,4427,4428,1,0,0,0,4428,4432,1,0,0,0,4429,4430,5,612,0,0,4430,4431,5,878,
0,0,4431,4433,3,950,475,0,4432,4429,1,0,0,0,4432,4433,1,0,0,0,4433,4437,
1,0,0,0,4434,4435,5,611,0,0,4435,4436,5,878,0,0,4436,4438,3,950,475,0,4437,
4434,1,0,0,0,4437,4438,1,0,0,0,4438,4468,1,0,0,0,4439,4441,5,28,0,0,4440,
4442,5,630,0,0,4441,4440,1,0,0,0,4441,4442,1,0,0,0,4442,4443,1,0,0,0,4443,
4445,5,337,0,0,4444,4446,3,742,371,0,4445,4444,1,0,0,0,4445,4446,1,0,0,0,
4446,4447,1,0,0,0,4447,4448,3,956,478,0,4448,4449,5,770,0,0,4449,4450,5,
209,0,0,4450,4468,1,0,0,0,4451,4453,5,28,0,0,4452,4454,5,630,0,0,4453,4452,
1,0,0,0,4453,4454,1,0,0,0,4454,4455,1,0,0,0,4455,4456,5,337,0,0,4456,4457,
3,956,478,0,4457,4458,3,326,163,0,4458,4468,1,0,0,0,4459,4461,5,28,0,0,4460,
4462,5,630,0,0,4461,4460,1,0,0,0,4461,4462,1,0,0,0,4462,4463,1,0,0,0,4463,
4464,5,337,0,0,4464,4465,3,956,478,0,4465,4466,3,330,165,0,4466,4468,1,0,
0,0,4467,4356,1,0,0,0,4467,4439,1,0,0,0,4467,4451,1,0,0,0,4467,4459,1,0,
0,0,4468,237,1,0,0,0,4469,4471,5,28,0,0,4470,4472,5,630,0,0,4471,4470,1,
0,0,0,4471,4472,1,0,0,0,4472,4473,1,0,0,0,4473,4475,5,337,0,0,4474,4476,
3,742,371,0,4475,4474,1,0,0,0,4475,4476,1,0,0,0,4476,4477,1,0,0,0,4477,4478,
3,956,478,0,4478,4482,5,640,0,0,4479,4480,5,420,0,0,4480,4481,5,878,0,0,
4481,4483,3,950,475,0,4482,4479,1,0,0,0,4482,4483,1,0,0,0,4483,4487,1,0,
0,0,4484,4485,5,705,0,0,4485,4486,5,878,0,0,4486,4488,3,508,254,0,4487,4484,
1,0,0,0,4487,4488,1,0,0,0,4488,4490,1,0,0,0,4489,4491,3,738,369,0,4490,4489,
1,0,0,0,4490,4491,1,0,0,0,4491,4527,1,0,0,0,4492,4494,5,28,0,0,4493,4495,
5,630,0,0,4494,4493,1,0,0,0,4494,4495,1,0,0,0,4495,4496,1,0,0,0,4496,4498,
5,337,0,0,4497,4499,3,742,371,0,4498,4497,1,0,0,0,4498,4499,1,0,0,0,4499,
4500,1,0,0,0,4500,4501,3,956,478,0,4501,4502,5,770,0,0,4502,4507,3,240,120,
0,4503,4504,5,894,0,0,4504,4506,3,240,120,0,4505,4503,1,0,0,0,4506,4509,
1,0,0,0,4507,4505,1,0,0,0,4507,4508,1,0,0,0,4508,4527,1,0,0,0,4509,4507,
1,0,0,0,4510,4512,5,28,0,0,4511,4513,5,630,0,0,4512,4511,1,0,0,0,4512,4513,
1,0,0,0,4513,4514,1,0,0,0,4514,4515,5,337,0,0,4515,4516,3,956,478,0,4516,
4517,3,326,163,0,4517,4527,1,0,0,0,4518,4520,5,28,0,0,4519,4521,5,630,0,
0,4520,4519,1,0,0,0,4520,4521,1,0,0,0,4521,4522,1,0,0,0,4522,4523,5,337,
0,0,4523,4524,3,956,478,0,4524,4525,3,330,165,0,4525,4527,1,0,0,0,4526,4469,
1,0,0,0,4526,4492,1,0,0,0,4526,4510,1,0,0,0,4526,4518,1,0,0,0,4527,239,1,
0,0,0,4528,4529,7,26,0,0,4529,241,1,0,0,0,4530,4531,5,28,0,0,4531,4532,5,
636,0,0,4532,4533,5,640,0,0,4533,4546,3,144,72,0,4534,4535,5,28,0,0,4535,
4536,5,636,0,0,4536,4537,5,770,0,0,4537,4542,3,944,472,0,4538,4539,5,894,
0,0,4539,4541,3,944,472,0,4540,4538,1,0,0,0,4541,4544,1,0,0,0,4542,4540,
1,0,0,0,4542,4543,1,0,0,0,4543,4546,1,0,0,0,4544,4542,1,0,0,0,4545,4530,
1,0,0,0,4545,4534,1,0,0,0,4546,243,1,0,0,0,4547,4548,5,28,0,0,4548,4549,
5,636,0,0,4549,4551,5,517,0,0,4550,4552,3,742,371,0,4551,4550,1,0,0,0,4551,
4552,1,0,0,0,4552,4553,1,0,0,0,4553,4554,3,982,491,0,4554,4558,5,640,0,0,
4555,4557,3,456,228,0,4556,4555,1,0,0,0,4557,4560,1,0,0,0,4558,4556,1,0,
0,0,4558,4559,1,0,0,0,4559,4596,1,0,0,0,4560,4558,1,0,0,0,4561,4562,5,28,
0,0,4562,4563,5,636,0,0,4563,4565,5,517,0,0,4564,4566,3,742,371,0,4565,4564,
1,0,0,0,4565,4566,1,0,0,0,4566,4567,1,0,0,0,4567,4568,3,982,491,0,4568,4571,
5,770,0,0,4569,4572,3,458,229,0,4570,4572,5,134,0,0,4571,4569,1,0,0,0,4571,
4570,1,0,0,0,4572,4596,1,0,0,0,4573,4574,5,28,0,0,4574,4575,5,636,0,0,4575,
4577,5,517,0,0,4576,4578,3,742,371,0,4577,4576,1,0,0,0,4577,4578,1,0,0,0,
4578,4579,1,0,0,0,4579,4580,3,982,491,0,4580,4581,5,558,0,0,4581,4582,5,
745,0,0,4582,4583,3,982,491,0,4583,4596,1,0,0,0,4584,4585,5,28,0,0,4585,
4586,5,636,0,0,4586,4588,5,517,0,0,4587,4589,3,742,371,0,4588,4587,1,0,0,
0,4588,4589,1,0,0,0,4589,4590,1,0,0,0,4590,4593,3,982,491,0,4591,4594,3,
326,163,0,4592,4594,3,330,165,0,4593,4591,1,0,0,0,4593,4592,1,0,0,0,4594,
4596,1,0,0,0,4595,4547,1,0,0,0,4595,4561,1,0,0,0,4595,4573,1,0,0,0,4595,
4584,1,0,0,0,4596,245,1,0,0,0,4597,4598,5,28,0,0,4598,4599,5,493,0,0,4599,
4601,5,517,0,0,4600,4602,3,742,371,0,4601,4600,1,0,0,0,4601,4602,1,0,0,0,
4602,4603,1,0,0,0,4603,4604,3,982,491,0,4604,4608,5,640,0,0,4605,4607,3,
462,231,0,4606,4605,1,0,0,0,4607,4610,1,0,0,0,4608,4606,1,0,0,0,4608,4609,
1,0,0,0,4609,4646,1,0,0,0,4610,4608,1,0,0,0,4611,4612,5,28,0,0,4612,4613,
5,493,0,0,4613,4615,5,517,0,0,4614,4616,3,742,371,0,4615,4614,1,0,0,0,4615,
4616,1,0,0,0,4616,4617,1,0,0,0,4617,4618,3,982,491,0,4618,4621,5,770,0,0,
4619,4622,3,464,232,0,4620,4622,5,134,0,0,4621,4619,1,0,0,0,4621,4620,1,
0,0,0,4622,4646,1,0,0,0,4623,4624,5,28,0,0,4624,4625,5,493,0,0,4625,4627,
5,517,0,0,4626,4628,3,742,371,0,4627,4626,1,0,0,0,4627,4628,1,0,0,0,4628,
4629,1,0,0,0,4629,4630,3,982,491,0,4630,4631,5,558,0,0,4631,4632,5,745,0,
0,4632,4633,3,982,491,0,4633,4646,1,0,0,0,4634,4635,5,28,0,0,4635,4636,5,
493,0,0,4636,4638,5,517,0,0,4637,4639,3,742,371,0,4638,4637,1,0,0,0,4638,
4639,1,0,0,0,4639,4640,1,0,0,0,4640,4643,3,982,491,0,4641,4644,3,326,163,
0,4642,4644,3,330,165,0,4643,4641,1,0,0,0,4643,4642,1,0,0,0,4644,4646,1,
0,0,0,4645,4597,1,0,0,0,4645,4611,1,0,0,0,4645,4623,1,0,0,0,4645,4634,1,
0,0,0,4646,247,1,0,0,0,4647,4648,5,28,0,0,4648,4650,5,642,0,0,4649,4651,
3,742,371,0,4650,4649,1,0,0,0,4650,4651,1,0,0,0,4651,4652,1,0,0,0,4652,4653,
3,956,478,0,4653,4654,7,27,0,0,4654,4655,5,8,0,0,4655,4656,5,878,0,0,4656,
4661,3,956,478,0,4657,4658,5,894,0,0,4658,4660,3,956,478,0,4659,4657,1,0,
0,0,4660,4663,1,0,0,0,4661,4659,1,0,0,0,4661,4662,1,0,0,0,4662,4667,1,0,
0,0,4663,4661,1,0,0,0,4664,4665,5,644,0,0,4665,4666,5,878,0,0,4666,4668,
3,508,254,0,4667,4664,1,0,0,0,4667,4668,1,0,0,0,4668,4736,1,0,0,0,4669,4670,
5,28,0,0,4670,4672,5,642,0,0,4671,4673,3,742,371,0,4672,4671,1,0,0,0,4672,
4673,1,0,0,0,4673,4674,1,0,0,0,4674,4675,3,956,478,0,4675,4676,5,10,0,0,
4676,4677,5,8,0,0,4677,4678,5,878,0,0,4678,4683,3,956,478,0,4679,4680,5,
894,0,0,4680,4682,3,956,478,0,4681,4679,1,0,0,0,4682,4685,1,0,0,0,4683,4681,
1,0,0,0,4683,4684,1,0,0,0,4684,4689,1,0,0,0,4685,4683,1,0,0,0,4686,4687,
5,644,0,0,4687,4688,5,878,0,0,4688,4690,3,508,254,0,4689,4686,1,0,0,0,4689,
4690,1,0,0,0,4690,4736,1,0,0,0,4691,4692,5,28,0,0,4692,4694,5,642,0,0,4693,
4695,3,742,371,0,4694,4693,1,0,0,0,4694,4695,1,0,0,0,4695,4696,1,0,0,0,4696,
4697,3,956,478,0,4697,4708,5,640,0,0,4698,4699,5,8,0,0,4699,4700,5,878,0,
0,4700,4705,3,956,478,0,4701,4702,5,894,0,0,4702,4704,3,956,478,0,4703,4701,
1,0,0,0,4704,4707,1,0,0,0,4705,4703,1,0,0,0,4705,4706,1,0,0,0,4706,4709,
1,0,0,0,4707,4705,1,0,0,0,4708,4698,1,0,0,0,4708,4709,1,0,0,0,4709,4711,
1,0,0,0,4710,4712,3,738,369,0,4711,4710,1,0,0,0,4711,4712,1,0,0,0,4712,4736,
1,0,0,0,4713,4714,5,28,0,0,4714,4716,5,642,0,0,4715,4717,3,742,371,0,4716,
4715,1,0,0,0,4716,4717,1,0,0,0,4717,4718,1,0,0,0,4718,4719,3,956,478,0,4719,
4720,3,326,163,0,4720,4736,1,0,0,0,4721,4722,5,28,0,0,4722,4723,5,642,0,
0,4723,4724,3,956,478,0,4724,4725,3,330,165,0,4725,4736,1,0,0,0,4726,4727,
5,28,0,0,4727,4729,5,642,0,0,4728,4730,3,742,371,0,4729,4728,1,0,0,0,4729,
4730,1,0,0,0,4730,4731,1,0,0,0,4731,4732,3,956,478,0,4732,4733,5,770,0,0,
4733,4734,5,134,0,0,4734,4736,1,0,0,0,4735,4647,1,0,0,0,4735,4669,1,0,0,
0,4735,4691,1,0,0,0,4735,4713,1,0,0,0,4735,4721,1,0,0,0,4735,4726,1,0,0,
0,4736,249,1,0,0,0,4737,4739,5,28,0,0,4738,4740,5,683,0,0,4739,4738,1,0,
0,0,4739,4740,1,0,0,0,4740,4741,1,0,0,0,4741,4743,5,337,0,0,4742,4744,3,
742,371,0,4743,4742,1,0,0,0,4743,4744,1,0,0,0,4744,4745,1,0,0,0,4745,4746,
3,956,478,0,4746,4748,5,640,0,0,4747,4749,3,534,267,0,4748,4747,1,0,0,0,
4748,4749,1,0,0,0,4749,4751,1,0,0,0,4750,4752,3,148,74,0,4751,4750,1,0,0,
0,4751,4752,1,0,0,0,4752,4759,1,0,0,0,4753,4754,5,684,0,0,4754,4755,5,878,
0,0,4755,4756,5,888,0,0,4756,4757,3,952,476,0,4757,4758,5,889,0,0,4758,4760,
1,0,0,0,4759,4753,1,0,0,0,4759,4760,1,0,0,0,4760,4767,1,0,0,0,4761,4762,
5,687,0,0,4762,4763,5,878,0,0,4763,4764,5,888,0,0,4764,4765,3,952,476,0,
4765,4766,5,889,0,0,4766,4768,1,0,0,0,4767,4761,1,0,0,0,4767,4768,1,0,0,
0,4768,4770,1,0,0,0,4769,4771,3,738,369,0,4770,4769,1,0,0,0,4770,4771,1,
0,0,0,4771,4804,1,0,0,0,4772,4774,5,28,0,0,4773,4775,5,683,0,0,4774,4773,
1,0,0,0,4774,4775,1,0,0,0,4775,4776,1,0,0,0,4776,4778,5,337,0,0,4777,4779,
3,742,371,0,4778,4777,1,0,0,0,4778,4779,1,0,0,0,4779,4780,1,0,0,0,4780,4781,
3,956,478,0,4781,4782,3,326,163,0,4782,4804,1,0,0,0,4783,4785,5,28,0,0,4784,
4786,5,683,0,0,4785,4784,1,0,0,0,4785,4786,1,0,0,0,4786,4787,1,0,0,0,4787,
4788,5,337,0,0,4788,4789,3,956,478,0,4789,4790,3,330,165,0,4790,4804,1,0,
0,0,4791,4793,5,28,0,0,4792,4794,5,683,0,0,4793,4792,1,0,0,0,4793,4794,1,
0,0,0,4794,4795,1,0,0,0,4795,4797,5,337,0,0,4796,4798,3,742,371,0,4797,4796,
1,0,0,0,4797,4798,1,0,0,0,4798,4799,1,0,0,0,4799,4800,3,956,478,0,4800,4801,
5,770,0,0,4801,4802,7,28,0,0,4802,4804,1,0,0,0,4803,4737,1,0,0,0,4803,4772,
1,0,0,0,4803,4783,1,0,0,0,4803,4791,1,0,0,0,4804,251,1,0,0,0,4805,4806,5,
28,0,0,4806,4808,5,690,0,0,4807,4809,3,742,371,0,4808,4807,1,0,0,0,4808,
4809,1,0,0,0,4809,4810,1,0,0,0,4810,4811,3,956,478,0,4811,4813,5,640,0,0,
4812,4814,3,328,164,0,4813,4812,1,0,0,0,4813,4814,1,0,0,0,4814,4816,1,0,
0,0,4815,4817,3,738,369,0,4816,4815,1,0,0,0,4816,4817,1,0,0,0,4817,4841,
1,0,0,0,4818,4819,5,28,0,0,4819,4821,5,690,0,0,4820,4822,3,742,371,0,4821,
4820,1,0,0,0,4821,4822,1,0,0,0,4822,4823,1,0,0,0,4823,4824,3,956,478,0,4824,
4825,3,326,163,0,4825,4841,1,0,0,0,4826,4827,5,28,0,0,4827,4828,5,690,0,
0,4828,4829,3,956,478,0,4829,4830,3,330,165,0,4830,4841,1,0,0,0,4831,4832,
5,28,0,0,4832,4834,5,690,0,0,4833,4835,3,742,371,0,4834,4833,1,0,0,0,4834,
4835,1,0,0,0,4835,4836,1,0,0,0,4836,4837,3,956,478,0,4837,4838,5,770,0,0,
4838,4839,5,134,0,0,4839,4841,1,0,0,0,4840,4805,1,0,0,0,4840,4818,1,0,0,
0,4840,4826,1,0,0,0,4840,4831,1,0,0,0,4841,253,1,0,0,0,4842,4843,5,28,0,
0,4843,4845,5,708,0,0,4844,4846,3,742,371,0,4845,4844,1,0,0,0,4845,4846,
1,0,0,0,4846,4847,1,0,0,0,4847,4848,3,982,491,0,4848,4849,5,558,0,0,4849,
4850,5,745,0,0,4850,4851,3,982,491,0,4851,5018,1,0,0,0,4852,4853,5,28,0,
0,4853,4855,5,708,0,0,4854,4856,3,742,371,0,4855,4854,1,0,0,0,4855,4856,
1,0,0,0,4856,4857,1,0,0,0,4857,4858,3,982,491,0,4858,4859,5,704,0,0,4859,
4860,5,805,0,0,4860,4861,3,982,491,0,4861,5018,1,0,0,0,4862,4863,5,28,0,
0,4863,4865,5,708,0,0,4864,4866,3,742,371,0,4865,4864,1,0,0,0,4865,4866,
1,0,0,0,4866,4867,1,0,0,0,4867,4871,3,982,491,0,4868,4872,3,256,128,0,4869,
4872,3,258,129,0,4870,4872,3,284,142,0,4871,4868,1,0,0,0,4871,4869,1,0,0,
0,4871,4870,1,0,0,0,4872,5018,1,0,0,0,4873,4874,5,28,0,0,4874,4876,5,708,
0,0,4875,4877,3,742,371,0,4876,4875,1,0,0,0,4876,4877,1,0,0,0,4877,4878,
1,0,0,0,4878,4879,3,982,491,0,4879,4880,3,282,141,0,4880,5018,1,0,0,0,4881,
4882,5,28,0,0,4882,4884,5,708,0,0,4883,4885,3,742,371,0,4884,4883,1,0,0,
0,4884,4885,1,0,0,0,4885,4886,1,0,0,0,4886,4887,3,982,491,0,4887,4888,3,
286,143,0,4888,5018,1,0,0,0,4889,4890,5,28,0,0,4890,4892,5,708,0,0,4891,
4893,3,742,371,0,4892,4891,1,0,0,0,4892,4893,1,0,0,0,4893,4894,1,0,0,0,4894,
4895,3,982,491,0,4895,4897,5,640,0,0,4896,4898,3,54,27,0,4897,4896,1,0,0,
0,4897,4898,1,0,0,0,4898,4905,1,0,0,0,4899,4900,5,672,0,0,4900,4901,5,878,
0,0,4901,4902,5,888,0,0,4902,4903,3,472,236,0,4903,4904,5,889,0,0,4904,4906,
1,0,0,0,4905,4899,1,0,0,0,4905,4906,1,0,0,0,4906,4910,1,0,0,0,4907,4908,
5,166,0,0,4908,4909,5,878,0,0,4909,4911,3,986,493,0,4910,4907,1,0,0,0,4910,
4911,1,0,0,0,4911,4915,1,0,0,0,4912,4913,5,395,0,0,4913,4914,5,878,0,0,4914,
4916,3,986,493,0,4915,4912,1,0,0,0,4915,4916,1,0,0,0,4916,4920,1,0,0,0,4917,
4918,5,108,0,0,4918,4919,5,878,0,0,4919,4921,3,508,254,0,4920,4917,1,0,0,
0,4920,4921,1,0,0,0,4921,4923,1,0,0,0,4922,4924,3,140,70,0,4923,4922,1,0,
0,0,4923,4924,1,0,0,0,4924,4926,1,0,0,0,4925,4927,3,738,369,0,4926,4925,
1,0,0,0,4926,4927,1,0,0,0,4927,5018,1,0,0,0,4928,4929,5,28,0,0,4929,4931,
5,708,0,0,4930,4932,3,742,371,0,4931,4930,1,0,0,0,4931,4932,1,0,0,0,4932,
4933,1,0,0,0,4933,4934,3,982,491,0,4934,4935,3,326,163,0,4935,5018,1,0,0,
0,4936,4937,5,28,0,0,4937,4939,5,708,0,0,4938,4940,3,742,371,0,4939,4938,
1,0,0,0,4939,4940,1,0,0,0,4940,4941,1,0,0,0,4941,4942,3,982,491,0,4942,4943,
3,330,165,0,4943,5018,1,0,0,0,4944,4945,5,28,0,0,4945,4947,5,708,0,0,4946,
4948,3,742,371,0,4947,4946,1,0,0,0,4947,4948,1,0,0,0,4948,4949,1,0,0,0,4949,
4950,3,982,491,0,4950,4957,5,770,0,0,4951,4958,5,166,0,0,4952,4958,5,395,
0,0,4953,4958,5,108,0,0,4954,4958,5,175,0,0,4955,4958,5,134,0,0,4956,4958,
1,0,0,0,4957,4951,1,0,0,0,4957,4952,1,0,0,0,4957,4953,1,0,0,0,4957,4954,
1,0,0,0,4957,4955,1,0,0,0,4957,4956,1,0,0,0,4958,5018,1,0,0,0,4959,4960,
5,28,0,0,4960,4962,5,708,0,0,4961,4963,3,742,371,0,4962,4961,1,0,0,0,4962,
4963,1,0,0,0,4963,4964,1,0,0,0,4964,4965,3,982,491,0,4965,4966,5,10,0,0,
4966,4967,5,593,0,0,4967,4968,5,5,0,0,4968,4969,5,517,0,0,4969,4970,3,956,
478,0,4970,4971,5,465,0,0,4971,4972,3,400,200,0,4972,5018,1,0,0,0,4973,4974,
5,28,0,0,4974,4976,5,708,0,0,4975,4977,3,742,371,0,4976,4975,1,0,0,0,4976,
4977,1,0,0,0,4977,4978,1,0,0,0,4978,4979,3,982,491,0,4979,4980,5,200,0,0,
4980,4981,5,593,0,0,4981,4982,5,5,0,0,4982,4983,5,517,0,0,4983,4984,3,956,
478,0,4984,5018,1,0,0,0,4985,4986,5,28,0,0,4986,4988,5,708,0,0,4987,4989,
3,742,371,0,4988,4987,1,0,0,0,4988,4989,1,0,0,0,4989,4990,1,0,0,0,4990,4991,
3,982,491,0,4991,4992,5,200,0,0,4992,4993,5,593,0,0,4993,4994,5,5,0,0,4994,
4995,5,517,0,0,4995,4996,3,956,478,0,4996,4997,5,894,0,0,4997,4998,5,10,
0,0,4998,4999,5,593,0,0,4999,5000,5,5,0,0,5000,5001,5,517,0,0,5001,5002,
3,956,478,0,5002,5003,5,465,0,0,5003,5004,3,400,200,0,5004,5018,1,0,0,0,
5005,5006,5,28,0,0,5006,5008,5,708,0,0,5007,5009,3,742,371,0,5008,5007,1,
0,0,0,5008,5009,1,0,0,0,5009,5010,1,0,0,0,5010,5011,3,982,491,0,5011,5012,
5,200,0,0,5012,5013,5,17,0,0,5013,5014,5,593,0,0,5014,5015,5,5,0,0,5015,
5016,5,516,0,0,5016,5018,1,0,0,0,5017,4842,1,0,0,0,5017,4852,1,0,0,0,5017,
4862,1,0,0,0,5017,4873,1,0,0,0,5017,4881,1,0,0,0,5017,4889,1,0,0,0,5017,
4928,1,0,0,0,5017,4936,1,0,0,0,5017,4944,1,0,0,0,5017,4959,1,0,0,0,5017,
4973,1,0,0,0,5017,4985,1,0,0,0,5017,5005,1,0,0,0,5018,255,1,0,0,0,5019,5020,
5,127,0,0,5020,5021,5,96,0,0,5021,5022,5,888,0,0,5022,5023,3,988,494,0,5023,
5024,5,889,0,0,5024,5042,1,0,0,0,5025,5029,5,546,0,0,5026,5027,5,396,0,0,
5027,5028,5,878,0,0,5028,5030,3,986,493,0,5029,5026,1,0,0,0,5029,5030,1,
0,0,0,5030,5033,1,0,0,0,5031,5032,5,804,0,0,5032,5034,3,992,496,0,5033,5031,
1,0,0,0,5033,5034,1,0,0,0,5034,5042,1,0,0,0,5035,5036,3,152,76,0,5036,5037,
5,546,0,0,5037,5042,1,0,0,0,5038,5039,5,200,0,0,5039,5040,5,128,0,0,5040,
5042,5,353,0,0,5041,5019,1,0,0,0,5041,5025,1,0,0,0,5041,5035,1,0,0,0,5041,
5038,1,0,0,0,5042,257,1,0,0,0,5043,5045,5,10,0,0,5044,5046,5,132,0,0,5045,
5044,1,0,0,0,5045,5046,1,0,0,0,5046,5048,1,0,0,0,5047,5049,3,744,372,0,5048,
5047,1,0,0,0,5048,5049,1,0,0,0,5049,5050,1,0,0,0,5050,5055,3,578,289,0,5051,
5052,5,894,0,0,5052,5054,3,578,289,0,5053,5051,1,0,0,0,5054,5057,1,0,0,0,
5055,5053,1,0,0,0,5055,5056,1,0,0,0,5056,5139,1,0,0,0,5057,5055,1,0,0,0,
5058,5059,5,558,0,0,5059,5060,5,132,0,0,5060,5061,3,976,488,0,5061,5062,
5,745,0,0,5062,5063,3,976,488,0,5063,5139,1,0,0,0,5064,5084,3,310,155,0,
5065,5066,5,888,0,0,5066,5071,3,260,130,0,5067,5068,5,894,0,0,5068,5070,
3,260,130,0,5069,5067,1,0,0,0,5070,5073,1,0,0,0,5071,5069,1,0,0,0,5071,5072,
1,0,0,0,5072,5074,1,0,0,0,5073,5071,1,0,0,0,5074,5075,5,889,0,0,5075,5085,
1,0,0,0,5076,5081,3,260,130,0,5077,5078,5,894,0,0,5078,5080,3,260,130,0,
5079,5077,1,0,0,0,5080,5083,1,0,0,0,5081,5079,1,0,0,0,5081,5082,1,0,0,0,
5082,5085,1,0,0,0,5083,5081,1,0,0,0,5084,5065,1,0,0,0,5084,5076,1,0,0,0,
5085,5139,1,0,0,0,5086,5087,3,310,155,0,5087,5088,5,132,0,0,5088,5089,3,
976,488,0,5089,5090,5,640,0,0,5090,5091,5,384,0,0,5091,5092,5,517,0,0,5092,
5100,3,956,478,0,5093,5094,5,785,0,0,5094,5095,5,888,0,0,5095,5096,3,976,
488,0,5096,5097,5,894,0,0,5097,5098,3,978,489,0,5098,5099,5,889,0,0,5099,
5101,1,0,0,0,5100,5093,1,0,0,0,5100,5101,1,0,0,0,5101,5103,1,0,0,0,5102,
5104,5,270,0,0,5103,5102,1,0,0,0,5103,5104,1,0,0,0,5104,5139,1,0,0,0,5105,
5106,3,310,155,0,5106,5107,5,132,0,0,5107,5108,3,976,488,0,5108,5109,5,770,
0,0,5109,5110,5,384,0,0,5110,5111,5,517,0,0,5111,5139,1,0,0,0,5112,5113,
3,310,155,0,5113,5118,3,298,149,0,5114,5115,5,894,0,0,5115,5117,3,298,149,
0,5116,5114,1,0,0,0,5117,5120,1,0,0,0,5118,5116,1,0,0,0,5118,5119,1,0,0,
0,5119,5139,1,0,0,0,5120,5118,1,0,0,0,5121,5122,3,310,155,0,5122,5127,3,
300,150,0,5123,5124,5,894,0,0,5124,5126,3,300,150,0,5125,5123,1,0,0,0,5126,
5129,1,0,0,0,5127,5125,1,0,0,0,5127,5128,1,0,0,0,5128,5139,1,0,0,0,5129,
5127,1,0,0,0,5130,5132,5,200,0,0,5131,5133,5,132,0,0,5132,5131,1,0,0,0,5132,
5133,1,0,0,0,5133,5135,1,0,0,0,5134,5136,3,742,371,0,5135,5134,1,0,0,0,5135,
5136,1,0,0,0,5136,5137,1,0,0,0,5137,5139,3,978,489,0,5138,5043,1,0,0,0,5138,
5058,1,0,0,0,5138,5064,1,0,0,0,5138,5086,1,0,0,0,5138,5105,1,0,0,0,5138,
5112,1,0,0,0,5138,5121,1,0,0,0,5138,5130,1,0,0,0,5139,259,1,0,0,0,5140,5142,
5,132,0,0,5141,5140,1,0,0,0,5141,5142,1,0,0,0,5142,5143,1,0,0,0,5143,5174,
3,976,488,0,5144,5145,5,200,0,0,5145,5175,5,174,0,0,5146,5147,5,640,0,0,
5147,5148,5,174,0,0,5148,5149,3,982,491,0,5149,5150,5,884,0,0,5150,5151,
5,423,0,0,5151,5175,1,0,0,0,5152,5154,5,640,0,0,5153,5152,1,0,0,0,5153,5154,
1,0,0,0,5154,5155,1,0,0,0,5155,5156,5,429,0,0,5156,5161,5,439,0,0,5157,5158,
5,200,0,0,5158,5159,5,429,0,0,5159,5161,5,439,0,0,5160,5153,1,0,0,0,5160,
5157,1,0,0,0,5161,5175,1,0,0,0,5162,5163,5,640,0,0,5163,5165,5,163,0,0,5164,
5162,1,0,0,0,5164,5165,1,0,0,0,5165,5166,1,0,0,0,5166,5168,5,764,0,0,5167,
5164,1,0,0,0,5167,5168,1,0,0,0,5168,5169,1,0,0,0,5169,5175,3,1012,506,0,
5170,5171,5,134,0,0,5171,5175,3,950,475,0,5172,5173,5,770,0,0,5173,5175,
5,134,0,0,5174,5144,1,0,0,0,5174,5146,1,0,0,0,5174,5160,1,0,0,0,5174,5167,
1,0,0,0,5174,5170,1,0,0,0,5174,5172,1,0,0,0,5175,261,1,0,0,0,5176,5177,5,
144,0,0,5177,5179,3,956,478,0,5178,5176,1,0,0,0,5178,5179,1,0,0,0,5179,5201,
1,0,0,0,5180,5183,5,767,0,0,5181,5183,3,574,287,0,5182,5180,1,0,0,0,5182,
5181,1,0,0,0,5183,5187,1,0,0,0,5184,5186,3,270,135,0,5185,5184,1,0,0,0,5186,
5189,1,0,0,0,5187,5185,1,0,0,0,5187,5188,1,0,0,0,5188,5202,1,0,0,0,5189,
5187,1,0,0,0,5190,5191,3,572,286,0,5191,5192,5,549,0,0,5192,5197,3,982,491,
0,5193,5194,5,888,0,0,5194,5195,3,976,488,0,5195,5196,5,889,0,0,5196,5198,
1,0,0,0,5197,5193,1,0,0,0,5197,5198,1,0,0,0,5198,5199,1,0,0,0,5199,5200,
3,280,140,0,5200,5202,1,0,0,0,5201,5182,1,0,0,0,5201,5190,1,0,0,0,5202,263,
1,0,0,0,5203,5205,5,429,0,0,5204,5203,1,0,0,0,5204,5205,1,0,0,0,5205,5206,
1,0,0,0,5206,5207,5,219,0,0,5207,265,1,0,0,0,5208,5210,5,429,0,0,5209,5208,
1,0,0,0,5209,5210,1,0,0,0,5210,5211,1,0,0,0,5211,5212,5,179,0,0,5212,267,
1,0,0,0,5213,5214,5,329,0,0,5214,5215,7,29,0,0,5215,269,1,0,0,0,5216,5218,
3,264,132,0,5217,5219,7,30,0,0,5218,5217,1,0,0,0,5218,5219,1,0,0,0,5219,
5229,1,0,0,0,5220,5229,3,266,133,0,5221,5229,3,268,134,0,5222,5224,7,21,
0,0,5223,5225,7,30,0,0,5224,5223,1,0,0,0,5224,5225,1,0,0,0,5225,5229,1,0,
0,0,5226,5229,5,556,0,0,5227,5229,5,428,0,0,5228,5216,1,0,0,0,5228,5220,
1,0,0,0,5228,5221,1,0,0,0,5228,5222,1,0,0,0,5228,5226,1,0,0,0,5228,5227,
1,0,0,0,5229,271,1,0,0,0,5230,5231,5,465,0,0,5231,5232,5,772,0,0,5232,5233,
3,278,139,0,5233,273,1,0,0,0,5234,5235,5,465,0,0,5235,5236,5,185,0,0,5236,
5237,3,278,139,0,5237,275,1,0,0,0,5238,5239,5,386,0,0,5239,5240,7,31,0,0,
5240,277,1,0,0,0,5241,5248,5,101,0,0,5242,5243,5,640,0,0,5243,5248,7,32,
0,0,5244,5248,5,574,0,0,5245,5246,5,424,0,0,5246,5248,5,9,0,0,5247,5241,
1,0,0,0,5247,5242,1,0,0,0,5247,5244,1,0,0,0,5247,5245,1,0,0,0,5248,279,1,
0,0,0,5249,5251,3,270,135,0,5250,5249,1,0,0,0,5251,5254,1,0,0,0,5252,5250,
1,0,0,0,5252,5253,1,0,0,0,5253,5270,1,0,0,0,5254,5252,1,0,0,0,5255,5270,
3,276,138,0,5256,5258,3,276,138,0,5257,5256,1,0,0,0,5257,5258,1,0,0,0,5258,
5267,1,0,0,0,5259,5261,3,272,136,0,5260,5262,3,274,137,0,5261,5260,1,0,0,
0,5261,5262,1,0,0,0,5262,5268,1,0,0,0,5263,5265,3,274,137,0,5264,5266,3,
272,136,0,5265,5264,1,0,0,0,5265,5266,1,0,0,0,5266,5268,1,0,0,0,5267,5259,
1,0,0,0,5267,5263,1,0,0,0,5268,5270,1,0,0,0,5269,5252,1,0,0,0,5269,5255,
1,0,0,0,5269,5257,1,0,0,0,5270,281,1,0,0,0,5271,5273,5,10,0,0,5272,5274,
5,132,0,0,5273,5272,1,0,0,0,5273,5274,1,0,0,0,5274,5275,1,0,0,0,5275,5276,
3,976,488,0,5276,5277,3,1012,506,0,5277,5278,5,43,0,0,5278,5279,5,888,0,
0,5279,5280,3,992,496,0,5280,5281,5,889,0,0,5281,5294,1,0,0,0,5282,5283,
5,558,0,0,5283,5284,5,132,0,0,5284,5285,3,976,488,0,5285,5286,5,745,0,0,
5286,5287,3,976,488,0,5287,5294,1,0,0,0,5288,5290,5,200,0,0,5289,5291,5,
132,0,0,5290,5289,1,0,0,0,5290,5291,1,0,0,0,5291,5292,1,0,0,0,5292,5294,
3,978,489,0,5293,5271,1,0,0,0,5293,5282,1,0,0,0,5293,5288,1,0,0,0,5294,283,
1,0,0,0,5295,5296,5,10,0,0,5296,5336,3,576,288,0,5297,5298,5,558,0,0,5298,
5299,5,144,0,0,5299,5300,3,956,478,0,5300,5301,5,745,0,0,5301,5302,3,956,
478,0,5302,5336,1,0,0,0,5303,5309,3,310,155,0,5304,5305,5,144,0,0,5305,5310,
3,956,478,0,5306,5310,3,574,287,0,5307,5310,5,767,0,0,5308,5310,3,572,286,
0,5309,5304,1,0,0,0,5309,5306,1,0,0,0,5309,5307,1,0,0,0,5309,5308,1,0,0,
0,5310,5311,1,0,0,0,5311,5313,3,400,200,0,5312,5314,3,264,132,0,5313,5312,
1,0,0,0,5313,5314,1,0,0,0,5314,5315,1,0,0,0,5315,5316,7,30,0,0,5316,5317,
7,33,0,0,5317,5336,1,0,0,0,5318,5324,5,200,0,0,5319,5320,5,144,0,0,5320,
5325,3,956,478,0,5321,5325,3,574,287,0,5322,5325,5,767,0,0,5323,5325,3,572,
286,0,5324,5319,1,0,0,0,5324,5321,1,0,0,0,5324,5322,1,0,0,0,5324,5323,1,
0,0,0,5325,5327,1,0,0,0,5326,5328,3,400,200,0,5327,5326,1,0,0,0,5327,5328,
1,0,0,0,5328,5330,1,0,0,0,5329,5331,3,712,356,0,5330,5329,1,0,0,0,5330,5331,
1,0,0,0,5331,5336,1,0,0,0,5332,5333,5,200,0,0,5333,5334,5,524,0,0,5334,5336,
5,353,0,0,5335,5295,1,0,0,0,5335,5297,1,0,0,0,5335,5303,1,0,0,0,5335,5318,
1,0,0,0,5335,5332,1,0,0,0,5336,285,1,0,0,0,5337,5338,5,10,0,0,5338,5339,
5,627,0,0,5339,5349,5,470,0,0,5340,5341,5,465,0,0,5341,5346,3,288,144,0,
5342,5343,5,894,0,0,5343,5345,3,288,144,0,5344,5342,1,0,0,0,5345,5348,1,
0,0,0,5346,5344,1,0,0,0,5346,5347,1,0,0,0,5347,5350,1,0,0,0,5348,5346,1,
0,0,0,5349,5340,1,0,0,0,5349,5350,1,0,0,0,5350,5366,1,0,0,0,5351,5352,5,
200,0,0,5352,5353,5,627,0,0,5353,5363,5,470,0,0,5354,5355,5,465,0,0,5355,
5360,3,288,144,0,5356,5357,5,894,0,0,5357,5359,3,288,144,0,5358,5356,1,0,
0,0,5359,5362,1,0,0,0,5360,5358,1,0,0,0,5360,5361,1,0,0,0,5361,5364,1,0,
0,0,5362,5360,1,0,0,0,5363,5354,1,0,0,0,5363,5364,1,0,0,0,5364,5366,1,0,
0,0,5365,5337,1,0,0,0,5365,5351,1,0,0,0,5366,287,1,0,0,0,5367,5368,7,34,
0,0,5368,5371,5,888,0,0,5369,5372,5,898,0,0,5370,5372,3,992,496,0,5371,5369,
1,0,0,0,5371,5370,1,0,0,0,5372,5373,1,0,0,0,5373,5374,5,889,0,0,5374,289,
1,0,0,0,5375,5376,5,28,0,0,5376,5377,5,708,0,0,5377,5378,3,982,491,0,5378,
5384,3,310,155,0,5379,5380,5,888,0,0,5380,5381,3,292,146,0,5381,5382,5,889,
0,0,5382,5385,1,0,0,0,5383,5385,3,292,146,0,5384,5379,1,0,0,0,5384,5383,
1,0,0,0,5385,5443,1,0,0,0,5386,5387,5,28,0,0,5387,5388,5,708,0,0,5388,5389,
3,982,491,0,5389,5390,3,310,155,0,5390,5391,5,132,0,0,5391,5392,3,976,488,
0,5392,5393,5,640,0,0,5393,5394,5,384,0,0,5394,5395,5,517,0,0,5395,5403,
3,956,478,0,5396,5397,5,785,0,0,5397,5398,5,888,0,0,5398,5399,3,976,488,
0,5399,5400,5,894,0,0,5400,5401,3,978,489,0,5401,5402,5,889,0,0,5402,5404,
1,0,0,0,5403,5396,1,0,0,0,5403,5404,1,0,0,0,5404,5406,1,0,0,0,5405,5407,
5,270,0,0,5406,5405,1,0,0,0,5406,5407,1,0,0,0,5407,5443,1,0,0,0,5408,5409,
5,28,0,0,5409,5410,5,708,0,0,5410,5411,3,982,491,0,5411,5412,3,310,155,0,
5412,5413,5,132,0,0,5413,5414,3,976,488,0,5414,5415,5,770,0,0,5415,5416,
5,384,0,0,5416,5417,5,517,0,0,5417,5443,1,0,0,0,5418,5419,5,28,0,0,5419,
5420,5,708,0,0,5420,5421,3,982,491,0,5421,5422,3,310,155,0,5422,5427,3,298,
149,0,5423,5424,5,894,0,0,5424,5426,3,298,149,0,5425,5423,1,0,0,0,5426,5429,
1,0,0,0,5427,5425,1,0,0,0,5427,5428,1,0,0,0,5428,5443,1,0,0,0,5429,5427,
1,0,0,0,5430,5431,5,28,0,0,5431,5432,5,708,0,0,5432,5433,3,982,491,0,5433,
5434,3,310,155,0,5434,5439,3,300,150,0,5435,5436,5,894,0,0,5436,5438,3,300,
150,0,5437,5435,1,0,0,0,5438,5441,1,0,0,0,5439,5437,1,0,0,0,5439,5440,1,
0,0,0,5440,5443,1,0,0,0,5441,5439,1,0,0,0,5442,5375,1,0,0,0,5442,5386,1,
0,0,0,5442,5408,1,0,0,0,5442,5418,1,0,0,0,5442,5430,1,0,0,0,5443,291,1,0,
0,0,5444,5449,3,294,147,0,5445,5446,5,894,0,0,5446,5448,3,294,147,0,5447,
5445,1,0,0,0,5448,5451,1,0,0,0,5449,5447,1,0,0,0,5449,5450,1,0,0,0,5450,
293,1,0,0,0,5451,5449,1,0,0,0,5452,5454,5,132,0,0,5453,5452,1,0,0,0,5453,
5454,1,0,0,0,5454,5455,1,0,0,0,5455,5456,3,976,488,0,5456,5457,3,296,148,
0,5457,295,1,0,0,0,5458,5459,5,200,0,0,5459,5488,5,174,0,0,5460,5461,5,640,
0,0,5461,5462,5,174,0,0,5462,5463,3,982,491,0,5463,5464,5,884,0,0,5464,5465,
5,423,0,0,5465,5488,1,0,0,0,5466,5468,5,640,0,0,5467,5466,1,0,0,0,5467,5468,
1,0,0,0,5468,5469,1,0,0,0,5469,5470,5,429,0,0,5470,5475,5,439,0,0,5471,5472,
5,200,0,0,5472,5473,5,429,0,0,5473,5475,5,439,0,0,5474,5467,1,0,0,0,5474,
5471,1,0,0,0,5475,5488,1,0,0,0,5476,5477,5,640,0,0,5477,5479,5,163,0,0,5478,
5476,1,0,0,0,5478,5479,1,0,0,0,5479,5480,1,0,0,0,5480,5482,5,764,0,0,5481,
5478,1,0,0,0,5481,5482,1,0,0,0,5482,5483,1,0,0,0,5483,5488,3,1012,506,0,
5484,5488,3,738,369,0,5485,5486,5,770,0,0,5486,5488,5,134,0,0,5487,5458,
1,0,0,0,5487,5460,1,0,0,0,5487,5474,1,0,0,0,5487,5481,1,0,0,0,5487,5484,
1,0,0,0,5487,5485,1,0,0,0,5488,297,1,0,0,0,5489,5491,5,132,0,0,5490,5489,
1,0,0,0,5490,5491,1,0,0,0,5491,5492,1,0,0,0,5492,5493,3,976,488,0,5493,5494,
3,326,163,0,5494,299,1,0,0,0,5495,5496,5,132,0,0,5496,5497,3,976,488,0,5497,
5498,3,330,165,0,5498,301,1,0,0,0,5499,5500,5,28,0,0,5500,5502,5,715,0,0,
5501,5503,3,742,371,0,5502,5501,1,0,0,0,5502,5503,1,0,0,0,5503,5504,1,0,
0,0,5504,5505,3,982,491,0,5505,5506,3,318,159,0,5506,303,1,0,0,0,5507,5508,
5,28,0,0,5508,5510,5,718,0,0,5509,5511,3,742,371,0,5510,5509,1,0,0,0,5510,
5511,1,0,0,0,5511,5512,1,0,0,0,5512,5513,3,982,491,0,5513,5514,3,152,76,
0,5514,5620,1,0,0,0,5515,5516,5,28,0,0,5516,5518,5,718,0,0,5517,5519,3,742,
371,0,5518,5517,1,0,0,0,5518,5519,1,0,0,0,5519,5520,1,0,0,0,5520,5521,3,
982,491,0,5521,5522,7,27,0,0,5522,5523,5,14,0,0,5523,5524,3,952,476,0,5524,
5620,1,0,0,0,5525,5526,5,28,0,0,5526,5528,5,718,0,0,5527,5529,3,742,371,
0,5528,5527,1,0,0,0,5528,5529,1,0,0,0,5529,5530,1,0,0,0,5530,5531,3,982,
491,0,5531,5535,5,640,0,0,5532,5533,5,796,0,0,5533,5534,5,878,0,0,5534,5536,
3,956,478,0,5535,5532,1,0,0,0,5535,5536,1,0,0,0,5536,5538,1,0,0,0,5537,5539,
3,610,305,0,5538,5537,1,0,0,0,5538,5539,1,0,0,0,5539,5541,1,0,0,0,5540,5542,
3,618,309,0,5541,5540,1,0,0,0,5541,5542,1,0,0,0,5542,5544,1,0,0,0,5543,5545,
3,612,306,0,5544,5543,1,0,0,0,5544,5545,1,0,0,0,5545,5547,1,0,0,0,5546,5548,
3,614,307,0,5547,5546,1,0,0,0,5547,5548,1,0,0,0,5548,5550,1,0,0,0,5549,5551,
3,738,369,0,5550,5549,1,0,0,0,5550,5551,1,0,0,0,5551,5553,1,0,0,0,5552,5554,
3,602,301,0,5553,5552,1,0,0,0,5553,5554,1,0,0,0,5554,5620,1,0,0,0,5555,5556,
5,28,0,0,5556,5558,5,718,0,0,5557,5559,3,742,371,0,5558,5557,1,0,0,0,5558,
5559,1,0,0,0,5559,5560,1,0,0,0,5560,5561,3,982,491,0,5561,5563,5,770,0,0,
5562,5564,5,796,0,0,5563,5562,1,0,0,0,5563,5564,1,0,0,0,5564,5566,1,0,0,
0,5565,5567,5,622,0,0,5566,5565,1,0,0,0,5566,5567,1,0,0,0,5567,5569,1,0,
0,0,5568,5570,5,27,0,0,5569,5568,1,0,0,0,5569,5570,1,0,0,0,5570,5572,1,0,
0,0,5571,5573,5,782,0,0,5572,5571,1,0,0,0,5572,5573,1,0,0,0,5573,5575,1,
0,0,0,5574,5576,5,703,0,0,5575,5574,1,0,0,0,5575,5576,1,0,0,0,5576,5578,
1,0,0,0,5577,5579,5,134,0,0,5578,5577,1,0,0,0,5578,5579,1,0,0,0,5579,5581,
1,0,0,0,5580,5582,3,600,300,0,5581,5580,1,0,0,0,5581,5582,1,0,0,0,5582,5620,
1,0,0,0,5583,5584,5,28,0,0,5584,5586,5,718,0,0,5585,5587,3,742,371,0,5586,
5585,1,0,0,0,5586,5587,1,0,0,0,5587,5588,1,0,0,0,5588,5589,3,982,491,0,5589,
5590,3,326,163,0,5590,5620,1,0,0,0,5591,5592,5,28,0,0,5592,5594,5,718,0,
0,5593,5595,3,742,371,0,5594,5593,1,0,0,0,5594,5595,1,0,0,0,5595,5596,1,
0,0,0,5596,5597,3,982,491,0,5597,5598,3,330,165,0,5598,5620,1,0,0,0,5599,
5600,5,28,0,0,5600,5602,5,718,0,0,5601,5603,3,742,371,0,5602,5601,1,0,0,
0,5602,5603,1,0,0,0,5603,5604,1,0,0,0,5604,5605,3,982,491,0,5605,5606,5,
410,0,0,5606,5607,5,43,0,0,5607,5608,3,620,310,0,5608,5620,1,0,0,0,5609,
5610,5,28,0,0,5610,5612,5,718,0,0,5611,5613,3,742,371,0,5612,5611,1,0,0,
0,5612,5613,1,0,0,0,5613,5614,1,0,0,0,5614,5615,3,982,491,0,5615,5616,5,
410,0,0,5616,5617,5,803,0,0,5617,5618,3,992,496,0,5618,5620,1,0,0,0,5619,
5507,1,0,0,0,5619,5515,1,0,0,0,5619,5525,1,0,0,0,5619,5555,1,0,0,0,5619,
5583,1,0,0,0,5619,5591,1,0,0,0,5619,5599,1,0,0,0,5619,5609,1,0,0,0,5620,
305,1,0,0,0,5621,5622,5,28,0,0,5622,5624,5,777,0,0,5623,5625,3,742,371,0,
5624,5623,1,0,0,0,5624,5625,1,0,0,0,5625,5626,1,0,0,0,5626,5627,3,956,478,
0,5627,5628,3,316,158,0,5628,307,1,0,0,0,5629,5630,5,28,0,0,5630,5632,5,
793,0,0,5631,5633,3,742,371,0,5632,5631,1,0,0,0,5632,5633,1,0,0,0,5633,5634,
1,0,0,0,5634,5635,3,982,491,0,5635,5636,5,558,0,0,5636,5637,5,745,0,0,5637,
5638,3,982,491,0,5638,5798,1,0,0,0,5639,5640,5,28,0,0,5640,5642,5,793,0,
0,5641,5643,3,742,371,0,5642,5641,1,0,0,0,5642,5643,1,0,0,0,5643,5644,1,
0,0,0,5644,5645,3,982,491,0,5645,5646,5,640,0,0,5646,5647,3,738,369,0,5647,
5798,1,0,0,0,5648,5649,5,28,0,0,5649,5651,5,793,0,0,5650,5652,3,742,371,
0,5651,5650,1,0,0,0,5651,5652,1,0,0,0,5652,5653,1,0,0,0,5653,5654,3,982,
491,0,5654,5655,5,770,0,0,5655,5656,5,134,0,0,5656,5798,1,0,0,0,5657,5658,
5,28,0,0,5658,5659,5,793,0,0,5659,5660,3,982,491,0,5660,5661,5,640,0,0,5661,
5662,5,629,0,0,5662,5798,1,0,0,0,5663,5664,5,28,0,0,5664,5665,5,793,0,0,
5665,5666,3,982,491,0,5666,5667,5,770,0,0,5667,5668,5,629,0,0,5668,5798,
1,0,0,0,5669,5670,5,28,0,0,5670,5672,5,793,0,0,5671,5673,3,742,371,0,5672,
5671,1,0,0,0,5672,5673,1,0,0,0,5673,5674,1,0,0,0,5674,5675,3,982,491,0,5675,
5676,3,326,163,0,5676,5798,1,0,0,0,5677,5678,5,28,0,0,5678,5680,5,793,0,
0,5679,5681,3,742,371,0,5680,5679,1,0,0,0,5680,5681,1,0,0,0,5681,5682,1,
0,0,0,5682,5683,3,982,491,0,5683,5684,3,330,165,0,5684,5798,1,0,0,0,5685,
5686,5,28,0,0,5686,5688,5,793,0,0,5687,5689,3,742,371,0,5688,5687,1,0,0,
0,5688,5689,1,0,0,0,5689,5690,1,0,0,0,5690,5691,3,982,491,0,5691,5692,5,
10,0,0,5692,5693,5,593,0,0,5693,5694,5,5,0,0,5694,5695,5,517,0,0,5695,5696,
3,956,478,0,5696,5697,5,465,0,0,5697,5698,3,400,200,0,5698,5798,1,0,0,0,
5699,5700,5,28,0,0,5700,5702,5,793,0,0,5701,5703,3,742,371,0,5702,5701,1,
0,0,0,5702,5703,1,0,0,0,5703,5704,1,0,0,0,5704,5705,3,982,491,0,5705,5706,
5,200,0,0,5706,5707,5,593,0,0,5707,5708,5,5,0,0,5708,5709,5,517,0,0,5709,
5710,3,956,478,0,5710,5798,1,0,0,0,5711,5712,5,28,0,0,5712,5714,5,793,0,
0,5713,5715,3,742,371,0,5714,5713,1,0,0,0,5714,5715,1,0,0,0,5715,5716,1,
0,0,0,5716,5717,3,982,491,0,5717,5718,5,10,0,0,5718,5719,5,593,0,0,5719,
5720,5,5,0,0,5720,5721,5,517,0,0,5721,5722,3,956,478,0,5722,5723,5,465,0,
0,5723,5724,3,400,200,0,5724,5725,5,894,0,0,5725,5726,5,200,0,0,5726,5727,
5,593,0,0,5727,5728,5,5,0,0,5728,5729,5,517,0,0,5729,5730,3,956,478,0,5730,
5798,1,0,0,0,5731,5732,5,28,0,0,5732,5734,5,793,0,0,5733,5735,3,742,371,
0,5734,5733,1,0,0,0,5734,5735,1,0,0,0,5735,5736,1,0,0,0,5736,5737,3,982,
491,0,5737,5738,5,200,0,0,5738,5739,5,17,0,0,5739,5740,5,593,0,0,5740,5741,
5,5,0,0,5741,5742,5,516,0,0,5742,5798,1,0,0,0,5743,5744,5,28,0,0,5744,5745,
5,793,0,0,5745,5746,3,982,491,0,5746,5748,3,310,155,0,5747,5749,5,132,0,
0,5748,5747,1,0,0,0,5748,5749,1,0,0,0,5749,5750,1,0,0,0,5750,5751,3,956,
478,0,5751,5752,5,640,0,0,5752,5753,5,384,0,0,5753,5754,5,517,0,0,5754,5762,
3,956,478,0,5755,5756,5,785,0,0,5756,5757,5,888,0,0,5757,5758,3,976,488,
0,5758,5759,5,894,0,0,5759,5760,3,978,489,0,5760,5761,5,889,0,0,5761,5763,
1,0,0,0,5762,5755,1,0,0,0,5762,5763,1,0,0,0,5763,5765,1,0,0,0,5764,5766,
5,270,0,0,5765,5764,1,0,0,0,5765,5766,1,0,0,0,5766,5798,1,0,0,0,5767,5768,
5,28,0,0,5768,5769,5,793,0,0,5769,5770,3,982,491,0,5770,5772,3,310,155,0,
5771,5773,5,132,0,0,5772,5771,1,0,0,0,5772,5773,1,0,0,0,5773,5774,1,0,0,
0,5774,5775,3,956,478,0,5775,5776,5,770,0,0,5776,5777,5,384,0,0,5777,5778,
5,517,0,0,5778,5798,1,0,0,0,5779,5780,5,28,0,0,5780,5781,5,793,0,0,5781,
5782,3,982,491,0,5782,5784,3,310,155,0,5783,5785,5,132,0,0,5784,5783,1,0,
0,0,5784,5785,1,0,0,0,5785,5786,1,0,0,0,5786,5787,3,956,478,0,5787,5788,
3,326,163,0,5788,5798,1,0,0,0,5789,5790,5,28,0,0,5790,5791,5,793,0,0,5791,
5792,3,982,491,0,5792,5793,3,310,155,0,5793,5794,5,132,0,0,5794,5795,3,956,
478,0,5795,5796,3,330,165,0,5796,5798,1,0,0,0,5797,5629,1,0,0,0,5797,5639,
1,0,0,0,5797,5648,1,0,0,0,5797,5657,1,0,0,0,5797,5663,1,0,0,0,5797,5669,
1,0,0,0,5797,5677,1,0,0,0,5797,5685,1,0,0,0,5797,5699,1,0,0,0,5797,5711,
1,0,0,0,5797,5731,1,0,0,0,5797,5743,1,0,0,0,5797,5767,1,0,0,0,5797,5779,
1,0,0,0,5797,5789,1,0,0,0,5798,309,1,0,0,0,5799,5800,7,35,0,0,5800,311,1,
0,0,0,5801,5802,5,28,0,0,5802,5804,5,796,0,0,5803,5805,3,742,371,0,5804,
5803,1,0,0,0,5804,5805,1,0,0,0,5805,5806,1,0,0,0,5806,5807,3,322,161,0,5807,
313,1,0,0,0,5808,5809,3,956,478,0,5809,5810,5,208,0,0,5810,5811,5,256,0,
0,5811,5812,5,745,0,0,5812,5813,5,8,0,0,5813,5814,3,956,478,0,5814,5815,
5,884,0,0,5815,5823,3,956,478,0,5816,5817,5,894,0,0,5817,5818,3,956,478,
0,5818,5819,5,884,0,0,5819,5820,3,956,478,0,5820,5822,1,0,0,0,5821,5816,
1,0,0,0,5822,5825,1,0,0,0,5823,5821,1,0,0,0,5823,5824,1,0,0,0,5824,5827,
1,0,0,0,5825,5823,1,0,0,0,5826,5828,3,174,87,0,5827,5826,1,0,0,0,5827,5828,
1,0,0,0,5828,5862,1,0,0,0,5829,5830,3,956,478,0,5830,5831,5,192,0,0,5831,
5842,5,256,0,0,5832,5833,5,745,0,0,5833,5834,5,8,0,0,5834,5835,3,956,478,
0,5835,5836,5,884,0,0,5836,5837,3,956,478,0,5837,5838,5,894,0,0,5838,5839,
3,956,478,0,5839,5840,5,884,0,0,5840,5841,3,956,478,0,5841,5843,1,0,0,0,
5842,5832,1,0,0,0,5842,5843,1,0,0,0,5843,5862,1,0,0,0,5844,5845,3,956,478,
0,5845,5846,5,524,0,0,5846,5862,1,0,0,0,5847,5849,3,742,371,0,5848,5847,
1,0,0,0,5848,5849,1,0,0,0,5849,5850,1,0,0,0,5850,5851,3,956,478,0,5851,5852,
5,640,0,0,5852,5853,3,738,369,0,5853,5862,1,0,0,0,5854,5856,3,742,371,0,
5855,5854,1,0,0,0,5855,5856,1,0,0,0,5856,5857,1,0,0,0,5857,5858,3,956,478,
0,5858,5859,5,770,0,0,5859,5860,5,134,0,0,5860,5862,1,0,0,0,5861,5808,1,
0,0,0,5861,5829,1,0,0,0,5861,5844,1,0,0,0,5861,5848,1,0,0,0,5861,5855,1,
0,0,0,5862,315,1,0,0,0,5863,5864,5,558,0,0,5864,5865,5,745,0,0,5865,5898,
3,956,478,0,5866,5867,5,568,0,0,5867,5898,5,493,0,0,5868,5869,5,2,0,0,5869,
5870,5,17,0,0,5870,5898,5,537,0,0,5871,5872,5,10,0,0,5872,5873,5,184,0,0,
5873,5874,5,47,0,0,5874,5875,5,458,0,0,5875,5876,5,587,0,0,5876,5877,3,956,
478,0,5877,5878,5,745,0,0,5878,5879,5,630,0,0,5879,5880,5,337,0,0,5880,5881,
3,956,478,0,5881,5898,1,0,0,0,5882,5883,5,557,0,0,5883,5889,5,184,0,0,5884,
5885,5,47,0,0,5885,5886,5,458,0,0,5886,5887,5,587,0,0,5887,5890,3,956,478,
0,5888,5890,5,48,0,0,5889,5884,1,0,0,0,5889,5888,1,0,0,0,5890,5891,1,0,0,
0,5891,5892,5,276,0,0,5892,5893,5,630,0,0,5893,5894,5,337,0,0,5894,5898,
3,956,478,0,5895,5898,3,326,163,0,5896,5898,3,330,165,0,5897,5863,1,0,0,
0,5897,5866,1,0,0,0,5897,5868,1,0,0,0,5897,5871,1,0,0,0,5897,5882,1,0,0,
0,5897,5895,1,0,0,0,5897,5896,1,0,0,0,5898,317,1,0,0,0,5899,5900,5,558,0,
0,5900,5901,5,745,0,0,5901,5937,3,982,491,0,5902,5903,7,36,0,0,5903,5937,
3,596,298,0,5904,5905,5,770,0,0,5905,5937,5,23,0,0,5906,5907,5,640,0,0,5907,
5908,5,384,0,0,5908,5909,5,517,0,0,5909,5916,3,956,478,0,5910,5911,5,894,
0,0,5911,5912,5,384,0,0,5912,5913,5,517,0,0,5913,5915,3,956,478,0,5914,5910,
1,0,0,0,5915,5918,1,0,0,0,5916,5914,1,0,0,0,5916,5917,1,0,0,0,5917,5937,
1,0,0,0,5918,5916,1,0,0,0,5919,5920,5,770,0,0,5920,5921,5,384,0,0,5921,5922,
5,517,0,0,5922,5929,3,956,478,0,5923,5924,5,894,0,0,5924,5925,5,384,0,0,
5925,5926,5,517,0,0,5926,5928,3,956,478,0,5927,5923,1,0,0,0,5928,5931,1,
0,0,0,5929,5927,1,0,0,0,5929,5930,1,0,0,0,5930,5937,1,0,0,0,5931,5929,1,
0,0,0,5932,5933,5,640,0,0,5933,5937,3,738,369,0,5934,5935,5,770,0,0,5935,
5937,5,134,0,0,5936,5899,1,0,0,0,5936,5902,1,0,0,0,5936,5904,1,0,0,0,5936,
5906,1,0,0,0,5936,5919,1,0,0,0,5936,5932,1,0,0,0,5936,5934,1,0,0,0,5937,
319,1,0,0,0,5938,5940,3,742,371,0,5939,5938,1,0,0,0,5939,5940,1,0,0,0,5940,
5941,1,0,0,0,5941,5942,3,956,478,0,5942,5949,5,640,0,0,5943,5944,5,21,0,
0,5944,5945,5,878,0,0,5945,5946,5,888,0,0,5946,5947,3,952,476,0,5947,5948,
5,889,0,0,5948,5950,1,0,0,0,5949,5943,1,0,0,0,5949,5950,1,0,0,0,5950,5957,
1,0,0,0,5951,5952,5,90,0,0,5952,5953,5,878,0,0,5953,5954,5,888,0,0,5954,
5955,3,952,476,0,5955,5956,5,889,0,0,5956,5958,1,0,0,0,5957,5951,1,0,0,0,
5957,5958,1,0,0,0,5958,5960,1,0,0,0,5959,5961,3,738,369,0,5960,5959,1,0,
0,0,5960,5961,1,0,0,0,5961,5975,1,0,0,0,5962,5964,3,742,371,0,5963,5962,
1,0,0,0,5963,5964,1,0,0,0,5964,5965,1,0,0,0,5965,5966,3,956,478,0,5966,5967,
5,770,0,0,5967,5968,5,134,0,0,5968,5975,1,0,0,0,5969,5970,3,956,478,0,5970,
5971,5,558,0,0,5971,5972,5,745,0,0,5972,5973,3,956,478,0,5973,5975,1,0,0,
0,5974,5939,1,0,0,0,5974,5963,1,0,0,0,5974,5969,1,0,0,0,5975,321,1,0,0,0,
5976,5978,3,954,477,0,5977,5976,1,0,0,0,5977,5978,1,0,0,0,5978,5984,1,0,
0,0,5979,5985,5,700,0,0,5980,5982,5,577,0,0,5981,5983,3,740,370,0,5982,5981,
1,0,0,0,5982,5983,1,0,0,0,5983,5985,1,0,0,0,5984,5979,1,0,0,0,5984,5980,
1,0,0,0,5985,6024,1,0,0,0,5986,5988,3,954,477,0,5987,5986,1,0,0,0,5987,5988,
1,0,0,0,5988,5989,1,0,0,0,5989,5990,5,2,0,0,5990,5991,5,17,0,0,5991,6024,
5,537,0,0,5992,5993,3,954,477,0,5993,5994,5,558,0,0,5994,5995,5,745,0,0,
5995,5996,3,956,478,0,5996,6024,1,0,0,0,5997,5998,3,954,477,0,5998,5999,
3,326,163,0,5999,6024,1,0,0,0,6000,6001,3,954,477,0,6001,6002,3,330,165,
0,6002,6024,1,0,0,0,6003,6004,3,954,477,0,6004,6005,5,770,0,0,6005,6010,
3,956,478,0,6006,6007,5,894,0,0,6007,6009,3,956,478,0,6008,6006,1,0,0,0,
6009,6012,1,0,0,0,6010,6008,1,0,0,0,6010,6011,1,0,0,0,6011,6024,1,0,0,0,
6012,6010,1,0,0,0,6013,6014,3,956,478,0,6014,6015,5,640,0,0,6015,6020,3,
636,318,0,6016,6017,5,894,0,0,6017,6019,3,636,318,0,6018,6016,1,0,0,0,6019,
6022,1,0,0,0,6020,6018,1,0,0,0,6020,6021,1,0,0,0,6021,6024,1,0,0,0,6022,
6020,1,0,0,0,6023,5977,1,0,0,0,6023,5987,1,0,0,0,6023,5992,1,0,0,0,6023,
5997,1,0,0,0,6023,6000,1,0,0,0,6023,6003,1,0,0,0,6023,6013,1,0,0,0,6024,
323,1,0,0,0,6025,6027,5,640,0,0,6026,6028,3,136,68,0,6027,6026,1,0,0,0,6027,
6028,1,0,0,0,6028,6030,1,0,0,0,6029,6031,3,138,69,0,6030,6029,1,0,0,0,6030,
6031,1,0,0,0,6031,6033,1,0,0,0,6032,6034,3,144,72,0,6033,6032,1,0,0,0,6033,
6034,1,0,0,0,6034,6062,1,0,0,0,6035,6036,5,770,0,0,6036,6039,3,944,472,0,
6037,6038,5,894,0,0,6038,6040,3,944,472,0,6039,6037,1,0,0,0,6039,6040,1,
0,0,0,6040,6062,1,0,0,0,6041,6042,5,640,0,0,6042,6043,5,571,0,0,6043,6044,
5,878,0,0,6044,6062,3,956,478,0,6045,6062,3,326,163,0,6046,6062,3,330,165,
0,6047,6048,3,956,478,0,6048,6049,5,558,0,0,6049,6050,5,745,0,0,6050,6054,
3,956,478,0,6051,6052,5,619,0,0,6052,6053,5,878,0,0,6053,6055,3,508,254,
0,6054,6051,1,0,0,0,6054,6055,1,0,0,0,6055,6062,1,0,0,0,6056,6057,3,956,
478,0,6057,6058,5,200,0,0,6058,6059,5,463,0,0,6059,6060,5,774,0,0,6060,6062,
1,0,0,0,6061,6025,1,0,0,0,6061,6035,1,0,0,0,6061,6041,1,0,0,0,6061,6045,
1,0,0,0,6061,6046,1,0,0,0,6061,6047,1,0,0,0,6061,6056,1,0,0,0,6062,325,1,
0,0,0,6063,6064,5,640,0,0,6064,6065,3,328,164,0,6065,327,1,0,0,0,6066,6067,
5,715,0,0,6067,6068,3,982,491,0,6068,6069,5,878,0,0,6069,6077,3,938,469,
0,6070,6071,5,894,0,0,6071,6072,3,982,491,0,6072,6073,5,878,0,0,6073,6074,
3,938,469,0,6074,6076,1,0,0,0,6075,6070,1,0,0,0,6076,6079,1,0,0,0,6077,6075,
1,0,0,0,6077,6078,1,0,0,0,6078,329,1,0,0,0,6079,6077,1,0,0,0,6080,6081,5,
770,0,0,6081,6082,5,715,0,0,6082,6087,3,982,491,0,6083,6084,5,894,0,0,6084,
6086,3,982,491,0,6085,6083,1,0,0,0,6086,6089,1,0,0,0,6087,6085,1,0,0,0,6087,
6088,1,0,0,0,6088,331,1,0,0,0,6089,6087,1,0,0,0,6090,6135,3,334,167,0,6091,
6135,3,336,168,0,6092,6135,3,342,171,0,6093,6135,3,344,172,0,6094,6135,3,
346,173,0,6095,6135,3,348,174,0,6096,6135,3,360,180,0,6097,6135,3,362,181,
0,6098,6135,3,364,182,0,6099,6135,3,366,183,0,6100,6135,3,376,188,0,6101,
6135,3,380,190,0,6102,6135,3,392,196,0,6103,6135,3,394,197,0,6104,6135,3,
396,198,0,6105,6135,3,402,201,0,6106,6135,3,404,202,0,6107,6135,3,410,205,
0,6108,6135,3,460,230,0,6109,6135,3,412,206,0,6110,6135,3,422,211,0,6111,
6135,3,424,212,0,6112,6135,3,426,213,0,6113,6135,3,428,214,0,6114,6135,3,
430,215,0,6115,6135,3,432,216,0,6116,6135,3,434,217,0,6117,6135,3,438,219,
0,6118,6135,3,440,220,0,6119,6135,3,442,221,0,6120,6135,3,452,226,0,6121,
6135,3,454,227,0,6122,6135,3,466,233,0,6123,6135,3,522,261,0,6124,6135,3,
538,269,0,6125,6135,3,550,275,0,6126,6135,3,584,292,0,6127,6135,3,590,295,
0,6128,6135,3,592,296,0,6129,6135,3,594,297,0,6130,6135,3,604,302,0,6131,
6135,3,624,312,0,6132,6135,3,628,314,0,6133,6135,3,630,315,0,6134,6090,1,
0,0,0,6134,6091,1,0,0,0,6134,6092,1,0,0,0,6134,6093,1,0,0,0,6134,6094,1,
0,0,0,6134,6095,1,0,0,0,6134,6096,1,0,0,0,6134,6097,1,0,0,0,6134,6098,1,
0,0,0,6134,6099,1,0,0,0,6134,6100,1,0,0,0,6134,6101,1,0,0,0,6134,6102,1,
0,0,0,6134,6103,1,0,0,0,6134,6104,1,0,0,0,6134,6105,1,0,0,0,6134,6106,1,
0,0,0,6134,6107,1,0,0,0,6134,6108,1,0,0,0,6134,6109,1,0,0,0,6134,6110,1,
0,0,0,6134,6111,1,0,0,0,6134,6112,1,0,0,0,6134,6113,1,0,0,0,6134,6114,1,
0,0,0,6134,6115,1,0,0,0,6134,6116,1,0,0,0,6134,6117,1,0,0,0,6134,6118,1,
0,0,0,6134,6119,1,0,0,0,6134,6120,1,0,0,0,6134,6121,1,0,0,0,6134,6122,1,
0,0,0,6134,6123,1,0,0,0,6134,6124,1,0,0,0,6134,6125,1,0,0,0,6134,6126,1,
0,0,0,6134,6127,1,0,0,0,6134,6128,1,0,0,0,6134,6129,1,0,0,0,6134,6130,1,
0,0,0,6134,6131,1,0,0,0,6134,6132,1,0,0,0,6134,6133,1,0,0,0,6135,333,1,0,
0,0,6136,6137,5,151,0,0,6137,6138,5,6,0,0,6138,6139,3,956,478,0,6139,6140,
5,11,0,0,6140,6141,5,878,0,0,6141,6142,3,956,478,0,6142,6143,5,12,0,0,6143,
6144,5,878,0,0,6144,6148,3,950,475,0,6145,6146,5,266,0,0,6146,6147,5,878,
0,0,6147,6149,3,956,478,0,6148,6145,1,0,0,0,6148,6149,1,0,0,0,6149,6153,
1,0,0,0,6150,6151,5,360,0,0,6151,6152,5,878,0,0,6152,6154,3,956,478,0,6153,
6150,1,0,0,0,6153,6154,1,0,0,0,6154,6155,1,0,0,0,6155,6156,5,205,0,0,6156,
6157,5,878,0,0,6157,6161,3,950,475,0,6158,6159,5,416,0,0,6159,6160,5,878,
0,0,6160,6162,3,508,254,0,6161,6158,1,0,0,0,6161,6162,1,0,0,0,6162,6163,
1,0,0,0,6163,6164,5,203,0,0,6164,6165,5,878,0,0,6165,6169,7,37,0,0,6166,
6167,5,555,0,0,6167,6168,5,878,0,0,6168,6170,3,946,473,0,6169,6166,1,0,0,
0,6169,6170,1,0,0,0,6170,6174,1,0,0,0,6171,6172,5,553,0,0,6172,6173,5,878,
0,0,6173,6175,3,948,474,0,6174,6171,1,0,0,0,6174,6175,1,0,0,0,6175,6177,
1,0,0,0,6176,6178,3,738,369,0,6177,6176,1,0,0,0,6177,6178,1,0,0,0,6178,335,
1,0,0,0,6179,6181,5,151,0,0,6180,6182,3,746,373,0,6181,6180,1,0,0,0,6181,
6182,1,0,0,0,6182,6183,1,0,0,0,6183,6185,5,15,0,0,6184,6186,3,744,372,0,
6185,6184,1,0,0,0,6185,6186,1,0,0,0,6186,6187,1,0,0,0,6187,6188,3,956,478,
0,6188,6189,5,796,0,0,6189,6190,5,878,0,0,6190,6191,3,956,478,0,6191,6192,
5,622,0,0,6192,6193,5,878,0,0,6193,6194,3,950,475,0,6194,6195,5,312,0,0,
6195,6196,5,888,0,0,6196,6197,5,236,0,0,6197,6198,5,888,0,0,6198,6199,3,
338,169,0,6199,6200,5,889,0,0,6200,6201,5,889,0,0,6201,6202,5,723,0,0,6202,
6203,3,340,170,0,6203,337,1,0,0,0,6204,6208,3,1054,527,0,6205,6208,3,808,
404,0,6206,6208,3,622,311,0,6207,6204,1,0,0,0,6207,6205,1,0,0,0,6207,6206,
1,0,0,0,6208,339,1,0,0,0,6209,6210,3,4,2,0,6210,341,1,0,0,0,6211,6213,5,
151,0,0,6212,6214,3,746,373,0,6213,6212,1,0,0,0,6213,6214,1,0,0,0,6214,6215,
1,0,0,0,6215,6216,5,32,0,0,6216,6218,5,337,0,0,6217,6219,3,744,372,0,6218,
6217,1,0,0,0,6218,6219,1,0,0,0,6219,6220,1,0,0,0,6220,6221,3,956,478,0,6221,
6222,5,38,0,0,6222,6223,5,878,0,0,6223,6224,3,956,478,0,6224,6225,5,34,0,
0,6225,6226,5,878,0,0,6226,6230,3,950,475,0,6227,6228,5,37,0,0,6228,6229,
5,878,0,0,6229,6231,3,950,475,0,6230,6227,1,0,0,0,6230,6231,1,0,0,0,6231,
6232,1,0,0,0,6232,6233,5,33,0,0,6233,6234,5,878,0,0,6234,6235,5,888,0,0,
6235,6236,3,950,475,0,6236,6243,5,889,0,0,6237,6238,5,35,0,0,6238,6239,5,
878,0,0,6239,6240,5,888,0,0,6240,6241,3,950,475,0,6241,6242,5,889,0,0,6242,
6244,1,0,0,0,6243,6237,1,0,0,0,6243,6244,1,0,0,0,6244,6245,1,0,0,0,6245,
6246,5,209,0,0,6246,6247,5,878,0,0,6247,6249,3,508,254,0,6248,6250,3,738,
369,0,6249,6248,1,0,0,0,6249,6250,1,0,0,0,6250,6326,1,0,0,0,6251,6253,5,
151,0,0,6252,6254,3,746,373,0,6253,6252,1,0,0,0,6253,6254,1,0,0,0,6254,6255,
1,0,0,0,6255,6256,5,32,0,0,6256,6258,5,337,0,0,6257,6259,3,744,372,0,6258,
6257,1,0,0,0,6258,6259,1,0,0,0,6259,6260,1,0,0,0,6260,6261,3,956,478,0,6261,
6262,5,38,0,0,6262,6263,5,878,0,0,6263,6264,3,956,478,0,6264,6265,5,79,0,
0,6265,6266,5,878,0,0,6266,6267,3,950,475,0,6267,6268,5,72,0,0,6268,6269,
5,878,0,0,6269,6273,3,950,475,0,6270,6271,5,37,0,0,6271,6272,5,878,0,0,6272,
6274,3,950,475,0,6273,6270,1,0,0,0,6273,6274,1,0,0,0,6274,6275,1,0,0,0,6275,
6276,5,33,0,0,6276,6277,5,878,0,0,6277,6278,5,888,0,0,6278,6279,3,950,475,
0,6279,6286,5,889,0,0,6280,6281,5,35,0,0,6281,6282,5,878,0,0,6282,6283,5,
888,0,0,6283,6284,3,950,475,0,6284,6285,5,889,0,0,6285,6287,1,0,0,0,6286,
6280,1,0,0,0,6286,6287,1,0,0,0,6287,6288,1,0,0,0,6288,6289,5,209,0,0,6289,
6290,5,878,0,0,6290,6292,3,508,254,0,6291,6293,3,738,369,0,6292,6291,1,0,
0,0,6292,6293,1,0,0,0,6293,6326,1,0,0,0,6294,6295,5,151,0,0,6295,6296,3,
746,373,0,6296,6297,5,32,0,0,6297,6298,5,337,0,0,6298,6299,3,744,372,0,6299,
6300,3,956,478,0,6300,6301,5,38,0,0,6301,6302,5,878,0,0,6302,6303,3,956,
478,0,6303,6304,5,294,0,0,6304,6305,5,878,0,0,6305,6306,3,950,475,0,6306,
6307,5,33,0,0,6307,6308,5,878,0,0,6308,6309,5,888,0,0,6309,6310,3,950,475,
0,6310,6317,5,889,0,0,6311,6312,5,35,0,0,6312,6313,5,878,0,0,6313,6314,5,
888,0,0,6314,6315,3,950,475,0,6315,6316,5,889,0,0,6316,6318,1,0,0,0,6317,
6311,1,0,0,0,6317,6318,1,0,0,0,6318,6319,1,0,0,0,6319,6320,5,209,0,0,6320,
6321,5,878,0,0,6321,6323,3,508,254,0,6322,6324,3,738,369,0,6323,6322,1,0,
0,0,6323,6324,1,0,0,0,6324,6326,1,0,0,0,6325,6211,1,0,0,0,6325,6251,1,0,
0,0,6325,6294,1,0,0,0,6326,343,1,0,0,0,6327,6329,5,151,0,0,6328,6330,3,746,
373,0,6329,6328,1,0,0,0,6329,6330,1,0,0,0,6330,6331,1,0,0,0,6331,6333,7,
38,0,0,6332,6334,3,744,372,0,6333,6332,1,0,0,0,6333,6334,1,0,0,0,6334,6335,
1,0,0,0,6335,6336,3,956,478,0,6336,6337,5,126,0,0,6337,6353,3,982,491,0,
6338,6339,3,352,176,0,6339,6349,5,888,0,0,6340,6341,5,727,0,0,6341,6342,
5,875,0,0,6342,6350,3,950,475,0,6343,6344,5,459,0,0,6344,6345,5,875,0,0,
6345,6350,3,950,475,0,6346,6347,5,679,0,0,6347,6348,5,875,0,0,6348,6350,
3,956,478,0,6349,6340,1,0,0,0,6349,6343,1,0,0,0,6349,6346,1,0,0,0,6350,6351,
1,0,0,0,6351,6352,5,889,0,0,6352,6354,1,0,0,0,6353,6338,1,0,0,0,6353,6354,
1,0,0,0,6354,6375,1,0,0,0,6355,6357,5,151,0,0,6356,6358,3,746,373,0,6357,
6356,1,0,0,0,6357,6358,1,0,0,0,6358,6365,1,0,0,0,6359,6366,5,670,0,0,6360,
6361,5,261,0,0,6361,6366,5,272,0,0,6362,6366,5,634,0,0,6363,6366,5,690,0,
0,6364,6366,5,718,0,0,6365,6359,1,0,0,0,6365,6360,1,0,0,0,6365,6362,1,0,
0,0,6365,6363,1,0,0,0,6365,6364,1,0,0,0,6366,6368,1,0,0,0,6367,6369,3,744,
372,0,6368,6367,1,0,0,0,6368,6369,1,0,0,0,6369,6370,1,0,0,0,6370,6371,3,
982,491,0,6371,6372,5,126,0,0,6372,6373,3,982,491,0,6373,6375,1,0,0,0,6374,
6327,1,0,0,0,6374,6355,1,0,0,0,6375,345,1,0,0,0,6376,6377,5,151,0,0,6377,
6379,5,142,0,0,6378,6380,3,744,372,0,6379,6378,1,0,0,0,6379,6380,1,0,0,0,
6380,6381,1,0,0,0,6381,6396,3,956,478,0,6382,6384,3,738,369,0,6383,6382,
1,0,0,0,6383,6384,1,0,0,0,6384,6397,1,0,0,0,6385,6386,5,43,0,0,6386,6387,
5,562,0,0,6387,6388,5,458,0,0,6388,6389,3,956,478,0,6389,6390,5,884,0,0,
6390,6391,3,956,478,0,6391,6392,5,884,0,0,6392,6394,3,956,478,0,6393,6395,
3,738,369,0,6394,6393,1,0,0,0,6394,6395,1,0,0,0,6395,6397,1,0,0,0,6396,6383,
1,0,0,0,6396,6385,1,0,0,0,6397,347,1,0,0,0,6398,6400,5,151,0,0,6399,6401,
3,746,373,0,6400,6399,1,0,0,0,6400,6401,1,0,0,0,6401,6403,1,0,0,0,6402,6404,
5,754,0,0,6403,6402,1,0,0,0,6403,6404,1,0,0,0,6404,6405,1,0,0,0,6405,6407,
5,164,0,0,6406,6408,3,744,372,0,6407,6406,1,0,0,0,6407,6408,1,0,0,0,6408,
6409,1,0,0,0,6409,6411,3,956,478,0,6410,6412,3,350,175,0,6411,6410,1,0,0,
0,6411,6412,1,0,0,0,6412,6416,1,0,0,0,6413,6414,5,166,0,0,6414,6415,5,878,
0,0,6415,6417,3,986,493,0,6416,6413,1,0,0,0,6416,6417,1,0,0,0,6417,6421,
1,0,0,0,6418,6419,5,395,0,0,6419,6420,5,878,0,0,6420,6422,3,986,493,0,6421,
6418,1,0,0,0,6421,6422,1,0,0,0,6422,6424,1,0,0,0,6423,6425,3,140,70,0,6424,
6423,1,0,0,0,6424,6425,1,0,0,0,6425,6427,1,0,0,0,6426,6428,3,556,278,0,6427,
6426,1,0,0,0,6427,6428,1,0,0,0,6428,6430,1,0,0,0,6429,6431,3,738,369,0,6430,
6429,1,0,0,0,6430,6431,1,0,0,0,6431,349,1,0,0,0,6432,6433,5,126,0,0,6433,
6449,3,956,478,0,6434,6435,3,352,176,0,6435,6445,5,888,0,0,6436,6437,5,727,
0,0,6437,6438,5,875,0,0,6438,6446,3,950,475,0,6439,6440,5,459,0,0,6440,6441,
5,875,0,0,6441,6446,3,950,475,0,6442,6443,5,679,0,0,6443,6444,5,875,0,0,
6444,6446,3,956,478,0,6445,6436,1,0,0,0,6445,6439,1,0,0,0,6445,6442,1,0,
0,0,6446,6447,1,0,0,0,6447,6448,5,889,0,0,6448,6450,1,0,0,0,6449,6434,1,
0,0,0,6449,6450,1,0,0,0,6450,351,1,0,0,0,6451,6452,7,39,0,0,6452,353,1,0,
0,0,6453,6454,3,950,475,0,6454,6455,5,878,0,0,6455,6456,3,950,475,0,6456,
355,1,0,0,0,6457,6458,7,40,0,0,6458,357,1,0,0,0,6459,6460,5,136,0,0,6460,
6461,5,878,0,0,6461,6462,3,356,178,0,6462,359,1,0,0,0,6463,6465,5,151,0,
0,6464,6466,3,746,373,0,6465,6464,1,0,0,0,6465,6466,1,0,0,0,6466,6467,1,
0,0,0,6467,6468,5,201,0,0,6468,6469,5,708,0,0,6469,6470,3,956,478,0,6470,
6471,5,717,0,0,6471,6474,5,878,0,0,6472,6475,3,950,475,0,6473,6475,5,199,
0,0,6474,6472,1,0,0,0,6474,6473,1,0,0,0,6475,6476,1,0,0,0,6476,6477,5,796,
0,0,6477,6478,5,878,0,0,6478,6479,3,956,478,0,6479,6480,5,43,0,0,6480,6481,
3,1048,524,0,6481,361,1,0,0,0,6482,6484,5,151,0,0,6483,6485,3,746,373,0,
6484,6483,1,0,0,0,6484,6485,1,0,0,0,6485,6486,1,0,0,0,6486,6487,5,231,0,
0,6487,6489,5,708,0,0,6488,6490,3,744,372,0,6489,6488,1,0,0,0,6489,6490,
1,0,0,0,6490,6491,1,0,0,0,6491,6493,3,956,478,0,6492,6494,3,560,280,0,6493,
6492,1,0,0,0,6493,6494,1,0,0,0,6494,6498,1,0,0,0,6495,6496,5,166,0,0,6496,
6497,5,878,0,0,6497,6499,3,986,493,0,6498,6495,1,0,0,0,6498,6499,1,0,0,0,
6499,6503,1,0,0,0,6500,6501,5,395,0,0,6501,6502,5,878,0,0,6502,6504,3,986,
493,0,6503,6500,1,0,0,0,6503,6504,1,0,0,0,6504,6506,1,0,0,0,6505,6507,3,
562,281,0,6506,6505,1,0,0,0,6506,6507,1,0,0,0,6507,6511,1,0,0,0,6508,6509,
5,175,0,0,6509,6510,5,878,0,0,6510,6512,3,950,475,0,6511,6508,1,0,0,0,6511,
6512,1,0,0,0,6512,6514,1,0,0,0,6513,6515,3,540,270,0,6514,6513,1,0,0,0,6514,
6515,1,0,0,0,6515,6517,1,0,0,0,6516,6518,3,558,279,0,6517,6516,1,0,0,0,6517,
6518,1,0,0,0,6518,6520,1,0,0,0,6519,6521,3,556,278,0,6520,6519,1,0,0,0,6520,
6521,1,0,0,0,6521,6526,1,0,0,0,6522,6524,5,805,0,0,6523,6522,1,0,0,0,6523,
6524,1,0,0,0,6524,6525,1,0,0,0,6525,6527,3,738,369,0,6526,6523,1,0,0,0,6526,
6527,1,0,0,0,6527,363,1,0,0,0,6528,6530,5,151,0,0,6529,6531,3,746,373,0,
6530,6529,1,0,0,0,6530,6531,1,0,0,0,6531,6533,1,0,0,0,6532,6534,5,629,0,
0,6533,6532,1,0,0,0,6533,6534,1,0,0,0,6534,6535,1,0,0,0,6535,6536,5,240,
0,0,6536,6537,5,278,0,0,6537,6538,3,982,491,0,6538,6550,5,888,0,0,6539,6540,
3,942,471,0,6540,6547,3,940,470,0,6541,6542,5,894,0,0,6542,6543,3,942,471,
0,6543,6544,3,940,470,0,6544,6546,1,0,0,0,6545,6541,1,0,0,0,6546,6549,1,
0,0,0,6547,6545,1,0,0,0,6547,6548,1,0,0,0,6548,6551,1,0,0,0,6549,6547,1,
0,0,0,6550,6539,1,0,0,0,6550,6551,1,0,0,0,6551,6552,1,0,0,0,6552,6553,5,
889,0,0,6553,6554,5,578,0,0,6554,6556,3,1012,506,0,6555,6557,3,1174,587,
0,6556,6555,1,0,0,0,6556,6557,1,0,0,0,6557,6570,1,0,0,0,6558,6559,5,99,0,
0,6559,6560,5,465,0,0,6560,6561,5,439,0,0,6561,6571,5,333,0,0,6562,6563,
5,578,0,0,6563,6564,5,439,0,0,6564,6565,5,465,0,0,6565,6566,5,439,0,0,6566,
6569,5,333,0,0,6567,6569,5,692,0,0,6568,6562,1,0,0,0,6568,6567,1,0,0,0,6569,
6571,1,0,0,0,6570,6558,1,0,0,0,6570,6568,1,0,0,0,6570,6571,1,0,0,0,6571,
6573,1,0,0,0,6572,6574,7,41,0,0,6573,6572,1,0,0,0,6573,6574,1,0,0,0,6574,
6576,1,0,0,0,6575,6577,3,738,369,0,6576,6575,1,0,0,0,6576,6577,1,0,0,0,6577,
6578,1,0,0,0,6578,6579,5,36,0,0,6579,6580,5,878,0,0,6580,6594,3,956,478,
0,6581,6582,5,307,0,0,6582,6583,5,878,0,0,6583,6584,5,888,0,0,6584,6589,
3,354,177,0,6585,6586,5,894,0,0,6586,6588,3,354,177,0,6587,6585,1,0,0,0,
6588,6591,1,0,0,0,6589,6587,1,0,0,0,6589,6590,1,0,0,0,6590,6592,1,0,0,0,
6591,6589,1,0,0,0,6592,6593,5,889,0,0,6593,6595,1,0,0,0,6594,6581,1,0,0,
0,6594,6595,1,0,0,0,6595,6609,1,0,0,0,6596,6597,5,146,0,0,6597,6598,5,878,
0,0,6598,6599,5,888,0,0,6599,6604,3,956,478,0,6600,6601,5,894,0,0,6601,6603,
3,956,478,0,6602,6600,1,0,0,0,6603,6606,1,0,0,0,6604,6602,1,0,0,0,6604,6605,
1,0,0,0,6605,6607,1,0,0,0,6606,6604,1,0,0,0,6607,6608,5,889,0,0,6608,6610,
1,0,0,0,6609,6596,1,0,0,0,6609,6610,1,0,0,0,6610,6614,1,0,0,0,6611,6612,
5,392,0,0,6612,6613,5,878,0,0,6613,6615,3,986,493,0,6614,6611,1,0,0,0,6614,
6615,1,0,0,0,6615,6617,1,0,0,0,6616,6618,3,358,179,0,6617,6616,1,0,0,0,6617,
6618,1,0,0,0,6618,6622,1,0,0,0,6619,6620,5,565,0,0,6620,6621,5,878,0,0,6621,
6623,3,956,478,0,6622,6619,1,0,0,0,6622,6623,1,0,0,0,6623,6627,1,0,0,0,6624,
6625,5,573,0,0,6625,6626,5,878,0,0,6626,6628,3,956,478,0,6627,6624,1,0,0,
0,6627,6628,1,0,0,0,6628,6629,1,0,0,0,6629,6630,5,43,0,0,6630,6631,3,950,
475,0,6631,365,1,0,0,0,6632,6634,5,151,0,0,6633,6635,3,746,373,0,6634,6633,
1,0,0,0,6634,6635,1,0,0,0,6635,6636,1,0,0,0,6636,6637,5,240,0,0,6637,6639,
5,708,0,0,6638,6640,3,744,372,0,6639,6638,1,0,0,0,6639,6640,1,0,0,0,6640,
6641,1,0,0,0,6641,6642,3,982,491,0,6642,6643,5,888,0,0,6643,6644,3,370,185,
0,6644,6646,5,889,0,0,6645,6647,3,536,268,0,6646,6645,1,0,0,0,6646,6647,
1,0,0,0,6647,6649,1,0,0,0,6648,6650,3,1128,564,0,6649,6648,1,0,0,0,6649,
6650,1,0,0,0,6650,6652,1,0,0,0,6651,6653,5,805,0,0,6652,6651,1,0,0,0,6652,
6653,1,0,0,0,6653,6654,1,0,0,0,6654,6655,5,374,0,0,6655,6656,5,878,0,0,6656,
6660,3,110,55,0,6657,6658,5,552,0,0,6658,6659,5,878,0,0,6659,6661,3,508,
254,0,6660,6657,1,0,0,0,6660,6661,1,0,0,0,6661,6665,1,0,0,0,6662,6663,5,
57,0,0,6663,6664,5,878,0,0,6664,6666,3,508,254,0,6665,6662,1,0,0,0,6665,
6666,1,0,0,0,6666,6668,1,0,0,0,6667,6669,3,974,487,0,6668,6667,1,0,0,0,6668,
6669,1,0,0,0,6669,6670,1,0,0,0,6670,6674,3,48,24,0,6671,6672,5,68,0,0,6672,
6673,5,878,0,0,6673,6675,3,950,475,0,6674,6671,1,0,0,0,6674,6675,1,0,0,0,
6675,6677,1,0,0,0,6676,6678,3,540,270,0,6677,6676,1,0,0,0,6677,6678,1,0,
0,0,6678,6680,1,0,0,0,6679,6681,3,558,279,0,6680,6679,1,0,0,0,6680,6681,
1,0,0,0,6681,6683,1,0,0,0,6682,6684,3,556,278,0,6683,6682,1,0,0,0,6683,6684,
1,0,0,0,6684,6686,1,0,0,0,6685,6687,3,738,369,0,6686,6685,1,0,0,0,6686,6687,
1,0,0,0,6687,6776,1,0,0,0,6688,6690,5,151,0,0,6689,6691,3,746,373,0,6690,
6689,1,0,0,0,6690,6691,1,0,0,0,6691,6692,1,0,0,0,6692,6693,5,240,0,0,6693,
6695,5,708,0,0,6694,6696,3,744,372,0,6695,6694,1,0,0,0,6695,6696,1,0,0,0,
6696,6697,1,0,0,0,6697,6698,3,982,491,0,6698,6699,5,888,0,0,6699,6700,3,
370,185,0,6700,6702,5,889,0,0,6701,6703,3,536,268,0,6702,6701,1,0,0,0,6702,
6703,1,0,0,0,6703,6705,1,0,0,0,6704,6706,3,1128,564,0,6705,6704,1,0,0,0,
6705,6706,1,0,0,0,6706,6708,1,0,0,0,6707,6709,5,805,0,0,6708,6707,1,0,0,
0,6708,6709,1,0,0,0,6709,6710,1,0,0,0,6710,6711,5,374,0,0,6711,6712,5,878,
0,0,6712,6713,3,110,55,0,6713,6714,5,492,0,0,6714,6715,5,878,0,0,6715,6716,
5,780,0,0,6716,6718,3,48,24,0,6717,6719,3,540,270,0,6718,6717,1,0,0,0,6718,
6719,1,0,0,0,6719,6721,1,0,0,0,6720,6722,3,558,279,0,6721,6720,1,0,0,0,6721,
6722,1,0,0,0,6722,6724,1,0,0,0,6723,6725,3,556,278,0,6724,6723,1,0,0,0,6724,
6725,1,0,0,0,6725,6727,1,0,0,0,6726,6728,3,738,369,0,6727,6726,1,0,0,0,6727,
6728,1,0,0,0,6728,6776,1,0,0,0,6729,6731,5,151,0,0,6730,6732,3,746,373,0,
6731,6730,1,0,0,0,6731,6732,1,0,0,0,6732,6733,1,0,0,0,6733,6734,5,240,0,
0,6734,6736,5,708,0,0,6735,6737,3,744,372,0,6736,6735,1,0,0,0,6736,6737,
1,0,0,0,6737,6738,1,0,0,0,6738,6739,3,982,491,0,6739,6740,5,888,0,0,6740,
6741,3,370,185,0,6741,6743,5,889,0,0,6742,6744,3,536,268,0,6743,6742,1,0,
0,0,6743,6744,1,0,0,0,6744,6746,1,0,0,0,6745,6747,3,1128,564,0,6746,6745,
1,0,0,0,6746,6747,1,0,0,0,6747,6749,1,0,0,0,6748,6750,5,805,0,0,6749,6748,
1,0,0,0,6749,6750,1,0,0,0,6750,6751,1,0,0,0,6751,6752,5,374,0,0,6752,6753,
5,878,0,0,6753,6754,3,110,55,0,6754,6755,5,492,0,0,6755,6756,5,878,0,0,6756,
6757,5,780,0,0,6757,6761,3,48,24,0,6758,6759,5,713,0,0,6759,6760,5,878,0,
0,6760,6762,5,186,0,0,6761,6758,1,0,0,0,6761,6762,1,0,0,0,6762,6764,1,0,
0,0,6763,6765,3,540,270,0,6764,6763,1,0,0,0,6764,6765,1,0,0,0,6765,6767,
1,0,0,0,6766,6768,3,558,279,0,6767,6766,1,0,0,0,6767,6768,1,0,0,0,6768,6770,
1,0,0,0,6769,6771,3,556,278,0,6770,6769,1,0,0,0,6770,6771,1,0,0,0,6771,6773,
1,0,0,0,6772,6774,3,738,369,0,6773,6772,1,0,0,0,6773,6774,1,0,0,0,6774,6776,
1,0,0,0,6775,6632,1,0,0,0,6775,6688,1,0,0,0,6775,6729,1,0,0,0,6776,367,1,
0,0,0,6777,6778,3,976,488,0,6778,6779,3,1012,506,0,6779,6782,5,43,0,0,6780,
6783,3,992,496,0,6781,6783,3,956,478,0,6782,6780,1,0,0,0,6782,6781,1,0,0,
0,6783,6785,1,0,0,0,6784,6786,3,262,131,0,6785,6784,1,0,0,0,6785,6786,1,
0,0,0,6786,369,1,0,0,0,6787,6792,3,368,184,0,6788,6789,5,894,0,0,6789,6791,
3,368,184,0,6790,6788,1,0,0,0,6791,6794,1,0,0,0,6792,6790,1,0,0,0,6792,6793,
1,0,0,0,6793,371,1,0,0,0,6794,6792,1,0,0,0,6795,6796,3,956,478,0,6796,6797,
5,884,0,0,6797,6798,3,956,478,0,6798,373,1,0,0,0,6799,6800,5,630,0,0,6800,
6804,5,338,0,0,6801,6802,5,32,0,0,6802,6804,5,338,0,0,6803,6799,1,0,0,0,
6803,6801,1,0,0,0,6804,375,1,0,0,0,6805,6806,5,151,0,0,6806,6807,5,256,0,
0,6807,6809,5,297,0,0,6808,6810,3,744,372,0,6809,6808,1,0,0,0,6809,6810,
1,0,0,0,6810,6811,1,0,0,0,6811,6812,3,956,478,0,6812,6813,5,457,0,0,6813,
6814,5,878,0,0,6814,6819,3,934,467,0,6815,6816,5,894,0,0,6816,6818,3,934,
467,0,6817,6815,1,0,0,0,6818,6821,1,0,0,0,6819,6817,1,0,0,0,6819,6820,1,
0,0,0,6820,6832,1,0,0,0,6821,6819,1,0,0,0,6822,6823,5,19,0,0,6823,6824,5,
878,0,0,6824,6829,3,956,478,0,6825,6826,5,894,0,0,6826,6828,3,956,478,0,
6827,6825,1,0,0,0,6828,6831,1,0,0,0,6829,6827,1,0,0,0,6829,6830,1,0,0,0,
6830,6833,1,0,0,0,6831,6829,1,0,0,0,6832,6822,1,0,0,0,6832,6833,1,0,0,0,
6833,6844,1,0,0,0,6834,6835,5,22,0,0,6835,6836,5,878,0,0,6836,6841,3,956,
478,0,6837,6838,5,894,0,0,6838,6840,3,956,478,0,6839,6837,1,0,0,0,6840,6843,
1,0,0,0,6841,6839,1,0,0,0,6841,6842,1,0,0,0,6842,6845,1,0,0,0,6843,6841,
1,0,0,0,6844,6834,1,0,0,0,6844,6845,1,0,0,0,6845,6856,1,0,0,0,6846,6847,
5,20,0,0,6847,6848,5,878,0,0,6848,6853,3,374,187,0,6849,6850,5,894,0,0,6850,
6852,3,374,187,0,6851,6849,1,0,0,0,6852,6855,1,0,0,0,6853,6851,1,0,0,0,6853,
6854,1,0,0,0,6854,6857,1,0,0,0,6855,6853,1,0,0,0,6856,6846,1,0,0,0,6856,
6857,1,0,0,0,6857,6858,1,0,0,0,6858,6859,5,18,0,0,6859,6860,5,878,0,0,6860,
6865,3,372,186,0,6861,6862,5,894,0,0,6862,6864,3,372,186,0,6863,6861,1,0,
0,0,6864,6867,1,0,0,0,6865,6863,1,0,0,0,6865,6866,1,0,0,0,6866,6871,1,0,
0,0,6867,6865,1,0,0,0,6868,6869,5,315,0,0,6869,6870,5,203,0,0,6870,6872,
5,113,0,0,6871,6868,1,0,0,0,6871,6872,1,0,0,0,6872,6876,1,0,0,0,6873,6874,
5,564,0,0,6874,6875,5,878,0,0,6875,6877,3,950,475,0,6876,6873,1,0,0,0,6876,
6877,1,0,0,0,6877,6895,1,0,0,0,6878,6879,5,151,0,0,6879,6880,5,256,0,0,6880,
6882,5,297,0,0,6881,6883,3,744,372,0,6882,6881,1,0,0,0,6882,6883,1,0,0,0,
6883,6884,1,0,0,0,6884,6885,3,956,478,0,6885,6886,5,43,0,0,6886,6887,5,562,
0,0,6887,6888,5,458,0,0,6888,6889,3,956,478,0,6889,6890,5,884,0,0,6890,6891,
3,956,478,0,6891,6892,5,884,0,0,6892,6893,3,956,478,0,6893,6895,1,0,0,0,
6894,6805,1,0,0,0,6894,6878,1,0,0,0,6895,377,1,0,0,0,6896,6897,7,42,0,0,
6897,379,1,0,0,0,6898,6900,5,151,0,0,6899,6901,3,746,373,0,6900,6899,1,0,
0,0,6900,6901,1,0,0,0,6901,6902,1,0,0,0,6902,6903,5,261,0,0,6903,6905,5,
272,0,0,6904,6906,3,744,372,0,6905,6904,1,0,0,0,6905,6906,1,0,0,0,6906,6907,
1,0,0,0,6907,6911,3,982,491,0,6908,6909,5,764,0,0,6909,6910,5,878,0,0,6910,
6912,3,378,189,0,6911,6908,1,0,0,0,6911,6912,1,0,0,0,6912,6916,1,0,0,0,6913,
6915,3,470,235,0,6914,6913,1,0,0,0,6915,6918,1,0,0,0,6916,6914,1,0,0,0,6916,
6917,1,0,0,0,6917,6920,1,0,0,0,6918,6916,1,0,0,0,6919,6921,3,738,369,0,6920,
6919,1,0,0,0,6920,6921,1,0,0,0,6921,381,1,0,0,0,6922,6923,3,942,471,0,6923,
6925,3,940,470,0,6924,6926,3,384,192,0,6925,6924,1,0,0,0,6925,6926,1,0,0,
0,6926,383,1,0,0,0,6927,6928,5,174,0,0,6928,6929,3,992,496,0,6929,385,1,
0,0,0,6930,6931,3,976,488,0,6931,6933,3,1012,506,0,6932,6934,3,388,194,0,
6933,6932,1,0,0,0,6933,6934,1,0,0,0,6934,387,1,0,0,0,6935,6936,5,43,0,0,
6936,6937,5,888,0,0,6937,6938,3,1022,511,0,6938,6939,5,889,0,0,6939,389,
1,0,0,0,6940,6943,3,950,475,0,6941,6943,5,868,0,0,6942,6940,1,0,0,0,6942,
6941,1,0,0,0,6943,391,1,0,0,0,6944,6946,5,151,0,0,6945,6947,3,746,373,0,
6946,6945,1,0,0,0,6946,6947,1,0,0,0,6947,6949,1,0,0,0,6948,6950,5,629,0,
0,6949,6948,1,0,0,0,6949,6950,1,0,0,0,6950,6951,1,0,0,0,6951,6953,5,278,
0,0,6952,6954,3,744,372,0,6953,6952,1,0,0,0,6953,6954,1,0,0,0,6954,6955,
1,0,0,0,6955,6956,3,982,491,0,6956,6965,5,888,0,0,6957,6962,3,382,191,0,
6958,6959,5,894,0,0,6959,6961,3,382,191,0,6960,6958,1,0,0,0,6961,6964,1,
0,0,0,6962,6960,1,0,0,0,6962,6963,1,0,0,0,6963,6966,1,0,0,0,6964,6962,1,
0,0,0,6965,6957,1,0,0,0,6965,6966,1,0,0,0,6966,6967,1,0,0,0,6967,6968,5,
889,0,0,6968,6983,5,578,0,0,6969,6984,3,1012,506,0,6970,6971,5,708,0,0,6971,
6980,5,888,0,0,6972,6977,3,386,193,0,6973,6974,5,894,0,0,6974,6976,3,386,
193,0,6975,6973,1,0,0,0,6976,6979,1,0,0,0,6977,6975,1,0,0,0,6977,6978,1,
0,0,0,6978,6981,1,0,0,0,6979,6977,1,0,0,0,6980,6972,1,0,0,0,6980,6981,1,
0,0,0,6981,6982,1,0,0,0,6982,6984,5,889,0,0,6983,6969,1,0,0,0,6983,6970,
1,0,0,0,6984,6986,1,0,0,0,6985,6987,3,1174,587,0,6986,6985,1,0,0,0,6986,
6987,1,0,0,0,6987,6990,1,0,0,0,6988,6989,5,357,0,0,6989,6991,7,43,0,0,6990,
6988,1,0,0,0,6990,6991,1,0,0,0,6991,7002,1,0,0,0,6992,6993,5,99,0,0,6993,
6994,5,465,0,0,6994,6995,5,439,0,0,6995,7003,5,333,0,0,6996,6997,5,578,0,
0,6997,6998,5,439,0,0,6998,6999,5,465,0,0,6999,7000,5,439,0,0,7000,7003,
5,333,0,0,7001,7003,5,692,0,0,7002,6992,1,0,0,0,7002,6996,1,0,0,0,7002,7001,
1,0,0,0,7002,7003,1,0,0,0,7003,7005,1,0,0,0,7004,7006,7,41,0,0,7005,7004,
1,0,0,0,7005,7006,1,0,0,0,7006,7013,1,0,0,0,7007,7008,5,485,0,0,7008,7009,
5,878,0,0,7009,7010,5,888,0,0,7010,7011,3,952,476,0,7011,7012,5,889,0,0,
7012,7014,1,0,0,0,7013,7007,1,0,0,0,7013,7014,1,0,0,0,7014,7021,1,0,0,0,
7015,7016,5,601,0,0,7016,7019,5,878,0,0,7017,7020,3,950,475,0,7018,7020,
5,871,0,0,7019,7017,1,0,0,0,7019,7018,1,0,0,0,7020,7022,1,0,0,0,7021,7015,
1,0,0,0,7021,7022,1,0,0,0,7022,7029,1,0,0,0,7023,7024,5,323,0,0,7024,7025,
5,878,0,0,7025,7026,5,888,0,0,7026,7027,3,952,476,0,7027,7028,5,889,0,0,
7028,7030,1,0,0,0,7029,7023,1,0,0,0,7029,7030,1,0,0,0,7030,7037,1,0,0,0,
7031,7032,5,485,0,0,7032,7033,5,878,0,0,7033,7034,5,888,0,0,7034,7035,3,
952,476,0,7035,7036,5,889,0,0,7036,7038,1,0,0,0,7037,7031,1,0,0,0,7037,7038,
1,0,0,0,7038,7042,1,0,0,0,7039,7040,5,303,0,0,7040,7041,5,878,0,0,7041,7043,
3,950,475,0,7042,7039,1,0,0,0,7042,7043,1,0,0,0,7043,7045,1,0,0,0,7044,7046,
3,738,369,0,7045,7044,1,0,0,0,7045,7046,1,0,0,0,7046,7047,1,0,0,0,7047,7048,
5,43,0,0,7048,7049,3,390,195,0,7049,7116,1,0,0,0,7050,7052,5,151,0,0,7051,
7053,3,746,373,0,7052,7051,1,0,0,0,7052,7053,1,0,0,0,7053,7055,1,0,0,0,7054,
7056,5,629,0,0,7055,7054,1,0,0,0,7055,7056,1,0,0,0,7056,7057,1,0,0,0,7057,
7058,5,278,0,0,7058,7059,3,982,491,0,7059,7068,5,888,0,0,7060,7065,3,382,
191,0,7061,7062,5,894,0,0,7062,7064,3,382,191,0,7063,7061,1,0,0,0,7064,7067,
1,0,0,0,7065,7063,1,0,0,0,7065,7066,1,0,0,0,7066,7069,1,0,0,0,7067,7065,
1,0,0,0,7068,7060,1,0,0,0,7068,7069,1,0,0,0,7069,7070,1,0,0,0,7070,7071,
5,889,0,0,7071,7086,5,578,0,0,7072,7087,3,1012,506,0,7073,7074,5,708,0,0,
7074,7083,5,888,0,0,7075,7080,3,386,193,0,7076,7077,5,894,0,0,7077,7079,
3,386,193,0,7078,7076,1,0,0,0,7079,7082,1,0,0,0,7080,7078,1,0,0,0,7080,7081,
1,0,0,0,7081,7084,1,0,0,0,7082,7080,1,0,0,0,7083,7075,1,0,0,0,7083,7084,
1,0,0,0,7084,7085,1,0,0,0,7085,7087,5,889,0,0,7086,7072,1,0,0,0,7086,7073,
1,0,0,0,7087,7089,1,0,0,0,7088,7090,3,1174,587,0,7089,7088,1,0,0,0,7089,
7090,1,0,0,0,7090,7101,1,0,0,0,7091,7092,5,99,0,0,7092,7093,5,465,0,0,7093,
7094,5,439,0,0,7094,7102,5,333,0,0,7095,7096,5,578,0,0,7096,7097,5,439,0,
0,7097,7098,5,465,0,0,7098,7099,5,439,0,0,7099,7102,5,333,0,0,7100,7102,
5,692,0,0,7101,7091,1,0,0,0,7101,7095,1,0,0,0,7101,7100,1,0,0,0,7101,7102,
1,0,0,0,7102,7104,1,0,0,0,7103,7105,7,41,0,0,7104,7103,1,0,0,0,7104,7105,
1,0,0,0,7105,7107,1,0,0,0,7106,7108,5,399,0,0,7107,7106,1,0,0,0,7107,7108,
1,0,0,0,7108,7110,1,0,0,0,7109,7111,3,738,369,0,7110,7109,1,0,0,0,7110,7111,
1,0,0,0,7111,7112,1,0,0,0,7112,7113,5,43,0,0,7113,7114,3,390,195,0,7114,
7116,1,0,0,0,7115,6944,1,0,0,0,7115,7050,1,0,0,0,7116,393,1,0,0,0,7117,7118,
5,151,0,0,7118,7119,5,383,0,0,7119,7120,5,6,0,0,7120,7121,3,956,478,0,7121,
7122,5,11,0,0,7122,7123,5,878,0,0,7123,7124,3,956,478,0,7124,7125,5,894,
0,0,7125,7126,5,12,0,0,7126,7127,5,878,0,0,7127,7128,3,950,475,0,7128,7129,
5,894,0,0,7129,7130,5,764,0,0,7130,7131,5,878,0,0,7131,7134,5,545,0,0,7132,
7133,5,894,0,0,7133,7135,3,738,369,0,7134,7132,1,0,0,0,7134,7135,1,0,0,0,
7135,395,1,0,0,0,7136,7138,5,151,0,0,7137,7139,3,746,373,0,7138,7137,1,0,
0,0,7138,7139,1,0,0,0,7139,7140,1,0,0,0,7140,7141,5,384,0,0,7141,7143,5,
517,0,0,7142,7144,3,744,372,0,7143,7142,1,0,0,0,7143,7144,1,0,0,0,7144,7145,
1,0,0,0,7145,7146,3,982,491,0,7146,7147,5,43,0,0,7147,7148,5,888,0,0,7148,
7149,3,942,471,0,7149,7154,3,940,470,0,7150,7151,5,894,0,0,7151,7152,3,942,
471,0,7152,7153,3,940,470,0,7153,7155,1,0,0,0,7154,7150,1,0,0,0,7154,7155,
1,0,0,0,7155,7156,1,0,0,0,7156,7157,5,889,0,0,7157,7158,5,578,0,0,7158,7159,
3,940,470,0,7159,7160,5,874,0,0,7160,7162,3,992,496,0,7161,7163,3,738,369,
0,7162,7161,1,0,0,0,7162,7163,1,0,0,0,7163,397,1,0,0,0,7164,7165,3,982,491,
0,7165,7166,5,878,0,0,7166,7167,3,950,475,0,7167,399,1,0,0,0,7168,7169,5,
888,0,0,7169,7170,3,978,489,0,7170,7171,5,889,0,0,7171,401,1,0,0,0,7172,
7174,5,151,0,0,7173,7175,3,746,373,0,7174,7173,1,0,0,0,7174,7175,1,0,0,0,
7175,7177,1,0,0,0,7176,7178,5,629,0,0,7177,7176,1,0,0,0,7177,7178,1,0,0,
0,7178,7179,1,0,0,0,7179,7180,5,391,0,0,7180,7182,5,793,0,0,7181,7183,3,
744,372,0,7182,7181,1,0,0,0,7182,7183,1,0,0,0,7183,7184,1,0,0,0,7184,7189,
3,982,491,0,7185,7186,5,888,0,0,7186,7187,3,980,490,0,7187,7188,5,889,0,
0,7188,7190,1,0,0,0,7189,7185,1,0,0,0,7189,7190,1,0,0,0,7190,7194,1,0,0,
0,7191,7193,3,626,313,0,7192,7191,1,0,0,0,7193,7196,1,0,0,0,7194,7192,1,
0,0,0,7194,7195,1,0,0,0,7195,7198,1,0,0,0,7196,7194,1,0,0,0,7197,7199,3,
558,279,0,7198,7197,1,0,0,0,7198,7199,1,0,0,0,7199,7201,1,0,0,0,7200,7202,
3,556,278,0,7201,7200,1,0,0,0,7201,7202,1,0,0,0,7202,7204,1,0,0,0,7203,7205,
3,540,270,0,7204,7203,1,0,0,0,7204,7205,1,0,0,0,7205,7207,1,0,0,0,7206,7208,
3,738,369,0,7207,7206,1,0,0,0,7207,7208,1,0,0,0,7208,7210,1,0,0,0,7209,7211,
3,560,280,0,7210,7209,1,0,0,0,7210,7211,1,0,0,0,7211,7212,1,0,0,0,7212,7213,
5,43,0,0,7213,7214,3,1054,527,0,7214,403,1,0,0,0,7215,7217,5,151,0,0,7216,
7218,3,746,373,0,7217,7216,1,0,0,0,7217,7218,1,0,0,0,7218,7219,1,0,0,0,7219,
7220,5,419,0,0,7220,7221,5,517,0,0,7221,7222,3,956,478,0,7222,7223,5,21,
0,0,7223,7224,5,878,0,0,7224,7226,5,888,0,0,7225,7227,3,952,476,0,7226,7225,
1,0,0,0,7226,7227,1,0,0,0,7227,7228,1,0,0,0,7228,7236,5,889,0,0,7229,7230,
5,90,0,0,7230,7231,5,878,0,0,7231,7233,5,888,0,0,7232,7234,3,952,476,0,7233,
7232,1,0,0,0,7233,7234,1,0,0,0,7234,7235,1,0,0,0,7235,7237,5,889,0,0,7236,
7229,1,0,0,0,7236,7237,1,0,0,0,7237,7239,1,0,0,0,7238,7240,3,738,369,0,7239,
7238,1,0,0,0,7239,7240,1,0,0,0,7240,405,1,0,0,0,7241,7242,5,432,0,0,7242,
7243,5,878,0,0,7243,7244,5,281,0,0,7244,7245,5,282,0,0,7245,7246,5,878,0,
0,7246,7258,3,950,475,0,7247,7248,5,432,0,0,7248,7249,5,878,0,0,7249,7250,
5,74,0,0,7250,7251,5,78,0,0,7251,7252,5,878,0,0,7252,7253,3,950,475,0,7253,
7254,5,79,0,0,7254,7255,5,878,0,0,7255,7256,3,950,475,0,7256,7258,1,0,0,
0,7257,7241,1,0,0,0,7257,7247,1,0,0,0,7258,407,1,0,0,0,7259,7260,5,432,0,
0,7260,7261,5,878,0,0,7261,7262,5,66,0,0,7262,7263,5,69,0,0,7263,7264,5,
878,0,0,7264,7265,3,950,475,0,7265,7266,5,67,0,0,7266,7267,5,878,0,0,7267,
7268,3,950,475,0,7268,7286,1,0,0,0,7269,7270,5,432,0,0,7270,7271,5,878,0,
0,7271,7272,5,281,0,0,7272,7273,5,283,0,0,7273,7274,5,878,0,0,7274,7286,
3,950,475,0,7275,7276,5,432,0,0,7276,7277,5,878,0,0,7277,7278,5,74,0,0,7278,
7279,5,75,0,0,7279,7280,5,878,0,0,7280,7281,3,950,475,0,7281,7282,5,79,0,
0,7282,7283,5,878,0,0,7283,7284,3,950,475,0,7284,7286,1,0,0,0,7285,7259,
1,0,0,0,7285,7269,1,0,0,0,7285,7275,1,0,0,0,7286,409,1,0,0,0,7287,7289,5,
151,0,0,7288,7290,3,746,373,0,7289,7288,1,0,0,0,7289,7290,1,0,0,0,7290,7291,
1,0,0,0,7291,7292,5,430,0,0,7292,7294,5,337,0,0,7293,7295,3,744,372,0,7294,
7293,1,0,0,0,7294,7295,1,0,0,0,7295,7296,1,0,0,0,7296,7297,3,956,478,0,7297,
7298,5,209,0,0,7298,7299,5,878,0,0,7299,7300,3,508,254,0,7300,7301,5,764,
0,0,7301,7302,5,878,0,0,7302,7303,5,540,0,0,7303,7305,3,406,203,0,7304,7306,
3,738,369,0,7305,7304,1,0,0,0,7305,7306,1,0,0,0,7306,7331,1,0,0,0,7307,7309,
5,151,0,0,7308,7310,3,746,373,0,7309,7308,1,0,0,0,7309,7310,1,0,0,0,7310,
7311,1,0,0,0,7311,7312,5,430,0,0,7312,7314,5,337,0,0,7313,7315,3,744,372,
0,7314,7313,1,0,0,0,7314,7315,1,0,0,0,7315,7316,1,0,0,0,7316,7317,3,956,
478,0,7317,7318,5,209,0,0,7318,7319,5,878,0,0,7319,7320,3,508,254,0,7320,
7321,5,190,0,0,7321,7322,5,878,0,0,7322,7323,5,478,0,0,7323,7324,5,764,0,
0,7324,7325,5,878,0,0,7325,7326,5,540,0,0,7326,7328,3,408,204,0,7327,7329,
3,738,369,0,7328,7327,1,0,0,0,7328,7329,1,0,0,0,7329,7331,1,0,0,0,7330,7287,
1,0,0,0,7330,7307,1,0,0,0,7331,411,1,0,0,0,7332,7334,5,151,0,0,7333,7335,
3,746,373,0,7334,7333,1,0,0,0,7334,7335,1,0,0,0,7335,7336,1,0,0,0,7336,7338,
5,512,0,0,7337,7339,3,744,372,0,7338,7337,1,0,0,0,7338,7339,1,0,0,0,7339,
7340,1,0,0,0,7340,7344,3,982,491,0,7341,7342,5,56,0,0,7342,7343,5,878,0,
0,7343,7345,3,508,254,0,7344,7341,1,0,0,0,7344,7345,1,0,0,0,7345,7349,1,
0,0,0,7346,7347,5,225,0,0,7347,7348,5,878,0,0,7348,7350,3,956,478,0,7349,
7346,1,0,0,0,7349,7350,1,0,0,0,7350,7354,1,0,0,0,7351,7352,5,68,0,0,7352,
7353,5,878,0,0,7353,7355,3,950,475,0,7354,7351,1,0,0,0,7354,7355,1,0,0,0,
7355,7359,1,0,0,0,7356,7357,5,337,0,0,7357,7358,5,878,0,0,7358,7360,3,950,
475,0,7359,7356,1,0,0,0,7359,7360,1,0,0,0,7360,7362,1,0,0,0,7361,7363,3,
738,369,0,7362,7361,1,0,0,0,7362,7363,1,0,0,0,7363,7364,1,0,0,0,7364,7365,
5,43,0,0,7365,7366,3,42,21,0,7366,413,1,0,0,0,7367,7368,7,44,0,0,7368,415,
1,0,0,0,7369,7370,5,234,0,0,7370,7371,5,43,0,0,7371,7372,3,414,207,0,7372,
417,1,0,0,0,7373,7376,3,950,475,0,7374,7376,5,868,0,0,7375,7373,1,0,0,0,
7375,7374,1,0,0,0,7376,419,1,0,0,0,7377,7378,5,429,0,0,7378,7379,5,439,0,
0,7379,421,1,0,0,0,7380,7382,5,151,0,0,7381,7383,3,746,373,0,7382,7381,1,
0,0,0,7382,7383,1,0,0,0,7383,7384,1,0,0,0,7384,7385,5,527,0,0,7385,7386,
3,982,491,0,7386,7395,5,888,0,0,7387,7392,3,382,191,0,7388,7389,5,894,0,
0,7389,7391,3,382,191,0,7390,7388,1,0,0,0,7391,7394,1,0,0,0,7392,7390,1,
0,0,0,7392,7393,1,0,0,0,7393,7396,1,0,0,0,7394,7392,1,0,0,0,7395,7387,1,
0,0,0,7395,7396,1,0,0,0,7396,7397,1,0,0,0,7397,7398,5,889,0,0,7398,7413,
5,578,0,0,7399,7414,3,1012,506,0,7400,7401,5,708,0,0,7401,7410,5,888,0,0,
7402,7407,3,386,193,0,7403,7404,5,894,0,0,7404,7406,3,386,193,0,7405,7403,
1,0,0,0,7406,7409,1,0,0,0,7407,7405,1,0,0,0,7407,7408,1,0,0,0,7408,7411,
1,0,0,0,7409,7407,1,0,0,0,7410,7402,1,0,0,0,7410,7411,1,0,0,0,7411,7412,
1,0,0,0,7412,7414,5,889,0,0,7413,7399,1,0,0,0,7413,7400,1,0,0,0,7414,7416,
1,0,0,0,7415,7417,3,420,210,0,7416,7415,1,0,0,0,7416,7417,1,0,0,0,7417,7418,
1,0,0,0,7418,7419,5,357,0,0,7419,7430,5,668,0,0,7420,7421,5,99,0,0,7421,
7422,5,465,0,0,7422,7423,5,439,0,0,7423,7431,5,333,0,0,7424,7425,5,578,0,
0,7425,7426,5,439,0,0,7426,7427,5,465,0,0,7427,7428,5,439,0,0,7428,7431,
5,333,0,0,7429,7431,5,692,0,0,7430,7420,1,0,0,0,7430,7424,1,0,0,0,7430,7429,
1,0,0,0,7430,7431,1,0,0,0,7431,7433,1,0,0,0,7432,7434,7,41,0,0,7433,7432,
1,0,0,0,7433,7434,1,0,0,0,7434,7436,1,0,0,0,7435,7437,3,738,369,0,7436,7435,
1,0,0,0,7436,7437,1,0,0,0,7437,7439,1,0,0,0,7438,7440,3,416,208,0,7439,7438,
1,0,0,0,7439,7440,1,0,0,0,7440,7441,1,0,0,0,7441,7442,5,43,0,0,7442,7443,
3,418,209,0,7443,7568,1,0,0,0,7444,7446,5,151,0,0,7445,7447,3,746,373,0,
7446,7445,1,0,0,0,7446,7447,1,0,0,0,7447,7449,1,0,0,0,7448,7450,5,629,0,
0,7449,7448,1,0,0,0,7449,7450,1,0,0,0,7450,7451,1,0,0,0,7451,7452,5,527,
0,0,7452,7453,3,982,491,0,7453,7462,5,888,0,0,7454,7459,3,382,191,0,7455,
7456,5,894,0,0,7456,7458,3,382,191,0,7457,7455,1,0,0,0,7458,7461,1,0,0,0,
7459,7457,1,0,0,0,7459,7460,1,0,0,0,7460,7463,1,0,0,0,7461,7459,1,0,0,0,
7462,7454,1,0,0,0,7462,7463,1,0,0,0,7463,7464,1,0,0,0,7464,7465,5,889,0,
0,7465,7466,5,578,0,0,7466,7468,3,1012,506,0,7467,7469,3,420,210,0,7468,
7467,1,0,0,0,7468,7469,1,0,0,0,7469,7470,1,0,0,0,7470,7471,5,357,0,0,7471,
7482,5,344,0,0,7472,7473,5,99,0,0,7473,7474,5,465,0,0,7474,7475,5,439,0,
0,7475,7483,5,333,0,0,7476,7477,5,578,0,0,7477,7478,5,439,0,0,7478,7479,
5,465,0,0,7479,7480,5,439,0,0,7480,7483,5,333,0,0,7481,7483,5,692,0,0,7482,
7472,1,0,0,0,7482,7476,1,0,0,0,7482,7481,1,0,0,0,7482,7483,1,0,0,0,7483,
7485,1,0,0,0,7484,7486,7,41,0,0,7485,7484,1,0,0,0,7485,7486,1,0,0,0,7486,
7488,1,0,0,0,7487,7489,3,738,369,0,7488,7487,1,0,0,0,7488,7489,1,0,0,0,7489,
7491,1,0,0,0,7490,7492,3,416,208,0,7491,7490,1,0,0,0,7491,7492,1,0,0,0,7492,
7493,1,0,0,0,7493,7494,5,43,0,0,7494,7495,3,418,209,0,7495,7568,1,0,0,0,
7496,7498,5,151,0,0,7497,7499,3,746,373,0,7498,7497,1,0,0,0,7498,7499,1,
0,0,0,7499,7501,1,0,0,0,7500,7502,5,629,0,0,7501,7500,1,0,0,0,7501,7502,
1,0,0,0,7502,7503,1,0,0,0,7503,7504,5,527,0,0,7504,7505,3,982,491,0,7505,
7514,5,888,0,0,7506,7511,3,382,191,0,7507,7508,5,894,0,0,7508,7510,3,382,
191,0,7509,7507,1,0,0,0,7510,7513,1,0,0,0,7511,7509,1,0,0,0,7511,7512,1,
0,0,0,7512,7515,1,0,0,0,7513,7511,1,0,0,0,7514,7506,1,0,0,0,7514,7515,1,
0,0,0,7515,7516,1,0,0,0,7516,7517,5,889,0,0,7517,7535,5,578,0,0,7518,7520,
3,1012,506,0,7519,7521,3,420,210,0,7520,7519,1,0,0,0,7520,7521,1,0,0,0,7521,
7536,1,0,0,0,7522,7523,5,708,0,0,7523,7532,5,888,0,0,7524,7529,3,386,193,
0,7525,7526,5,894,0,0,7526,7528,3,386,193,0,7527,7525,1,0,0,0,7528,7531,
1,0,0,0,7529,7527,1,0,0,0,7529,7530,1,0,0,0,7530,7533,1,0,0,0,7531,7529,
1,0,0,0,7532,7524,1,0,0,0,7532,7533,1,0,0,0,7533,7534,1,0,0,0,7534,7536,
5,889,0,0,7535,7518,1,0,0,0,7535,7522,1,0,0,0,7536,7537,1,0,0,0,7537,7538,
5,357,0,0,7538,7539,5,535,0,0,7539,7540,5,601,0,0,7540,7541,5,878,0,0,7541,
7548,3,950,475,0,7542,7543,5,323,0,0,7543,7544,5,878,0,0,7544,7545,5,888,
0,0,7545,7546,3,952,476,0,7546,7547,5,889,0,0,7547,7549,1,0,0,0,7548,7542,
1,0,0,0,7548,7549,1,0,0,0,7549,7550,1,0,0,0,7550,7551,5,485,0,0,7551,7552,
5,878,0,0,7552,7553,5,888,0,0,7553,7554,3,952,476,0,7554,7555,5,889,0,0,
7555,7556,5,303,0,0,7556,7557,5,878,0,0,7557,7559,3,950,475,0,7558,7560,
3,738,369,0,7559,7558,1,0,0,0,7559,7560,1,0,0,0,7560,7562,1,0,0,0,7561,7563,
3,416,208,0,7562,7561,1,0,0,0,7562,7563,1,0,0,0,7563,7564,1,0,0,0,7564,7565,
5,43,0,0,7565,7566,3,418,209,0,7566,7568,1,0,0,0,7567,7380,1,0,0,0,7567,
7444,1,0,0,0,7567,7496,1,0,0,0,7568,423,1,0,0,0,7569,7570,5,151,0,0,7570,
7571,5,563,0,0,7571,7573,5,297,0,0,7572,7574,3,744,372,0,7573,7572,1,0,0,
0,7573,7574,1,0,0,0,7574,7575,1,0,0,0,7575,7576,3,956,478,0,7576,7577,5,
457,0,0,7577,7578,5,878,0,0,7578,7583,3,934,467,0,7579,7580,5,894,0,0,7580,
7582,3,934,467,0,7581,7579,1,0,0,0,7582,7585,1,0,0,0,7583,7581,1,0,0,0,7583,
7584,1,0,0,0,7584,7596,1,0,0,0,7585,7583,1,0,0,0,7586,7587,5,19,0,0,7587,
7588,5,878,0,0,7588,7593,3,956,478,0,7589,7590,5,894,0,0,7590,7592,3,956,
478,0,7591,7589,1,0,0,0,7592,7595,1,0,0,0,7593,7591,1,0,0,0,7593,7594,1,
0,0,0,7594,7597,1,0,0,0,7595,7593,1,0,0,0,7596,7586,1,0,0,0,7596,7597,1,
0,0,0,7597,7608,1,0,0,0,7598,7599,5,22,0,0,7599,7600,5,878,0,0,7600,7605,
3,956,478,0,7601,7602,5,894,0,0,7602,7604,3,956,478,0,7603,7601,1,0,0,0,
7604,7607,1,0,0,0,7605,7603,1,0,0,0,7605,7606,1,0,0,0,7606,7609,1,0,0,0,
7607,7605,1,0,0,0,7608,7598,1,0,0,0,7608,7609,1,0,0,0,7609,7620,1,0,0,0,
7610,7611,5,20,0,0,7611,7612,5,878,0,0,7612,7617,3,374,187,0,7613,7614,5,
894,0,0,7614,7616,3,374,187,0,7615,7613,1,0,0,0,7616,7619,1,0,0,0,7617,7615,
1,0,0,0,7617,7618,1,0,0,0,7618,7621,1,0,0,0,7619,7617,1,0,0,0,7620,7610,
1,0,0,0,7620,7621,1,0,0,0,7621,7622,1,0,0,0,7622,7623,5,18,0,0,7623,7624,
5,878,0,0,7624,7629,3,372,186,0,7625,7626,5,894,0,0,7626,7628,3,372,186,
0,7627,7625,1,0,0,0,7628,7631,1,0,0,0,7629,7627,1,0,0,0,7629,7630,1,0,0,
0,7630,7635,1,0,0,0,7631,7629,1,0,0,0,7632,7633,5,315,0,0,7633,7634,5,203,
0,0,7634,7636,5,113,0,0,7635,7632,1,0,0,0,7635,7636,1,0,0,0,7636,7640,1,
0,0,0,7637,7638,5,564,0,0,7638,7639,5,878,0,0,7639,7641,3,950,475,0,7640,
7637,1,0,0,0,7640,7641,1,0,0,0,7641,7659,1,0,0,0,7642,7643,5,151,0,0,7643,
7644,5,563,0,0,7644,7646,5,297,0,0,7645,7647,3,744,372,0,7646,7645,1,0,0,
0,7646,7647,1,0,0,0,7647,7648,1,0,0,0,7648,7649,3,956,478,0,7649,7650,5,
43,0,0,7650,7651,5,562,0,0,7651,7652,5,458,0,0,7652,7653,3,956,478,0,7653,
7654,5,884,0,0,7654,7655,3,956,478,0,7655,7656,5,884,0,0,7656,7657,3,956,
478,0,7657,7659,1,0,0,0,7658,7569,1,0,0,0,7658,7642,1,0,0,0,7659,425,1,0,
0,0,7660,7662,5,151,0,0,7661,7663,3,746,373,0,7662,7661,1,0,0,0,7662,7663,
1,0,0,0,7663,7664,1,0,0,0,7664,7665,5,569,0,0,7665,7666,5,411,0,0,7666,7667,
3,956,478,0,7667,7669,5,805,0,0,7668,7670,3,208,104,0,7669,7668,1,0,0,0,
7669,7670,1,0,0,0,7670,7672,1,0,0,0,7671,7673,3,210,105,0,7672,7671,1,0,
0,0,7672,7673,1,0,0,0,7673,7680,1,0,0,0,7674,7675,5,677,0,0,7675,7678,5,
878,0,0,7676,7679,3,950,475,0,7677,7679,5,319,0,0,7678,7676,1,0,0,0,7678,
7677,1,0,0,0,7679,7681,1,0,0,0,7680,7674,1,0,0,0,7680,7681,1,0,0,0,7681,
7685,1,0,0,0,7682,7683,5,218,0,0,7683,7684,5,878,0,0,7684,7686,3,950,475,
0,7685,7682,1,0,0,0,7685,7686,1,0,0,0,7686,7688,1,0,0,0,7687,7689,3,212,
106,0,7688,7687,1,0,0,0,7688,7689,1,0,0,0,7689,7696,1,0,0,0,7690,7692,5,
755,0,0,7691,7693,3,640,320,0,7692,7691,1,0,0,0,7693,7694,1,0,0,0,7694,7692,
1,0,0,0,7694,7695,1,0,0,0,7695,7697,1,0,0,0,7696,7690,1,0,0,0,7696,7697,
1,0,0,0,7697,427,1,0,0,0,7698,7700,5,151,0,0,7699,7701,3,746,373,0,7700,
7699,1,0,0,0,7700,7701,1,0,0,0,7701,7702,1,0,0,0,7702,7704,5,587,0,0,7703,
7705,3,744,372,0,7704,7703,1,0,0,0,7704,7705,1,0,0,0,7705,7706,1,0,0,0,7706,
7708,3,956,478,0,7707,7709,3,556,278,0,7708,7707,1,0,0,0,7708,7709,1,0,0,
0,7709,7711,1,0,0,0,7710,7712,3,738,369,0,7711,7710,1,0,0,0,7711,7712,1,
0,0,0,7712,429,1,0,0,0,7713,7715,5,151,0,0,7714,7716,3,746,373,0,7715,7714,
1,0,0,0,7715,7716,1,0,0,0,7716,7717,1,0,0,0,7717,7718,5,593,0,0,7718,7719,
5,5,0,0,7719,7721,5,517,0,0,7720,7722,3,744,372,0,7721,7720,1,0,0,0,7721,
7722,1,0,0,0,7722,7723,1,0,0,0,7723,7724,3,956,478,0,7724,7725,5,43,0,0,
7725,7726,5,888,0,0,7726,7731,3,382,191,0,7727,7728,5,894,0,0,7728,7730,
3,382,191,0,7729,7727,1,0,0,0,7730,7733,1,0,0,0,7731,7729,1,0,0,0,7731,7732,
1,0,0,0,7732,7734,1,0,0,0,7733,7731,1,0,0,0,7734,7735,5,889,0,0,7735,7736,
5,578,0,0,7736,7737,5,824,0,0,7737,7738,5,874,0,0,7738,7740,3,992,496,0,
7739,7741,3,738,369,0,7740,7739,1,0,0,0,7740,7741,1,0,0,0,7741,431,1,0,0,
0,7742,7744,5,151,0,0,7743,7745,3,746,373,0,7744,7743,1,0,0,0,7744,7745,
1,0,0,0,7745,7747,1,0,0,0,7746,7748,5,754,0,0,7747,7746,1,0,0,0,7747,7748,
1,0,0,0,7748,7749,1,0,0,0,7749,7751,5,623,0,0,7750,7752,3,744,372,0,7751,
7750,1,0,0,0,7751,7752,1,0,0,0,7752,7753,1,0,0,0,7753,7755,3,932,466,0,7754,
7756,3,350,175,0,7755,7754,1,0,0,0,7755,7756,1,0,0,0,7756,7760,1,0,0,0,7757,
7758,5,805,0,0,7758,7759,5,383,0,0,7759,7761,5,5,0,0,7760,7757,1,0,0,0,7760,
7761,1,0,0,0,7761,7765,1,0,0,0,7762,7763,5,166,0,0,7763,7764,5,878,0,0,7764,
7766,3,986,493,0,7765,7762,1,0,0,0,7765,7766,1,0,0,0,7766,7770,1,0,0,0,7767,
7768,5,395,0,0,7768,7769,5,878,0,0,7769,7771,3,986,493,0,7770,7767,1,0,0,
0,7770,7771,1,0,0,0,7771,7773,1,0,0,0,7772,7774,3,140,70,0,7773,7772,1,0,
0,0,7773,7774,1,0,0,0,7774,7776,1,0,0,0,7775,7777,3,556,278,0,7776,7775,
1,0,0,0,7776,7777,1,0,0,0,7777,7779,1,0,0,0,7778,7780,3,738,369,0,7779,7778,
1,0,0,0,7779,7780,1,0,0,0,7780,433,1,0,0,0,7781,7783,5,151,0,0,7782,7784,
3,746,373,0,7783,7782,1,0,0,0,7783,7784,1,0,0,0,7784,7785,1,0,0,0,7785,7786,
5,630,0,0,7786,7788,5,337,0,0,7787,7789,3,744,372,0,7788,7787,1,0,0,0,7788,
7789,1,0,0,0,7789,7790,1,0,0,0,7790,7791,3,956,478,0,7791,7792,5,764,0,0,
7792,7793,5,878,0,0,7793,7794,5,241,0,0,7794,7795,5,209,0,0,7795,7796,5,
878,0,0,7796,7797,3,508,254,0,7797,7798,5,254,0,0,7798,7799,5,878,0,0,7799,
7800,7,22,0,0,7800,7801,5,247,0,0,7801,7802,5,878,0,0,7802,7803,3,950,475,
0,7803,7804,5,253,0,0,7804,7810,5,878,0,0,7805,7811,3,950,475,0,7806,7807,
5,888,0,0,7807,7808,3,952,476,0,7808,7809,5,889,0,0,7809,7811,1,0,0,0,7810,
7805,1,0,0,0,7810,7806,1,0,0,0,7811,7812,1,0,0,0,7812,7813,5,252,0,0,7813,
7814,5,878,0,0,7814,7818,3,950,475,0,7815,7816,5,248,0,0,7816,7817,5,878,
0,0,7817,7819,3,950,475,0,7818,7815,1,0,0,0,7818,7819,1,0,0,0,7819,7829,
1,0,0,0,7820,7821,5,248,0,0,7821,7827,5,878,0,0,7822,7828,3,950,475,0,7823,
7824,5,888,0,0,7824,7825,3,952,476,0,7825,7826,5,889,0,0,7826,7828,1,0,0,
0,7827,7822,1,0,0,0,7827,7823,1,0,0,0,7828,7830,1,0,0,0,7829,7820,1,0,0,
0,7829,7830,1,0,0,0,7830,7837,1,0,0,0,7831,7832,5,246,0,0,7832,7833,5,878,
0,0,7833,7834,5,888,0,0,7834,7835,3,952,476,0,7835,7836,5,889,0,0,7836,7838,
1,0,0,0,7837,7831,1,0,0,0,7837,7838,1,0,0,0,7838,7845,1,0,0,0,7839,7840,
5,243,0,0,7840,7841,5,878,0,0,7841,7842,5,888,0,0,7842,7843,3,952,476,0,
7843,7844,5,889,0,0,7844,7846,1,0,0,0,7845,7839,1,0,0,0,7845,7846,1,0,0,
0,7846,7850,1,0,0,0,7847,7848,5,249,0,0,7848,7849,5,878,0,0,7849,7851,3,
950,475,0,7850,7847,1,0,0,0,7850,7851,1,0,0,0,7851,7855,1,0,0,0,7852,7853,
5,250,0,0,7853,7854,5,878,0,0,7854,7856,3,950,475,0,7855,7852,1,0,0,0,7855,
7856,1,0,0,0,7856,7863,1,0,0,0,7857,7858,5,245,0,0,7858,7859,5,878,0,0,7859,
7860,5,888,0,0,7860,7861,3,950,475,0,7861,7862,5,889,0,0,7862,7864,1,0,0,
0,7863,7857,1,0,0,0,7863,7864,1,0,0,0,7864,7868,1,0,0,0,7865,7866,5,244,
0,0,7866,7867,5,878,0,0,7867,7869,7,23,0,0,7868,7865,1,0,0,0,7868,7869,1,
0,0,0,7869,7873,1,0,0,0,7870,7871,5,251,0,0,7871,7872,5,878,0,0,7872,7874,
3,950,475,0,7873,7870,1,0,0,0,7873,7874,1,0,0,0,7874,435,1,0,0,0,7875,7876,
7,24,0,0,7876,437,1,0,0,0,7877,7879,5,151,0,0,7878,7880,3,746,373,0,7879,
7878,1,0,0,0,7879,7880,1,0,0,0,7880,7881,1,0,0,0,7881,7882,5,630,0,0,7882,
7884,5,337,0,0,7883,7885,3,744,372,0,7884,7883,1,0,0,0,7884,7885,1,0,0,0,
7885,7886,1,0,0,0,7886,7887,3,956,478,0,7887,7888,5,764,0,0,7888,7889,5,
878,0,0,7889,7890,5,444,0,0,7890,7891,5,446,0,0,7891,7892,5,878,0,0,7892,
7893,3,446,223,0,7893,7894,5,451,0,0,7894,7895,5,878,0,0,7895,7897,3,950,
475,0,7896,7898,3,148,74,0,7897,7896,1,0,0,0,7897,7898,1,0,0,0,7898,7902,
1,0,0,0,7899,7900,5,450,0,0,7900,7901,5,878,0,0,7901,7903,3,508,254,0,7902,
7899,1,0,0,0,7902,7903,1,0,0,0,7903,7907,1,0,0,0,7904,7905,5,452,0,0,7905,
7906,5,878,0,0,7906,7908,3,986,493,0,7907,7904,1,0,0,0,7907,7908,1,0,0,0,
7908,7912,1,0,0,0,7909,7910,5,453,0,0,7910,7911,5,878,0,0,7911,7913,3,436,
218,0,7912,7909,1,0,0,0,7912,7913,1,0,0,0,7913,7920,1,0,0,0,7914,7915,5,
91,0,0,7915,7916,5,878,0,0,7916,7917,5,888,0,0,7917,7918,3,952,476,0,7918,
7919,5,889,0,0,7919,7921,1,0,0,0,7920,7914,1,0,0,0,7920,7921,1,0,0,0,7921,
7923,1,0,0,0,7922,7924,3,738,369,0,7923,7922,1,0,0,0,7923,7924,1,0,0,0,7924,
8005,1,0,0,0,7925,7927,5,151,0,0,7926,7928,3,746,373,0,7927,7926,1,0,0,0,
7927,7928,1,0,0,0,7928,7929,1,0,0,0,7929,7930,5,630,0,0,7930,7932,5,337,
0,0,7931,7933,3,744,372,0,7932,7931,1,0,0,0,7932,7933,1,0,0,0,7933,7934,
1,0,0,0,7934,7935,3,956,478,0,7935,7936,5,764,0,0,7936,7937,5,878,0,0,7937,
7938,5,444,0,0,7938,7939,5,446,0,0,7939,7940,5,878,0,0,7940,7941,5,161,0,
0,7941,7942,5,451,0,0,7942,7943,5,878,0,0,7943,7945,3,950,475,0,7944,7946,
3,148,74,0,7945,7944,1,0,0,0,7945,7946,1,0,0,0,7946,7950,1,0,0,0,7947,7948,
5,445,0,0,7948,7949,5,878,0,0,7949,7951,3,508,254,0,7950,7947,1,0,0,0,7950,
7951,1,0,0,0,7951,7955,1,0,0,0,7952,7953,5,449,0,0,7953,7954,5,878,0,0,7954,
7956,3,508,254,0,7955,7952,1,0,0,0,7955,7956,1,0,0,0,7956,7960,1,0,0,0,7957,
7958,5,453,0,0,7958,7959,5,878,0,0,7959,7961,3,436,218,0,7960,7957,1,0,0,
0,7960,7961,1,0,0,0,7961,7968,1,0,0,0,7962,7963,5,523,0,0,7963,7964,5,878,
0,0,7964,7965,5,888,0,0,7965,7966,3,952,476,0,7966,7967,5,889,0,0,7967,7969,
1,0,0,0,7968,7962,1,0,0,0,7968,7969,1,0,0,0,7969,7976,1,0,0,0,7970,7971,
5,91,0,0,7971,7972,5,878,0,0,7972,7973,5,888,0,0,7973,7974,3,952,476,0,7974,
7975,5,889,0,0,7975,7977,1,0,0,0,7976,7970,1,0,0,0,7976,7977,1,0,0,0,7977,
7981,1,0,0,0,7978,7979,5,450,0,0,7979,7980,5,878,0,0,7980,7982,3,508,254,
0,7981,7978,1,0,0,0,7981,7982,1,0,0,0,7982,7986,1,0,0,0,7983,7984,5,452,
0,0,7984,7985,5,878,0,0,7985,7987,3,986,493,0,7986,7983,1,0,0,0,7986,7987,
1,0,0,0,7987,7989,1,0,0,0,7988,7990,3,444,222,0,7989,7988,1,0,0,0,7989,7990,
1,0,0,0,7990,7994,1,0,0,0,7991,7992,5,447,0,0,7992,7993,5,878,0,0,7993,7995,
3,950,475,0,7994,7991,1,0,0,0,7994,7995,1,0,0,0,7995,7999,1,0,0,0,7996,7997,
5,448,0,0,7997,7998,5,878,0,0,7998,8000,3,950,475,0,7999,7996,1,0,0,0,7999,
8000,1,0,0,0,8000,8002,1,0,0,0,8001,8003,3,738,369,0,8002,8001,1,0,0,0,8002,
8003,1,0,0,0,8003,8005,1,0,0,0,8004,7877,1,0,0,0,8004,7925,1,0,0,0,8005,
439,1,0,0,0,8006,8008,5,151,0,0,8007,8009,3,746,373,0,8008,8007,1,0,0,0,
8008,8009,1,0,0,0,8009,8010,1,0,0,0,8010,8011,5,630,0,0,8011,8013,5,337,
0,0,8012,8014,3,744,372,0,8013,8012,1,0,0,0,8013,8014,1,0,0,0,8014,8015,
1,0,0,0,8015,8016,5,764,0,0,8016,8017,5,878,0,0,8017,8018,5,603,0,0,8018,
8019,3,148,74,0,8019,8020,5,606,0,0,8020,8021,5,878,0,0,8021,8022,3,950,
475,0,8022,8023,5,615,0,0,8023,8024,5,878,0,0,8024,8025,3,950,475,0,8025,
8026,5,608,0,0,8026,8027,5,878,0,0,8027,8028,3,950,475,0,8028,8029,5,616,
0,0,8029,8030,5,878,0,0,8030,8034,3,950,475,0,8031,8032,5,614,0,0,8032,8033,
5,878,0,0,8033,8035,3,950,475,0,8034,8031,1,0,0,0,8034,8035,1,0,0,0,8035,
8039,1,0,0,0,8036,8037,5,604,0,0,8037,8038,5,878,0,0,8038,8040,3,508,254,
0,8039,8036,1,0,0,0,8039,8040,1,0,0,0,8040,8044,1,0,0,0,8041,8042,5,613,
0,0,8042,8043,5,878,0,0,8043,8045,3,950,475,0,8044,8041,1,0,0,0,8044,8045,
1,0,0,0,8045,8049,1,0,0,0,8046,8047,5,610,0,0,8047,8048,5,878,0,0,8048,8050,
3,508,254,0,8049,8046,1,0,0,0,8049,8050,1,0,0,0,8050,8054,1,0,0,0,8051,8052,
5,609,0,0,8052,8053,5,878,0,0,8053,8055,3,950,475,0,8054,8051,1,0,0,0,8054,
8055,1,0,0,0,8055,8059,1,0,0,0,8056,8057,5,607,0,0,8057,8058,5,878,0,0,8058,
8060,3,950,475,0,8059,8056,1,0,0,0,8059,8060,1,0,0,0,8060,8064,1,0,0,0,8061,
8062,5,605,0,0,8062,8063,5,878,0,0,8063,8065,3,508,254,0,8064,8061,1,0,0,
0,8064,8065,1,0,0,0,8065,8069,1,0,0,0,8066,8067,5,612,0,0,8067,8068,5,878,
0,0,8068,8070,3,950,475,0,8069,8066,1,0,0,0,8069,8070,1,0,0,0,8070,8074,
1,0,0,0,8071,8072,5,611,0,0,8072,8073,5,878,0,0,8073,8075,3,950,475,0,8074,
8071,1,0,0,0,8074,8075,1,0,0,0,8075,441,1,0,0,0,8076,8078,5,151,0,0,8077,
8079,3,746,373,0,8078,8077,1,0,0,0,8078,8079,1,0,0,0,8079,8080,1,0,0,0,8080,
8081,5,630,0,0,8081,8083,5,337,0,0,8082,8084,3,744,372,0,8083,8082,1,0,0,
0,8083,8084,1,0,0,0,8084,8085,1,0,0,0,8085,8086,3,956,478,0,8086,8087,5,
764,0,0,8087,8088,5,878,0,0,8088,8089,5,625,0,0,8089,8090,5,626,0,0,8090,
8091,5,878,0,0,8091,8092,7,45,0,0,8092,8093,5,600,0,0,8093,8094,5,878,0,
0,8094,8096,7,46,0,0,8095,8097,3,444,222,0,8096,8095,1,0,0,0,8096,8097,1,
0,0,0,8097,8101,1,0,0,0,8098,8099,5,705,0,0,8099,8100,5,878,0,0,8100,8102,
3,508,254,0,8101,8098,1,0,0,0,8101,8102,1,0,0,0,8102,8104,1,0,0,0,8103,8105,
3,738,369,0,8104,8103,1,0,0,0,8104,8105,1,0,0,0,8105,443,1,0,0,0,8106,8107,
5,420,0,0,8107,8108,5,878,0,0,8108,8109,3,950,475,0,8109,445,1,0,0,0,8110,
8111,7,47,0,0,8111,447,1,0,0,0,8112,8114,5,675,0,0,8113,8115,5,805,0,0,8114,
8113,1,0,0,0,8114,8115,1,0,0,0,8115,8117,1,0,0,0,8116,8118,5,878,0,0,8117,
8116,1,0,0,0,8117,8118,1,0,0,0,8118,8119,1,0,0,0,8119,8120,3,986,493,0,8120,
449,1,0,0,0,8121,8123,5,326,0,0,8122,8124,5,96,0,0,8123,8122,1,0,0,0,8123,
8124,1,0,0,0,8124,8126,1,0,0,0,8125,8127,5,878,0,0,8126,8125,1,0,0,0,8126,
8127,1,0,0,0,8127,8128,1,0,0,0,8128,8129,3,986,493,0,8129,451,1,0,0,0,8130,
8132,5,151,0,0,8131,8133,3,746,373,0,8132,8131,1,0,0,0,8132,8133,1,0,0,0,
8133,8134,1,0,0,0,8134,8136,5,634,0,0,8135,8137,3,744,372,0,8136,8135,1,
0,0,0,8136,8137,1,0,0,0,8137,8138,1,0,0,0,8138,8140,3,982,491,0,8139,8141,
5,805,0,0,8140,8139,1,0,0,0,8140,8141,1,0,0,0,8141,8143,1,0,0,0,8142,8144,
3,448,224,0,8143,8142,1,0,0,0,8143,8144,1,0,0,0,8144,8146,1,0,0,0,8145,8147,
3,450,225,0,8146,8145,1,0,0,0,8146,8147,1,0,0,0,8147,8149,1,0,0,0,8148,8150,
3,568,284,0,8149,8148,1,0,0,0,8149,8150,1,0,0,0,8150,8152,1,0,0,0,8151,8153,
3,738,369,0,8152,8151,1,0,0,0,8152,8153,1,0,0,0,8153,453,1,0,0,0,8154,8156,
5,151,0,0,8155,8157,3,746,373,0,8156,8155,1,0,0,0,8156,8157,1,0,0,0,8157,
8158,1,0,0,0,8158,8159,5,636,0,0,8159,8161,5,517,0,0,8160,8162,3,744,372,
0,8161,8160,1,0,0,0,8161,8162,1,0,0,0,8162,8163,1,0,0,0,8163,8167,3,982,
491,0,8164,8166,3,456,228,0,8165,8164,1,0,0,0,8166,8169,1,0,0,0,8167,8165,
1,0,0,0,8167,8168,1,0,0,0,8168,455,1,0,0,0,8169,8167,1,0,0,0,8170,8171,3,
458,229,0,8171,8172,5,878,0,0,8172,8173,3,986,493,0,8173,8176,1,0,0,0,8174,
8176,3,738,369,0,8175,8170,1,0,0,0,8175,8174,1,0,0,0,8176,457,1,0,0,0,8177,
8178,7,48,0,0,8178,459,1,0,0,0,8179,8181,5,151,0,0,8180,8182,3,746,373,0,
8181,8180,1,0,0,0,8181,8182,1,0,0,0,8182,8183,1,0,0,0,8183,8184,5,493,0,
0,8184,8186,5,517,0,0,8185,8187,3,744,372,0,8186,8185,1,0,0,0,8186,8187,
1,0,0,0,8187,8188,1,0,0,0,8188,8192,3,982,491,0,8189,8191,3,462,231,0,8190,
8189,1,0,0,0,8191,8194,1,0,0,0,8192,8190,1,0,0,0,8192,8193,1,0,0,0,8193,
461,1,0,0,0,8194,8192,1,0,0,0,8195,8196,3,464,232,0,8196,8197,5,878,0,0,
8197,8198,3,986,493,0,8198,8201,1,0,0,0,8199,8201,3,738,369,0,8200,8195,
1,0,0,0,8200,8199,1,0,0,0,8201,463,1,0,0,0,8202,8203,7,49,0,0,8203,465,1,
0,0,0,8204,8206,5,151,0,0,8205,8207,3,746,373,0,8206,8205,1,0,0,0,8206,8207,
1,0,0,0,8207,8208,1,0,0,0,8208,8209,5,642,0,0,8209,8211,3,956,478,0,8210,
8212,3,738,369,0,8211,8210,1,0,0,0,8211,8212,1,0,0,0,8212,467,1,0,0,0,8213,
8214,7,50,0,0,8214,469,1,0,0,0,8215,8216,5,136,0,0,8216,8217,5,878,0,0,8217,
8359,7,51,0,0,8218,8219,5,547,0,0,8219,8222,5,878,0,0,8220,8223,3,950,475,
0,8221,8223,5,425,0,0,8222,8220,1,0,0,0,8222,8221,1,0,0,0,8223,8359,1,0,
0,0,8224,8225,5,259,0,0,8225,8228,5,878,0,0,8226,8229,3,950,475,0,8227,8229,
5,425,0,0,8228,8226,1,0,0,0,8228,8227,1,0,0,0,8229,8359,1,0,0,0,8230,8231,
5,263,0,0,8231,8232,5,878,0,0,8232,8359,3,950,475,0,8233,8234,5,655,0,0,
8234,8235,5,878,0,0,8235,8359,3,986,493,0,8236,8237,5,651,0,0,8237,8238,
5,878,0,0,8238,8359,3,508,254,0,8239,8240,5,169,0,0,8240,8243,5,878,0,0,
8241,8244,3,950,475,0,8242,8244,5,49,0,0,8243,8241,1,0,0,0,8243,8242,1,0,
0,0,8244,8359,1,0,0,0,8245,8246,5,742,0,0,8246,8249,5,878,0,0,8247,8250,
3,950,475,0,8248,8250,5,49,0,0,8249,8247,1,0,0,0,8249,8248,1,0,0,0,8250,
8359,1,0,0,0,8251,8252,5,729,0,0,8252,8255,5,878,0,0,8253,8256,3,950,475,
0,8254,8256,5,49,0,0,8255,8253,1,0,0,0,8255,8254,1,0,0,0,8256,8359,1,0,0,
0,8257,8258,5,86,0,0,8258,8259,5,878,0,0,8259,8359,7,52,0,0,8260,8261,5,
229,0,0,8261,8265,5,878,0,0,8262,8266,3,468,234,0,8263,8266,5,425,0,0,8264,
8266,5,426,0,0,8265,8262,1,0,0,0,8265,8263,1,0,0,0,8265,8264,1,0,0,0,8266,
8359,1,0,0,0,8267,8268,5,230,0,0,8268,8272,5,878,0,0,8269,8273,3,950,475,
0,8270,8273,5,425,0,0,8271,8273,5,426,0,0,8272,8269,1,0,0,0,8272,8270,1,
0,0,0,8272,8271,1,0,0,0,8273,8359,1,0,0,0,8274,8275,5,757,0,0,8275,8276,
5,878,0,0,8276,8359,3,508,254,0,8277,8278,5,260,0,0,8278,8283,5,878,0,0,
8279,8284,3,950,475,0,8280,8284,5,425,0,0,8281,8284,5,426,0,0,8282,8284,
5,860,0,0,8283,8279,1,0,0,0,8283,8280,1,0,0,0,8283,8281,1,0,0,0,8283,8282,
1,0,0,0,8284,8359,1,0,0,0,8285,8286,5,440,0,0,8286,8287,5,878,0,0,8287,8288,
5,888,0,0,8288,8289,3,952,476,0,8289,8290,5,889,0,0,8290,8359,1,0,0,0,8291,
8292,5,226,0,0,8292,8293,5,878,0,0,8293,8359,3,508,254,0,8294,8295,5,561,
0,0,8295,8296,5,878,0,0,8296,8359,3,508,254,0,8297,8298,5,207,0,0,8298,8299,
5,878,0,0,8299,8359,3,508,254,0,8300,8301,5,652,0,0,8301,8302,5,878,0,0,
8302,8359,3,508,254,0,8303,8304,5,215,0,0,8304,8307,5,878,0,0,8305,8308,
3,950,475,0,8306,8308,5,786,0,0,8307,8305,1,0,0,0,8307,8306,1,0,0,0,8308,
8359,1,0,0,0,8309,8310,5,212,0,0,8310,8311,5,878,0,0,8311,8359,3,508,254,
0,8312,8313,5,25,0,0,8313,8314,5,878,0,0,8314,8359,3,508,254,0,8315,8316,
5,695,0,0,8316,8317,5,878,0,0,8317,8359,3,508,254,0,8318,8319,5,694,0,0,
8319,8320,5,878,0,0,8320,8359,3,508,254,0,8321,8322,5,316,0,0,8322,8323,
5,878,0,0,8323,8359,3,508,254,0,8324,8325,5,136,0,0,8325,8326,5,878,0,0,
8326,8359,5,49,0,0,8327,8359,5,381,0,0,8328,8359,5,657,0,0,8329,8359,5,425,
0,0,8330,8331,5,658,0,0,8331,8332,5,878,0,0,8332,8359,3,508,254,0,8333,8334,
5,85,0,0,8334,8335,5,878,0,0,8335,8359,3,508,254,0,8336,8337,5,136,0,0,8337,
8338,5,878,0,0,8338,8359,5,49,0,0,8339,8359,5,300,0,0,8340,8359,5,97,0,0,
8341,8359,5,94,0,0,8342,8359,5,819,0,0,8343,8359,5,183,0,0,8344,8359,5,543,
0,0,8345,8359,5,425,0,0,8346,8347,5,520,0,0,8347,8348,5,878,0,0,8348,8359,
3,508,254,0,8349,8350,5,696,0,0,8350,8351,5,878,0,0,8351,8359,3,508,254,
0,8352,8353,5,195,0,0,8353,8354,5,878,0,0,8354,8359,3,508,254,0,8355,8356,
5,194,0,0,8356,8357,5,878,0,0,8357,8359,3,508,254,0,8358,8215,1,0,0,0,8358,
8218,1,0,0,0,8358,8224,1,0,0,0,8358,8230,1,0,0,0,8358,8233,1,0,0,0,8358,
8236,1,0,0,0,8358,8239,1,0,0,0,8358,8245,1,0,0,0,8358,8251,1,0,0,0,8358,
8257,1,0,0,0,8358,8260,1,0,0,0,8358,8267,1,0,0,0,8358,8274,1,0,0,0,8358,
8277,1,0,0,0,8358,8285,1,0,0,0,8358,8291,1,0,0,0,8358,8294,1,0,0,0,8358,
8297,1,0,0,0,8358,8300,1,0,0,0,8358,8303,1,0,0,0,8358,8309,1,0,0,0,8358,
8312,1,0,0,0,8358,8315,1,0,0,0,8358,8318,1,0,0,0,8358,8321,1,0,0,0,8358,
8324,1,0,0,0,8358,8327,1,0,0,0,8358,8328,1,0,0,0,8358,8329,1,0,0,0,8358,
8330,1,0,0,0,8358,8333,1,0,0,0,8358,8336,1,0,0,0,8358,8339,1,0,0,0,8358,
8340,1,0,0,0,8358,8341,1,0,0,0,8358,8342,1,0,0,0,8358,8343,1,0,0,0,8358,
8344,1,0,0,0,8358,8345,1,0,0,0,8358,8346,1,0,0,0,8358,8349,1,0,0,0,8358,
8352,1,0,0,0,8358,8355,1,0,0,0,8359,471,1,0,0,0,8360,8361,5,468,0,0,8361,
8367,5,878,0,0,8362,8368,5,147,0,0,8363,8368,5,653,0,0,8364,8368,5,654,0,
0,8365,8366,5,654,0,0,8366,8368,5,4,0,0,8367,8362,1,0,0,0,8367,8363,1,0,
0,0,8367,8364,1,0,0,0,8367,8365,1,0,0,0,8368,8393,1,0,0,0,8369,8370,5,649,
0,0,8370,8371,5,878,0,0,8371,8393,3,986,493,0,8372,8373,5,533,0,0,8373,8374,
5,878,0,0,8374,8393,3,508,254,0,8375,8376,5,581,0,0,8376,8377,5,878,0,0,
8377,8393,3,508,254,0,8378,8379,5,389,0,0,8379,8380,5,878,0,0,8380,8393,
5,104,0,0,8381,8393,5,103,0,0,8382,8393,5,425,0,0,8383,8384,5,220,0,0,8384,
8385,5,878,0,0,8385,8393,3,508,254,0,8386,8387,5,761,0,0,8387,8388,5,878,
0,0,8388,8393,3,508,254,0,8389,8390,5,270,0,0,8390,8391,5,878,0,0,8391,8393,
3,508,254,0,8392,8360,1,0,0,0,8392,8369,1,0,0,0,8392,8372,1,0,0,0,8392,8375,
1,0,0,0,8392,8378,1,0,0,0,8392,8381,1,0,0,0,8392,8382,1,0,0,0,8392,8383,
1,0,0,0,8392,8386,1,0,0,0,8392,8389,1,0,0,0,8393,473,1,0,0,0,8394,8395,5,
216,0,0,8395,8396,5,878,0,0,8396,8397,5,888,0,0,8397,8398,5,764,0,0,8398,
8399,5,878,0,0,8399,8400,7,53,0,0,8400,8401,5,889,0,0,8401,475,1,0,0,0,8402,
8403,5,764,0,0,8403,8404,5,878,0,0,8404,8405,3,950,475,0,8405,477,1,0,0,
0,8406,8407,5,385,0,0,8407,8408,5,878,0,0,8408,8409,3,950,475,0,8409,479,
1,0,0,0,8410,8411,5,355,0,0,8411,8412,5,878,0,0,8412,8413,3,950,475,0,8413,
481,1,0,0,0,8414,8415,5,216,0,0,8415,8416,5,878,0,0,8416,8425,5,888,0,0,
8417,8419,3,476,238,0,8418,8417,1,0,0,0,8418,8419,1,0,0,0,8419,8420,1,0,
0,0,8420,8426,3,478,239,0,8421,8423,3,476,238,0,8422,8424,3,480,240,0,8423,
8422,1,0,0,0,8423,8424,1,0,0,0,8424,8426,1,0,0,0,8425,8418,1,0,0,0,8425,
8421,1,0,0,0,8426,8427,1,0,0,0,8427,8428,5,889,0,0,8428,483,1,0,0,0,8429,
8430,5,70,0,0,8430,8431,5,878,0,0,8431,8432,3,950,475,0,8432,485,1,0,0,0,
8433,8434,5,63,0,0,8434,8435,5,878,0,0,8435,8436,3,950,475,0,8436,487,1,
0,0,0,8437,8438,5,65,0,0,8438,8439,5,878,0,0,8439,8440,3,950,475,0,8440,
489,1,0,0,0,8441,8442,5,64,0,0,8442,8443,5,878,0,0,8443,8444,3,950,475,0,
8444,491,1,0,0,0,8445,8446,5,764,0,0,8446,8447,5,878,0,0,8447,8449,5,73,
0,0,8448,8445,1,0,0,0,8448,8449,1,0,0,0,8449,8450,1,0,0,0,8450,8451,5,385,
0,0,8451,8452,5,878,0,0,8452,8464,3,950,475,0,8453,8454,5,385,0,0,8454,8455,
5,878,0,0,8455,8456,3,950,475,0,8456,8457,5,764,0,0,8457,8458,5,878,0,0,
8458,8459,5,73,0,0,8459,8464,1,0,0,0,8460,8461,5,764,0,0,8461,8462,5,878,
0,0,8462,8464,5,426,0,0,8463,8448,1,0,0,0,8463,8453,1,0,0,0,8463,8460,1,
0,0,0,8464,493,1,0,0,0,8465,8466,5,216,0,0,8466,8467,5,878,0,0,8467,8468,
5,888,0,0,8468,8469,3,492,246,0,8469,8470,5,889,0,0,8470,495,1,0,0,0,8471,
8472,5,688,0,0,8472,8473,5,878,0,0,8473,8474,3,956,478,0,8474,497,1,0,0,
0,8475,8485,3,496,248,0,8476,8477,5,152,0,0,8477,8478,5,878,0,0,8478,8479,
5,888,0,0,8479,8480,5,77,0,0,8480,8481,5,878,0,0,8481,8482,3,950,475,0,8482,
8483,5,889,0,0,8483,8485,1,0,0,0,8484,8475,1,0,0,0,8484,8476,1,0,0,0,8485,
499,1,0,0,0,8486,8487,5,764,0,0,8487,8488,5,878,0,0,8488,8490,5,285,0,0,
8489,8486,1,0,0,0,8489,8490,1,0,0,0,8490,8491,1,0,0,0,8491,8492,5,355,0,
0,8492,8493,5,878,0,0,8493,8505,3,950,475,0,8494,8495,5,355,0,0,8495,8496,
5,878,0,0,8496,8497,3,950,475,0,8497,8498,5,764,0,0,8498,8499,5,878,0,0,
8499,8500,5,285,0,0,8500,8505,1,0,0,0,8501,8502,5,764,0,0,8502,8503,5,878,
0,0,8503,8505,5,426,0,0,8504,8489,1,0,0,0,8504,8494,1,0,0,0,8504,8501,1,
0,0,0,8505,501,1,0,0,0,8506,8507,5,216,0,0,8507,8508,5,878,0,0,8508,8509,
5,888,0,0,8509,8510,3,500,250,0,8510,8511,5,889,0,0,8511,503,1,0,0,0,8512,
8527,3,496,248,0,8513,8514,5,152,0,0,8514,8515,5,878,0,0,8515,8522,5,888,
0,0,8516,8517,3,486,243,0,8517,8519,3,488,244,0,8518,8520,3,484,242,0,8519,
8518,1,0,0,0,8519,8520,1,0,0,0,8520,8523,1,0,0,0,8521,8523,3,490,245,0,8522,
8516,1,0,0,0,8522,8521,1,0,0,0,8523,8524,1,0,0,0,8524,8525,5,889,0,0,8525,
8527,1,0,0,0,8526,8512,1,0,0,0,8526,8513,1,0,0,0,8527,505,1,0,0,0,8528,8529,
5,774,0,0,8529,8530,5,878,0,0,8530,8539,7,54,0,0,8531,8533,3,504,252,0,8532,
8531,1,0,0,0,8532,8533,1,0,0,0,8533,8534,1,0,0,0,8534,8540,3,482,241,0,8535,
8537,3,482,241,0,8536,8535,1,0,0,0,8536,8537,1,0,0,0,8537,8538,1,0,0,0,8538,
8540,3,504,252,0,8539,8532,1,0,0,0,8539,8536,1,0,0,0,8539,8540,1,0,0,0,8540,
8568,1,0,0,0,8541,8542,5,774,0,0,8542,8543,5,878,0,0,8543,8552,5,865,0,0,
8544,8546,3,496,248,0,8545,8544,1,0,0,0,8545,8546,1,0,0,0,8546,8547,1,0,
0,0,8547,8553,3,502,251,0,8548,8550,3,502,251,0,8549,8548,1,0,0,0,8549,8550,
1,0,0,0,8550,8551,1,0,0,0,8551,8553,3,496,248,0,8552,8545,1,0,0,0,8552,8549,
1,0,0,0,8552,8553,1,0,0,0,8553,8568,1,0,0,0,8554,8555,5,774,0,0,8555,8556,
5,878,0,0,8556,8565,5,866,0,0,8557,8559,3,498,249,0,8558,8557,1,0,0,0,8558,
8559,1,0,0,0,8559,8560,1,0,0,0,8560,8566,3,494,247,0,8561,8563,3,494,247,
0,8562,8561,1,0,0,0,8562,8563,1,0,0,0,8563,8564,1,0,0,0,8564,8566,3,498,
249,0,8565,8558,1,0,0,0,8565,8562,1,0,0,0,8565,8566,1,0,0,0,8566,8568,1,
0,0,0,8567,8528,1,0,0,0,8567,8541,1,0,0,0,8567,8554,1,0,0,0,8568,507,1,0,
0,0,8569,8570,7,55,0,0,8570,509,1,0,0,0,8571,8572,5,208,0,0,8572,8573,5,
878,0,0,8573,8574,3,508,254,0,8574,511,1,0,0,0,8575,8576,5,552,0,0,8576,
8577,5,878,0,0,8577,8578,3,508,254,0,8578,513,1,0,0,0,8579,8580,5,57,0,0,
8580,8581,5,878,0,0,8581,8582,3,508,254,0,8582,515,1,0,0,0,8583,8584,5,431,
0,0,8584,8585,5,878,0,0,8585,8586,3,950,475,0,8586,517,1,0,0,0,8587,8588,
5,191,0,0,8588,8589,5,878,0,0,8589,8600,5,888,0,0,8590,8592,3,510,255,0,
8591,8593,3,512,256,0,8592,8591,1,0,0,0,8592,8593,1,0,0,0,8593,8601,1,0,
0,0,8594,8595,5,552,0,0,8595,8596,5,878,0,0,8596,8601,5,257,0,0,8597,8598,
3,512,256,0,8598,8599,3,510,255,0,8599,8601,1,0,0,0,8600,8590,1,0,0,0,8600,
8594,1,0,0,0,8600,8597,1,0,0,0,8601,8602,1,0,0,0,8602,8603,5,889,0,0,8603,
519,1,0,0,0,8604,8605,5,191,0,0,8605,8606,5,878,0,0,8606,8607,5,888,0,0,
8607,8609,3,510,255,0,8608,8610,3,512,256,0,8609,8608,1,0,0,0,8609,8610,
1,0,0,0,8610,8612,1,0,0,0,8611,8613,3,514,257,0,8612,8611,1,0,0,0,8612,8613,
1,0,0,0,8613,8614,1,0,0,0,8614,8615,5,889,0,0,8615,8647,1,0,0,0,8616,8617,
5,191,0,0,8617,8618,5,878,0,0,8618,8619,5,888,0,0,8619,8621,3,510,255,0,
8620,8622,3,514,257,0,8621,8620,1,0,0,0,8621,8622,1,0,0,0,8622,8624,1,0,
0,0,8623,8625,3,512,256,0,8624,8623,1,0,0,0,8624,8625,1,0,0,0,8625,8627,
1,0,0,0,8626,8628,3,516,258,0,8627,8626,1,0,0,0,8627,8628,1,0,0,0,8628,8629,
1,0,0,0,8629,8630,5,889,0,0,8630,8647,1,0,0,0,8631,8632,5,191,0,0,8632,8633,
5,878,0,0,8633,8634,5,888,0,0,8634,8636,3,510,255,0,8635,8637,3,512,256,
0,8636,8635,1,0,0,0,8636,8637,1,0,0,0,8637,8639,1,0,0,0,8638,8640,3,514,
257,0,8639,8638,1,0,0,0,8639,8640,1,0,0,0,8640,8642,1,0,0,0,8641,8643,3,
516,258,0,8642,8641,1,0,0,0,8642,8643,1,0,0,0,8643,8644,1,0,0,0,8644,8645,
5,889,0,0,8645,8647,1,0,0,0,8646,8604,1,0,0,0,8646,8616,1,0,0,0,8646,8631,
1,0,0,0,8647,521,1,0,0,0,8648,8650,5,151,0,0,8649,8651,3,746,373,0,8650,
8649,1,0,0,0,8650,8651,1,0,0,0,8651,8653,1,0,0,0,8652,8654,3,552,276,0,8653,
8652,1,0,0,0,8653,8654,1,0,0,0,8654,8655,1,0,0,0,8655,8657,5,670,0,0,8656,
8658,3,744,372,0,8657,8656,1,0,0,0,8657,8658,1,0,0,0,8658,8659,1,0,0,0,8659,
8661,3,984,492,0,8660,8662,3,474,237,0,8661,8660,1,0,0,0,8661,8662,1,0,0,
0,8662,8664,1,0,0,0,8663,8665,3,518,259,0,8664,8663,1,0,0,0,8664,8665,1,
0,0,0,8665,8685,1,0,0,0,8666,8667,5,264,0,0,8667,8668,5,878,0,0,8668,8681,
5,888,0,0,8669,8670,5,274,0,0,8670,8671,5,878,0,0,8671,8682,3,950,475,0,
8672,8673,5,764,0,0,8673,8674,5,878,0,0,8674,8678,3,378,189,0,8675,8677,
3,470,235,0,8676,8675,1,0,0,0,8677,8680,1,0,0,0,8678,8676,1,0,0,0,8678,8679,
1,0,0,0,8679,8682,1,0,0,0,8680,8678,1,0,0,0,8681,8669,1,0,0,0,8681,8672,
1,0,0,0,8682,8683,1,0,0,0,8683,8684,5,889,0,0,8684,8686,1,0,0,0,8685,8666,
1,0,0,0,8685,8686,1,0,0,0,8686,8693,1,0,0,0,8687,8688,5,149,0,0,8688,8689,
5,878,0,0,8689,8690,5,888,0,0,8690,8691,3,472,236,0,8691,8692,5,889,0,0,
8692,8694,1,0,0,0,8693,8687,1,0,0,0,8693,8694,1,0,0,0,8694,8696,1,0,0,0,
8695,8697,3,556,278,0,8696,8695,1,0,0,0,8696,8697,1,0,0,0,8697,8699,1,0,
0,0,8698,8700,3,738,369,0,8699,8698,1,0,0,0,8699,8700,1,0,0,0,8700,8753,
1,0,0,0,8701,8703,5,151,0,0,8702,8704,3,746,373,0,8703,8702,1,0,0,0,8703,
8704,1,0,0,0,8704,8706,1,0,0,0,8705,8707,3,552,276,0,8706,8705,1,0,0,0,8706,
8707,1,0,0,0,8707,8708,1,0,0,0,8708,8710,5,670,0,0,8709,8711,3,744,372,0,
8710,8709,1,0,0,0,8710,8711,1,0,0,0,8711,8712,1,0,0,0,8712,8713,3,984,492,
0,8713,8715,3,506,253,0,8714,8716,3,520,260,0,8715,8714,1,0,0,0,8715,8716,
1,0,0,0,8716,8736,1,0,0,0,8717,8718,5,264,0,0,8718,8719,5,878,0,0,8719,8732,
5,888,0,0,8720,8721,5,274,0,0,8721,8722,5,878,0,0,8722,8733,3,950,475,0,
8723,8724,5,764,0,0,8724,8725,5,878,0,0,8725,8729,3,378,189,0,8726,8728,
3,470,235,0,8727,8726,1,0,0,0,8728,8731,1,0,0,0,8729,8727,1,0,0,0,8729,8730,
1,0,0,0,8730,8733,1,0,0,0,8731,8729,1,0,0,0,8732,8720,1,0,0,0,8732,8723,
1,0,0,0,8733,8734,1,0,0,0,8734,8735,5,889,0,0,8735,8737,1,0,0,0,8736,8717,
1,0,0,0,8736,8737,1,0,0,0,8737,8744,1,0,0,0,8738,8739,5,149,0,0,8739,8740,
5,878,0,0,8740,8741,5,888,0,0,8741,8742,3,472,236,0,8742,8743,5,889,0,0,
8743,8745,1,0,0,0,8744,8738,1,0,0,0,8744,8745,1,0,0,0,8745,8747,1,0,0,0,
8746,8748,3,556,278,0,8747,8746,1,0,0,0,8747,8748,1,0,0,0,8748,8750,1,0,
0,0,8749,8751,3,738,369,0,8750,8749,1,0,0,0,8750,8751,1,0,0,0,8751,8753,
1,0,0,0,8752,8648,1,0,0,0,8752,8701,1,0,0,0,8753,523,1,0,0,0,8754,8755,5,
28,0,0,8755,8757,5,670,0,0,8756,8758,3,742,371,0,8757,8756,1,0,0,0,8757,
8758,1,0,0,0,8758,8759,1,0,0,0,8759,8760,3,984,492,0,8760,8761,5,558,0,0,
8761,8762,5,745,0,0,8762,8763,3,984,492,0,8763,8805,1,0,0,0,8764,8765,5,
28,0,0,8765,8767,5,670,0,0,8766,8768,3,742,371,0,8767,8766,1,0,0,0,8767,
8768,1,0,0,0,8768,8769,1,0,0,0,8769,8770,3,984,492,0,8770,8771,3,326,163,
0,8771,8805,1,0,0,0,8772,8773,5,28,0,0,8773,8775,5,670,0,0,8774,8776,3,742,
371,0,8775,8774,1,0,0,0,8775,8776,1,0,0,0,8776,8777,1,0,0,0,8777,8778,3,
984,492,0,8778,8779,3,330,165,0,8779,8805,1,0,0,0,8780,8781,5,28,0,0,8781,
8783,5,670,0,0,8782,8784,3,742,371,0,8783,8782,1,0,0,0,8783,8784,1,0,0,0,
8784,8785,1,0,0,0,8785,8786,3,984,492,0,8786,8788,5,640,0,0,8787,8789,3,
506,253,0,8788,8787,1,0,0,0,8788,8789,1,0,0,0,8789,8791,1,0,0,0,8790,8792,
3,48,24,0,8791,8790,1,0,0,0,8791,8792,1,0,0,0,8792,8799,1,0,0,0,8793,8794,
5,149,0,0,8794,8795,5,878,0,0,8795,8796,5,888,0,0,8796,8797,3,472,236,0,
8797,8798,5,889,0,0,8798,8800,1,0,0,0,8799,8793,1,0,0,0,8799,8800,1,0,0,
0,8800,8802,1,0,0,0,8801,8803,3,738,369,0,8802,8801,1,0,0,0,8802,8803,1,
0,0,0,8803,8805,1,0,0,0,8804,8754,1,0,0,0,8804,8764,1,0,0,0,8804,8772,1,
0,0,0,8804,8780,1,0,0,0,8805,525,1,0,0,0,8806,8807,5,200,0,0,8807,8809,5,
670,0,0,8808,8810,3,742,371,0,8809,8808,1,0,0,0,8809,8810,1,0,0,0,8810,8811,
1,0,0,0,8811,8812,3,984,492,0,8812,527,1,0,0,0,8813,8814,3,748,374,0,8814,
8815,5,670,0,0,8815,8816,3,984,492,0,8816,529,1,0,0,0,8817,8818,5,645,0,
0,8818,8820,5,671,0,0,8819,8821,3,928,464,0,8820,8819,1,0,0,0,8820,8821,
1,0,0,0,8821,8823,1,0,0,0,8822,8824,3,858,429,0,8823,8822,1,0,0,0,8823,8824,
1,0,0,0,8824,531,1,0,0,0,8825,8826,5,689,0,0,8826,8827,5,878,0,0,8827,8828,
5,602,0,0,8828,8829,5,686,0,0,8829,8830,5,878,0,0,8830,8834,3,950,475,0,
8831,8832,5,685,0,0,8832,8833,5,878,0,0,8833,8835,3,950,475,0,8834,8831,
1,0,0,0,8834,8835,1,0,0,0,8835,8846,1,0,0,0,8836,8837,5,689,0,0,8837,8838,
5,878,0,0,8838,8846,5,284,0,0,8839,8840,5,689,0,0,8840,8841,5,878,0,0,8841,
8842,5,71,0,0,8842,8843,5,79,0,0,8843,8844,5,878,0,0,8844,8846,3,950,475,
0,8845,8825,1,0,0,0,8845,8836,1,0,0,0,8845,8839,1,0,0,0,8846,533,1,0,0,0,
8847,8848,5,686,0,0,8848,8849,5,878,0,0,8849,8853,3,950,475,0,8850,8851,
5,685,0,0,8851,8852,5,878,0,0,8852,8854,3,950,475,0,8853,8850,1,0,0,0,8853,
8854,1,0,0,0,8854,8859,1,0,0,0,8855,8856,5,79,0,0,8856,8857,5,878,0,0,8857,
8859,3,950,475,0,8858,8847,1,0,0,0,8858,8855,1,0,0,0,8859,535,1,0,0,0,8860,
8861,5,337,0,0,8861,8862,5,878,0,0,8862,8863,3,950,475,0,8863,537,1,0,0,
0,8864,8866,5,151,0,0,8865,8867,3,746,373,0,8866,8865,1,0,0,0,8866,8867,
1,0,0,0,8867,8868,1,0,0,0,8868,8869,5,683,0,0,8869,8871,5,337,0,0,8870,8872,
3,744,372,0,8871,8870,1,0,0,0,8871,8872,1,0,0,0,8872,8873,1,0,0,0,8873,8874,
3,956,478,0,8874,8875,5,764,0,0,8875,8876,5,878,0,0,8876,8877,5,255,0,0,
8877,8878,3,532,266,0,8878,8879,5,209,0,0,8879,8880,5,878,0,0,8880,8881,
3,508,254,0,8881,8882,5,684,0,0,8882,8883,5,878,0,0,8883,8884,5,888,0,0,
8884,8885,3,952,476,0,8885,8892,5,889,0,0,8886,8887,5,687,0,0,8887,8888,
5,878,0,0,8888,8889,5,888,0,0,8889,8890,3,952,476,0,8890,8891,5,889,0,0,
8891,8893,1,0,0,0,8892,8886,1,0,0,0,8892,8893,1,0,0,0,8893,8895,1,0,0,0,
8894,8896,3,738,369,0,8895,8894,1,0,0,0,8895,8896,1,0,0,0,8896,539,1,0,0,
0,8897,8898,5,148,0,0,8898,8899,5,296,0,0,8899,541,1,0,0,0,8900,8901,5,40,
0,0,8901,8902,5,878,0,0,8902,8903,3,508,254,0,8903,543,1,0,0,0,8904,8905,
5,335,0,0,8905,8906,5,878,0,0,8906,8907,5,758,0,0,8907,545,1,0,0,0,8908,
8909,5,646,0,0,8909,8910,5,878,0,0,8910,8911,3,508,254,0,8911,547,1,0,0,
0,8912,8913,3,352,176,0,8913,8926,5,888,0,0,8914,8915,5,727,0,0,8915,8916,
5,875,0,0,8916,8927,3,950,475,0,8917,8918,5,459,0,0,8918,8919,5,875,0,0,
8919,8927,3,950,475,0,8920,8921,5,679,0,0,8921,8922,5,875,0,0,8922,8927,
3,956,478,0,8923,8924,5,690,0,0,8924,8925,5,875,0,0,8925,8927,3,950,475,
0,8926,8914,1,0,0,0,8926,8917,1,0,0,0,8926,8920,1,0,0,0,8926,8923,1,0,0,
0,8927,8928,1,0,0,0,8928,8929,5,889,0,0,8929,549,1,0,0,0,8930,8932,5,151,
0,0,8931,8933,3,746,373,0,8932,8931,1,0,0,0,8932,8933,1,0,0,0,8933,8934,
1,0,0,0,8934,8936,5,690,0,0,8935,8937,3,744,372,0,8936,8935,1,0,0,0,8936,
8937,1,0,0,0,8937,8938,1,0,0,0,8938,8940,3,982,491,0,8939,8941,3,540,270,
0,8940,8939,1,0,0,0,8940,8941,1,0,0,0,8941,8942,1,0,0,0,8942,8943,5,465,
0,0,8943,8944,5,708,0,0,8944,8946,3,982,491,0,8945,8947,3,548,274,0,8946,
8945,1,0,0,0,8946,8947,1,0,0,0,8947,8949,1,0,0,0,8948,8950,3,542,271,0,8949,
8948,1,0,0,0,8949,8950,1,0,0,0,8950,8952,1,0,0,0,8951,8953,3,546,273,0,8952,
8951,1,0,0,0,8952,8953,1,0,0,0,8953,8955,1,0,0,0,8954,8956,3,738,369,0,8955,
8954,1,0,0,0,8955,8956,1,0,0,0,8956,9028,1,0,0,0,8957,8959,5,151,0,0,8958,
8960,3,746,373,0,8959,8958,1,0,0,0,8959,8960,1,0,0,0,8960,8961,1,0,0,0,8961,
8963,5,690,0,0,8962,8964,3,744,372,0,8963,8962,1,0,0,0,8963,8964,1,0,0,0,
8964,8965,1,0,0,0,8965,8967,3,982,491,0,8966,8968,3,540,270,0,8967,8966,
1,0,0,0,8967,8968,1,0,0,0,8968,8969,1,0,0,0,8969,8970,5,465,0,0,8970,8971,
5,240,0,0,8971,8972,5,708,0,0,8972,8974,3,982,491,0,8973,8975,3,548,274,
0,8974,8973,1,0,0,0,8974,8975,1,0,0,0,8975,8977,1,0,0,0,8976,8978,3,544,
272,0,8977,8976,1,0,0,0,8977,8978,1,0,0,0,8978,8980,1,0,0,0,8979,8981,3,
738,369,0,8980,8979,1,0,0,0,8980,8981,1,0,0,0,8981,9028,1,0,0,0,8982,8984,
5,151,0,0,8983,8985,3,746,373,0,8984,8983,1,0,0,0,8984,8985,1,0,0,0,8985,
8986,1,0,0,0,8986,8988,5,690,0,0,8987,8989,3,744,372,0,8988,8987,1,0,0,0,
8988,8989,1,0,0,0,8989,8990,1,0,0,0,8990,8992,3,982,491,0,8991,8993,3,540,
270,0,8992,8991,1,0,0,0,8992,8993,1,0,0,0,8993,8994,1,0,0,0,8994,8995,5,
465,0,0,8995,8996,5,670,0,0,8996,8998,3,982,491,0,8997,8999,3,738,369,0,
8998,8997,1,0,0,0,8998,8999,1,0,0,0,8999,9028,1,0,0,0,9000,9002,5,151,0,
0,9001,9003,3,746,373,0,9002,9001,1,0,0,0,9002,9003,1,0,0,0,9003,9004,1,
0,0,0,9004,9006,5,690,0,0,9005,9007,3,744,372,0,9006,9005,1,0,0,0,9006,9007,
1,0,0,0,9007,9008,1,0,0,0,9008,9010,3,982,491,0,9009,9011,3,540,270,0,9010,
9009,1,0,0,0,9010,9011,1,0,0,0,9011,9012,1,0,0,0,9012,9013,5,465,0,0,9013,
9014,5,793,0,0,9014,9016,3,982,491,0,9015,9017,3,548,274,0,9016,9015,1,0,
0,0,9016,9017,1,0,0,0,9017,9019,1,0,0,0,9018,9020,3,542,271,0,9019,9018,
1,0,0,0,9019,9020,1,0,0,0,9020,9022,1,0,0,0,9021,9023,3,546,273,0,9022,9021,
1,0,0,0,9022,9023,1,0,0,0,9023,9025,1,0,0,0,9024,9026,3,738,369,0,9025,9024,
1,0,0,0,9025,9026,1,0,0,0,9026,9028,1,0,0,0,9027,8930,1,0,0,0,9027,8957,
1,0,0,0,9027,8982,1,0,0,0,9027,9000,1,0,0,0,9028,551,1,0,0,0,9029,9030,7,
56,0,0,9030,553,1,0,0,0,9031,9033,7,57,0,0,9032,9031,1,0,0,0,9032,9033,1,
0,0,0,9033,9034,1,0,0,0,9034,9037,3,552,276,0,9035,9037,5,795,0,0,9036,9032,
1,0,0,0,9036,9035,1,0,0,0,9037,9040,1,0,0,0,9038,9040,5,754,0,0,9039,9036,
1,0,0,0,9039,9038,1,0,0,0,9040,555,1,0,0,0,9041,9043,5,805,0,0,9042,9041,
1,0,0,0,9042,9043,1,0,0,0,9043,9044,1,0,0,0,9044,9045,5,715,0,0,9045,9046,
5,888,0,0,9046,9051,3,398,199,0,9047,9048,5,894,0,0,9048,9050,3,398,199,
0,9049,9047,1,0,0,0,9050,9053,1,0,0,0,9051,9049,1,0,0,0,9051,9052,1,0,0,
0,9052,9054,1,0,0,0,9053,9051,1,0,0,0,9054,9055,5,889,0,0,9055,557,1,0,0,
0,9056,9058,5,805,0,0,9057,9056,1,0,0,0,9057,9058,1,0,0,0,9058,9059,1,0,
0,0,9059,9060,5,593,0,0,9060,9061,5,5,0,0,9061,9062,5,517,0,0,9062,9063,
3,956,478,0,9063,9064,5,465,0,0,9064,9065,5,888,0,0,9065,9070,3,976,488,
0,9066,9067,5,894,0,0,9067,9069,3,976,488,0,9068,9066,1,0,0,0,9069,9072,
1,0,0,0,9070,9068,1,0,0,0,9070,9071,1,0,0,0,9071,9073,1,0,0,0,9072,9070,
1,0,0,0,9073,9074,5,889,0,0,9074,559,1,0,0,0,9075,9076,5,127,0,0,9076,9078,
5,96,0,0,9077,9079,5,370,0,0,9078,9077,1,0,0,0,9078,9079,1,0,0,0,9079,9080,
1,0,0,0,9080,9081,3,1156,578,0,9081,561,1,0,0,0,9082,9083,5,108,0,0,9083,
9084,5,878,0,0,9084,9085,3,508,254,0,9085,563,1,0,0,0,9086,9088,5,805,0,
0,9087,9086,1,0,0,0,9087,9088,1,0,0,0,9088,9089,1,0,0,0,9089,9090,5,384,
0,0,9090,9091,5,517,0,0,9091,9094,3,956,478,0,9092,9093,5,785,0,0,9093,9095,
3,400,200,0,9094,9092,1,0,0,0,9094,9095,1,0,0,0,9095,565,1,0,0,0,9096,9097,
5,130,0,0,9097,9098,3,950,475,0,9098,567,1,0,0,0,9099,9100,7,58,0,0,9100,
569,1,0,0,0,9101,9102,5,174,0,0,9102,9121,3,992,496,0,9103,9115,7,59,0,0,
9104,9105,5,888,0,0,9105,9106,3,986,493,0,9106,9107,5,894,0,0,9107,9108,
3,986,493,0,9108,9109,5,889,0,0,9109,9116,1,0,0,0,9110,9116,3,448,224,0,
9111,9116,3,450,225,0,9112,9113,3,448,224,0,9113,9114,3,450,225,0,9114,9116,
1,0,0,0,9115,9104,1,0,0,0,9115,9110,1,0,0,0,9115,9111,1,0,0,0,9115,9112,
1,0,0,0,9115,9116,1,0,0,0,9116,9118,1,0,0,0,9117,9119,3,568,284,0,9118,9117,
1,0,0,0,9118,9119,1,0,0,0,9119,9121,1,0,0,0,9120,9101,1,0,0,0,9120,9103,
1,0,0,0,9121,571,1,0,0,0,9122,9123,5,271,0,0,9123,9124,5,353,0,0,9124,573,
1,0,0,0,9125,9126,5,524,0,0,9126,9127,5,353,0,0,9127,575,1,0,0,0,9128,9129,
5,144,0,0,9129,9131,3,956,478,0,9130,9128,1,0,0,0,9130,9131,1,0,0,0,9131,
9150,1,0,0,0,9132,9135,5,767,0,0,9133,9135,3,574,287,0,9134,9132,1,0,0,0,
9134,9133,1,0,0,0,9135,9136,1,0,0,0,9136,9140,3,400,200,0,9137,9139,3,270,
135,0,9138,9137,1,0,0,0,9139,9142,1,0,0,0,9140,9138,1,0,0,0,9140,9141,1,
0,0,0,9141,9151,1,0,0,0,9142,9140,1,0,0,0,9143,9144,3,572,286,0,9144,9145,
3,400,200,0,9145,9146,5,549,0,0,9146,9147,3,982,491,0,9147,9148,3,400,200,
0,9148,9149,3,280,140,0,9149,9151,1,0,0,0,9150,9134,1,0,0,0,9150,9143,1,
0,0,0,9151,577,1,0,0,0,9152,9162,3,386,193,0,9153,9161,3,566,283,0,9154,
9161,3,262,131,0,9155,9161,3,1174,587,0,9156,9159,3,570,285,0,9157,9159,
5,439,0,0,9158,9156,1,0,0,0,9158,9157,1,0,0,0,9159,9161,1,0,0,0,9160,9153,
1,0,0,0,9160,9154,1,0,0,0,9160,9155,1,0,0,0,9160,9158,1,0,0,0,9161,9164,
1,0,0,0,9162,9160,1,0,0,0,9162,9163,1,0,0,0,9163,9166,1,0,0,0,9164,9162,
1,0,0,0,9165,9167,3,564,282,0,9166,9165,1,0,0,0,9166,9167,1,0,0,0,9167,9169,
1,0,0,0,9168,9170,3,556,278,0,9169,9168,1,0,0,0,9169,9170,1,0,0,0,9170,9173,
1,0,0,0,9171,9172,5,134,0,0,9172,9174,3,950,475,0,9173,9171,1,0,0,0,9173,
9174,1,0,0,0,9174,579,1,0,0,0,9175,9178,3,578,289,0,9176,9178,3,576,288,
0,9177,9175,1,0,0,0,9177,9176,1,0,0,0,9178,581,1,0,0,0,9179,9184,3,580,290,
0,9180,9181,5,894,0,0,9181,9183,3,580,290,0,9182,9180,1,0,0,0,9183,9186,
1,0,0,0,9184,9182,1,0,0,0,9184,9185,1,0,0,0,9185,583,1,0,0,0,9186,9184,1,
0,0,0,9187,9189,5,151,0,0,9188,9190,3,746,373,0,9189,9188,1,0,0,0,9189,9190,
1,0,0,0,9190,9192,1,0,0,0,9191,9193,3,554,277,0,9192,9191,1,0,0,0,9192,9193,
1,0,0,0,9193,9194,1,0,0,0,9194,9203,5,708,0,0,9195,9197,3,744,372,0,9196,
9195,1,0,0,0,9196,9197,1,0,0,0,9197,9198,1,0,0,0,9198,9204,3,982,491,0,9199,
9201,3,982,491,0,9200,9202,3,744,372,0,9201,9200,1,0,0,0,9201,9202,1,0,0,
0,9202,9204,1,0,0,0,9203,9196,1,0,0,0,9203,9199,1,0,0,0,9204,9213,1,0,0,
0,9205,9207,3,738,369,0,9206,9205,1,0,0,0,9206,9207,1,0,0,0,9207,9208,1,
0,0,0,9208,9214,3,588,294,0,9209,9211,3,588,294,0,9210,9212,3,738,369,0,
9211,9210,1,0,0,0,9211,9212,1,0,0,0,9212,9214,1,0,0,0,9213,9206,1,0,0,0,
9213,9209,1,0,0,0,9214,585,1,0,0,0,9215,9216,5,888,0,0,9216,9217,3,582,291,
0,9217,9218,5,889,0,0,9218,587,1,0,0,0,9219,9221,3,586,293,0,9220,9222,3,
560,280,0,9221,9220,1,0,0,0,9221,9222,1,0,0,0,9222,9231,1,0,0,0,9223,9225,
3,560,280,0,9224,9223,1,0,0,0,9224,9225,1,0,0,0,9225,9227,1,0,0,0,9226,9228,
3,738,369,0,9227,9226,1,0,0,0,9227,9228,1,0,0,0,9228,9229,1,0,0,0,9229,9231,
3,586,293,0,9230,9219,1,0,0,0,9230,9224,1,0,0,0,9231,9233,1,0,0,0,9232,9234,
3,54,27,0,9233,9232,1,0,0,0,9233,9234,1,0,0,0,9234,9241,1,0,0,0,9235,9236,
5,672,0,0,9236,9237,5,878,0,0,9237,9238,5,888,0,0,9238,9239,3,472,236,0,
9239,9240,5,889,0,0,9240,9242,1,0,0,0,9241,9235,1,0,0,0,9241,9242,1,0,0,
0,9242,9246,1,0,0,0,9243,9244,5,166,0,0,9244,9245,5,878,0,0,9245,9247,3,
986,493,0,9246,9243,1,0,0,0,9246,9247,1,0,0,0,9247,9251,1,0,0,0,9248,9249,
5,395,0,0,9249,9250,5,878,0,0,9250,9252,3,986,493,0,9251,9248,1,0,0,0,9251,
9252,1,0,0,0,9252,9254,1,0,0,0,9253,9255,3,562,281,0,9254,9253,1,0,0,0,9254,
9255,1,0,0,0,9255,9257,1,0,0,0,9256,9258,3,140,70,0,9257,9256,1,0,0,0,9257,
9258,1,0,0,0,9258,9260,1,0,0,0,9259,9261,3,540,270,0,9260,9259,1,0,0,0,9260,
9261,1,0,0,0,9261,9263,1,0,0,0,9262,9264,3,738,369,0,9263,9262,1,0,0,0,9263,
9264,1,0,0,0,9264,9266,1,0,0,0,9265,9267,3,558,279,0,9266,9265,1,0,0,0,9266,
9267,1,0,0,0,9267,9269,1,0,0,0,9268,9270,3,556,278,0,9269,9268,1,0,0,0,9269,
9270,1,0,0,0,9270,589,1,0,0,0,9271,9273,5,151,0,0,9272,9274,3,746,373,0,
9273,9272,1,0,0,0,9273,9274,1,0,0,0,9274,9276,1,0,0,0,9275,9277,3,554,277,
0,9276,9275,1,0,0,0,9276,9277,1,0,0,0,9277,9278,1,0,0,0,9278,9287,5,708,
0,0,9279,9281,3,744,372,0,9280,9279,1,0,0,0,9280,9281,1,0,0,0,9281,9282,
1,0,0,0,9282,9288,3,982,491,0,9283,9285,3,982,491,0,9284,9286,3,744,372,
0,9285,9284,1,0,0,0,9285,9286,1,0,0,0,9286,9288,1,0,0,0,9287,9280,1,0,0,
0,9287,9283,1,0,0,0,9288,9293,1,0,0,0,9289,9290,5,888,0,0,9290,9291,3,582,
291,0,9291,9292,5,889,0,0,9292,9294,1,0,0,0,9293,9289,1,0,0,0,9293,9294,
1,0,0,0,9294,9296,1,0,0,0,9295,9297,3,560,280,0,9296,9295,1,0,0,0,9296,9297,
1,0,0,0,9297,9299,1,0,0,0,9298,9300,3,540,270,0,9299,9298,1,0,0,0,9299,9300,
1,0,0,0,9300,9302,1,0,0,0,9301,9303,3,558,279,0,9302,9301,1,0,0,0,9302,9303,
1,0,0,0,9303,9305,1,0,0,0,9304,9306,3,556,278,0,9305,9304,1,0,0,0,9305,9306,
1,0,0,0,9306,9308,1,0,0,0,9307,9309,3,738,369,0,9308,9307,1,0,0,0,9308,9309,
1,0,0,0,9309,9310,1,0,0,0,9310,9311,5,43,0,0,9311,9312,3,1048,524,0,9312,
591,1,0,0,0,9313,9315,5,151,0,0,9314,9316,3,746,373,0,9315,9314,1,0,0,0,
9315,9316,1,0,0,0,9316,9318,1,0,0,0,9317,9319,5,754,0,0,9318,9317,1,0,0,
0,9318,9319,1,0,0,0,9319,9320,1,0,0,0,9320,9322,5,708,0,0,9321,9323,3,744,
372,0,9322,9321,1,0,0,0,9322,9323,1,0,0,0,9323,9324,1,0,0,0,9324,9325,3,
982,491,0,9325,9326,5,368,0,0,9326,9328,3,982,491,0,9327,9329,3,560,280,
0,9328,9327,1,0,0,0,9328,9329,1,0,0,0,9329,9331,1,0,0,0,9330,9332,3,540,
270,0,9331,9330,1,0,0,0,9331,9332,1,0,0,0,9332,593,1,0,0,0,9333,9335,5,151,
0,0,9334,9336,3,746,373,0,9335,9334,1,0,0,0,9335,9336,1,0,0,0,9336,9337,
1,0,0,0,9337,9339,5,715,0,0,9338,9340,3,744,372,0,9339,9338,1,0,0,0,9339,
9340,1,0,0,0,9340,9341,1,0,0,0,9341,9343,3,982,491,0,9342,9344,3,596,298,
0,9343,9342,1,0,0,0,9343,9344,1,0,0,0,9344,9346,1,0,0,0,9345,9347,3,738,
369,0,9346,9345,1,0,0,0,9346,9347,1,0,0,0,9347,595,1,0,0,0,9348,9349,5,23,
0,0,9349,9350,3,952,476,0,9350,597,1,0,0,0,9351,9352,7,60,0,0,9352,599,1,
0,0,0,9353,9358,3,598,299,0,9354,9355,5,894,0,0,9355,9357,3,598,299,0,9356,
9354,1,0,0,0,9357,9360,1,0,0,0,9358,9356,1,0,0,0,9358,9359,1,0,0,0,9359,
601,1,0,0,0,9360,9358,1,0,0,0,9361,9366,3,144,72,0,9362,9363,5,894,0,0,9363,
9365,3,144,72,0,9364,9362,1,0,0,0,9365,9368,1,0,0,0,9366,9364,1,0,0,0,9366,
9367,1,0,0,0,9367,603,1,0,0,0,9368,9366,1,0,0,0,9369,9371,5,151,0,0,9370,
9372,3,746,373,0,9371,9370,1,0,0,0,9371,9372,1,0,0,0,9372,9373,1,0,0,0,9373,
9375,5,718,0,0,9374,9376,3,744,372,0,9375,9374,1,0,0,0,9375,9376,1,0,0,0,
9376,9377,1,0,0,0,9377,9381,3,982,491,0,9378,9380,3,606,303,0,9379,9378,
1,0,0,0,9380,9383,1,0,0,0,9381,9379,1,0,0,0,9381,9382,1,0,0,0,9382,9385,
1,0,0,0,9383,9381,1,0,0,0,9384,9386,3,738,369,0,9385,9384,1,0,0,0,9385,9386,
1,0,0,0,9386,9388,1,0,0,0,9387,9389,3,540,270,0,9388,9387,1,0,0,0,9388,9389,
1,0,0,0,9389,9399,1,0,0,0,9390,9391,5,14,0,0,9391,9396,3,982,491,0,9392,
9393,5,894,0,0,9393,9395,3,982,491,0,9394,9392,1,0,0,0,9395,9398,1,0,0,0,
9396,9394,1,0,0,0,9396,9397,1,0,0,0,9397,9400,1,0,0,0,9398,9396,1,0,0,0,
9399,9390,1,0,0,0,9399,9400,1,0,0,0,9400,9403,1,0,0,0,9401,9402,5,803,0,
0,9402,9404,3,1170,585,0,9403,9401,1,0,0,0,9403,9404,1,0,0,0,9404,9405,1,
0,0,0,9405,9406,5,43,0,0,9406,9407,3,620,310,0,9407,605,1,0,0,0,9408,9416,
3,608,304,0,9409,9416,3,610,305,0,9410,9416,3,618,309,0,9411,9416,3,602,
301,0,9412,9416,3,612,306,0,9413,9416,3,614,307,0,9414,9416,3,616,308,0,
9415,9408,1,0,0,0,9415,9409,1,0,0,0,9415,9410,1,0,0,0,9415,9411,1,0,0,0,
9415,9412,1,0,0,0,9415,9413,1,0,0,0,9415,9414,1,0,0,0,9416,607,1,0,0,0,9417,
9418,5,796,0,0,9418,9419,5,878,0,0,9419,9427,3,956,478,0,9420,9421,5,781,
0,0,9421,9424,5,878,0,0,9422,9425,3,632,316,0,9423,9425,3,950,475,0,9424,
9422,1,0,0,0,9424,9423,1,0,0,0,9425,9427,1,0,0,0,9426,9417,1,0,0,0,9426,
9420,1,0,0,0,9427,609,1,0,0,0,9428,9429,5,622,0,0,9429,9430,5,878,0,0,9430,
9431,3,950,475,0,9431,611,1,0,0,0,9432,9433,5,782,0,0,9433,9434,5,878,0,
0,9434,9435,3,986,493,0,9435,613,1,0,0,0,9436,9437,5,703,0,0,9437,9438,5,
878,0,0,9438,9439,3,986,493,0,9439,615,1,0,0,0,9440,9441,5,225,0,0,9441,
9442,5,878,0,0,9442,9443,3,956,478,0,9443,617,1,0,0,0,9444,9445,5,27,0,0,
9445,9446,5,878,0,0,9446,9447,3,508,254,0,9447,619,1,0,0,0,9448,9449,5,234,
0,0,9449,9450,5,318,0,0,9450,9454,5,868,0,0,9451,9454,3,4,2,0,9452,9454,
3,622,311,0,9453,9448,1,0,0,0,9453,9451,1,0,0,0,9453,9452,1,0,0,0,9454,621,
1,0,0,0,9455,9456,5,98,0,0,9456,9457,3,982,491,0,9457,9459,5,888,0,0,9458,
9460,3,988,494,0,9459,9458,1,0,0,0,9459,9460,1,0,0,0,9460,9461,1,0,0,0,9461,
9462,5,889,0,0,9462,623,1,0,0,0,9463,9465,5,151,0,0,9464,9466,3,746,373,
0,9465,9464,1,0,0,0,9465,9466,1,0,0,0,9466,9467,1,0,0,0,9467,9469,5,777,
0,0,9468,9470,3,744,372,0,9469,9468,1,0,0,0,9469,9470,1,0,0,0,9470,9471,
1,0,0,0,9471,9473,3,956,478,0,9472,9474,3,142,71,0,9473,9472,1,0,0,0,9473,
9474,1,0,0,0,9474,9476,1,0,0,0,9475,9477,3,138,69,0,9476,9475,1,0,0,0,9476,
9477,1,0,0,0,9477,9479,1,0,0,0,9478,9480,3,144,72,0,9479,9478,1,0,0,0,9479,
9480,1,0,0,0,9480,625,1,0,0,0,9481,9482,3,976,488,0,9482,9483,3,564,282,
0,9483,9484,3,556,278,0,9484,627,1,0,0,0,9485,9487,5,151,0,0,9486,9488,3,
746,373,0,9487,9486,1,0,0,0,9487,9488,1,0,0,0,9488,9490,1,0,0,0,9489,9491,
5,629,0,0,9490,9489,1,0,0,0,9490,9491,1,0,0,0,9491,9493,1,0,0,0,9492,9494,
5,548,0,0,9493,9492,1,0,0,0,9493,9494,1,0,0,0,9494,9495,1,0,0,0,9495,9497,
5,793,0,0,9496,9498,3,744,372,0,9497,9496,1,0,0,0,9497,9498,1,0,0,0,9498,
9499,1,0,0,0,9499,9504,3,982,491,0,9500,9501,5,888,0,0,9501,9502,3,980,490,
0,9502,9503,5,889,0,0,9503,9505,1,0,0,0,9504,9500,1,0,0,0,9504,9505,1,0,
0,0,9505,9509,1,0,0,0,9506,9508,3,626,313,0,9507,9506,1,0,0,0,9508,9511,
1,0,0,0,9509,9507,1,0,0,0,9509,9510,1,0,0,0,9510,9513,1,0,0,0,9511,9509,
1,0,0,0,9512,9514,3,558,279,0,9513,9512,1,0,0,0,9513,9514,1,0,0,0,9514,9516,
1,0,0,0,9515,9517,3,556,278,0,9516,9515,1,0,0,0,9516,9517,1,0,0,0,9517,9519,
1,0,0,0,9518,9520,3,540,270,0,9519,9518,1,0,0,0,9519,9520,1,0,0,0,9520,9522,
1,0,0,0,9521,9523,3,738,369,0,9522,9521,1,0,0,0,9522,9523,1,0,0,0,9523,9524,
1,0,0,0,9524,9525,5,43,0,0,9525,9526,3,1048,524,0,9526,629,1,0,0,0,9527,
9529,5,151,0,0,9528,9530,3,746,373,0,9529,9528,1,0,0,0,9529,9530,1,0,0,0,
9530,9531,1,0,0,0,9531,9533,5,796,0,0,9532,9534,3,744,372,0,9533,9532,1,
0,0,0,9533,9534,1,0,0,0,9534,9535,1,0,0,0,9535,9544,3,954,477,0,9536,9538,
5,805,0,0,9537,9536,1,0,0,0,9537,9538,1,0,0,0,9538,9540,1,0,0,0,9539,9541,
3,636,318,0,9540,9539,1,0,0,0,9541,9542,1,0,0,0,9542,9540,1,0,0,0,9542,9543,
1,0,0,0,9543,9545,1,0,0,0,9544,9537,1,0,0,0,9544,9545,1,0,0,0,9545,9549,
1,0,0,0,9546,9548,3,638,319,0,9547,9546,1,0,0,0,9548,9551,1,0,0,0,9549,9547,
1,0,0,0,9549,9550,1,0,0,0,9550,631,1,0,0,0,9551,9549,1,0,0,0,9552,9553,7,
61,0,0,9553,633,1,0,0,0,9554,9555,7,62,0,0,9555,635,1,0,0,0,9556,9557,5,
798,0,0,9557,9561,5,878,0,0,9558,9562,3,632,316,0,9559,9562,3,634,317,0,
9560,9562,5,862,0,0,9561,9558,1,0,0,0,9561,9559,1,0,0,0,9561,9560,1,0,0,
0,9562,9601,1,0,0,0,9563,9564,5,799,0,0,9564,9565,5,878,0,0,9565,9601,7,
63,0,0,9566,9567,5,393,0,0,9567,9568,5,878,0,0,9568,9601,3,986,493,0,9569,
9570,5,406,0,0,9570,9571,5,878,0,0,9571,9601,3,986,493,0,9572,9573,5,621,
0,0,9573,9574,5,878,0,0,9574,9601,7,64,0,0,9575,9579,5,59,0,0,9576,9577,
5,878,0,0,9577,9580,3,986,493,0,9578,9580,5,439,0,0,9579,9576,1,0,0,0,9579,
9578,1,0,0,0,9580,9601,1,0,0,0,9581,9582,5,58,0,0,9582,9583,5,878,0,0,9583,
9601,3,508,254,0,9584,9585,5,330,0,0,9585,9586,5,878,0,0,9586,9601,3,508,
254,0,9587,9588,5,571,0,0,9588,9589,5,878,0,0,9589,9601,3,956,478,0,9590,
9601,3,738,369,0,9591,9592,5,213,0,0,9592,9593,5,878,0,0,9593,9601,3,508,
254,0,9594,9595,5,538,0,0,9595,9596,5,878,0,0,9596,9601,3,986,493,0,9597,
9598,5,394,0,0,9598,9599,5,878,0,0,9599,9601,3,986,493,0,9600,9556,1,0,0,
0,9600,9563,1,0,0,0,9600,9566,1,0,0,0,9600,9569,1,0,0,0,9600,9572,1,0,0,
0,9600,9575,1,0,0,0,9600,9581,1,0,0,0,9600,9584,1,0,0,0,9600,9587,1,0,0,
0,9600,9590,1,0,0,0,9600,9591,1,0,0,0,9600,9594,1,0,0,0,9600,9597,1,0,0,
0,9601,637,1,0,0,0,9602,9603,5,394,0,0,9603,9604,5,878,0,0,9604,9615,3,986,
493,0,9605,9606,5,680,0,0,9606,9607,5,878,0,0,9607,9615,3,986,493,0,9608,
9609,5,681,0,0,9609,9610,5,878,0,0,9610,9612,3,986,493,0,9611,9613,3,556,
278,0,9612,9611,1,0,0,0,9612,9613,1,0,0,0,9613,9615,1,0,0,0,9614,9602,1,
0,0,0,9614,9605,1,0,0,0,9614,9608,1,0,0,0,9615,639,1,0,0,0,9616,9617,5,465,
0,0,9617,9618,3,986,493,0,9618,9619,5,509,0,0,9619,9620,5,198,0,0,9620,9621,
7,20,0,0,9621,641,1,0,0,0,9622,9650,5,587,0,0,9623,9650,5,777,0,0,9624,9650,
5,796,0,0,9625,9650,5,337,0,0,9626,9627,5,419,0,0,9627,9650,5,517,0,0,9628,
9629,5,636,0,0,9629,9650,5,517,0,0,9630,9650,5,164,0,0,9631,9650,5,623,0,
0,9632,9650,5,708,0,0,9633,9650,5,793,0,0,9634,9650,5,670,0,0,9635,9636,
5,261,0,0,9636,9650,5,272,0,0,9637,9650,5,690,0,0,9638,9650,5,718,0,0,9639,
9640,5,384,0,0,9640,9650,5,517,0,0,9641,9642,5,593,0,0,9642,9643,5,5,0,0,
9643,9650,5,517,0,0,9644,9650,5,715,0,0,9645,9650,5,512,0,0,9646,9650,5,
278,0,0,9647,9650,5,527,0,0,9648,9650,5,634,0,0,9649,9622,1,0,0,0,9649,9623,
1,0,0,0,9649,9624,1,0,0,0,9649,9625,1,0,0,0,9649,9626,1,0,0,0,9649,9628,
1,0,0,0,9649,9630,1,0,0,0,9649,9631,1,0,0,0,9649,9632,1,0,0,0,9649,9633,
1,0,0,0,9649,9634,1,0,0,0,9649,9635,1,0,0,0,9649,9637,1,0,0,0,9649,9638,
1,0,0,0,9649,9639,1,0,0,0,9649,9641,1,0,0,0,9649,9644,1,0,0,0,9649,9645,
1,0,0,0,9649,9646,1,0,0,0,9649,9647,1,0,0,0,9649,9648,1,0,0,0,9650,643,1,
0,0,0,9651,9652,7,65,0,0,9652,645,1,0,0,0,9653,9687,3,648,324,0,9654,9687,
3,650,325,0,9655,9687,3,652,326,0,9656,9687,3,654,327,0,9657,9687,3,656,
328,0,9658,9687,3,658,329,0,9659,9687,3,660,330,0,9660,9687,3,662,331,0,
9661,9687,3,664,332,0,9662,9687,3,666,333,0,9663,9687,3,668,334,0,9664,9687,
3,670,335,0,9665,9687,3,672,336,0,9666,9687,3,674,337,0,9667,9687,3,694,
347,0,9668,9687,3,676,338,0,9669,9687,3,678,339,0,9670,9687,3,680,340,0,
9671,9687,3,682,341,0,9672,9687,3,684,342,0,9673,9687,3,686,343,0,9674,9687,
3,688,344,0,9675,9687,3,690,345,0,9676,9687,3,692,346,0,9677,9687,3,696,
348,0,9678,9687,3,526,263,0,9679,9687,3,698,349,0,9680,9687,3,700,350,0,
9681,9687,3,702,351,0,9682,9687,3,704,352,0,9683,9687,3,706,353,0,9684,9687,
3,708,354,0,9685,9687,3,710,355,0,9686,9653,1,0,0,0,9686,9654,1,0,0,0,9686,
9655,1,0,0,0,9686,9656,1,0,0,0,9686,9657,1,0,0,0,9686,9658,1,0,0,0,9686,
9659,1,0,0,0,9686,9660,1,0,0,0,9686,9661,1,0,0,0,9686,9662,1,0,0,0,9686,
9663,1,0,0,0,9686,9664,1,0,0,0,9686,9665,1,0,0,0,9686,9666,1,0,0,0,9686,
9667,1,0,0,0,9686,9668,1,0,0,0,9686,9669,1,0,0,0,9686,9670,1,0,0,0,9686,
9671,1,0,0,0,9686,9672,1,0,0,0,9686,9673,1,0,0,0,9686,9674,1,0,0,0,9686,
9675,1,0,0,0,9686,9676,1,0,0,0,9686,9677,1,0,0,0,9686,9678,1,0,0,0,9686,
9679,1,0,0,0,9686,9680,1,0,0,0,9686,9681,1,0,0,0,9686,9682,1,0,0,0,9686,
9683,1,0,0,0,9686,9684,1,0,0,0,9686,9685,1,0,0,0,9687,647,1,0,0,0,9688,9689,
5,200,0,0,9689,9690,3,934,467,0,9690,9691,3,742,371,0,9691,9693,3,956,478,
0,9692,9694,3,712,356,0,9693,9692,1,0,0,0,9693,9694,1,0,0,0,9694,649,1,0,
0,0,9695,9696,5,200,0,0,9696,9697,5,15,0,0,9697,9698,3,956,478,0,9698,651,
1,0,0,0,9699,9700,5,200,0,0,9700,9702,5,142,0,0,9701,9703,3,742,371,0,9702,
9701,1,0,0,0,9702,9703,1,0,0,0,9703,9704,1,0,0,0,9704,9705,3,956,478,0,9705,
653,1,0,0,0,9706,9707,5,200,0,0,9707,9709,5,164,0,0,9708,9710,3,742,371,
0,9709,9708,1,0,0,0,9709,9710,1,0,0,0,9710,9711,1,0,0,0,9711,9713,3,956,
478,0,9712,9714,3,712,356,0,9713,9712,1,0,0,0,9713,9714,1,0,0,0,9714,655,
1,0,0,0,9715,9716,5,200,0,0,9716,9717,5,201,0,0,9717,9718,5,708,0,0,9718,
9719,3,956,478,0,9719,657,1,0,0,0,9720,9721,5,200,0,0,9721,9722,5,240,0,
0,9722,9724,5,708,0,0,9723,9725,3,742,371,0,9724,9723,1,0,0,0,9724,9725,
1,0,0,0,9725,9726,1,0,0,0,9726,9728,3,982,491,0,9727,9729,3,712,356,0,9728,
9727,1,0,0,0,9728,9729,1,0,0,0,9729,659,1,0,0,0,9730,9731,5,200,0,0,9731,
9732,5,256,0,0,9732,9734,5,297,0,0,9733,9735,3,742,371,0,9734,9733,1,0,0,
0,9734,9735,1,0,0,0,9735,9736,1,0,0,0,9736,9737,3,956,478,0,9737,661,1,0,
0,0,9738,9739,5,200,0,0,9739,9740,5,261,0,0,9740,9742,5,272,0,0,9741,9743,
3,742,371,0,9742,9741,1,0,0,0,9742,9743,1,0,0,0,9743,9744,1,0,0,0,9744,9745,
3,956,478,0,9745,663,1,0,0,0,9746,9747,5,200,0,0,9747,9749,5,278,0,0,9748,
9750,3,742,371,0,9749,9748,1,0,0,0,9749,9750,1,0,0,0,9750,9751,1,0,0,0,9751,
9752,3,982,491,0,9752,9753,3,714,357,0,9753,665,1,0,0,0,9754,9756,5,200,
0,0,9755,9757,7,66,0,0,9756,9755,1,0,0,0,9756,9757,1,0,0,0,9757,9758,1,0,
0,0,9758,9760,5,337,0,0,9759,9761,3,742,371,0,9760,9759,1,0,0,0,9760,9761,
1,0,0,0,9761,9762,1,0,0,0,9762,9763,3,956,478,0,9763,667,1,0,0,0,9764,9765,
5,200,0,0,9765,9766,5,383,0,0,9766,9767,5,6,0,0,9767,9768,3,956,478,0,9768,
669,1,0,0,0,9769,9770,5,200,0,0,9770,9771,5,384,0,0,9771,9772,5,517,0,0,
9772,9773,3,956,478,0,9773,671,1,0,0,0,9774,9775,5,200,0,0,9775,9776,5,391,
0,0,9776,9778,5,793,0,0,9777,9779,3,742,371,0,9778,9777,1,0,0,0,9778,9779,
1,0,0,0,9779,9780,1,0,0,0,9780,9781,3,982,491,0,9781,673,1,0,0,0,9782,9783,
5,200,0,0,9783,9784,5,419,0,0,9784,9786,5,517,0,0,9785,9787,3,742,371,0,
9786,9785,1,0,0,0,9786,9787,1,0,0,0,9787,9788,1,0,0,0,9788,9789,3,956,478,
0,9789,675,1,0,0,0,9790,9791,5,200,0,0,9791,9793,5,512,0,0,9792,9794,3,742,
371,0,9793,9792,1,0,0,0,9793,9794,1,0,0,0,9794,9795,1,0,0,0,9795,9796,3,
982,491,0,9796,677,1,0,0,0,9797,9798,5,200,0,0,9798,9800,5,527,0,0,9799,
9801,3,742,371,0,9800,9799,1,0,0,0,9800,9801,1,0,0,0,9801,9802,1,0,0,0,9802,
9803,3,982,491,0,9803,9804,3,714,357,0,9804,679,1,0,0,0,9805,9806,5,200,
0,0,9806,9807,5,563,0,0,9807,9809,5,297,0,0,9808,9810,3,742,371,0,9809,9808,
1,0,0,0,9809,9810,1,0,0,0,9810,9811,1,0,0,0,9811,9812,3,956,478,0,9812,681,
1,0,0,0,9813,9814,5,200,0,0,9814,9815,5,569,0,0,9815,9816,5,411,0,0,9816,
9817,3,956,478,0,9817,683,1,0,0,0,9818,9819,5,200,0,0,9819,9821,5,587,0,
0,9820,9822,3,742,371,0,9821,9820,1,0,0,0,9821,9822,1,0,0,0,9822,9823,1,
0,0,0,9823,9824,3,956,478,0,9824,685,1,0,0,0,9825,9826,5,200,0,0,9826,9827,
5,593,0,0,9827,9828,5,5,0,0,9828,9830,5,517,0,0,9829,9831,3,742,371,0,9830,
9829,1,0,0,0,9830,9831,1,0,0,0,9831,9832,1,0,0,0,9832,9833,3,956,478,0,9833,
687,1,0,0,0,9834,9835,5,200,0,0,9835,9837,5,623,0,0,9836,9838,3,742,371,
0,9837,9836,1,0,0,0,9837,9838,1,0,0,0,9838,9839,1,0,0,0,9839,9841,3,932,
466,0,9840,9842,3,712,356,0,9841,9840,1,0,0,0,9841,9842,1,0,0,0,9842,689,
1,0,0,0,9843,9844,5,200,0,0,9844,9846,5,634,0,0,9845,9847,3,742,371,0,9846,
9845,1,0,0,0,9846,9847,1,0,0,0,9847,9848,1,0,0,0,9848,9850,3,982,491,0,9849,
9851,3,712,356,0,9850,9849,1,0,0,0,9850,9851,1,0,0,0,9851,691,1,0,0,0,9852,
9853,5,200,0,0,9853,9854,5,636,0,0,9854,9856,5,517,0,0,9855,9857,3,742,371,
0,9856,9855,1,0,0,0,9856,9857,1,0,0,0,9857,9858,1,0,0,0,9858,9859,3,982,
491,0,9859,693,1,0,0,0,9860,9861,5,200,0,0,9861,9862,5,493,0,0,9862,9864,
5,517,0,0,9863,9865,3,742,371,0,9864,9863,1,0,0,0,9864,9865,1,0,0,0,9865,
9866,1,0,0,0,9866,9867,3,982,491,0,9867,695,1,0,0,0,9868,9869,5,200,0,0,
9869,9870,5,642,0,0,9870,9871,3,956,478,0,9871,697,1,0,0,0,9872,9873,5,200,
0,0,9873,9875,5,690,0,0,9874,9876,3,742,371,0,9875,9874,1,0,0,0,9875,9876,
1,0,0,0,9876,9877,1,0,0,0,9877,9878,3,982,491,0,9878,699,1,0,0,0,9879,9880,
5,200,0,0,9880,9882,5,708,0,0,9881,9883,3,742,371,0,9882,9881,1,0,0,0,9882,
9883,1,0,0,0,9883,9884,1,0,0,0,9884,9886,3,982,491,0,9885,9887,3,712,356,
0,9886,9885,1,0,0,0,9886,9887,1,0,0,0,9887,701,1,0,0,0,9888,9889,5,200,0,
0,9889,9891,5,715,0,0,9890,9892,3,742,371,0,9891,9890,1,0,0,0,9891,9892,
1,0,0,0,9892,9893,1,0,0,0,9893,9894,3,982,491,0,9894,703,1,0,0,0,9895,9896,
5,200,0,0,9896,9898,5,718,0,0,9897,9899,3,742,371,0,9898,9897,1,0,0,0,9898,
9899,1,0,0,0,9899,9900,1,0,0,0,9900,9901,3,982,491,0,9901,705,1,0,0,0,9902,
9903,5,200,0,0,9903,9905,5,777,0,0,9904,9906,3,742,371,0,9905,9904,1,0,0,
0,9905,9906,1,0,0,0,9906,9907,1,0,0,0,9907,9908,3,956,478,0,9908,707,1,0,
0,0,9909,9910,5,200,0,0,9910,9912,5,793,0,0,9911,9913,3,742,371,0,9912,9911,
1,0,0,0,9912,9913,1,0,0,0,9913,9914,1,0,0,0,9914,9915,3,982,491,0,9915,709,
1,0,0,0,9916,9917,5,200,0,0,9917,9919,5,796,0,0,9918,9920,3,742,371,0,9919,
9918,1,0,0,0,9919,9920,1,0,0,0,9920,9921,1,0,0,0,9921,9922,3,954,477,0,9922,
711,1,0,0,0,9923,9924,7,67,0,0,9924,713,1,0,0,0,9925,9927,5,888,0,0,9926,
9928,3,192,96,0,9927,9926,1,0,0,0,9927,9928,1,0,0,0,9928,9929,1,0,0,0,9929,
9930,5,889,0,0,9930,715,1,0,0,0,9931,9936,3,718,359,0,9932,9936,3,720,360,
0,9933,9936,3,722,361,0,9934,9936,3,724,362,0,9935,9931,1,0,0,0,9935,9932,
1,0,0,0,9935,9933,1,0,0,0,9935,9934,1,0,0,0,9936,717,1,0,0,0,9937,9938,5,
765,0,0,9938,9939,5,164,0,0,9939,9940,3,956,478,0,9940,719,1,0,0,0,9941,
9942,5,765,0,0,9942,9943,5,623,0,0,9943,9944,3,932,466,0,9944,721,1,0,0,
0,9945,9946,5,765,0,0,9946,9947,5,708,0,0,9947,9948,3,982,491,0,9948,723,
1,0,0,0,9949,9950,5,765,0,0,9950,9951,5,715,0,0,9951,9952,3,982,491,0,9952,
725,1,0,0,0,9953,9959,3,728,364,0,9954,9959,3,730,365,0,9955,9959,3,732,
366,0,9956,9959,3,734,367,0,9957,9959,3,736,368,0,9958,9953,1,0,0,0,9958,
9954,1,0,0,0,9958,9955,1,0,0,0,9958,9956,1,0,0,0,9958,9957,1,0,0,0,9959,
727,1,0,0,0,9960,9961,5,776,0,0,9961,9962,5,164,0,0,9962,9963,3,956,478,
0,9963,729,1,0,0,0,9964,9965,5,776,0,0,9965,9966,5,587,0,0,9966,9967,3,956,
478,0,9967,731,1,0,0,0,9968,9970,5,776,0,0,9969,9971,5,623,0,0,9970,9969,
1,0,0,0,9970,9971,1,0,0,0,9971,9975,1,0,0,0,9972,9973,3,956,478,0,9973,9974,
5,884,0,0,9974,9976,1,0,0,0,9975,9972,1,0,0,0,9975,9976,1,0,0,0,9976,9977,
1,0,0,0,9977,9978,3,956,478,0,9978,733,1,0,0,0,9979,9980,5,776,0,0,9980,
9981,5,628,0,0,9981,9982,5,588,0,0,9982,9983,7,68,0,0,9983,735,1,0,0,0,9984,
9985,5,776,0,0,9985,9986,5,796,0,0,9986,9987,3,954,477,0,9987,737,1,0,0,
0,9988,9989,5,134,0,0,9989,9990,5,878,0,0,9990,9991,3,950,475,0,9991,739,
1,0,0,0,9992,9993,5,312,0,0,9993,9994,5,701,0,0,9994,741,1,0,0,0,9995,9996,
5,312,0,0,9996,9997,5,236,0,0,9997,743,1,0,0,0,9998,9999,5,312,0,0,9999,
10000,5,429,0,0,10000,10001,5,236,0,0,10001,745,1,0,0,0,10002,10003,5,472,
0,0,10003,10004,5,560,0,0,10004,747,1,0,0,0,10005,10006,7,69,0,0,10006,749,
1,0,0,0,10007,10037,3,752,376,0,10008,10037,3,754,377,0,10009,10037,3,756,
378,0,10010,10037,3,758,379,0,10011,10037,3,760,380,0,10012,10037,3,762,
381,0,10013,10037,3,764,382,0,10014,10037,3,766,383,0,10015,10037,3,768,
384,0,10016,10037,3,770,385,0,10017,10037,3,772,386,0,10018,10037,3,790,
395,0,10019,10037,3,774,387,0,10020,10037,3,776,388,0,10021,10037,3,778,
389,0,10022,10037,3,780,390,0,10023,10037,3,782,391,0,10024,10037,3,784,
392,0,10025,10037,3,786,393,0,10026,10037,3,788,394,0,10027,10037,3,792,
396,0,10028,10037,3,528,264,0,10029,10037,3,794,397,0,10030,10037,3,796,
398,0,10031,10037,3,798,399,0,10032,10037,3,800,400,0,10033,10037,3,802,
401,0,10034,10037,3,804,402,0,10035,10037,3,806,403,0,10036,10007,1,0,0,
0,10036,10008,1,0,0,0,10036,10009,1,0,0,0,10036,10010,1,0,0,0,10036,10011,
1,0,0,0,10036,10012,1,0,0,0,10036,10013,1,0,0,0,10036,10014,1,0,0,0,10036,
10015,1,0,0,0,10036,10016,1,0,0,0,10036,10017,1,0,0,0,10036,10018,1,0,0,
0,10036,10019,1,0,0,0,10036,10020,1,0,0,0,10036,10021,1,0,0,0,10036,10022,
1,0,0,0,10036,10023,1,0,0,0,10036,10024,1,0,0,0,10036,10025,1,0,0,0,10036,
10026,1,0,0,0,10036,10027,1,0,0,0,10036,10028,1,0,0,0,10036,10029,1,0,0,
0,10036,10030,1,0,0,0,10036,10031,1,0,0,0,10036,10032,1,0,0,0,10036,10033,
1,0,0,0,10036,10034,1,0,0,0,10036,10035,1,0,0,0,10037,751,1,0,0,0,10038,
10039,3,748,374,0,10039,10040,5,15,0,0,10040,10041,3,956,478,0,10041,753,
1,0,0,0,10042,10043,3,748,374,0,10043,10044,5,164,0,0,10044,10045,3,956,
478,0,10045,755,1,0,0,0,10046,10047,3,748,374,0,10047,10048,5,201,0,0,10048,
10049,5,708,0,0,10049,10050,3,956,478,0,10050,757,1,0,0,0,10051,10052,3,
748,374,0,10052,10053,5,231,0,0,10053,10054,5,708,0,0,10054,10055,3,956,
478,0,10055,759,1,0,0,0,10056,10058,3,748,374,0,10057,10059,5,240,0,0,10058,
10057,1,0,0,0,10058,10059,1,0,0,0,10059,10060,1,0,0,0,10060,10061,5,708,
0,0,10061,10065,3,982,491,0,10062,10063,5,764,0,0,10063,10064,5,878,0,0,
10064,10066,7,70,0,0,10065,10062,1,0,0,0,10065,10066,1,0,0,0,10066,761,1,
0,0,0,10067,10068,3,748,374,0,10068,10069,5,261,0,0,10069,10070,5,272,0,
0,10070,10071,3,956,478,0,10071,763,1,0,0,0,10072,10073,3,748,374,0,10073,
10074,5,278,0,0,10074,10075,3,982,491,0,10075,10076,3,714,357,0,10076,765,
1,0,0,0,10077,10079,3,748,374,0,10078,10080,7,66,0,0,10079,10078,1,0,0,0,
10079,10080,1,0,0,0,10080,10081,1,0,0,0,10081,10082,5,337,0,0,10082,10083,
3,956,478,0,10083,767,1,0,0,0,10084,10085,3,748,374,0,10085,10086,5,384,
0,0,10086,10087,5,517,0,0,10087,10088,3,956,478,0,10088,769,1,0,0,0,10089,
10090,3,748,374,0,10090,10091,5,391,0,0,10091,10092,5,793,0,0,10092,10093,
3,982,491,0,10093,771,1,0,0,0,10094,10095,3,748,374,0,10095,10096,5,419,
0,0,10096,10097,5,517,0,0,10097,10098,3,956,478,0,10098,773,1,0,0,0,10099,
10100,3,748,374,0,10100,10101,5,512,0,0,10101,10102,3,982,491,0,10102,775,
1,0,0,0,10103,10104,3,748,374,0,10104,10105,5,527,0,0,10105,10106,3,982,
491,0,10106,10107,3,714,357,0,10107,777,1,0,0,0,10108,10109,3,748,374,0,
10109,10114,5,576,0,0,10110,10115,5,869,0,0,10111,10112,5,361,0,0,10112,
10113,5,888,0,0,10113,10115,5,889,0,0,10114,10110,1,0,0,0,10114,10111,1,
0,0,0,10115,779,1,0,0,0,10116,10117,3,748,374,0,10117,10118,5,593,0,0,10118,
10119,5,5,0,0,10119,10120,5,517,0,0,10120,10121,3,956,478,0,10121,781,1,
0,0,0,10122,10123,3,748,374,0,10123,10124,5,623,0,0,10124,10125,3,932,466,
0,10125,783,1,0,0,0,10126,10127,3,748,374,0,10127,10128,5,627,0,0,10128,
10129,5,470,0,0,10129,10130,5,465,0,0,10130,10131,3,982,491,0,10131,785,
1,0,0,0,10132,10133,3,748,374,0,10133,10134,5,634,0,0,10134,10135,3,982,
491,0,10135,787,1,0,0,0,10136,10137,3,748,374,0,10137,10138,5,636,0,0,10138,
10139,5,517,0,0,10139,10140,3,982,491,0,10140,789,1,0,0,0,10141,10142,3,
748,374,0,10142,10143,5,493,0,0,10143,10144,5,517,0,0,10144,10145,3,982,
491,0,10145,791,1,0,0,0,10146,10147,3,748,374,0,10147,10148,5,642,0,0,10148,
10149,3,956,478,0,10149,793,1,0,0,0,10150,10151,3,748,374,0,10151,10152,
5,690,0,0,10152,10153,3,982,491,0,10153,795,1,0,0,0,10154,10155,3,748,374,
0,10155,10156,5,708,0,0,10156,10160,3,982,491,0,10157,10158,5,764,0,0,10158,
10159,5,878,0,0,10159,10161,7,70,0,0,10160,10157,1,0,0,0,10160,10161,1,0,
0,0,10161,797,1,0,0,0,10162,10163,3,748,374,0,10163,10164,5,718,0,0,10164,
10165,3,982,491,0,10165,799,1,0,0,0,10166,10167,3,748,374,0,10167,10168,
5,750,0,0,10168,10169,3,986,493,0,10169,801,1,0,0,0,10170,10171,3,748,374,
0,10171,10172,5,777,0,0,10172,10173,3,956,478,0,10173,803,1,0,0,0,10174,
10175,3,748,374,0,10175,10176,5,793,0,0,10176,10177,3,982,491,0,10177,805,
1,0,0,0,10178,10179,3,748,374,0,10179,10180,5,796,0,0,10180,10181,3,956,
478,0,10181,807,1,0,0,0,10182,10237,3,810,405,0,10183,10237,3,812,406,0,
10184,10237,3,814,407,0,10185,10237,3,816,408,0,10186,10237,3,822,411,0,
10187,10237,3,824,412,0,10188,10237,3,826,413,0,10189,10237,3,828,414,0,
10190,10237,3,830,415,0,10191,10237,3,832,416,0,10192,10237,3,834,417,0,
10193,10237,3,836,418,0,10194,10237,3,838,419,0,10195,10237,3,840,420,0,
10196,10237,3,842,421,0,10197,10237,3,844,422,0,10198,10237,3,846,423,0,
10199,10237,3,850,425,0,10200,10237,3,852,426,0,10201,10237,3,854,427,0,
10202,10237,3,856,428,0,10203,10237,3,862,431,0,10204,10237,3,864,432,0,
10205,10237,3,866,433,0,10206,10237,3,868,434,0,10207,10237,3,872,436,0,
10208,10237,3,900,450,0,10209,10237,3,874,437,0,10210,10237,3,876,438,0,
10211,10237,3,878,439,0,10212,10237,3,880,440,0,10213,10237,3,882,441,0,
10214,10237,3,884,442,0,10215,10237,3,886,443,0,10216,10237,3,888,444,0,
10217,10237,3,890,445,0,10218,10237,3,892,446,0,10219,10237,3,894,447,0,
10220,10237,3,896,448,0,10221,10237,3,898,449,0,10222,10237,3,902,451,0,
10223,10237,3,904,452,0,10224,10237,3,906,453,0,10225,10237,3,530,265,0,
10226,10237,3,908,454,0,10227,10237,3,910,455,0,10228,10237,3,912,456,0,
10229,10237,3,914,457,0,10230,10237,3,916,458,0,10231,10237,3,918,459,0,
10232,10237,3,920,460,0,10233,10237,3,922,461,0,10234,10237,3,924,462,0,
10235,10237,3,926,463,0,10236,10182,1,0,0,0,10236,10183,1,0,0,0,10236,10184,
1,0,0,0,10236,10185,1,0,0,0,10236,10186,1,0,0,0,10236,10187,1,0,0,0,10236,
10188,1,0,0,0,10236,10189,1,0,0,0,10236,10190,1,0,0,0,10236,10191,1,0,0,
0,10236,10192,1,0,0,0,10236,10193,1,0,0,0,10236,10194,1,0,0,0,10236,10195,
1,0,0,0,10236,10196,1,0,0,0,10236,10197,1,0,0,0,10236,10198,1,0,0,0,10236,
10199,1,0,0,0,10236,10200,1,0,0,0,10236,10201,1,0,0,0,10236,10202,1,0,0,
0,10236,10203,1,0,0,0,10236,10204,1,0,0,0,10236,10205,1,0,0,0,10236,10206,
1,0,0,0,10236,10207,1,0,0,0,10236,10208,1,0,0,0,10236,10209,1,0,0,0,10236,
10210,1,0,0,0,10236,10211,1,0,0,0,10236,10212,1,0,0,0,10236,10213,1,0,0,
0,10236,10214,1,0,0,0,10236,10215,1,0,0,0,10236,10216,1,0,0,0,10236,10217,
1,0,0,0,10236,10218,1,0,0,0,10236,10219,1,0,0,0,10236,10220,1,0,0,0,10236,
10221,1,0,0,0,10236,10222,1,0,0,0,10236,10223,1,0,0,0,10236,10224,1,0,0,
0,10236,10225,1,0,0,0,10236,10226,1,0,0,0,10236,10227,1,0,0,0,10236,10228,
1,0,0,0,10236,10229,1,0,0,0,10236,10230,1,0,0,0,10236,10231,1,0,0,0,10236,
10232,1,0,0,0,10236,10233,1,0,0,0,10236,10234,1,0,0,0,10236,10235,1,0,0,
0,10237,809,1,0,0,0,10238,10240,5,645,0,0,10239,10241,5,722,0,0,10240,10239,
1,0,0,0,10240,10241,1,0,0,0,10241,10242,1,0,0,0,10242,10244,5,16,0,0,10243,
10245,3,928,464,0,10244,10243,1,0,0,0,10244,10245,1,0,0,0,10245,10258,1,
0,0,0,10246,10256,5,325,0,0,10247,10257,5,6,0,0,10248,10250,5,164,0,0,10249,
10251,3,956,478,0,10250,10249,1,0,0,0,10250,10251,1,0,0,0,10251,10257,1,
0,0,0,10252,10254,5,623,0,0,10253,10255,3,932,466,0,10254,10253,1,0,0,0,
10254,10255,1,0,0,0,10255,10257,1,0,0,0,10256,10247,1,0,0,0,10256,10248,
1,0,0,0,10256,10252,1,0,0,0,10257,10259,1,0,0,0,10258,10246,1,0,0,0,10258,
10259,1,0,0,0,10259,10261,1,0,0,0,10260,10262,3,818,409,0,10261,10260,1,
0,0,0,10261,10262,1,0,0,0,10262,10264,1,0,0,0,10263,10265,3,820,410,0,10264,
10263,1,0,0,0,10264,10265,1,0,0,0,10265,811,1,0,0,0,10266,10267,5,645,0,
0,10267,10269,5,109,0,0,10268,10270,3,928,464,0,10269,10268,1,0,0,0,10269,
10270,1,0,0,0,10270,10288,1,0,0,0,10271,10286,5,325,0,0,10272,10287,5,6,
0,0,10273,10275,5,164,0,0,10274,10276,3,956,478,0,10275,10274,1,0,0,0,10275,
10276,1,0,0,0,10276,10287,1,0,0,0,10277,10279,5,623,0,0,10278,10280,3,932,
466,0,10279,10278,1,0,0,0,10279,10280,1,0,0,0,10280,10287,1,0,0,0,10281,
10287,5,708,0,0,10282,10284,5,708,0,0,10283,10282,1,0,0,0,10283,10284,1,
0,0,0,10284,10285,1,0,0,0,10285,10287,3,982,491,0,10286,10272,1,0,0,0,10286,
10273,1,0,0,0,10286,10277,1,0,0,0,10286,10281,1,0,0,0,10286,10283,1,0,0,
0,10287,10289,1,0,0,0,10288,10271,1,0,0,0,10288,10289,1,0,0,0,10289,813,
1,0,0,0,10290,10291,5,645,0,0,10291,10293,5,133,0,0,10292,10294,3,928,464,
0,10293,10292,1,0,0,0,10293,10294,1,0,0,0,10294,10317,1,0,0,0,10295,10315,
5,325,0,0,10296,10316,5,6,0,0,10297,10299,5,164,0,0,10298,10300,3,956,478,
0,10299,10298,1,0,0,0,10299,10300,1,0,0,0,10300,10316,1,0,0,0,10301,10303,
5,623,0,0,10302,10304,3,932,466,0,10303,10302,1,0,0,0,10303,10304,1,0,0,
0,10304,10316,1,0,0,0,10305,10316,5,708,0,0,10306,10308,5,708,0,0,10307,
10306,1,0,0,0,10307,10308,1,0,0,0,10308,10309,1,0,0,0,10309,10316,3,982,
491,0,10310,10316,5,793,0,0,10311,10313,5,793,0,0,10312,10311,1,0,0,0,10312,
10313,1,0,0,0,10313,10314,1,0,0,0,10314,10316,3,982,491,0,10315,10296,1,
0,0,0,10315,10297,1,0,0,0,10315,10301,1,0,0,0,10315,10305,1,0,0,0,10315,
10307,1,0,0,0,10315,10310,1,0,0,0,10315,10312,1,0,0,0,10316,10318,1,0,0,
0,10317,10295,1,0,0,0,10317,10318,1,0,0,0,10318,815,1,0,0,0,10319,10320,
5,645,0,0,10320,10322,5,143,0,0,10321,10323,3,928,464,0,10322,10321,1,0,
0,0,10322,10323,1,0,0,0,10323,817,1,0,0,0,10324,10325,5,676,0,0,10325,10326,
5,805,0,0,10326,10327,3,950,475,0,10327,819,1,0,0,0,10328,10329,5,369,0,
0,10329,10332,3,986,493,0,10330,10331,5,276,0,0,10331,10333,3,950,475,0,
10332,10330,1,0,0,0,10332,10333,1,0,0,0,10333,821,1,0,0,0,10334,10336,5,
645,0,0,10335,10337,5,722,0,0,10336,10335,1,0,0,0,10336,10337,1,0,0,0,10337,
10338,1,0,0,0,10338,10340,5,165,0,0,10339,10341,5,309,0,0,10340,10339,1,
0,0,0,10340,10341,1,0,0,0,10341,10343,1,0,0,0,10342,10344,3,928,464,0,10343,
10342,1,0,0,0,10343,10344,1,0,0,0,10344,10346,1,0,0,0,10345,10347,3,818,
409,0,10346,10345,1,0,0,0,10346,10347,1,0,0,0,10347,10349,1,0,0,0,10348,
10350,3,820,410,0,10349,10348,1,0,0,0,10349,10350,1,0,0,0,10350,823,1,0,
0,0,10351,10352,5,645,0,0,10352,10353,5,165,0,0,10353,10354,5,325,0,0,10354,
10355,5,256,0,0,10355,10356,5,297,0,0,10356,10357,3,956,478,0,10357,825,
1,0,0,0,10358,10359,5,645,0,0,10359,10360,5,165,0,0,10360,10361,5,325,0,
0,10361,10362,5,563,0,0,10362,10363,5,297,0,0,10363,10364,3,956,478,0,10364,
827,1,0,0,0,10365,10366,5,645,0,0,10366,10367,5,184,0,0,10367,10382,5,48,
0,0,10368,10369,5,645,0,0,10369,10370,5,184,0,0,10370,10371,5,48,0,0,10371,
10372,5,96,0,0,10372,10373,5,777,0,0,10373,10382,3,956,478,0,10374,10375,
5,645,0,0,10375,10376,5,184,0,0,10376,10377,5,48,0,0,10377,10378,5,745,0,
0,10378,10379,5,630,0,0,10379,10380,5,337,0,0,10380,10382,3,956,478,0,10381,
10365,1,0,0,0,10381,10368,1,0,0,0,10381,10374,1,0,0,0,10382,829,1,0,0,0,
10383,10384,5,645,0,0,10384,10385,5,201,0,0,10385,10387,5,711,0,0,10386,
10388,3,928,464,0,10387,10386,1,0,0,0,10387,10388,1,0,0,0,10388,10403,1,
0,0,0,10389,10401,5,325,0,0,10390,10402,5,6,0,0,10391,10393,5,164,0,0,10392,
10394,3,956,478,0,10393,10392,1,0,0,0,10393,10394,1,0,0,0,10394,10402,1,
0,0,0,10395,10397,5,623,0,0,10396,10395,1,0,0,0,10396,10397,1,0,0,0,10397,
10399,1,0,0,0,10398,10400,3,932,466,0,10399,10398,1,0,0,0,10399,10400,1,
0,0,0,10400,10402,1,0,0,0,10401,10390,1,0,0,0,10401,10391,1,0,0,0,10401,
10396,1,0,0,0,10402,10404,1,0,0,0,10403,10389,1,0,0,0,10403,10404,1,0,0,
0,10404,10406,1,0,0,0,10405,10407,3,818,409,0,10406,10405,1,0,0,0,10406,
10407,1,0,0,0,10407,10409,1,0,0,0,10408,10410,3,820,410,0,10409,10408,1,
0,0,0,10409,10410,1,0,0,0,10410,831,1,0,0,0,10411,10413,5,645,0,0,10412,
10414,5,722,0,0,10413,10412,1,0,0,0,10413,10414,1,0,0,0,10414,10415,1,0,
0,0,10415,10416,5,231,0,0,10416,10418,5,711,0,0,10417,10419,3,928,464,0,
10418,10417,1,0,0,0,10418,10419,1,0,0,0,10419,10434,1,0,0,0,10420,10432,
5,325,0,0,10421,10433,5,6,0,0,10422,10424,5,164,0,0,10423,10425,3,956,478,
0,10424,10423,1,0,0,0,10424,10425,1,0,0,0,10425,10433,1,0,0,0,10426,10428,
5,623,0,0,10427,10426,1,0,0,0,10427,10428,1,0,0,0,10428,10430,1,0,0,0,10429,
10431,3,932,466,0,10430,10429,1,0,0,0,10430,10431,1,0,0,0,10431,10433,1,
0,0,0,10432,10421,1,0,0,0,10432,10422,1,0,0,0,10432,10427,1,0,0,0,10433,
10435,1,0,0,0,10434,10420,1,0,0,0,10434,10435,1,0,0,0,10435,10437,1,0,0,
0,10436,10438,3,818,409,0,10437,10436,1,0,0,0,10437,10438,1,0,0,0,10438,
10440,1,0,0,0,10439,10441,3,820,410,0,10440,10439,1,0,0,0,10440,10441,1,
0,0,0,10441,833,1,0,0,0,10442,10443,5,645,0,0,10443,10444,5,240,0,0,10444,
10446,5,279,0,0,10445,10447,3,928,464,0,10446,10445,1,0,0,0,10446,10447,
1,0,0,0,10447,835,1,0,0,0,10448,10450,5,645,0,0,10449,10451,5,722,0,0,10450,
10449,1,0,0,0,10450,10451,1,0,0,0,10451,10452,1,0,0,0,10452,10453,5,240,
0,0,10453,10455,5,711,0,0,10454,10456,3,928,464,0,10455,10454,1,0,0,0,10455,
10456,1,0,0,0,10456,10471,1,0,0,0,10457,10469,5,325,0,0,10458,10470,5,6,
0,0,10459,10461,5,164,0,0,10460,10462,3,956,478,0,10461,10460,1,0,0,0,10461,
10462,1,0,0,0,10462,10470,1,0,0,0,10463,10465,5,623,0,0,10464,10463,1,0,
0,0,10464,10465,1,0,0,0,10465,10467,1,0,0,0,10466,10468,3,932,466,0,10467,
10466,1,0,0,0,10467,10468,1,0,0,0,10468,10470,1,0,0,0,10469,10458,1,0,0,
0,10469,10459,1,0,0,0,10469,10464,1,0,0,0,10470,10472,1,0,0,0,10471,10457,
1,0,0,0,10471,10472,1,0,0,0,10472,10474,1,0,0,0,10473,10475,3,818,409,0,
10474,10473,1,0,0,0,10474,10475,1,0,0,0,10475,10477,1,0,0,0,10476,10478,
3,820,410,0,10477,10476,1,0,0,0,10477,10478,1,0,0,0,10478,837,1,0,0,0,10479,
10480,5,645,0,0,10480,10481,5,256,0,0,10481,10485,5,299,0,0,10482,10483,
5,325,0,0,10483,10484,5,6,0,0,10484,10486,3,956,478,0,10485,10482,1,0,0,
0,10485,10486,1,0,0,0,10486,839,1,0,0,0,10487,10488,5,645,0,0,10488,10489,
5,261,0,0,10489,10491,5,273,0,0,10490,10492,3,928,464,0,10491,10490,1,0,
0,0,10491,10492,1,0,0,0,10492,10504,1,0,0,0,10493,10502,5,325,0,0,10494,
10503,5,6,0,0,10495,10503,5,164,0,0,10496,10497,5,164,0,0,10497,10503,3,
956,478,0,10498,10503,5,623,0,0,10499,10500,5,623,0,0,10500,10503,3,932,
466,0,10501,10503,3,932,466,0,10502,10494,1,0,0,0,10502,10495,1,0,0,0,10502,
10496,1,0,0,0,10502,10498,1,0,0,0,10502,10499,1,0,0,0,10502,10501,1,0,0,
0,10503,10505,1,0,0,0,10504,10493,1,0,0,0,10504,10505,1,0,0,0,10505,841,
1,0,0,0,10506,10507,5,645,0,0,10507,10509,5,279,0,0,10508,10510,3,928,464,
0,10509,10508,1,0,0,0,10509,10510,1,0,0,0,10510,10522,1,0,0,0,10511,10520,
5,325,0,0,10512,10521,5,6,0,0,10513,10521,5,164,0,0,10514,10515,5,164,0,
0,10515,10521,3,956,478,0,10516,10521,5,623,0,0,10517,10518,5,623,0,0,10518,
10521,3,956,478,0,10519,10521,3,956,478,0,10520,10512,1,0,0,0,10520,10513,
1,0,0,0,10520,10514,1,0,0,0,10520,10516,1,0,0,0,10520,10517,1,0,0,0,10520,
10519,1,0,0,0,10521,10523,1,0,0,0,10522,10511,1,0,0,0,10522,10523,1,0,0,
0,10523,843,1,0,0,0,10524,10525,5,645,0,0,10525,10526,5,293,0,0,10526,10528,
5,8,0,0,10527,10529,3,928,464,0,10528,10527,1,0,0,0,10528,10529,1,0,0,0,
10529,845,1,0,0,0,10530,10531,5,645,0,0,10531,10533,5,296,0,0,10532,10534,
3,848,424,0,10533,10532,1,0,0,0,10533,10534,1,0,0,0,10534,10548,1,0,0,0,
10535,10536,5,645,0,0,10536,10537,5,280,0,0,10537,10538,5,296,0,0,10538,
10539,5,325,0,0,10539,10540,5,623,0,0,10540,10548,3,932,466,0,10541,10542,
5,645,0,0,10542,10543,5,280,0,0,10543,10544,5,296,0,0,10544,10545,5,325,
0,0,10545,10546,5,164,0,0,10546,10548,3,956,478,0,10547,10530,1,0,0,0,10547,
10535,1,0,0,0,10547,10541,1,0,0,0,10548,847,1,0,0,0,10549,10550,5,465,0,
0,10550,10571,5,6,0,0,10551,10552,5,465,0,0,10552,10553,3,934,467,0,10553,
10554,3,982,491,0,10554,10571,1,0,0,0,10555,10562,5,745,0,0,10556,10557,
5,587,0,0,10557,10563,3,956,478,0,10558,10559,5,777,0,0,10559,10563,3,956,
478,0,10560,10561,5,642,0,0,10561,10563,3,956,478,0,10562,10556,1,0,0,0,
10562,10558,1,0,0,0,10562,10560,1,0,0,0,10563,10571,1,0,0,0,10564,10565,
5,458,0,0,10565,10566,5,587,0,0,10566,10571,3,956,478,0,10567,10568,5,458,
0,0,10568,10569,5,642,0,0,10569,10571,3,956,478,0,10570,10549,1,0,0,0,10570,
10551,1,0,0,0,10570,10555,1,0,0,0,10570,10564,1,0,0,0,10570,10567,1,0,0,
0,10571,849,1,0,0,0,10572,10574,5,645,0,0,10573,10575,7,66,0,0,10574,10573,
1,0,0,0,10574,10575,1,0,0,0,10575,10576,1,0,0,0,10576,10578,5,338,0,0,10577,
10579,3,928,464,0,10578,10577,1,0,0,0,10578,10579,1,0,0,0,10579,851,1,0,
0,0,10580,10581,5,645,0,0,10581,10584,5,375,0,0,10582,10583,5,325,0,0,10583,
10585,5,6,0,0,10584,10582,1,0,0,0,10584,10585,1,0,0,0,10585,853,1,0,0,0,
10586,10587,5,645,0,0,10587,10588,5,383,0,0,10588,10590,5,8,0,0,10589,10591,
3,928,464,0,10590,10589,1,0,0,0,10590,10591,1,0,0,0,10591,855,1,0,0,0,10592,
10593,5,645,0,0,10593,10594,5,384,0,0,10594,10596,5,516,0,0,10595,10597,
3,928,464,0,10596,10595,1,0,0,0,10596,10597,1,0,0,0,10597,10599,1,0,0,0,
10598,10600,3,858,429,0,10599,10598,1,0,0,0,10599,10600,1,0,0,0,10600,857,
1,0,0,0,10601,10610,5,325,0,0,10602,10611,5,6,0,0,10603,10611,5,164,0,0,
10604,10605,5,164,0,0,10605,10611,3,956,478,0,10606,10611,5,623,0,0,10607,
10608,5,623,0,0,10608,10611,3,932,466,0,10609,10611,3,932,466,0,10610,10602,
1,0,0,0,10610,10603,1,0,0,0,10610,10604,1,0,0,0,10610,10606,1,0,0,0,10610,
10607,1,0,0,0,10610,10609,1,0,0,0,10611,859,1,0,0,0,10612,10625,5,325,0,
0,10613,10626,5,6,0,0,10614,10616,5,164,0,0,10615,10617,3,956,478,0,10616,
10615,1,0,0,0,10616,10617,1,0,0,0,10617,10626,1,0,0,0,10618,10620,5,623,
0,0,10619,10621,3,932,466,0,10620,10619,1,0,0,0,10620,10621,1,0,0,0,10621,
10626,1,0,0,0,10622,10626,5,708,0,0,10623,10624,5,708,0,0,10624,10626,3,
982,491,0,10625,10613,1,0,0,0,10625,10614,1,0,0,0,10625,10618,1,0,0,0,10625,
10622,1,0,0,0,10625,10623,1,0,0,0,10626,861,1,0,0,0,10627,10628,5,645,0,
0,10628,10629,5,391,0,0,10629,10631,5,794,0,0,10630,10632,3,928,464,0,10631,
10630,1,0,0,0,10631,10632,1,0,0,0,10632,10634,1,0,0,0,10633,10635,3,858,
429,0,10634,10633,1,0,0,0,10634,10635,1,0,0,0,10635,863,1,0,0,0,10636,10637,
5,645,0,0,10637,10638,5,419,0,0,10638,10639,5,516,0,0,10639,865,1,0,0,0,
10640,10641,5,645,0,0,10641,10643,5,456,0,0,10642,10644,3,928,464,0,10643,
10642,1,0,0,0,10643,10644,1,0,0,0,10644,10646,1,0,0,0,10645,10647,3,858,
429,0,10646,10645,1,0,0,0,10646,10647,1,0,0,0,10647,867,1,0,0,0,10648,10649,
5,645,0,0,10649,10650,5,477,0,0,10650,10652,5,8,0,0,10651,10653,3,928,464,
0,10652,10651,1,0,0,0,10652,10653,1,0,0,0,10653,869,1,0,0,0,10654,10655,
7,71,0,0,10655,871,1,0,0,0,10656,10657,5,645,0,0,10657,10659,5,487,0,0,10658,
10660,3,928,464,0,10659,10658,1,0,0,0,10659,10660,1,0,0,0,10660,10676,1,
0,0,0,10661,10674,3,870,435,0,10662,10675,5,636,0,0,10663,10675,5,6,0,0,
10664,10666,5,777,0,0,10665,10667,3,956,478,0,10666,10665,1,0,0,0,10666,
10667,1,0,0,0,10667,10675,1,0,0,0,10668,10670,7,72,0,0,10669,10671,3,956,
478,0,10670,10669,1,0,0,0,10670,10671,1,0,0,0,10671,10675,1,0,0,0,10672,
10673,5,708,0,0,10673,10675,3,982,491,0,10674,10662,1,0,0,0,10674,10663,
1,0,0,0,10674,10664,1,0,0,0,10674,10668,1,0,0,0,10674,10672,1,0,0,0,10675,
10677,1,0,0,0,10676,10661,1,0,0,0,10676,10677,1,0,0,0,10677,873,1,0,0,0,
10678,10679,5,645,0,0,10679,10681,5,513,0,0,10680,10682,3,928,464,0,10681,
10680,1,0,0,0,10681,10682,1,0,0,0,10682,10684,1,0,0,0,10683,10685,3,858,
429,0,10684,10683,1,0,0,0,10684,10685,1,0,0,0,10685,875,1,0,0,0,10686,10688,
5,645,0,0,10687,10689,5,722,0,0,10688,10687,1,0,0,0,10688,10689,1,0,0,0,
10689,10690,1,0,0,0,10690,10691,5,524,0,0,10691,10693,5,354,0,0,10692,10694,
3,860,430,0,10693,10692,1,0,0,0,10693,10694,1,0,0,0,10694,877,1,0,0,0,10695,
10696,5,645,0,0,10696,10698,5,528,0,0,10697,10699,3,928,464,0,10698,10697,
1,0,0,0,10698,10699,1,0,0,0,10699,10701,1,0,0,0,10700,10702,3,858,429,0,
10701,10700,1,0,0,0,10701,10702,1,0,0,0,10702,879,1,0,0,0,10703,10704,5,
645,0,0,10704,10706,5,554,0,0,10705,10707,3,928,464,0,10706,10705,1,0,0,
0,10706,10707,1,0,0,0,10707,881,1,0,0,0,10708,10709,5,645,0,0,10709,10710,
5,563,0,0,10710,10712,5,8,0,0,10711,10713,3,928,464,0,10712,10711,1,0,0,
0,10712,10713,1,0,0,0,10713,883,1,0,0,0,10714,10715,5,645,0,0,10715,10716,
5,563,0,0,10716,10718,5,165,0,0,10717,10719,3,928,464,0,10718,10717,1,0,
0,0,10718,10719,1,0,0,0,10719,10726,1,0,0,0,10720,10721,5,805,0,0,10721,
10722,5,524,0,0,10722,10723,3,930,465,0,10723,10724,5,884,0,0,10724,10725,
3,956,478,0,10725,10727,1,0,0,0,10726,10720,1,0,0,0,10726,10727,1,0,0,0,
10727,885,1,0,0,0,10728,10729,5,645,0,0,10729,10730,5,563,0,0,10730,10734,
5,299,0,0,10731,10732,5,325,0,0,10732,10733,5,6,0,0,10733,10735,3,956,478,
0,10734,10731,1,0,0,0,10734,10735,1,0,0,0,10735,887,1,0,0,0,10736,10737,
5,645,0,0,10737,10738,5,569,0,0,10738,10740,5,412,0,0,10739,10741,3,928,
464,0,10740,10739,1,0,0,0,10740,10741,1,0,0,0,10741,889,1,0,0,0,10742,10743,
5,645,0,0,10743,10745,5,588,0,0,10744,10746,3,928,464,0,10745,10744,1,0,
0,0,10745,10746,1,0,0,0,10746,891,1,0,0,0,10747,10748,5,645,0,0,10748,10749,
5,593,0,0,10749,10750,5,5,0,0,10750,10752,5,516,0,0,10751,10753,3,928,464,
0,10752,10751,1,0,0,0,10752,10753,1,0,0,0,10753,10755,1,0,0,0,10754,10756,
3,858,429,0,10755,10754,1,0,0,0,10755,10756,1,0,0,0,10756,893,1,0,0,0,10757,
10759,5,645,0,0,10758,10760,5,722,0,0,10759,10758,1,0,0,0,10759,10760,1,
0,0,0,10760,10761,1,0,0,0,10761,10763,5,624,0,0,10762,10764,5,309,0,0,10763,
10762,1,0,0,0,10763,10764,1,0,0,0,10764,10766,1,0,0,0,10765,10767,3,928,
464,0,10766,10765,1,0,0,0,10766,10767,1,0,0,0,10767,10776,1,0,0,0,10768,
10774,5,325,0,0,10769,10775,5,6,0,0,10770,10772,5,164,0,0,10771,10773,3,
956,478,0,10772,10771,1,0,0,0,10772,10773,1,0,0,0,10773,10775,1,0,0,0,10774,
10769,1,0,0,0,10774,10770,1,0,0,0,10775,10777,1,0,0,0,10776,10768,1,0,0,
0,10776,10777,1,0,0,0,10777,10779,1,0,0,0,10778,10780,3,818,409,0,10779,
10778,1,0,0,0,10779,10780,1,0,0,0,10780,10782,1,0,0,0,10781,10783,3,820,
410,0,10782,10781,1,0,0,0,10782,10783,1,0,0,0,10783,895,1,0,0,0,10784,10785,
5,645,0,0,10785,10787,5,635,0,0,10786,10788,3,928,464,0,10787,10786,1,0,
0,0,10787,10788,1,0,0,0,10788,10790,1,0,0,0,10789,10791,3,858,429,0,10790,
10789,1,0,0,0,10790,10791,1,0,0,0,10791,897,1,0,0,0,10792,10793,5,645,0,
0,10793,10794,5,636,0,0,10794,10795,5,516,0,0,10795,899,1,0,0,0,10796,10797,
5,645,0,0,10797,10798,5,493,0,0,10798,10799,5,516,0,0,10799,901,1,0,0,0,
10800,10801,5,645,0,0,10801,10803,5,643,0,0,10802,10804,3,928,464,0,10803,
10802,1,0,0,0,10803,10804,1,0,0,0,10804,903,1,0,0,0,10805,10806,5,645,0,
0,10806,10807,5,643,0,0,10807,10808,5,325,0,0,10808,10809,5,256,0,0,10809,
10810,5,297,0,0,10810,10811,3,956,478,0,10811,905,1,0,0,0,10812,10813,5,
645,0,0,10813,10814,5,643,0,0,10814,10815,5,325,0,0,10815,10816,5,563,0,
0,10816,10817,5,297,0,0,10817,10818,3,956,478,0,10818,907,1,0,0,0,10819,
10820,5,645,0,0,10820,10822,5,691,0,0,10821,10823,3,928,464,0,10822,10821,
1,0,0,0,10822,10823,1,0,0,0,10823,10825,1,0,0,0,10824,10826,3,858,429,0,
10825,10824,1,0,0,0,10825,10826,1,0,0,0,10826,909,1,0,0,0,10827,10828,5,
645,0,0,10828,10830,5,711,0,0,10829,10831,3,928,464,0,10830,10829,1,0,0,
0,10830,10831,1,0,0,0,10831,10833,1,0,0,0,10832,10834,3,858,429,0,10833,
10832,1,0,0,0,10833,10834,1,0,0,0,10834,911,1,0,0,0,10835,10836,5,645,0,
0,10836,10838,5,716,0,0,10837,10839,3,928,464,0,10838,10837,1,0,0,0,10838,
10839,1,0,0,0,10839,10849,1,0,0,0,10840,10841,5,325,0,0,10841,10850,5,6,
0,0,10842,10850,5,164,0,0,10843,10844,5,164,0,0,10844,10850,3,956,478,0,
10845,10850,5,623,0,0,10846,10847,5,623,0,0,10847,10850,3,932,466,0,10848,
10850,3,932,466,0,10849,10840,1,0,0,0,10849,10842,1,0,0,0,10849,10843,1,
0,0,0,10849,10845,1,0,0,0,10849,10846,1,0,0,0,10849,10848,1,0,0,0,10849,
10850,1,0,0,0,10850,913,1,0,0,0,10851,10853,5,645,0,0,10852,10854,5,722,
0,0,10853,10852,1,0,0,0,10853,10854,1,0,0,0,10854,10855,1,0,0,0,10855,10857,
5,719,0,0,10856,10858,3,928,464,0,10857,10856,1,0,0,0,10857,10858,1,0,0,
0,10858,10873,1,0,0,0,10859,10871,5,325,0,0,10860,10872,5,6,0,0,10861,10863,
5,164,0,0,10862,10864,3,956,478,0,10863,10862,1,0,0,0,10863,10864,1,0,0,
0,10864,10872,1,0,0,0,10865,10867,5,623,0,0,10866,10865,1,0,0,0,10866,10867,
1,0,0,0,10867,10869,1,0,0,0,10868,10870,3,932,466,0,10869,10868,1,0,0,0,
10869,10870,1,0,0,0,10870,10872,1,0,0,0,10871,10860,1,0,0,0,10871,10861,
1,0,0,0,10871,10866,1,0,0,0,10872,10874,1,0,0,0,10873,10859,1,0,0,0,10873,
10874,1,0,0,0,10874,10876,1,0,0,0,10875,10877,3,818,409,0,10876,10875,1,
0,0,0,10876,10877,1,0,0,0,10877,10879,1,0,0,0,10878,10880,3,820,410,0,10879,
10878,1,0,0,0,10879,10880,1,0,0,0,10880,915,1,0,0,0,10881,10882,5,645,0,
0,10882,10885,5,751,0,0,10883,10884,5,325,0,0,10884,10886,5,6,0,0,10885,
10883,1,0,0,0,10885,10886,1,0,0,0,10886,917,1,0,0,0,10887,10888,5,645,0,
0,10888,10889,5,777,0,0,10889,10891,5,279,0,0,10890,10892,3,928,464,0,10891,
10890,1,0,0,0,10891,10892,1,0,0,0,10892,10894,1,0,0,0,10893,10895,3,858,
429,0,10894,10893,1,0,0,0,10894,10895,1,0,0,0,10895,919,1,0,0,0,10896,10898,
5,645,0,0,10897,10899,5,722,0,0,10898,10897,1,0,0,0,10898,10899,1,0,0,0,
10899,10900,1,0,0,0,10900,10902,5,779,0,0,10901,10903,3,928,464,0,10902,
10901,1,0,0,0,10902,10903,1,0,0,0,10903,10907,1,0,0,0,10904,10905,5,676,
0,0,10905,10906,5,805,0,0,10906,10908,3,950,475,0,10907,10904,1,0,0,0,10907,
10908,1,0,0,0,10908,10911,1,0,0,0,10909,10910,5,369,0,0,10910,10912,3,986,
493,0,10911,10909,1,0,0,0,10911,10912,1,0,0,0,10912,10915,1,0,0,0,10913,
10914,5,276,0,0,10914,10916,3,950,475,0,10915,10913,1,0,0,0,10915,10916,
1,0,0,0,10916,921,1,0,0,0,10917,10918,5,645,0,0,10918,10920,5,791,0,0,10919,
10921,3,928,464,0,10920,10919,1,0,0,0,10920,10921,1,0,0,0,10921,923,1,0,
0,0,10922,10924,5,645,0,0,10923,10925,5,722,0,0,10924,10923,1,0,0,0,10924,
10925,1,0,0,0,10925,10926,1,0,0,0,10926,10928,5,794,0,0,10927,10929,3,928,
464,0,10928,10927,1,0,0,0,10928,10929,1,0,0,0,10929,10944,1,0,0,0,10930,
10942,5,325,0,0,10931,10943,5,6,0,0,10932,10934,5,164,0,0,10933,10935,3,
956,478,0,10934,10933,1,0,0,0,10934,10935,1,0,0,0,10935,10943,1,0,0,0,10936,
10938,5,623,0,0,10937,10936,1,0,0,0,10937,10938,1,0,0,0,10938,10940,1,0,
0,0,10939,10941,3,932,466,0,10940,10939,1,0,0,0,10940,10941,1,0,0,0,10941,
10943,1,0,0,0,10942,10931,1,0,0,0,10942,10932,1,0,0,0,10942,10937,1,0,0,
0,10943,10945,1,0,0,0,10944,10930,1,0,0,0,10944,10945,1,0,0,0,10945,10947,
1,0,0,0,10946,10948,3,818,409,0,10947,10946,1,0,0,0,10947,10948,1,0,0,0,
10948,10950,1,0,0,0,10949,10951,3,820,410,0,10950,10949,1,0,0,0,10950,10951,
1,0,0,0,10951,925,1,0,0,0,10952,10953,5,645,0,0,10953,10955,5,797,0,0,10954,
10956,3,928,464,0,10955,10954,1,0,0,0,10955,10956,1,0,0,0,10956,927,1,0,
0,0,10957,10958,5,368,0,0,10958,10959,3,950,475,0,10959,929,1,0,0,0,10960,
10961,3,956,478,0,10961,931,1,0,0,0,10962,10963,3,956,478,0,10963,10964,
5,884,0,0,10964,10965,3,956,478,0,10965,10968,1,0,0,0,10966,10968,3,956,
478,0,10967,10962,1,0,0,0,10967,10966,1,0,0,0,10968,933,1,0,0,0,10969,10970,
5,6,0,0,10970,10982,5,487,0,0,10971,10982,5,165,0,0,10972,10982,5,338,0,
0,10973,10974,5,419,0,0,10974,10982,5,516,0,0,10975,10976,5,569,0,0,10976,
10982,5,412,0,0,10977,10982,5,588,0,0,10978,10982,5,643,0,0,10979,10982,
5,779,0,0,10980,10982,5,797,0,0,10981,10969,1,0,0,0,10981,10971,1,0,0,0,
10981,10972,1,0,0,0,10981,10973,1,0,0,0,10981,10975,1,0,0,0,10981,10977,
1,0,0,0,10981,10978,1,0,0,0,10981,10979,1,0,0,0,10981,10980,1,0,0,0,10982,
935,1,0,0,0,10983,10988,3,934,467,0,10984,10985,5,894,0,0,10985,10987,3,
934,467,0,10986,10984,1,0,0,0,10987,10990,1,0,0,0,10988,10986,1,0,0,0,10988,
10989,1,0,0,0,10989,937,1,0,0,0,10990,10988,1,0,0,0,10991,10992,3,950,475,
0,10992,939,1,0,0,0,10993,10994,3,956,478,0,10994,941,1,0,0,0,10995,10996,
3,956,478,0,10996,943,1,0,0,0,10997,10998,3,956,478,0,10998,945,1,0,0,0,
10999,11000,3,956,478,0,11000,947,1,0,0,0,11001,11002,3,956,478,0,11002,
949,1,0,0,0,11003,11004,5,869,0,0,11004,951,1,0,0,0,11005,11010,3,950,475,
0,11006,11007,5,894,0,0,11007,11009,3,950,475,0,11008,11006,1,0,0,0,11009,
11012,1,0,0,0,11010,11008,1,0,0,0,11010,11011,1,0,0,0,11011,953,1,0,0,0,
11012,11010,1,0,0,0,11013,11020,3,956,478,0,11014,11015,5,310,0,0,11015,
11016,5,888,0,0,11016,11017,3,956,478,0,11017,11018,5,889,0,0,11018,11020,
1,0,0,0,11019,11013,1,0,0,0,11019,11014,1,0,0,0,11020,955,1,0,0,0,11021,
11035,5,861,0,0,11022,11035,5,862,0,0,11023,11035,5,858,0,0,11024,11035,
5,859,0,0,11025,11035,3,958,479,0,11026,11035,3,960,480,0,11027,11035,3,
644,322,0,11028,11035,3,1012,506,0,11029,11035,3,962,481,0,11030,11035,3,
964,482,0,11031,11035,3,966,483,0,11032,11035,3,968,484,0,11033,11035,3,
970,485,0,11034,11021,1,0,0,0,11034,11022,1,0,0,0,11034,11023,1,0,0,0,11034,
11024,1,0,0,0,11034,11025,1,0,0,0,11034,11026,1,0,0,0,11034,11027,1,0,0,
0,11034,11028,1,0,0,0,11034,11029,1,0,0,0,11034,11030,1,0,0,0,11034,11031,
1,0,0,0,11034,11032,1,0,0,0,11034,11033,1,0,0,0,11035,957,1,0,0,0,11036,
11037,7,73,0,0,11037,959,1,0,0,0,11038,11039,7,74,0,0,11039,961,1,0,0,0,
11040,11041,7,75,0,0,11041,963,1,0,0,0,11042,11043,7,76,0,0,11043,965,1,
0,0,0,11044,11057,7,77,0,0,11045,11057,5,291,0,0,11046,11057,5,365,0,0,11047,
11057,5,585,0,0,11048,11057,5,172,0,0,11049,11057,7,78,0,0,11050,11057,5,
665,0,0,11051,11057,5,437,0,0,11052,11057,5,223,0,0,11053,11057,5,145,0,
0,11054,11057,5,130,0,0,11055,11057,5,748,0,0,11056,11044,1,0,0,0,11056,
11045,1,0,0,0,11056,11046,1,0,0,0,11056,11047,1,0,0,0,11056,11048,1,0,0,
0,11056,11049,1,0,0,0,11056,11050,1,0,0,0,11056,11051,1,0,0,0,11056,11052,
1,0,0,0,11056,11053,1,0,0,0,11056,11054,1,0,0,0,11056,11055,1,0,0,0,11057,
967,1,0,0,0,11058,11064,5,112,0,0,11059,11064,5,560,0,0,11060,11064,7,79,
0,0,11061,11064,5,368,0,0,11062,11064,5,317,0,0,11063,11058,1,0,0,0,11063,
11059,1,0,0,0,11063,11060,1,0,0,0,11063,11061,1,0,0,0,11063,11062,1,0,0,
0,11064,969,1,0,0,0,11065,11071,7,80,0,0,11066,11071,7,81,0,0,11067,11071,
5,666,0,0,11068,11071,5,443,0,0,11069,11071,5,313,0,0,11070,11065,1,0,0,
0,11070,11066,1,0,0,0,11070,11067,1,0,0,0,11070,11068,1,0,0,0,11070,11069,
1,0,0,0,11071,971,1,0,0,0,11072,11073,7,82,0,0,11073,973,1,0,0,0,11074,11075,
5,507,0,0,11075,11076,5,878,0,0,11076,11077,3,950,475,0,11077,975,1,0,0,
0,11078,11079,3,956,478,0,11079,11080,5,884,0,0,11080,11082,1,0,0,0,11081,
11078,1,0,0,0,11081,11082,1,0,0,0,11082,11083,1,0,0,0,11083,11084,3,956,
478,0,11084,977,1,0,0,0,11085,11090,3,976,488,0,11086,11087,5,894,0,0,11087,
11089,3,976,488,0,11088,11086,1,0,0,0,11089,11092,1,0,0,0,11090,11088,1,
0,0,0,11090,11091,1,0,0,0,11091,979,1,0,0,0,11092,11090,1,0,0,0,11093,11096,
3,976,488,0,11094,11095,5,134,0,0,11095,11097,3,950,475,0,11096,11094,1,
0,0,0,11096,11097,1,0,0,0,11097,11106,1,0,0,0,11098,11099,5,894,0,0,11099,
11102,3,976,488,0,11100,11101,5,134,0,0,11101,11103,3,950,475,0,11102,11100,
1,0,0,0,11102,11103,1,0,0,0,11103,11105,1,0,0,0,11104,11098,1,0,0,0,11105,
11108,1,0,0,0,11106,11104,1,0,0,0,11106,11107,1,0,0,0,11107,981,1,0,0,0,
11108,11106,1,0,0,0,11109,11110,3,956,478,0,11110,11111,5,884,0,0,11111,
11112,3,956,478,0,11112,11113,5,884,0,0,11113,11114,3,956,478,0,11114,11121,
1,0,0,0,11115,11116,3,956,478,0,11116,11117,5,884,0,0,11117,11118,3,956,
478,0,11118,11121,1,0,0,0,11119,11121,3,956,478,0,11120,11109,1,0,0,0,11120,
11115,1,0,0,0,11120,11119,1,0,0,0,11121,983,1,0,0,0,11122,11129,3,982,491,
0,11123,11124,5,310,0,0,11124,11125,5,888,0,0,11125,11126,3,950,475,0,11126,
11127,5,889,0,0,11127,11129,1,0,0,0,11128,11122,1,0,0,0,11128,11123,1,0,
0,0,11129,985,1,0,0,0,11130,11131,5,870,0,0,11131,987,1,0,0,0,11132,11137,
3,992,496,0,11133,11134,5,894,0,0,11134,11136,3,992,496,0,11135,11133,1,
0,0,0,11136,11139,1,0,0,0,11137,11135,1,0,0,0,11137,11138,1,0,0,0,11138,
989,1,0,0,0,11139,11137,1,0,0,0,11140,11142,3,992,496,0,11141,11143,3,1018,
509,0,11142,11141,1,0,0,0,11142,11143,1,0,0,0,11143,11151,1,0,0,0,11144,
11145,5,894,0,0,11145,11147,3,992,496,0,11146,11148,3,1018,509,0,11147,11146,
1,0,0,0,11147,11148,1,0,0,0,11148,11150,1,0,0,0,11149,11144,1,0,0,0,11150,
11153,1,0,0,0,11151,11149,1,0,0,0,11151,11152,1,0,0,0,11152,991,1,0,0,0,
11153,11151,1,0,0,0,11154,11155,6,496,-1,0,11155,11156,3,982,491,0,11156,
11157,5,884,0,0,11157,11158,5,423,0,0,11158,11179,1,0,0,0,11159,11179,3,
1042,521,0,11160,11179,3,994,497,0,11161,11179,3,1040,520,0,11162,11163,
7,83,0,0,11163,11179,3,992,496,22,11164,11166,5,429,0,0,11165,11164,1,0,
0,0,11166,11167,1,0,0,0,11167,11165,1,0,0,0,11167,11168,1,0,0,0,11168,11169,
1,0,0,0,11169,11179,3,992,496,18,11170,11179,3,1008,504,0,11171,11179,3,
1000,500,0,11172,11179,3,998,499,0,11173,11179,3,1002,501,0,11174,11179,
3,996,498,0,11175,11179,3,1022,511,0,11176,11179,3,1176,588,0,11177,11179,
3,1014,507,0,11178,11154,1,0,0,0,11178,11159,1,0,0,0,11178,11160,1,0,0,0,
11178,11161,1,0,0,0,11178,11162,1,0,0,0,11178,11165,1,0,0,0,11178,11170,
1,0,0,0,11178,11171,1,0,0,0,11178,11172,1,0,0,0,11178,11173,1,0,0,0,11178,
11174,1,0,0,0,11178,11175,1,0,0,0,11178,11176,1,0,0,0,11178,11177,1,0,0,
0,11179,11271,1,0,0,0,11180,11181,10,28,0,0,11181,11182,5,896,0,0,11182,
11270,3,992,496,29,11183,11184,10,21,0,0,11184,11185,7,84,0,0,11185,11270,
3,992,496,22,11186,11187,10,20,0,0,11187,11188,7,85,0,0,11188,11270,3,992,
496,21,11189,11190,10,19,0,0,11190,11191,3,1172,586,0,11191,11192,3,992,
496,20,11192,11270,1,0,0,0,11193,11194,10,17,0,0,11194,11195,5,29,0,0,11195,
11270,3,992,496,18,11196,11197,10,16,0,0,11197,11198,5,472,0,0,11198,11270,
3,992,496,17,11199,11201,10,3,0,0,11200,11202,5,429,0,0,11201,11200,1,0,
0,0,11201,11202,1,0,0,0,11202,11203,1,0,0,0,11203,11204,5,586,0,0,11204,
11270,3,992,496,4,11205,11206,10,29,0,0,11206,11207,5,890,0,0,11207,11208,
3,992,496,0,11208,11209,5,891,0,0,11209,11270,1,0,0,0,11210,11211,10,27,
0,0,11211,11214,5,884,0,0,11212,11215,5,789,0,0,11213,11215,3,992,496,0,
11214,11212,1,0,0,0,11214,11213,1,0,0,0,11215,11270,1,0,0,0,11216,11217,
10,26,0,0,11217,11218,5,130,0,0,11218,11270,3,950,475,0,11219,11220,10,14,
0,0,11220,11270,3,1020,510,0,11221,11222,10,12,0,0,11222,11223,5,897,0,0,
11223,11270,3,1012,506,0,11224,11225,10,6,0,0,11225,11226,5,342,0,0,11226,
11270,3,1174,587,0,11227,11229,10,5,0,0,11228,11230,5,429,0,0,11229,11228,
1,0,0,0,11229,11230,1,0,0,0,11230,11231,1,0,0,0,11231,11232,5,325,0,0,11232,
11235,5,888,0,0,11233,11236,3,1176,588,0,11234,11236,3,988,494,0,11235,11233,
1,0,0,0,11235,11234,1,0,0,0,11236,11237,1,0,0,0,11237,11238,5,889,0,0,11238,
11270,1,0,0,0,11239,11241,10,4,0,0,11240,11242,5,429,0,0,11241,11240,1,0,
0,0,11241,11242,1,0,0,0,11242,11243,1,0,0,0,11243,11244,7,86,0,0,11244,11247,
3,992,496,0,11245,11246,5,229,0,0,11246,11248,3,992,496,0,11247,11245,1,
0,0,0,11247,11248,1,0,0,0,11248,11270,1,0,0,0,11249,11251,10,2,0,0,11250,
11252,5,429,0,0,11251,11250,1,0,0,0,11251,11252,1,0,0,0,11252,11253,1,0,
0,0,11253,11254,7,86,0,0,11254,11255,5,30,0,0,11255,11256,5,888,0,0,11256,
11261,3,992,496,0,11257,11258,5,894,0,0,11258,11260,3,992,496,0,11259,11257,
1,0,0,0,11260,11263,1,0,0,0,11261,11259,1,0,0,0,11261,11262,1,0,0,0,11262,
11264,1,0,0,0,11263,11261,1,0,0,0,11264,11267,5,889,0,0,11265,11266,5,229,
0,0,11266,11268,3,992,496,0,11267,11265,1,0,0,0,11267,11268,1,0,0,0,11268,
11270,1,0,0,0,11269,11180,1,0,0,0,11269,11183,1,0,0,0,11269,11186,1,0,0,
0,11269,11189,1,0,0,0,11269,11193,1,0,0,0,11269,11196,1,0,0,0,11269,11199,
1,0,0,0,11269,11205,1,0,0,0,11269,11210,1,0,0,0,11269,11216,1,0,0,0,11269,
11219,1,0,0,0,11269,11221,1,0,0,0,11269,11224,1,0,0,0,11269,11227,1,0,0,
0,11269,11239,1,0,0,0,11269,11249,1,0,0,0,11270,11273,1,0,0,0,11271,11269,
1,0,0,0,11271,11272,1,0,0,0,11272,993,1,0,0,0,11273,11271,1,0,0,0,11274,
11275,5,313,0,0,11275,11276,5,888,0,0,11276,11277,3,1170,585,0,11277,11278,
5,894,0,0,11278,11279,3,992,496,0,11279,11280,5,894,0,0,11280,11281,3,992,
496,0,11281,11282,5,889,0,0,11282,995,1,0,0,0,11283,11284,7,87,0,0,11284,
11285,5,888,0,0,11285,11290,3,992,496,0,11286,11287,5,894,0,0,11287,11289,
3,950,475,0,11288,11286,1,0,0,0,11289,11292,1,0,0,0,11290,11288,1,0,0,0,
11290,11291,1,0,0,0,11291,11293,1,0,0,0,11292,11290,1,0,0,0,11293,11294,
5,889,0,0,11294,997,1,0,0,0,11295,11296,5,762,0,0,11296,11297,5,888,0,0,
11297,11298,3,992,496,0,11298,11299,5,43,0,0,11299,11300,3,1012,506,0,11300,
11301,5,889,0,0,11301,999,1,0,0,0,11302,11303,5,105,0,0,11303,11304,5,888,
0,0,11304,11305,3,992,496,0,11305,11306,5,43,0,0,11306,11307,3,1012,506,
0,11307,11308,5,889,0,0,11308,11312,1,0,0,0,11309,11310,7,88,0,0,11310,11312,
3,992,496,0,11311,11302,1,0,0,0,11311,11309,1,0,0,0,11312,1001,1,0,0,0,11313,
11314,5,892,0,0,11314,11319,3,1004,502,0,11315,11316,5,894,0,0,11316,11318,
3,1004,502,0,11317,11315,1,0,0,0,11318,11321,1,0,0,0,11319,11317,1,0,0,0,
11319,11320,1,0,0,0,11320,11322,1,0,0,0,11321,11319,1,0,0,0,11322,11323,
5,893,0,0,11323,11327,1,0,0,0,11324,11325,5,892,0,0,11325,11327,5,893,0,
0,11326,11313,1,0,0,0,11326,11324,1,0,0,0,11327,1003,1,0,0,0,11328,11329,
5,869,0,0,11329,11330,5,896,0,0,11330,11331,3,1006,503,0,11331,1005,1,0,
0,0,11332,11333,3,992,496,0,11333,1007,1,0,0,0,11334,11335,5,890,0,0,11335,
11340,3,1006,503,0,11336,11337,5,894,0,0,11337,11339,3,1006,503,0,11338,
11336,1,0,0,0,11339,11342,1,0,0,0,11340,11338,1,0,0,0,11340,11341,1,0,0,
0,11341,11343,1,0,0,0,11342,11340,1,0,0,0,11343,11344,5,891,0,0,11344,11348,
1,0,0,0,11345,11346,5,890,0,0,11346,11348,5,891,0,0,11347,11334,1,0,0,0,
11347,11345,1,0,0,0,11348,1009,1,0,0,0,11349,11350,5,888,0,0,11350,11351,
3,986,493,0,11351,11352,5,889,0,0,11352,1011,1,0,0,0,11353,11410,7,89,0,
0,11354,11363,7,90,0,0,11355,11356,5,888,0,0,11356,11359,3,986,493,0,11357,
11358,5,894,0,0,11358,11360,3,986,493,0,11359,11357,1,0,0,0,11359,11360,
1,0,0,0,11360,11361,1,0,0,0,11361,11362,5,889,0,0,11362,11364,1,0,0,0,11363,
11355,1,0,0,0,11363,11364,1,0,0,0,11364,11410,1,0,0,0,11365,11410,7,91,0,
0,11366,11410,5,824,0,0,11367,11410,5,827,0,0,11368,11370,5,828,0,0,11369,
11371,3,1010,505,0,11370,11369,1,0,0,0,11370,11371,1,0,0,0,11371,11410,1,
0,0,0,11372,11374,5,724,0,0,11373,11375,3,1010,505,0,11374,11373,1,0,0,0,
11374,11375,1,0,0,0,11375,11410,1,0,0,0,11376,11378,5,727,0,0,11377,11379,
3,1010,505,0,11378,11377,1,0,0,0,11378,11379,1,0,0,0,11379,11410,1,0,0,0,
11380,11382,5,731,0,0,11381,11383,3,1010,505,0,11382,11381,1,0,0,0,11382,
11383,1,0,0,0,11383,11410,1,0,0,0,11384,11386,5,733,0,0,11385,11387,3,1010,
505,0,11386,11385,1,0,0,0,11386,11387,1,0,0,0,11387,11410,1,0,0,0,11388,
11390,5,737,0,0,11389,11391,3,1010,505,0,11390,11389,1,0,0,0,11390,11391,
1,0,0,0,11391,11410,1,0,0,0,11392,11394,7,92,0,0,11393,11395,3,1010,505,
0,11394,11393,1,0,0,0,11394,11395,1,0,0,0,11395,11410,1,0,0,0,11396,11398,
7,93,0,0,11397,11399,3,1010,505,0,11398,11397,1,0,0,0,11398,11399,1,0,0,
0,11399,11410,1,0,0,0,11400,11402,7,94,0,0,11401,11403,3,1010,505,0,11402,
11401,1,0,0,0,11402,11403,1,0,0,0,11403,11410,1,0,0,0,11404,11410,5,851,
0,0,11405,11410,5,454,0,0,11406,11410,5,820,0,0,11407,11410,5,836,0,0,11408,
11410,5,837,0,0,11409,11353,1,0,0,0,11409,11354,1,0,0,0,11409,11365,1,0,
0,0,11409,11366,1,0,0,0,11409,11367,1,0,0,0,11409,11368,1,0,0,0,11409,11372,
1,0,0,0,11409,11376,1,0,0,0,11409,11380,1,0,0,0,11409,11384,1,0,0,0,11409,
11388,1,0,0,0,11409,11392,1,0,0,0,11409,11396,1,0,0,0,11409,11400,1,0,0,
0,11409,11404,1,0,0,0,11409,11405,1,0,0,0,11409,11406,1,0,0,0,11409,11407,
1,0,0,0,11409,11408,1,0,0,0,11410,1013,1,0,0,0,11411,11427,5,174,0,0,11412,
11427,5,439,0,0,11413,11418,3,956,478,0,11414,11415,5,884,0,0,11415,11417,
3,956,478,0,11416,11414,1,0,0,0,11417,11420,1,0,0,0,11418,11416,1,0,0,0,
11418,11419,1,0,0,0,11419,11427,1,0,0,0,11420,11418,1,0,0,0,11421,11427,
3,1038,519,0,11422,11427,3,1034,517,0,11423,11427,5,93,0,0,11424,11427,5,
821,0,0,11425,11427,5,455,0,0,11426,11411,1,0,0,0,11426,11412,1,0,0,0,11426,
11413,1,0,0,0,11426,11421,1,0,0,0,11426,11422,1,0,0,0,11426,11423,1,0,0,
0,11426,11424,1,0,0,0,11426,11425,1,0,0,0,11427,1015,1,0,0,0,11428,11429,
5,475,0,0,11429,11430,5,96,0,0,11430,11431,3,990,495,0,11431,1017,1,0,0,
0,11432,11433,7,95,0,0,11433,1019,1,0,0,0,11434,11435,5,480,0,0,11435,11436,
5,888,0,0,11436,11438,3,1128,564,0,11437,11439,3,1016,508,0,11438,11437,
1,0,0,0,11438,11439,1,0,0,0,11439,11440,1,0,0,0,11440,11441,5,889,0,0,11441,
11448,1,0,0,0,11442,11443,5,480,0,0,11443,11444,5,888,0,0,11444,11445,3,
1016,508,0,11445,11446,5,889,0,0,11446,11448,1,0,0,0,11447,11434,1,0,0,0,
11447,11442,1,0,0,0,11448,1021,1,0,0,0,11449,11527,3,1204,602,0,11450,11451,
3,964,482,0,11451,11452,5,888,0,0,11452,11457,3,992,496,0,11453,11454,5,
894,0,0,11454,11456,3,992,496,0,11455,11453,1,0,0,0,11456,11459,1,0,0,0,
11457,11455,1,0,0,0,11457,11458,1,0,0,0,11458,11460,1,0,0,0,11459,11457,
1,0,0,0,11460,11461,5,889,0,0,11461,11527,1,0,0,0,11462,11463,3,966,483,
0,11463,11464,5,888,0,0,11464,11465,3,992,496,0,11465,11466,5,894,0,0,11466,
11467,3,992,496,0,11467,11468,5,889,0,0,11468,11527,1,0,0,0,11469,11470,
3,968,484,0,11470,11471,5,888,0,0,11471,11472,3,992,496,0,11472,11473,5,
894,0,0,11473,11478,3,992,496,0,11474,11475,5,894,0,0,11475,11477,3,992,
496,0,11476,11474,1,0,0,0,11477,11480,1,0,0,0,11478,11476,1,0,0,0,11478,
11479,1,0,0,0,11479,11481,1,0,0,0,11480,11478,1,0,0,0,11481,11482,5,889,
0,0,11482,11527,1,0,0,0,11483,11484,3,970,485,0,11484,11485,5,888,0,0,11485,
11486,3,992,496,0,11486,11487,5,894,0,0,11487,11488,3,992,496,0,11488,11489,
5,894,0,0,11489,11490,3,992,496,0,11490,11491,5,889,0,0,11491,11527,1,0,
0,0,11492,11527,3,1030,515,0,11493,11527,3,1032,516,0,11494,11495,3,982,
491,0,11495,11497,5,888,0,0,11496,11498,3,988,494,0,11497,11496,1,0,0,0,
11497,11498,1,0,0,0,11498,11499,1,0,0,0,11499,11500,5,889,0,0,11500,11527,
1,0,0,0,11501,11502,3,982,491,0,11502,11503,5,888,0,0,11503,11504,3,1024,
512,0,11504,11505,5,889,0,0,11505,11527,1,0,0,0,11506,11507,3,972,486,0,
11507,11508,5,888,0,0,11508,11509,3,988,494,0,11509,11510,5,889,0,0,11510,
11527,1,0,0,0,11511,11512,7,78,0,0,11512,11513,5,888,0,0,11513,11514,3,992,
496,0,11514,11515,5,889,0,0,11515,11527,1,0,0,0,11516,11517,7,96,0,0,11517,
11518,5,888,0,0,11518,11519,3,992,496,0,11519,11520,5,889,0,0,11520,11527,
1,0,0,0,11521,11522,5,746,0,0,11522,11523,5,888,0,0,11523,11524,3,992,496,
0,11524,11525,5,889,0,0,11525,11527,1,0,0,0,11526,11449,1,0,0,0,11526,11450,
1,0,0,0,11526,11462,1,0,0,0,11526,11469,1,0,0,0,11526,11483,1,0,0,0,11526,
11492,1,0,0,0,11526,11493,1,0,0,0,11526,11494,1,0,0,0,11526,11501,1,0,0,
0,11526,11506,1,0,0,0,11526,11511,1,0,0,0,11526,11516,1,0,0,0,11526,11521,
1,0,0,0,11527,1023,1,0,0,0,11528,11533,3,1026,513,0,11529,11530,5,894,0,
0,11530,11532,3,1026,513,0,11531,11529,1,0,0,0,11532,11535,1,0,0,0,11533,
11531,1,0,0,0,11533,11534,1,0,0,0,11534,1025,1,0,0,0,11535,11533,1,0,0,0,
11536,11537,3,956,478,0,11537,11538,5,875,0,0,11538,11539,3,992,496,0,11539,
1027,1,0,0,0,11540,11541,7,97,0,0,11541,11542,5,438,0,0,11542,1029,1,0,0,
0,11543,11544,7,98,0,0,11544,11545,5,888,0,0,11545,11546,5,889,0,0,11546,
11579,3,1020,510,0,11547,11548,5,436,0,0,11548,11549,5,888,0,0,11549,11550,
3,992,496,0,11550,11551,5,889,0,0,11551,11552,3,1020,510,0,11552,11579,1,
0,0,0,11553,11554,7,99,0,0,11554,11555,5,888,0,0,11555,11561,3,992,496,0,
11556,11557,5,894,0,0,11557,11558,3,992,496,0,11558,11559,5,894,0,0,11559,
11560,3,992,496,0,11560,11562,1,0,0,0,11561,11556,1,0,0,0,11561,11562,1,
0,0,0,11562,11563,1,0,0,0,11563,11565,5,889,0,0,11564,11566,3,1028,514,0,
11565,11564,1,0,0,0,11565,11566,1,0,0,0,11566,11567,1,0,0,0,11567,11568,
3,1020,510,0,11568,11579,1,0,0,0,11569,11570,7,100,0,0,11570,11571,5,888,
0,0,11571,11572,3,992,496,0,11572,11574,5,889,0,0,11573,11575,3,1028,514,
0,11574,11573,1,0,0,0,11574,11575,1,0,0,0,11575,11576,1,0,0,0,11576,11577,
3,1020,510,0,11577,11579,1,0,0,0,11578,11543,1,0,0,0,11578,11547,1,0,0,0,
11578,11553,1,0,0,0,11578,11569,1,0,0,0,11579,1031,1,0,0,0,11580,11581,3,
956,478,0,11581,11583,5,888,0,0,11582,11584,5,197,0,0,11583,11582,1,0,0,
0,11583,11584,1,0,0,0,11584,11585,1,0,0,0,11585,11586,3,988,494,0,11586,
11587,5,889,0,0,11587,11613,1,0,0,0,11588,11589,3,956,478,0,11589,11590,
5,888,0,0,11590,11591,5,898,0,0,11591,11592,5,889,0,0,11592,11613,1,0,0,
0,11593,11594,7,101,0,0,11594,11596,5,888,0,0,11595,11597,5,197,0,0,11596,
11595,1,0,0,0,11596,11597,1,0,0,0,11597,11598,1,0,0,0,11598,11601,3,992,
496,0,11599,11600,5,894,0,0,11600,11602,3,950,475,0,11601,11599,1,0,0,0,
11601,11602,1,0,0,0,11602,11603,1,0,0,0,11603,11610,5,889,0,0,11604,11605,
5,806,0,0,11605,11606,5,297,0,0,11606,11607,5,888,0,0,11607,11608,3,1194,
597,0,11608,11609,5,889,0,0,11609,11611,1,0,0,0,11610,11604,1,0,0,0,11610,
11611,1,0,0,0,11611,11613,1,0,0,0,11612,11580,1,0,0,0,11612,11588,1,0,0,
0,11612,11593,1,0,0,0,11613,1033,1,0,0,0,11614,11627,5,869,0,0,11615,11617,
3,1036,518,0,11616,11615,1,0,0,0,11616,11617,1,0,0,0,11617,11618,1,0,0,0,
11618,11627,5,870,0,0,11619,11621,3,1036,518,0,11620,11619,1,0,0,0,11620,
11621,1,0,0,0,11621,11622,1,0,0,0,11622,11627,7,102,0,0,11623,11627,3,508,
254,0,11624,11627,5,439,0,0,11625,11627,5,886,0,0,11626,11614,1,0,0,0,11626,
11616,1,0,0,0,11626,11620,1,0,0,0,11626,11623,1,0,0,0,11626,11624,1,0,0,
0,11626,11625,1,0,0,0,11627,1035,1,0,0,0,11628,11629,7,83,0,0,11629,1037,
1,0,0,0,11630,11632,3,956,478,0,11631,11630,1,0,0,0,11631,11632,1,0,0,0,
11632,11633,1,0,0,0,11633,11635,5,884,0,0,11634,11636,3,956,478,0,11635,
11634,1,0,0,0,11635,11636,1,0,0,0,11636,11637,1,0,0,0,11637,11639,5,884,
0,0,11638,11640,3,956,478,0,11639,11638,1,0,0,0,11639,11640,1,0,0,0,11640,
11641,1,0,0,0,11641,11642,5,884,0,0,11642,11659,3,956,478,0,11643,11645,
3,956,478,0,11644,11643,1,0,0,0,11644,11645,1,0,0,0,11645,11646,1,0,0,0,
11646,11648,5,884,0,0,11647,11649,3,956,478,0,11648,11647,1,0,0,0,11648,
11649,1,0,0,0,11649,11650,1,0,0,0,11650,11651,5,884,0,0,11651,11659,3,956,
478,0,11652,11654,3,956,478,0,11653,11652,1,0,0,0,11653,11654,1,0,0,0,11654,
11655,1,0,0,0,11655,11656,5,884,0,0,11656,11659,3,956,478,0,11657,11659,
3,956,478,0,11658,11631,1,0,0,0,11658,11644,1,0,0,0,11658,11653,1,0,0,0,
11658,11657,1,0,0,0,11659,1039,1,0,0,0,11660,11661,5,888,0,0,11661,11662,
3,988,494,0,11662,11663,5,889,0,0,11663,11669,1,0,0,0,11664,11665,5,888,
0,0,11665,11666,3,1176,588,0,11666,11667,5,889,0,0,11667,11669,1,0,0,0,11668,
11660,1,0,0,0,11668,11664,1,0,0,0,11669,1041,1,0,0,0,11670,11671,5,102,0,
0,11671,11673,3,992,496,0,11672,11674,3,1046,523,0,11673,11672,1,0,0,0,11674,
11675,1,0,0,0,11675,11673,1,0,0,0,11675,11676,1,0,0,0,11676,11679,1,0,0,
0,11677,11678,5,204,0,0,11678,11680,3,992,496,0,11679,11677,1,0,0,0,11679,
11680,1,0,0,0,11680,11681,1,0,0,0,11681,11682,5,217,0,0,11682,11696,1,0,
0,0,11683,11685,5,102,0,0,11684,11686,3,1044,522,0,11685,11684,1,0,0,0,11686,
11687,1,0,0,0,11687,11685,1,0,0,0,11687,11688,1,0,0,0,11688,11691,1,0,0,
0,11689,11690,5,204,0,0,11690,11692,3,992,496,0,11691,11689,1,0,0,0,11691,
11692,1,0,0,0,11692,11693,1,0,0,0,11693,11694,5,217,0,0,11694,11696,1,0,
0,0,11695,11670,1,0,0,0,11695,11683,1,0,0,0,11696,1043,1,0,0,0,11697,11698,
5,803,0,0,11698,11699,3,1170,585,0,11699,11700,5,723,0,0,11700,11701,3,992,
496,0,11701,1045,1,0,0,0,11702,11703,5,803,0,0,11703,11704,3,992,496,0,11704,
11705,5,723,0,0,11705,11706,3,992,496,0,11706,1047,1,0,0,0,11707,11709,3,
1050,525,0,11708,11707,1,0,0,0,11708,11709,1,0,0,0,11709,11710,1,0,0,0,11710,
11714,3,1054,527,0,11711,11713,3,1056,528,0,11712,11711,1,0,0,0,11713,11716,
1,0,0,0,11714,11712,1,0,0,0,11714,11715,1,0,0,0,11715,1049,1,0,0,0,11716,
11714,1,0,0,0,11717,11718,5,805,0,0,11718,11723,3,1052,526,0,11719,11720,
5,894,0,0,11720,11722,3,1052,526,0,11721,11719,1,0,0,0,11722,11725,1,0,0,
0,11723,11721,1,0,0,0,11723,11724,1,0,0,0,11724,1051,1,0,0,0,11725,11723,
1,0,0,0,11726,11731,3,956,478,0,11727,11728,5,888,0,0,11728,11729,3,978,
489,0,11729,11730,5,889,0,0,11730,11732,1,0,0,0,11731,11727,1,0,0,0,11731,
11732,1,0,0,0,11732,11733,1,0,0,0,11733,11734,5,43,0,0,11734,11735,5,888,
0,0,11735,11739,3,1054,527,0,11736,11738,3,1056,528,0,11737,11736,1,0,0,
0,11738,11741,1,0,0,0,11739,11737,1,0,0,0,11739,11740,1,0,0,0,11740,11742,
1,0,0,0,11741,11739,1,0,0,0,11742,11743,5,889,0,0,11743,1053,1,0,0,0,11744,
11745,3,1060,530,0,11745,11747,3,1058,529,0,11746,11748,3,1200,600,0,11747,
11746,1,0,0,0,11747,11748,1,0,0,0,11748,11753,1,0,0,0,11749,11750,3,1062,
531,0,11750,11751,3,1058,529,0,11751,11753,1,0,0,0,11752,11744,1,0,0,0,11752,
11749,1,0,0,0,11753,1055,1,0,0,0,11754,11756,5,766,0,0,11755,11757,5,17,
0,0,11756,11755,1,0,0,0,11756,11757,1,0,0,0,11757,11762,1,0,0,0,11758,11762,
5,232,0,0,11759,11762,5,405,0,0,11760,11762,5,339,0,0,11761,11754,1,0,0,
0,11761,11758,1,0,0,0,11761,11759,1,0,0,0,11761,11760,1,0,0,0,11762,11763,
1,0,0,0,11763,11769,3,1054,527,0,11764,11765,5,888,0,0,11765,11766,3,1054,
527,0,11766,11767,5,889,0,0,11767,11769,1,0,0,0,11768,11761,1,0,0,0,11768,
11764,1,0,0,0,11769,1057,1,0,0,0,11770,11772,3,1088,544,0,11771,11770,1,
0,0,0,11771,11772,1,0,0,0,11772,11774,1,0,0,0,11773,11775,3,1094,547,0,11774,
11773,1,0,0,0,11774,11775,1,0,0,0,11775,11777,1,0,0,0,11776,11778,3,1180,
590,0,11777,11776,1,0,0,0,11777,11778,1,0,0,0,11778,11781,1,0,0,0,11779,
11782,3,1186,593,0,11780,11782,3,1188,594,0,11781,11779,1,0,0,0,11781,11780,
1,0,0,0,11781,11782,1,0,0,0,11782,11784,1,0,0,0,11783,11785,3,1190,595,0,
11784,11783,1,0,0,0,11784,11785,1,0,0,0,11785,11787,1,0,0,0,11786,11788,
3,1194,597,0,11787,11786,1,0,0,0,11787,11788,1,0,0,0,11788,1059,1,0,0,0,
11789,11790,5,633,0,0,11790,11791,3,1064,532,0,11791,1061,1,0,0,0,11792,
11793,5,633,0,0,11793,11794,3,1066,533,0,11794,1063,1,0,0,0,11795,11797,
3,1084,542,0,11796,11795,1,0,0,0,11796,11797,1,0,0,0,11797,11798,1,0,0,0,
11798,11799,3,1068,534,0,11799,1065,1,0,0,0,11800,11802,3,1084,542,0,11801,
11800,1,0,0,0,11801,11802,1,0,0,0,11802,11804,1,0,0,0,11803,11805,3,1086,
543,0,11804,11803,1,0,0,0,11804,11805,1,0,0,0,11805,11806,1,0,0,0,11806,
11807,3,1068,534,0,11807,1067,1,0,0,0,11808,11813,3,1070,535,0,11809,11810,
5,894,0,0,11810,11812,3,1070,535,0,11811,11809,1,0,0,0,11812,11815,1,0,0,
0,11813,11811,1,0,0,0,11813,11814,1,0,0,0,11814,11817,1,0,0,0,11815,11813,
1,0,0,0,11816,11818,5,894,0,0,11817,11816,1,0,0,0,11817,11818,1,0,0,0,11818,
1069,1,0,0,0,11819,11821,3,1074,537,0,11820,11822,3,1078,539,0,11821,11820,
1,0,0,0,11821,11822,1,0,0,0,11822,11829,1,0,0,0,11823,11829,3,1072,536,0,
11824,11826,3,1080,540,0,11825,11827,3,1078,539,0,11826,11825,1,0,0,0,11826,
11827,1,0,0,0,11827,11829,1,0,0,0,11828,11819,1,0,0,0,11828,11823,1,0,0,
0,11828,11824,1,0,0,0,11829,1071,1,0,0,0,11830,11832,3,1076,538,0,11831,
11830,1,0,0,0,11831,11832,1,0,0,0,11832,11833,1,0,0,0,11833,11834,5,898,
0,0,11834,1073,1,0,0,0,11835,11837,3,1076,538,0,11836,11835,1,0,0,0,11836,
11837,1,0,0,0,11837,11838,1,0,0,0,11838,11845,3,976,488,0,11839,11841,3,
1076,538,0,11840,11839,1,0,0,0,11840,11841,1,0,0,0,11841,11842,1,0,0,0,11842,
11843,5,887,0,0,11843,11845,3,1082,541,0,11844,11836,1,0,0,0,11844,11840,
1,0,0,0,11845,1075,1,0,0,0,11846,11851,3,982,491,0,11847,11848,3,1130,565,
0,11848,11849,5,884,0,0,11849,11851,1,0,0,0,11850,11846,1,0,0,0,11850,11847,
1,0,0,0,11851,1077,1,0,0,0,11852,11854,5,43,0,0,11853,11852,1,0,0,0,11853,
11854,1,0,0,0,11854,11855,1,0,0,0,11855,11856,3,1130,565,0,11856,1079,1,
0,0,0,11857,11860,3,992,496,0,11858,11860,3,1178,589,0,11859,11857,1,0,0,
0,11859,11858,1,0,0,0,11860,1081,1,0,0,0,11861,11862,3,986,493,0,11862,1083,
1,0,0,0,11863,11864,7,103,0,0,11864,1085,1,0,0,0,11865,11866,5,749,0,0,11866,
11867,3,986,493,0,11867,1087,1,0,0,0,11868,11869,5,341,0,0,11869,11870,3,
1090,545,0,11870,1089,1,0,0,0,11871,11876,3,1092,546,0,11872,11873,5,894,
0,0,11873,11875,3,1092,546,0,11874,11872,1,0,0,0,11875,11878,1,0,0,0,11876,
11874,1,0,0,0,11876,11877,1,0,0,0,11877,1091,1,0,0,0,11878,11876,1,0,0,0,
11879,11880,5,896,0,0,11880,11881,3,956,478,0,11881,1093,1,0,0,0,11882,11883,
5,276,0,0,11883,11884,3,1096,548,0,11884,1095,1,0,0,0,11885,11890,3,1098,
549,0,11886,11887,5,894,0,0,11887,11889,3,1098,549,0,11888,11886,1,0,0,0,
11889,11892,1,0,0,0,11890,11888,1,0,0,0,11890,11891,1,0,0,0,11891,1097,1,
0,0,0,11892,11890,1,0,0,0,11893,11894,3,1100,550,0,11894,1099,1,0,0,0,11895,
11899,3,1102,551,0,11896,11898,3,1118,559,0,11897,11896,1,0,0,0,11898,11901,
1,0,0,0,11899,11897,1,0,0,0,11899,11900,1,0,0,0,11900,11912,1,0,0,0,11901,
11899,1,0,0,0,11902,11903,5,888,0,0,11903,11904,3,1100,550,0,11904,11908,
5,889,0,0,11905,11907,3,1118,559,0,11906,11905,1,0,0,0,11907,11910,1,0,0,
0,11908,11906,1,0,0,0,11908,11909,1,0,0,0,11909,11912,1,0,0,0,11910,11908,
1,0,0,0,11911,11895,1,0,0,0,11911,11902,1,0,0,0,11912,1101,1,0,0,0,11913,
11915,3,982,491,0,11914,11916,3,1120,560,0,11915,11914,1,0,0,0,11915,11916,
1,0,0,0,11916,11918,1,0,0,0,11917,11919,3,1124,562,0,11918,11917,1,0,0,0,
11918,11919,1,0,0,0,11919,11921,1,0,0,0,11920,11922,3,1150,575,0,11921,11920,
1,0,0,0,11921,11922,1,0,0,0,11922,11924,1,0,0,0,11923,11925,3,1152,576,0,
11924,11923,1,0,0,0,11924,11925,1,0,0,0,11925,11927,1,0,0,0,11926,11928,
3,1078,539,0,11927,11926,1,0,0,0,11927,11928,1,0,0,0,11928,11930,1,0,0,0,
11929,11931,3,400,200,0,11930,11929,1,0,0,0,11930,11931,1,0,0,0,11931,11933,
1,0,0,0,11932,11934,3,1168,584,0,11933,11932,1,0,0,0,11933,11934,1,0,0,0,
11934,11985,1,0,0,0,11935,11936,3,982,491,0,11936,11937,5,675,0,0,11937,
11938,5,805,0,0,11938,11939,3,1178,589,0,11939,11940,5,141,0,0,11940,11942,
5,96,0,0,11941,11943,3,1110,555,0,11942,11941,1,0,0,0,11942,11943,1,0,0,
0,11943,11985,1,0,0,0,11944,11945,5,708,0,0,11945,11946,5,888,0,0,11946,
11947,3,1022,511,0,11947,11949,5,889,0,0,11948,11950,3,1152,576,0,11949,
11948,1,0,0,0,11949,11950,1,0,0,0,11950,11952,1,0,0,0,11951,11953,3,1078,
539,0,11952,11951,1,0,0,0,11952,11953,1,0,0,0,11953,11955,1,0,0,0,11954,
11956,3,1168,584,0,11955,11954,1,0,0,0,11955,11956,1,0,0,0,11956,11985,1,
0,0,0,11957,11959,3,1158,579,0,11958,11960,3,1168,584,0,11959,11958,1,0,
0,0,11959,11960,1,0,0,0,11960,11985,1,0,0,0,11961,11963,5,363,0,0,11962,
11961,1,0,0,0,11962,11963,1,0,0,0,11963,11964,1,0,0,0,11964,11965,5,888,
0,0,11965,11966,3,1176,588,0,11966,11968,5,889,0,0,11967,11969,3,1152,576,
0,11968,11967,1,0,0,0,11968,11969,1,0,0,0,11969,11971,1,0,0,0,11970,11972,
3,1078,539,0,11971,11970,1,0,0,0,11971,11972,1,0,0,0,11972,11974,1,0,0,0,
11973,11975,3,400,200,0,11974,11973,1,0,0,0,11974,11975,1,0,0,0,11975,11985,
1,0,0,0,11976,11979,5,363,0,0,11977,11980,3,1106,553,0,11978,11980,3,1108,
554,0,11979,11977,1,0,0,0,11979,11978,1,0,0,0,11980,11982,1,0,0,0,11981,
11983,3,1078,539,0,11982,11981,1,0,0,0,11982,11983,1,0,0,0,11983,11985,1,
0,0,0,11984,11913,1,0,0,0,11984,11935,1,0,0,0,11984,11944,1,0,0,0,11984,
11957,1,0,0,0,11984,11962,1,0,0,0,11984,11976,1,0,0,0,11985,1103,1,0,0,0,
11986,11987,5,506,0,0,11987,11988,5,875,0,0,11988,11999,3,950,475,0,11989,
11990,5,479,0,0,11990,11991,5,875,0,0,11991,11999,3,508,254,0,11992,11993,
5,548,0,0,11993,11994,5,875,0,0,11994,11999,3,508,254,0,11995,11996,5,408,
0,0,11996,11997,5,875,0,0,11997,11999,7,104,0,0,11998,11986,1,0,0,0,11998,
11989,1,0,0,0,11998,11992,1,0,0,0,11998,11995,1,0,0,0,11999,1105,1,0,0,0,
12000,12001,5,268,0,0,12001,12004,5,888,0,0,12002,12003,5,333,0,0,12003,
12005,5,875,0,0,12004,12002,1,0,0,0,12004,12005,1,0,0,0,12005,12006,1,0,
0,0,12006,12011,3,992,496,0,12007,12008,5,894,0,0,12008,12010,3,1104,552,
0,12009,12007,1,0,0,0,12010,12013,1,0,0,0,12011,12009,1,0,0,0,12011,12012,
1,0,0,0,12012,12014,1,0,0,0,12013,12011,1,0,0,0,12014,12015,5,889,0,0,12015,
1107,1,0,0,0,12016,12017,5,667,0,0,12017,12018,5,888,0,0,12018,12019,3,992,
496,0,12019,12020,5,894,0,0,12020,12021,3,992,496,0,12021,12022,5,889,0,
0,12022,1109,1,0,0,0,12023,12028,3,1112,556,0,12024,12025,5,894,0,0,12025,
12027,3,1112,556,0,12026,12024,1,0,0,0,12027,12030,1,0,0,0,12028,12026,1,
0,0,0,12028,12029,1,0,0,0,12029,1111,1,0,0,0,12030,12028,1,0,0,0,12031,12033,
5,525,0,0,12032,12031,1,0,0,0,12032,12033,1,0,0,0,12033,12034,1,0,0,0,12034,
12035,3,956,478,0,12035,12037,5,878,0,0,12036,12038,5,525,0,0,12037,12036,
1,0,0,0,12037,12038,1,0,0,0,12038,12039,1,0,0,0,12039,12040,3,956,478,0,
12040,1113,1,0,0,0,12041,12043,7,105,0,0,12042,12044,5,479,0,0,12043,12042,
1,0,0,0,12043,12044,1,0,0,0,12044,1115,1,0,0,0,12045,12048,5,332,0,0,12046,
12048,3,1114,557,0,12047,12045,1,0,0,0,12047,12046,1,0,0,0,12048,1117,1,
0,0,0,12049,12051,3,1116,558,0,12050,12049,1,0,0,0,12050,12051,1,0,0,0,12051,
12052,1,0,0,0,12052,12053,5,348,0,0,12053,12065,3,1102,551,0,12054,12055,
5,465,0,0,12055,12057,3,1170,585,0,12056,12054,1,0,0,0,12056,12057,1,0,0,
0,12057,12066,1,0,0,0,12058,12059,5,785,0,0,12059,12060,5,888,0,0,12060,
12061,3,978,489,0,12061,12062,5,889,0,0,12062,12064,1,0,0,0,12063,12058,
1,0,0,0,12063,12064,1,0,0,0,12064,12066,1,0,0,0,12065,12056,1,0,0,0,12065,
12063,1,0,0,0,12066,12077,1,0,0,0,12067,12069,5,418,0,0,12068,12070,3,1114,
557,0,12069,12068,1,0,0,0,12069,12070,1,0,0,0,12070,12071,1,0,0,0,12071,
12072,5,348,0,0,12072,12077,3,1102,551,0,12073,12074,5,154,0,0,12074,12075,
5,348,0,0,12075,12077,3,1102,551,0,12076,12050,1,0,0,0,12076,12067,1,0,0,
0,12076,12073,1,0,0,0,12077,1119,1,0,0,0,12078,12079,5,46,0,0,12079,12092,
5,888,0,0,12080,12081,5,727,0,0,12081,12082,5,875,0,0,12082,12093,3,992,
496,0,12083,12084,5,459,0,0,12084,12085,5,875,0,0,12085,12093,3,992,496,
0,12086,12087,5,679,0,0,12087,12088,5,875,0,0,12088,12093,3,950,475,0,12089,
12090,5,690,0,0,12090,12091,5,875,0,0,12091,12093,3,950,475,0,12092,12080,
1,0,0,0,12092,12083,1,0,0,0,12092,12086,1,0,0,0,12092,12089,1,0,0,0,12093,
12094,1,0,0,0,12094,12095,5,889,0,0,12095,12104,1,0,0,0,12096,12097,5,81,
0,0,12097,12098,5,888,0,0,12098,12099,5,679,0,0,12099,12100,5,875,0,0,12100,
12101,3,950,475,0,12101,12102,5,889,0,0,12102,12104,1,0,0,0,12103,12078,
1,0,0,0,12103,12096,1,0,0,0,12104,1121,1,0,0,0,12105,12106,5,217,0,0,12106,
12116,5,888,0,0,12107,12108,5,727,0,0,12108,12109,5,875,0,0,12109,12117,
3,992,496,0,12110,12111,5,459,0,0,12111,12112,5,875,0,0,12112,12117,3,992,
496,0,12113,12114,5,679,0,0,12114,12115,5,875,0,0,12115,12117,3,950,475,
0,12116,12107,1,0,0,0,12116,12110,1,0,0,0,12116,12113,1,0,0,0,12117,12118,
1,0,0,0,12118,12119,5,889,0,0,12119,1123,1,0,0,0,12120,12121,5,107,0,0,12121,
12122,5,888,0,0,12122,12123,5,328,0,0,12123,12124,5,875,0,0,12124,12125,
3,1126,563,0,12125,12126,5,889,0,0,12126,12128,3,1120,560,0,12127,12129,
3,1122,561,0,12128,12127,1,0,0,0,12128,12129,1,0,0,0,12129,1125,1,0,0,0,
12130,12131,7,106,0,0,12131,1127,1,0,0,0,12132,12133,5,491,0,0,12133,12134,
5,96,0,0,12134,12135,3,988,494,0,12135,1129,1,0,0,0,12136,12137,3,956,478,
0,12137,1131,1,0,0,0,12138,12140,3,992,496,0,12139,12141,5,43,0,0,12140,
12139,1,0,0,0,12140,12141,1,0,0,0,12141,12142,1,0,0,0,12142,12152,3,1130,
565,0,12143,12144,5,894,0,0,12144,12146,3,992,496,0,12145,12147,5,43,0,0,
12146,12145,1,0,0,0,12146,12147,1,0,0,0,12147,12148,1,0,0,0,12148,12149,
3,1130,565,0,12149,12151,1,0,0,0,12150,12143,1,0,0,0,12151,12154,1,0,0,0,
12152,12150,1,0,0,0,12152,12153,1,0,0,0,12153,1133,1,0,0,0,12154,12152,1,
0,0,0,12155,12156,5,397,0,0,12156,12157,3,1132,566,0,12157,1135,1,0,0,0,
12158,12159,5,645,0,0,12159,12160,5,206,0,0,12160,12168,5,388,0,0,12161,
12162,5,464,0,0,12162,12163,5,206,0,0,12163,12168,5,388,0,0,12164,12165,
5,805,0,0,12165,12166,5,768,0,0,12166,12168,5,594,0,0,12167,12158,1,0,0,
0,12167,12161,1,0,0,0,12167,12164,1,0,0,0,12168,1137,1,0,0,0,12169,12170,
5,466,0,0,12170,12171,5,593,0,0,12171,12172,5,508,0,0,12172,12178,5,386,
0,0,12173,12174,5,17,0,0,12174,12175,5,594,0,0,12175,12176,5,508,0,0,12176,
12178,5,386,0,0,12177,12169,1,0,0,0,12177,12173,1,0,0,0,12178,12180,1,0,
0,0,12179,12181,3,1136,568,0,12180,12179,1,0,0,0,12180,12181,1,0,0,0,12181,
1139,1,0,0,0,12182,12183,7,107,0,0,12183,1141,1,0,0,0,12184,12185,5,853,
0,0,12185,1143,1,0,0,0,12186,12187,5,14,0,0,12187,12188,5,386,0,0,12188,
12200,5,650,0,0,12189,12190,5,505,0,0,12190,12191,5,359,0,0,12191,12201,
5,593,0,0,12192,12193,5,745,0,0,12193,12194,5,422,0,0,12194,12201,5,593,
0,0,12195,12197,5,745,0,0,12196,12198,3,1140,570,0,12197,12196,1,0,0,0,12197,
12198,1,0,0,0,12198,12199,1,0,0,0,12199,12201,3,1142,571,0,12200,12189,1,
0,0,0,12200,12192,1,0,0,0,12200,12195,1,0,0,0,12201,1145,1,0,0,0,12202,12203,
3,1142,571,0,12203,12204,5,43,0,0,12204,12212,3,992,496,0,12205,12206,5,
894,0,0,12206,12207,3,1142,571,0,12207,12208,5,43,0,0,12208,12209,3,992,
496,0,12209,12211,1,0,0,0,12210,12205,1,0,0,0,12211,12214,1,0,0,0,12212,
12210,1,0,0,0,12212,12213,1,0,0,0,12213,1147,1,0,0,0,12214,12212,1,0,0,0,
12215,12216,5,181,0,0,12216,12217,3,1146,573,0,12217,1149,1,0,0,0,12218,
12219,5,390,0,0,12219,12221,5,888,0,0,12220,12222,3,1128,564,0,12221,12220,
1,0,0,0,12221,12222,1,0,0,0,12222,12224,1,0,0,0,12223,12225,3,1194,597,0,
12224,12223,1,0,0,0,12224,12225,1,0,0,0,12225,12227,1,0,0,0,12226,12228,
3,1134,567,0,12227,12226,1,0,0,0,12227,12228,1,0,0,0,12228,12230,1,0,0,0,
12229,12231,3,1138,569,0,12230,12229,1,0,0,0,12230,12231,1,0,0,0,12231,12233,
1,0,0,0,12232,12234,3,1144,572,0,12233,12232,1,0,0,0,12233,12234,1,0,0,0,
12234,12236,1,0,0,0,12235,12237,3,974,487,0,12236,12235,1,0,0,0,12236,12237,
1,0,0,0,12237,12239,1,0,0,0,12238,12240,3,1148,574,0,12239,12238,1,0,0,0,
12239,12240,1,0,0,0,12240,12241,1,0,0,0,12241,12242,5,889,0,0,12242,1151,
1,0,0,0,12243,12244,5,515,0,0,12244,12245,5,888,0,0,12245,12246,3,956,478,
0,12246,12247,5,888,0,0,12247,12248,3,956,478,0,12248,12249,5,889,0,0,12249,
12250,5,269,0,0,12250,12251,3,956,478,0,12251,12252,5,325,0,0,12252,12253,
5,888,0,0,12253,12258,3,1034,517,0,12254,12255,5,894,0,0,12255,12257,3,1034,
517,0,12256,12254,1,0,0,0,12257,12260,1,0,0,0,12258,12256,1,0,0,0,12258,
12259,1,0,0,0,12259,12261,1,0,0,0,12260,12258,1,0,0,0,12261,12262,5,889,
0,0,12262,12267,5,889,0,0,12263,12265,3,1078,539,0,12264,12266,3,1154,577,
0,12265,12264,1,0,0,0,12265,12266,1,0,0,0,12266,12268,1,0,0,0,12267,12263,
1,0,0,0,12267,12268,1,0,0,0,12268,12281,1,0,0,0,12269,12270,5,769,0,0,12270,
12271,5,888,0,0,12271,12272,3,956,478,0,12272,12273,5,269,0,0,12273,12274,
3,976,488,0,12274,12275,5,325,0,0,12275,12276,5,888,0,0,12276,12277,3,978,
489,0,12277,12278,5,889,0,0,12278,12279,5,889,0,0,12279,12281,1,0,0,0,12280,
12243,1,0,0,0,12280,12269,1,0,0,0,12281,1153,1,0,0,0,12282,12283,5,888,0,
0,12283,12288,3,956,478,0,12284,12285,5,894,0,0,12285,12287,3,956,478,0,
12286,12284,1,0,0,0,12287,12290,1,0,0,0,12288,12286,1,0,0,0,12288,12289,
1,0,0,0,12289,12291,1,0,0,0,12290,12288,1,0,0,0,12291,12292,5,889,0,0,12292,
1155,1,0,0,0,12293,12294,5,888,0,0,12294,12295,3,988,494,0,12295,12296,5,
889,0,0,12296,1157,1,0,0,0,12297,12298,5,888,0,0,12298,12299,3,1160,580,
0,12299,12304,5,889,0,0,12300,12302,3,1078,539,0,12301,12303,3,1154,577,
0,12302,12301,1,0,0,0,12302,12303,1,0,0,0,12303,12305,1,0,0,0,12304,12300,
1,0,0,0,12304,12305,1,0,0,0,12305,12314,1,0,0,0,12306,12311,3,1160,580,0,
12307,12309,3,1078,539,0,12308,12310,3,1154,577,0,12309,12308,1,0,0,0,12309,
12310,1,0,0,0,12310,12312,1,0,0,0,12311,12307,1,0,0,0,12311,12312,1,0,0,
0,12312,12314,1,0,0,0,12313,12297,1,0,0,0,12313,12306,1,0,0,0,12314,1159,
1,0,0,0,12315,12316,5,790,0,0,12316,12321,3,1156,578,0,12317,12318,5,894,
0,0,12318,12320,3,1156,578,0,12319,12317,1,0,0,0,12320,12323,1,0,0,0,12321,
12319,1,0,0,0,12321,12322,1,0,0,0,12322,1161,1,0,0,0,12323,12321,1,0,0,0,
12324,12327,7,108,0,0,12325,12327,7,109,0,0,12326,12324,1,0,0,0,12326,12325,
1,0,0,0,12327,1163,1,0,0,0,12328,12329,7,110,0,0,12329,12330,5,888,0,0,12330,
12331,3,986,493,0,12331,12332,5,889,0,0,12332,1165,1,0,0,0,12333,12334,5,
888,0,0,12334,12336,3,986,493,0,12335,12337,5,594,0,0,12336,12335,1,0,0,
0,12336,12337,1,0,0,0,12337,12338,1,0,0,0,12338,12340,5,889,0,0,12339,12341,
3,1164,582,0,12340,12339,1,0,0,0,12340,12341,1,0,0,0,12341,1167,1,0,0,0,
12342,12344,7,111,0,0,12343,12345,3,1162,581,0,12344,12343,1,0,0,0,12344,
12345,1,0,0,0,12345,12346,1,0,0,0,12346,12347,3,1166,583,0,12347,1169,1,
0,0,0,12348,12352,6,585,-1,0,12349,12351,5,429,0,0,12350,12349,1,0,0,0,12351,
12354,1,0,0,0,12352,12350,1,0,0,0,12352,12353,1,0,0,0,12353,12360,1,0,0,
0,12354,12352,1,0,0,0,12355,12361,3,1178,589,0,12356,12357,5,888,0,0,12357,
12358,3,1170,585,0,12358,12359,5,889,0,0,12359,12361,1,0,0,0,12360,12355,
1,0,0,0,12360,12356,1,0,0,0,12361,12370,1,0,0,0,12362,12363,10,2,0,0,12363,
12364,5,29,0,0,12364,12369,3,1170,585,3,12365,12366,10,1,0,0,12366,12367,
5,472,0,0,12367,12369,3,1170,585,2,12368,12362,1,0,0,0,12368,12365,1,0,0,
0,12369,12372,1,0,0,0,12370,12368,1,0,0,0,12370,12371,1,0,0,0,12371,1171,
1,0,0,0,12372,12370,1,0,0,0,12373,12374,7,112,0,0,12374,1173,1,0,0,0,12375,
12377,5,429,0,0,12376,12375,1,0,0,0,12376,12377,1,0,0,0,12377,12378,1,0,
0,0,12378,12379,5,439,0,0,12379,1175,1,0,0,0,12380,12381,3,1048,524,0,12381,
1177,1,0,0,0,12382,12383,5,236,0,0,12383,12384,5,888,0,0,12384,12385,3,1176,
588,0,12385,12386,5,889,0,0,12386,12458,1,0,0,0,12387,12388,3,992,496,0,
12388,12389,3,1172,586,0,12389,12390,7,113,0,0,12390,12391,5,888,0,0,12391,
12392,3,1176,588,0,12392,12393,5,889,0,0,12393,12458,1,0,0,0,12394,12396,
3,992,496,0,12395,12397,5,429,0,0,12396,12395,1,0,0,0,12396,12397,1,0,0,
0,12397,12398,1,0,0,0,12398,12399,5,84,0,0,12399,12400,3,992,496,0,12400,
12401,5,29,0,0,12401,12402,3,992,496,0,12402,12458,1,0,0,0,12403,12405,3,
992,496,0,12404,12406,5,429,0,0,12405,12404,1,0,0,0,12405,12406,1,0,0,0,
12406,12407,1,0,0,0,12407,12408,5,325,0,0,12408,12411,5,888,0,0,12409,12412,
3,1176,588,0,12410,12412,3,988,494,0,12411,12409,1,0,0,0,12411,12410,1,0,
0,0,12412,12413,1,0,0,0,12413,12414,5,889,0,0,12414,12458,1,0,0,0,12415,
12417,3,992,496,0,12416,12418,5,429,0,0,12417,12416,1,0,0,0,12417,12418,
1,0,0,0,12418,12419,1,0,0,0,12419,12420,7,86,0,0,12420,12423,3,992,496,0,
12421,12422,5,229,0,0,12422,12424,3,992,496,0,12423,12421,1,0,0,0,12423,
12424,1,0,0,0,12424,12458,1,0,0,0,12425,12427,3,992,496,0,12426,12428,5,
429,0,0,12427,12426,1,0,0,0,12427,12428,1,0,0,0,12428,12429,1,0,0,0,12429,
12430,5,586,0,0,12430,12431,3,992,496,0,12431,12458,1,0,0,0,12432,12434,
3,992,496,0,12433,12435,5,429,0,0,12434,12433,1,0,0,0,12434,12435,1,0,0,
0,12435,12436,1,0,0,0,12436,12437,7,86,0,0,12437,12438,5,30,0,0,12438,12439,
5,888,0,0,12439,12444,3,992,496,0,12440,12441,5,894,0,0,12441,12443,3,992,
496,0,12442,12440,1,0,0,0,12443,12446,1,0,0,0,12444,12442,1,0,0,0,12444,
12445,1,0,0,0,12445,12447,1,0,0,0,12446,12444,1,0,0,0,12447,12450,5,889,
0,0,12448,12449,5,229,0,0,12449,12451,3,992,496,0,12450,12448,1,0,0,0,12450,
12451,1,0,0,0,12451,12458,1,0,0,0,12452,12453,3,992,496,0,12453,12454,5,
342,0,0,12454,12455,3,1174,587,0,12455,12458,1,0,0,0,12456,12458,3,992,496,
0,12457,12382,1,0,0,0,12457,12387,1,0,0,0,12457,12394,1,0,0,0,12457,12403,
1,0,0,0,12457,12415,1,0,0,0,12457,12425,1,0,0,0,12457,12432,1,0,0,0,12457,
12452,1,0,0,0,12457,12456,1,0,0,0,12458,1179,1,0,0,0,12459,12460,5,804,0,
0,12460,12461,3,1170,585,0,12461,1181,1,0,0,0,12462,12466,3,1074,537,0,12463,
12466,3,986,493,0,12464,12466,3,1080,540,0,12465,12462,1,0,0,0,12465,12463,
1,0,0,0,12465,12464,1,0,0,0,12466,1183,1,0,0,0,12467,12472,3,1182,591,0,
12468,12469,5,894,0,0,12469,12471,3,1182,591,0,12470,12468,1,0,0,0,12471,
12474,1,0,0,0,12472,12470,1,0,0,0,12472,12473,1,0,0,0,12473,1185,1,0,0,0,
12474,12472,1,0,0,0,12475,12476,5,297,0,0,12476,12477,5,96,0,0,12477,12479,
3,1184,592,0,12478,12480,3,1188,594,0,12479,12478,1,0,0,0,12479,12480,1,
0,0,0,12480,12497,1,0,0,0,12481,12482,5,297,0,0,12482,12487,5,96,0,0,12483,
12488,5,157,0,0,12484,12485,5,298,0,0,12485,12488,5,641,0,0,12486,12488,
5,590,0,0,12487,12483,1,0,0,0,12487,12484,1,0,0,0,12487,12486,1,0,0,0,12488,
12489,1,0,0,0,12489,12490,5,888,0,0,12490,12491,3,1184,592,0,12491,12492,
5,889,0,0,12492,12497,1,0,0,0,12493,12494,5,297,0,0,12494,12495,5,96,0,0,
12495,12497,5,17,0,0,12496,12475,1,0,0,0,12496,12481,1,0,0,0,12496,12493,
1,0,0,0,12497,1187,1,0,0,0,12498,12499,5,305,0,0,12499,12500,3,1170,585,
0,12500,1189,1,0,0,0,12501,12502,5,536,0,0,12502,12503,3,992,496,0,12503,
1191,1,0,0,0,12504,12508,3,956,478,0,12505,12508,3,986,493,0,12506,12508,
3,992,496,0,12507,12504,1,0,0,0,12507,12505,1,0,0,0,12507,12506,1,0,0,0,
12508,12510,1,0,0,0,12509,12511,7,95,0,0,12510,12509,1,0,0,0,12510,12511,
1,0,0,0,12511,12514,1,0,0,0,12512,12513,5,438,0,0,12513,12515,7,107,0,0,
12514,12512,1,0,0,0,12514,12515,1,0,0,0,12515,1193,1,0,0,0,12516,12517,5,
475,0,0,12517,12518,5,96,0,0,12518,12523,3,1192,596,0,12519,12520,5,894,
0,0,12520,12522,3,1192,596,0,12521,12519,1,0,0,0,12522,12525,1,0,0,0,12523,
12521,1,0,0,0,12523,12524,1,0,0,0,12524,1195,1,0,0,0,12525,12523,1,0,0,0,
12526,12527,7,114,0,0,12527,1197,1,0,0,0,12528,12529,7,115,0,0,12529,1199,
1,0,0,0,12530,12531,5,369,0,0,12531,12534,3,986,493,0,12532,12533,5,459,
0,0,12533,12535,3,986,493,0,12534,12532,1,0,0,0,12534,12535,1,0,0,0,12535,
12555,1,0,0,0,12536,12537,5,459,0,0,12537,12539,3,986,493,0,12538,12536,
1,0,0,0,12538,12539,1,0,0,0,12539,12541,1,0,0,0,12540,12542,3,1196,598,0,
12541,12540,1,0,0,0,12541,12542,1,0,0,0,12542,12543,1,0,0,0,12543,12545,
5,258,0,0,12544,12546,3,1198,599,0,12545,12544,1,0,0,0,12545,12546,1,0,0,
0,12546,12547,1,0,0,0,12547,12549,3,986,493,0,12548,12550,3,1196,598,0,12549,
12548,1,0,0,0,12549,12550,1,0,0,0,12550,12552,1,0,0,0,12551,12553,5,467,
0,0,12552,12551,1,0,0,0,12552,12553,1,0,0,0,12553,12555,1,0,0,0,12554,12530,
1,0,0,0,12554,12538,1,0,0,0,12555,1201,1,0,0,0,12556,12557,7,116,0,0,12557,
1203,1,0,0,0,12558,12559,5,591,0,0,12559,12560,5,888,0,0,12560,12561,5,239,
0,0,12561,12562,5,875,0,0,12562,12563,3,992,496,0,12563,12564,5,894,0,0,
12564,12565,5,620,0,0,12565,12566,5,875,0,0,12566,12573,3,992,496,0,12567,
12568,5,894,0,0,12568,12569,5,592,0,0,12569,12570,5,875,0,0,12570,12572,
3,1202,601,0,12571,12567,1,0,0,0,12572,12575,1,0,0,0,12573,12571,1,0,0,0,
12573,12574,1,0,0,0,12574,12576,1,0,0,0,12575,12573,1,0,0,0,12576,12577,
5,889,0,0,12577,12593,1,0,0,0,12578,12579,5,591,0,0,12579,12580,5,888,0,
0,12580,12581,3,992,496,0,12581,12582,5,894,0,0,12582,12587,3,992,496,0,
12583,12584,5,894,0,0,12584,12586,3,1202,601,0,12585,12583,1,0,0,0,12586,
12589,1,0,0,0,12587,12585,1,0,0,0,12587,12588,1,0,0,0,12588,12590,1,0,0,
0,12589,12587,1,0,0,0,12590,12591,5,889,0,0,12591,12593,1,0,0,0,12592,12558,
1,0,0,0,12592,12578,1,0,0,0,12593,1205,1,0,0,0,1641,1207,1216,1220,1228,
1234,1242,1246,1251,1255,1259,1265,1274,1278,1282,1286,1294,1297,1306,1314,
1320,1331,1337,1343,1350,1354,1368,1372,1379,1389,1402,1407,1411,1415,1421,
1423,1429,1435,1437,1441,1452,1479,1483,1487,1493,1495,1505,1508,1511,1514,
1519,1525,1534,1544,1548,1551,1554,1559,1562,1574,1584,1598,1613,1617,1625,
1633,1636,1639,1642,1647,1650,1654,1660,1667,1675,1679,1685,1692,1701,1706,
1711,1720,1732,1736,1739,1754,1756,1766,1768,1776,1782,1784,1791,1793,1802,
1808,1810,1820,1825,1827,1838,1840,1853,1855,1860,1862,1872,1874,1878,1884,
1891,1907,1923,1936,1938,1945,1957,1964,1994,1999,2006,2019,2024,2042,2046,
2062,2066,2074,2077,2082,2086,2091,2096,2104,2108,2110,2117,2122,2127,2132,
2137,2143,2146,2152,2157,2159,2166,2168,2176,2182,2184,2194,2199,2201,2211,
2213,2225,2230,2232,2242,2244,2248,2252,2268,2277,2279,2293,2297,2311,2322,
2327,2336,2339,2352,2357,2399,2443,2470,2528,2623,2636,2644,2650,2662,2673,
2679,2683,2690,2695,2700,2703,2711,2719,2722,2726,2734,2742,2746,2755,2758,
2769,2779,2789,2796,2801,2804,2807,2822,2831,2845,2855,2879,2886,2895,2908,
2914,2919,2925,2938,2951,2958,2961,2967,2977,2992,3004,3011,3026,3034,3042,
3049,3060,3067,3070,3076,3084,3090,3102,3117,3129,3141,3156,3168,3176,3182,
3194,3199,3205,3216,3223,3227,3229,3262,3275,3302,3307,3312,3321,3328,3340,
3351,3357,3377,3381,3384,3388,3397,3401,3406,3410,3414,3418,3423,3427,3431,
3439,3447,3455,3460,3465,3468,3483,3494,3503,3510,3515,3517,3522,3527,3537,
3542,3551,3556,3565,3570,3577,3583,3594,3601,3606,3612,3626,3632,3638,3650,
3665,3677,3689,3704,3716,3724,3730,3742,3751,3760,3765,3783,3798,3803,3806,
3814,3819,3821,3830,3833,3835,3840,3850,3859,3868,3876,3881,3888,3901,3913,
3919,3924,3934,3944,3951,3956,3959,3962,3967,3975,3983,3992,3998,4005,4012,
4022,4026,4030,4033,4036,4041,4046,4050,4055,4061,4065,4074,4079,4084,4089,
4098,4100,4105,4110,4119,4121,4126,4131,4139,4147,4155,4160,4165,4169,4173,
4182,4187,4195,4201,4211,4215,4219,4226,4229,4234,4239,4248,4250,4255,4260,
4269,4271,4276,4281,4289,4297,4305,4312,4320,4324,4333,4338,4346,4352,4358,
4362,4369,4372,4377,4382,4387,4392,4397,4402,4407,4412,4417,4422,4427,4432,
4437,4441,4445,4453,4461,4467,4471,4475,4482,4487,4490,4494,4498,4507,4512,
4520,4526,4542,4545,4551,4558,4565,4571,4577,4588,4593,4595,4601,4608,4615,
4621,4627,4638,4643,4645,4650,4661,4667,4672,4683,4689,4694,4705,4708,4711,
4716,4729,4735,4739,4743,4748,4751,4759,4767,4770,4774,4778,4785,4793,4797,
4803,4808,4813,4816,4821,4834,4840,4845,4855,4865,4871,4876,4884,4892,4897,
4905,4910,4915,4920,4923,4926,4931,4939,4947,4957,4962,4976,4988,5008,5017,
5029,5033,5041,5045,5048,5055,5071,5081,5084,5100,5103,5118,5127,5132,5135,
5138,5141,5153,5160,5164,5167,5174,5178,5182,5187,5197,5201,5204,5209,5218,
5224,5228,5247,5252,5257,5261,5265,5267,5269,5273,5290,5293,5309,5313,5324,
5327,5330,5335,5346,5349,5360,5363,5365,5371,5384,5403,5406,5427,5439,5442,
5449,5453,5467,5474,5478,5481,5487,5490,5502,5510,5518,5528,5535,5538,5541,
5544,5547,5550,5553,5558,5563,5566,5569,5572,5575,5578,5581,5586,5594,5602,
5612,5619,5624,5632,5642,5651,5672,5680,5688,5702,5714,5734,5748,5762,5765,
5772,5784,5797,5804,5823,5827,5842,5848,5855,5861,5889,5897,5916,5929,5936,
5939,5949,5957,5960,5963,5974,5977,5982,5984,5987,6010,6020,6023,6027,6030,
6033,6039,6054,6061,6077,6087,6134,6148,6153,6161,6169,6174,6177,6181,6185,
6207,6213,6218,6230,6243,6249,6253,6258,6273,6286,6292,6317,6323,6325,6329,
6333,6349,6353,6357,6365,6368,6374,6379,6383,6394,6396,6400,6403,6407,6411,
6416,6421,6424,6427,6430,6445,6449,6465,6474,6484,6489,6493,6498,6503,6506,
6511,6514,6517,6520,6523,6526,6530,6533,6547,6550,6556,6568,6570,6573,6576,
6589,6594,6604,6609,6614,6617,6622,6627,6634,6639,6646,6649,6652,6660,6665,
6668,6674,6677,6680,6683,6686,6690,6695,6702,6705,6708,6718,6721,6724,6727,
6731,6736,6743,6746,6749,6761,6764,6767,6770,6773,6775,6782,6785,6792,6803,
6809,6819,6829,6832,6841,6844,6853,6856,6865,6871,6876,6882,6894,6900,6905,
6911,6916,6920,6925,6933,6942,6946,6949,6953,6962,6965,6977,6980,6983,6986,
6990,7002,7005,7013,7019,7021,7029,7037,7042,7045,7052,7055,7065,7068,7080,
7083,7086,7089,7101,7104,7107,7110,7115,7134,7138,7143,7154,7162,7174,7177,
7182,7189,7194,7198,7201,7204,7207,7210,7217,7226,7233,7236,7239,7257,7285,
7289,7294,7305,7309,7314,7328,7330,7334,7338,7344,7349,7354,7359,7362,7375,
7382,7392,7395,7407,7410,7413,7416,7430,7433,7436,7439,7446,7449,7459,7462,
7468,7482,7485,7488,7491,7498,7501,7511,7514,7520,7529,7532,7535,7548,7559,
7562,7567,7573,7583,7593,7596,7605,7608,7617,7620,7629,7635,7640,7646,7658,
7662,7669,7672,7678,7680,7685,7688,7694,7696,7700,7704,7708,7711,7715,7721,
7731,7740,7744,7747,7751,7755,7760,7765,7770,7773,7776,7779,7783,7788,7810,
7818,7827,7829,7837,7845,7850,7855,7863,7868,7873,7879,7884,7897,7902,7907,
7912,7920,7923,7927,7932,7945,7950,7955,7960,7968,7976,7981,7986,7989,7994,
7999,8002,8004,8008,8013,8034,8039,8044,8049,8054,8059,8064,8069,8074,8078,
8083,8096,8101,8104,8114,8117,8123,8126,8132,8136,8140,8143,8146,8149,8152,
8156,8161,8167,8175,8181,8186,8192,8200,8206,8211,8222,8228,8243,8249,8255,
8265,8272,8283,8307,8358,8367,8392,8418,8423,8425,8448,8463,8484,8489,8504,
8519,8522,8526,8532,8536,8539,8545,8549,8552,8558,8562,8565,8567,8592,8600,
8609,8612,8621,8624,8627,8636,8639,8642,8646,8650,8653,8657,8661,8664,8678,
8681,8685,8693,8696,8699,8703,8706,8710,8715,8729,8732,8736,8744,8747,8750,
8752,8757,8767,8775,8783,8788,8791,8799,8802,8804,8809,8820,8823,8834,8845,
8853,8858,8866,8871,8892,8895,8926,8932,8936,8940,8946,8949,8952,8955,8959,
8963,8967,8974,8977,8980,8984,8988,8992,8998,9002,9006,9010,9016,9019,9022,
9025,9027,9032,9036,9039,9042,9051,9057,9070,9078,9087,9094,9115,9118,9120,
9130,9134,9140,9150,9158,9160,9162,9166,9169,9173,9177,9184,9189,9192,9196,
9201,9203,9206,9211,9213,9221,9224,9227,9230,9233,9241,9246,9251,9254,9257,
9260,9263,9266,9269,9273,9276,9280,9285,9287,9293,9296,9299,9302,9305,9308,
9315,9318,9322,9328,9331,9335,9339,9343,9346,9358,9366,9371,9375,9381,9385,
9388,9396,9399,9403,9415,9424,9426,9453,9459,9465,9469,9473,9476,9479,9487,
9490,9493,9497,9504,9509,9513,9516,9519,9522,9529,9533,9537,9542,9544,9549,
9561,9579,9600,9612,9614,9649,9686,9693,9702,9709,9713,9724,9728,9734,9742,
9749,9756,9760,9778,9786,9793,9800,9809,9821,9830,9837,9841,9846,9850,9856,
9864,9875,9882,9886,9891,9898,9905,9912,9919,9927,9935,9958,9970,9975,10036,
10058,10065,10079,10114,10160,10236,10240,10244,10250,10254,10256,10258,
10261,10264,10269,10275,10279,10283,10286,10288,10293,10299,10303,10307,
10312,10315,10317,10322,10332,10336,10340,10343,10346,10349,10381,10387,
10393,10396,10399,10401,10403,10406,10409,10413,10418,10424,10427,10430,
10432,10434,10437,10440,10446,10450,10455,10461,10464,10467,10469,10471,
10474,10477,10485,10491,10502,10504,10509,10520,10522,10528,10533,10547,
10562,10570,10574,10578,10584,10590,10596,10599,10610,10616,10620,10625,
10631,10634,10643,10646,10652,10659,10666,10670,10674,10676,10681,10684,
10688,10693,10698,10701,10706,10712,10718,10726,10734,10740,10745,10752,
10755,10759,10763,10766,10772,10774,10776,10779,10782,10787,10790,10803,
10822,10825,10830,10833,10838,10849,10853,10857,10863,10866,10869,10871,
10873,10876,10879,10885,10891,10894,10898,10902,10907,10911,10915,10920,
10924,10928,10934,10937,10940,10942,10944,10947,10950,10955,10967,10981,
10988,11010,11019,11034,11056,11063,11070,11081,11090,11096,11102,11106,
11120,11128,11137,11142,11147,11151,11167,11178,11201,11214,11229,11235,
11241,11247,11251,11261,11267,11269,11271,11290,11311,11319,11326,11340,
11347,11359,11363,11370,11374,11378,11382,11386,11390,11394,11398,11402,
11409,11418,11426,11438,11447,11457,11478,11497,11526,11533,11561,11565,
11574,11578,11583,11596,11601,11610,11612,11616,11620,11626,11631,11635,
11639,11644,11648,11653,11658,11668,11675,11679,11687,11691,11695,11708,
11714,11723,11731,11739,11747,11752,11756,11761,11768,11771,11774,11777,
11781,11784,11787,11796,11801,11804,11813,11817,11821,11826,11828,11831,
11836,11840,11844,11850,11853,11859,11876,11890,11899,11908,11911,11915,
11918,11921,11924,11927,11930,11933,11942,11949,11952,11955,11959,11962,
11968,11971,11974,11979,11982,11984,11998,12004,12011,12028,12032,12037,
12043,12047,12050,12056,12063,12065,12069,12076,12092,12103,12116,12128,
12140,12146,12152,12167,12177,12180,12197,12200,12212,12221,12224,12227,
12230,12233,12236,12239,12258,12265,12267,12280,12288,12302,12304,12309,
12311,12313,12321,12326,12336,12340,12344,12352,12360,12368,12370,12376,
12396,12405,12411,12417,12423,12427,12434,12444,12450,12457,12465,12472,
12479,12487,12496,12507,12510,12514,12523,12534,12538,12541,12545,12549,
12552,12554,12573,12587,12592];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SnowflakeParser extends antlr4.Parser {

    static grammarFileName = "SnowflakeParser.g4";
    static literalNames = [ null, "''AAD_PROVISIONER''", "'ABORT'", "'ABORT_DETACHED_QUERY'", 
                            "'ABORT_STATEMENT'", "'ACCESS'", "'ACCOUNT'", 
                            "'ACCOUNTADMIN'", "'ACCOUNTS'", "'ACTION'", 
                            "'ADD'", "'ADMIN_NAME'", "'ADMIN_PASSWORD'", 
                            "'AES'", "'AFTER'", "'ALERT'", "'ALERTS'", "'ALL'", 
                            "'ALLOWED_ACCOUNTS'", "'ALLOWED_DATABASES'", 
                            "'ALLOWED_INTEGRATION_TYPES'", "'ALLOWED_IP_LIST'", 
                            "'ALLOWED_SHARES'", "'ALLOWED_VALUES'", "'ALLOW_CLIENT_MFA_CACHING'", 
                            "'ALLOW_DUPLICATE'", "'ALLOW_ID_TOKEN'", "'ALLOW_OVERLAPPING_EXECUTION'", 
                            "'ALTER'", "'AND'", "'ANY'", "'ANY_VALUE'", 
                            "'API'", "'API_ALLOWED_PREFIXES'", "'API_AWS_ROLE_ARN'", 
                            "'API_BLOCKED_PREFIXES'", "'API_INTEGRATION'", 
                            "'API_KEY'", "'API_PROVIDER'", "'APPEND'", "'APPEND_ONLY'", 
                            "'APPLY'", "'ARRAY_AGG'", "'AS'", "'ASC'", "'ATTACH'", 
                            "'AT'", "'AUTHORIZATION'", "'AUTHORIZATIONS'", 
                            "'AUTO'", "''AUTO''", "'AUTOCOMMIT'", "'AUTOCOMMIT_API_SUPPORTED'", 
                            "'AUTOINCREMENT'", "'AUTO_COMPRESS'", "'AUTO_DETECT'", 
                            "'AUTO_INGEST'", "'AUTO_REFRESH'", "'AUTO_RESUME'", 
                            "'AUTO_SUSPEND'", "'AVG'", "'AVRO'", "''AVRO''", 
                            "'AWS_KEY_ID'", "'AWS_ROLE'", "'AWS_SECRET_KEY'", 
                            "'AWS_SNS'", "'AWS_SNS_ROLE_ARN'", "'AWS_SNS_TOPIC'", 
                            "'AWS_SNS_TOPIC_ARN'", "'AWS_TOKEN'", "'AZURE'", 
                            "'AZURE_AD_APPLICATION_ID'", "''AZURE_CSE''", 
                            "'AZURE_EVENT_GRID'", "'AZURE_EVENT_GRID_TOPIC_ENDPOINT'", 
                            "''AZURE''", "'AZURE_SAS_TOKEN'", "'AZURE_STORAGE_QUEUE_PRIMARY_URI'", 
                            "'AZURE_TENANT_ID'", "'BASE64'", "'BEFORE'", 
                            "'BEGIN'", "'BERNOULLI'", "'BETWEEN'", "'BINARY_AS_TEXT'", 
                            "'BINARY_FORMAT'", "'BINARY_INPUT_FORMAT'", 
                            "'BINARY_OUTPUT_FORMAT'", "'BLOCK'", "'BLOCKED_IP_LIST'", 
                            "'BLOCKED_ROLES_LIST'", "'BODY'", "''BOTH''", 
                            "'BROTLI'", "'BUSINESS_CRITICAL'", "'BY'", "'BZ2'", 
                            "'CALL'", "'CALLED'", "'CALLER'", "'CASCADE'", 
                            "'CASE'", "'CASE_INSENSITIVE'", "'CASE_SENSITIVE'", 
                            "'CAST'", "'CEIL'", "'CHANGES'", "'CHANGE_TRACKING'", 
                            "'CHANNELS'", "'CHAR'", "'CHARACTER'", "'CHARINDEX'", 
                            "'CHECK'", "'CHECKSUM'", "'CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS'", 
                            "'CLIENT_ENCRYPTION_KEY_SIZE'", "'CLIENT_MEMORY_LIMIT'", 
                            "'CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX'", 
                            "'CLIENT_METADATA_USE_SESSION_DATABASE'", "'CLIENT_PREFETCH_THREADS'", 
                            "'CLIENT_RESULT_CHUNK_SIZE'", "'CLIENT_RESULT_COLUMN_CASE_INSENSITIVE'", 
                            "'CLIENT_SESSION_KEEP_ALIVE'", "'CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY'", 
                            "'CLIENT_TIMESTAMP_TYPE_MAPPING'", "'CLONE'", 
                            "'CLUSTER'", "'CLUSTERING'", "'COALESCE'", "'COLLATE'", 
                            "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
                            "'COMMIT'", "'COMPRESSION'", "'CONCAT'", "'CONCAT_WS'", 
                            "'CONDITION'", "'CONFIGURATION'", "'CONNECT'", 
                            "'CONNECTION'", "'CONNECTIONS'", "'CONSTRAINT'", 
                            "'CONTAINS'", "'CONTEXT_HEADERS'", "'CONTINUE'", 
                            "'COPY'", "'COPY_OPTIONS'", "'COUNT'", "'CREATE'", 
                            "'CREDENTIALS'", "'CREDIT_QUOTA'", "'CROSS'", 
                            "'CSV'", "''CSV''", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                            "'CURRENT_TIMESTAMP'", "'CUSTOM'", "'DAILY'", 
                            "'DATA'", "'DATABASE'", "'DATABASES'", "'DATA_RETENTION_TIME_IN_DAYS'", 
                            "'DATEADD'", "'DATEDIFF'", "'DATE_FORMAT'", 
                            "'DATE_INPUT_FORMAT'", "'DATE_OUTPUT_FORMAT'", 
                            "'DATE_PART'", "'DAYS_TO_EXPIRY'", "'DEFAULT'", 
                            "'DEFAULT_DDL_COLLATION'", "'DEFAULT_NAMESPACE'", 
                            "'DEFAULT_ROLE'", "'DEFAULT_WAREHOUSE'", "'DEFERRABLE'", 
                            "'DEFERRED'", "'DEFINE'", "'DEFINITION'", "'DEFLATE'", 
                            "'DELEGATED'", "'DELETE'", "'DELTA'", "'DENSE_RANK'", 
                            "'DESC'", "'DESCRIBE'", "'DIRECTION'", "'DIRECTORY'", 
                            "'DISABLE'", "'DISABLED'", "'DISABLE_AUTO_CONVERT'", 
                            "'DISABLE_SNOWFLAKE_DATA'", "'DISPLAY_NAME'", 
                            "'DISTINCT'", "'DO'", "'DOWNSTREAM'", "'DROP'", 
                            "'DYNAMIC'", "'ECONOMY'", "'EDITION'", "'ELSE'", 
                            "'EMAIL'", "'EMPTY'", "'EMPTY_FIELD_AS_NULL'", 
                            "'ENABLE'", "'ENABLED'", "'ENABLE_FOR_PRIVILEGE'", 
                            "'ENABLE_INTERNAL_STAGES_PRIVATELINK'", "'ENABLE_OCTAL'", 
                            "'ENABLE_QUERY_ACCELERATION'", "'ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION'", 
                            "'ENCODING'", "'ENCRYPTION'", "'END'", "'END_TIMESTAMP'", 
                            "'ENFORCED'", "'ENFORCE_LENGTH'", "'ENFORCE_SESSION_POLICY'", 
                            "'ENTERPRISE'", "'EQUAL_NULL'", "'EQUALITY'", 
                            "'ERROR_INTEGRATION'", "'ERROR_ON_COLUMN_COUNT_MISMATCH'", 
                            "'ERROR_ON_NONDETERMINISTIC_MERGE'", "'ERROR_ON_NONDETERMINISTIC_UPDATE'", 
                            "'ESCAPE'", "'ESCAPE_UNENCLOSED_FIELD'", "'EVENT'", 
                            "'EXCEPT'", "'EXCHANGE'", null, "'EXECUTION'", 
                            "'EXISTS'", "'EXPIRY_DATE'", "'EXPLAIN'", "'EXPR'", 
                            "'EXTERNAL'", "'EXTERNAL_OAUTH'", "'EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST'", 
                            "'EXTERNAL_OAUTH_ALLOWED_ROLES_LIST'", "'EXTERNAL_OAUTH_ANY_ROLE_MODE'", 
                            "'EXTERNAL_OAUTH_AUDIENCE_LIST'", "'EXTERNAL_OAUTH_BLOCKED_ROLES_LIST'", 
                            "'EXTERNAL_OAUTH_ISSUER'", "'EXTERNAL_OAUTH_JWS_KEYS_URL'", 
                            "'EXTERNAL_OAUTH_RSA_PUBLIC_KEY'", "'EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2'", 
                            "'EXTERNAL_OAUTH_SCOPE_DELIMITER'", "'EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE'", 
                            "'EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM'", 
                            "'EXTERNAL_OAUTH_TYPE'", "'EXTERNAL_STAGE'", 
                            "'FAILOVER'", "'FALSE'", "'FETCH'", "'FIELD_DELIMITER'", 
                            "'FIELD_OPTIONALLY_ENCLOSED_BY'", "'FILE'", 
                            "'FILES'", "'FILE_EXTENSION'", "'FILE_FORMAT'", 
                            "'FIRST'", "'FIRST_NAME'", "'FIRST_VALUE'", 
                            "'FLATTEN'", "'FOR'", "'FORCE'", "'FOREIGN'", 
                            "'FORMAT'", "'FORMATS'", "'FORMAT_NAME'", "'FREQUENCY'", 
                            "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", 
                            "'FUTURE'", "'GCP_PUBSUB'", "'GCP_PUBSUB_SUBSCRIPTION_NAME'", 
                            "'GCP_PUBSUB_TOPIC_NAME'", "'GCS'", "''GCS_SSE_KMS''", 
                            "''GENERIC''", "''GENERIC_SCIM_PROVISIONER''", 
                            "'GEO'", "'GEOGRAPHY_OUTPUT_FORMAT'", "'GEOMETRY_OUTPUT_FORMAT'", 
                            "'GET'", "'GETDATE'", "'GLOBAL'", "'GOOGLE_AUDIENCE'", 
                            "'GRANT'", "'GRANTS'", "'GROUP'", "'GROUPING'", 
                            "'GROUPS'", "'GZIP'", "''HALF_AWAY_FROM_ZERO''", 
                            "''HALF_TO_EVEN''", "'HANDLER'", "'HASH'", "'HAVING'", 
                            "'HEADER'", "'HEADERS'", "'HEX'", "'HISTORY'", 
                            "'IDENTIFIER'", "'IDENTITY'", "'IF'", "'IFF'", 
                            "'IFNULL'", "'IGNORE'", "'IGNORE_UTF8_ERRORS'", 
                            "'ILIKE'", "'IMMEDIATE'", "'IMMEDIATELY'", "'IMMUTABLE'", 
                            "'IMPLICIT'", "'IMPORT'", "'IMPORTS'", "'IMPORTED'", 
                            "'IN'", "'INCREMENT'", "'INDEX'", "'INFORMATION'", 
                            "'INITIALLY'", "'INITIALLY_SUSPENDED'", "'INITIAL_REPLICATION_SIZE_LIMIT_IN_TB'", 
                            "'INNER'", "'INPUT'", "'INSERT'", "'INSERT_ONLY'", 
                            "'INT'", "'INTEGRATION'", "'INTEGRATIONS'", 
                            "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", 
                            "'JAVA'", "'JAVASCRIPT'", "'JDBC_TREAT_DECIMAL_AS_INT'", 
                            "'JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC'", "'JDBC_USE_SESSION_TIMEZONE'", 
                            "'JOIN'", "'JSON'", "''JSON''", "'JSON_INDENT'", 
                            "'JS_TREAT_INTEGER_AS_BIGINT'", "'KEY'", "'KEYS'", 
                            "'KMS_KEY_ID'", "'LAG'", "'LANGUAGE'", "'LARGE'", 
                            "'LAST'", "'LAST_NAME'", "'LAST_QUERY_ID'", 
                            "'LAST_VALUE'", "'LATERAL'", "'LEAD'", "'LEFT'", 
                            "'LEN'", "'LENGTH'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
                            "'LIST'", "'LISTING'", "'LOCAL'", "'LOCATION'", 
                            "'LOCKS'", "'LOCK_TIMEOUT'", "'LOGIN_NAME'", 
                            "'LOOKER'", "'LOWER'", "'LTRIM'", "'LZO'", "'MANAGE'", 
                            "'MANAGED'", "'MASKING'", "'MASTER_KEY'", "'MATCH'", 
                            "'MATCHED'", "'MATCHES'", "'MATCH_BY_COLUMN_NAME'", 
                            "'MATCH_RECOGNIZE'", "'MATERIALIZED'", "'MAX_BATCH_ROWS'", 
                            "'MAX_CLUSTER_COUNT'", "'MAX_CONCURRENCY_LEVEL'", 
                            "'MAX_DATA_EXTENSION_TIME_IN_DAYS'", "'MAX_SIZE'", 
                            "'MEASURES'", "'MEDIUM'", "'MEMOIZABLE'", "'MERGE'", 
                            "'MIDDLE_NAME'", "'MIN'", "'MINS_TO_BYPASS_MFA'", 
                            "'MINS_TO_UNLOCK'", "'MINUS'", "'MIN_CLUSTER_COUNT'", 
                            "'MIN_DATA_RETENTION_TIME_IN_DAYS'", "'MODE'", 
                            "'MODIFIED_AFTER'", "'MODIFY'", "'MONITOR'", 
                            "'MONITORS'", "'MONTHLY'", "'MOVE'", "'MULTI_STATEMENT_COUNT'", 
                            "'MUST_CHANGE_PASSWORD'", "'NAME'", "'NATURAL'", 
                            "'NETWORK'", "'NETWORK_POLICY'", "'NEVER'", 
                            "'NEXT'", "'NEXTVAL'", "'NO'", "'NONE'", "''NONE''", 
                            "'NOORDER'", "'NORELY'", "'NOT'", "'NOTIFICATION'", 
                            "'NOTIFICATION_INTEGRATION'", "'NOTIFICATION_PROVIDER'", 
                            "'NOTIFY'", "'NOTIFY_USERS'", "'NOVALIDATE'", 
                            "'NTILE'", "'NULLIF'", "'NULLS'", "'NULL'", 
                            "'NULL_IF'", "'NUMBER'", "'NVL'", "'NVL2'", 
                            "'OAUTH'", "'OAUTH_ALLOW_NON_TLS_REDIRECT_URI'", 
                            "'OAUTH_CLIENT'", "'OAUTH_CLIENT_RSA_PUBLIC_KEY'", 
                            "'OAUTH_CLIENT_RSA_PUBLIC_KEY_2'", "'OAUTH_ENFORCE_PKCE'", 
                            "'OAUTH_ISSUE_REFRESH_TOKENS'", "'OAUTH_REDIRECT_URI'", 
                            "'OAUTH_REFRESH_TOKEN_VALIDITY'", "'OAUTH_USE_SECONDARY_ROLES'", 
                            "'OBJECT'", "''OBJECT''", "'OBJECTS'", "'OBJECT_TYPES'", 
                            "'OF'", "'OFFSET'", "'OKTA'", "''OKTA_PROVISIONER''", 
                            "''OKTA''", "'OLD'", "'OMIT'", "'ON'", "'ONE'", 
                            "'ONLY'", "'ON_ERROR'", "'OPERATE'", "'OPTIMIZATION'", 
                            "'OPTION'", "'OR'", "'ORC'", "''ORC''", "'ORDER'", 
                            "'ORGADMIN'", "'ORGANIZATION'", "'OUTBOUND'", 
                            "'OUTER'", "'OVER'", "'OVERRIDE'", "'OVERWRITE'", 
                            "'OWNER'", "'OWNERSHIP'", "'PACKAGES'", "'PARALLEL'", 
                            "'PARAMETERS'", "'PARQUET'", "''PARQUET''", 
                            "'PARTIAL'", "'PARTITION'", "'PARTITION_TYPE'", 
                            "'PASSWORD'", "'PASSWORD_HISTORY'", "'PASSWORD_LOCKOUT_TIME_MINS'", 
                            "'PASSWORD_MAX_AGE_DAYS'", "'PASSWORD_MAX_LENGTH'", 
                            "'PASSWORD_MAX_RETRIES'", "'PASSWORD_MIN_AGE_DAYS'", 
                            "'PASSWORD_MIN_LENGTH'", "'PASSWORD_MIN_LOWER_CASE_CHARS'", 
                            "'PASSWORD_MIN_NUMERIC_CHARS'", "'PASSWORD_MIN_SPECIAL_CHARS'", 
                            "'PASSWORD_MIN_UPPER_CASE_CHARS'", "'PAST'", 
                            "'PATH'", "'PATTERN'", "'PER'", "'PERCENT'", 
                            "'PERIODIC_DATA_REKEYING'", "'PING_FEDERATE'", 
                            "'PIPE'", "'PIPES'", "'PIPE_EXECUTION_PAUSED'", 
                            "'PIVOT'", "'POLICIES'", "'POLICY'", "'PORT'", 
                            "'PREFIX'", "'PRESERVE_SPACE'", "'PREVENT_UNLOAD_TO_INLINE_URL'", 
                            "'PREVENT_UNLOAD_TO_INTERNAL_STAGES'", "'PRE_AUTHORIZED_ROLES_LIST'", 
                            "'PRIMARY'", "'PRIOR'", "'PRIVILEGES'", "'PROCEDURE'", 
                            "'PROCEDURES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
                            "'PROVIDER'", "'PUBLIC'", "'PURGE'", "'PUT'", 
                            "'PYTHON'", "'QUALIFY'", "'QUERIES'", "'QUERY_ACCELERATION_MAX_SCALE_FACTOR'", 
                            "'QUERY_TAG'", "'QUEUE'", "'QUOTED_IDENTIFIERS_IGNORE_CASE'", 
                            "'RANK'", "'RAW_DEFLATE'", "'READ'", "'READER'", 
                            "'RECLUSTER'", "'RECORD_DELIMITER'", "'RECURSIVE'", 
                            "'REFERENCES'", "'REFERENCE_USAGE'", "'REFRESH'", 
                            "'REFRESH_ON_CREATE'", "'REGION'", "'REGIONS'", 
                            "'REGION_GROUP'", "'RELY'", "'REMOVE'", "'RENAME'", 
                            "'REPEATABLE'", "'REPLACE'", "'REPLACE_INVALID_CHARACTERS'", 
                            "'REPLICA'", "'REPLICATION'", "'REPLICATION_SCHEDULE'", 
                            "'REQUEST_TRANSLATOR'", "'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION'", 
                            "'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION'", 
                            "'RESET'", "'RESOURCE'", "'RESOURCES'", "'RESOURCE_MONITOR'", 
                            "'RESPECT'", "'RESPONSE_TRANSLATOR'", "'RESTRICT'", 
                            "'RESTRICTIONS'", "'RESULT'", "'RESUME'", "'RETURNS'", 
                            "'RETURN_ALL_ERRORS'", "'RETURN_ERRORS'", "'RETURN_FAILED_ONLY'", 
                            null, "'RETURN_ROWS'", "'REVOKE'", "'RIGHT'", 
                            "'RLIKE'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
                            "'ROLLUP'", "'ROUND'", "'ROUNDING_MODE'", "'ROW'", 
                            "'ROWS'", "'ROWS_PER_RESULTSET'", "'ROW_NUMBER'", 
                            "'RSA_PUBLIC_KEY'", "'RSA_PUBLIC_KEY_2'", "'RTRIM'", 
                            "'RUN_AS_ROLE'", "'RUNTIME_VERSION'", "''S3''", 
                            "'SAML2'", "'SAML2_ENABLE_SP_INITIATED'", "'SAML2_FORCE_AUTHN'", 
                            "'SAML2_ISSUER'", "'SAML2_POST_LOGOUT_REDIRECT_URL'", 
                            "'SAML2_PROVIDER'", "'SAML2_REQUESTED_NAMEID_FORMAT'", 
                            "'SAML2_SIGN_REQUEST'", "'SAML2_SNOWFLAKE_ACS_URL'", 
                            "'SAML2_SNOWFLAKE_ISSUER_URL'", "'SAML2_SNOWFLAKE_X509_CERT'", 
                            "'SAML2_SP_INITIATED_LOGIN_PAGE_LABEL'", "'SAML2_SSO_URL'", 
                            "'SAML2_X509_CERT'", "'SAML_IDENTITY_PROVIDER'", 
                            "'SAMPLE'", "'SAVE_OLD_URL'", "'SCALE'", "'SCALING_POLICY'", 
                            "'SCHEDULE'", "'SCHEMA'", "'SCHEMAS'", "'SCIM'", 
                            "'SCIM_CLIENT'", "'SEARCH'", "'SECONDARY'", 
                            "'SECURE'", "'SECURITY'", "'SECURITYADMIN'", 
                            "'SEED'", "'SELECT'", "'SEQUENCE'", "'SEQUENCES'", 
                            "'SESSION'", "'SESSION_IDLE_TIMEOUT_MINS'", 
                            "'SESSION_POLICY'", "'SESSION_UI_IDLE_TIMEOUT_MINS'", 
                            "'SET'", "'SETS'", "'SHARE'", "'SHARES'", "'SHARE_RESTRICTIONS'", 
                            "'SHOW'", "'SHOW_INITIAL_ROWS'", "'SIMPLE'", 
                            "'SIMULATED_DATA_SHARING_CONSUMER'", "'SIZE_LIMIT'", 
                            "'SKIP'", "'SKIP_BLANK_LINES'", "'SKIP_BYTE_ORDER_MARK'", 
                            "'SKIP_FILE'", null, "'SKIP_HEADER'", "'SMALL'", 
                            "'SNAPPY'", "'SNAPPY_COMPRESSION'", "'SNOWFLAKE_FULL'", 
                            "'SNOWFLAKE_SSE'", "''SNOWPARK-OPTIMIZED''", 
                            "'SOME'", "'SOURCE'", "'SOURCE_COMPRESSION'", 
                            "'SPLIT'", "'SPLIT_PART'", "'SPLIT_TO_TABLE'", 
                            "'SQL'", "'SSO_LOGIN_PAGE'", "'STAGE'", "'STAGES'", 
                            "'STAGE_COPY_OPTIONS'", "'STAGE_FILE_FORMAT'", 
                            "'STANDARD'", "'START'", "'STARTS'", "'START_TIMESTAMP'", 
                            "'STATE'", "'STATEMENT'", "'STATEMENT_QUEUED_TIMEOUT_IN_SECONDS'", 
                            "'STATEMENT_TIMEOUT_IN_SECONDS'", "'STATS'", 
                            "'STORAGE'", "'STORAGE_ALLOWED_LOCATIONS'", 
                            "'STORAGE_AWS_OBJECT_ACL'", "'STORAGE_AWS_ROLE_ARN'", 
                            "'STORAGE_BLOCKED_LOCATIONS'", "'STORAGE_INTEGRATION'", 
                            "'STORAGE_PROVIDER'", "'STREAM'", "'STREAMS'", 
                            "'STRICT'", "'STRICT_JSON_OUTPUT'", "'STRIP_NULL_VALUES'", 
                            "'STRIP_OUTER_ARRAY'", "'STRIP_OUTER_ELEMENT'", 
                            "'SUBSTR'", "'SUBSTRING'", "'SUM'", "'SUSPEND'", 
                            "'SUSPENDED'", "'SUSPEND_IMMEDIATE'", "'SUSPEND_TASK_AFTER_NUM_FAILURES'", 
                            "'SWAP'", "'SYNC_PASSWORD'", "'SYSADMIN'", "'SYSTEM'", 
                            "'TABLE'", "'TABLEAU_DESKTOP'", "'TABLEAU_SERVER'", 
                            "'TABLES'", "'TABLESAMPLE'", "'TABLE_FORMAT'", 
                            "'TABULAR'", "'TAG'", "'TAGS'", "'TARGET_LAG'", 
                            "'TASK'", "'TASKS'", "'TEMP'", "'TEMPORARY'", 
                            "'TERSE'", "'THEN'", "'TIME'", "'TIMEADD'", 
                            "'TIMEDIFF'", "'TIMESTAMP'", "'TIMESTAMP_DAY_IS_ALWAYS_24H'", 
                            "'TIMESTAMP_FORMAT'", "'TIMESTAMP_INPUT_FORMAT'", 
                            null, "'TIMESTAMP_LTZ_OUTPUT_FORMAT'", null, 
                            "'TIMESTAMP_NTZ_OUTPUT_FORMAT'", "'TIMESTAMP_OUTPUT_FORMAT'", 
                            "'TIMESTAMP_TYPE_MAPPING'", null, "'TIMESTAMP_TZ_OUTPUT_FORMAT'", 
                            "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIMEZONE'", 
                            "'TIME_FORMAT'", "'TIME_INPUT_FORMAT'", "'TIME_OUTPUT_FORMAT'", 
                            "'TO'", "'TO_BOOLEAN'", "'TO_DATE'", "'TO_TIMESTAMP'", 
                            "'TOP'", "'TRANSACTION'", "'TRANSACTIONS'", 
                            "'TRANSACTION_ABORT_ON_ERROR'", "'TRANSACTION_DEFAULT_ISOLATION_LEVEL'", 
                            "'TRANSIENT'", "'TRIGGERS'", "'TRIM'", "'TRIM_SPACE'", 
                            "'TRUE'", "'TRUNC'", "'TRUNCATE'", "'TRUNCATECOLUMNS'", 
                            "'TRY_CAST'", "'TWO_DIGIT_CENTURY_START'", "'TYPE'", 
                            "'UNDROP'", "'UNION'", "'UNIQUE'", "'UNMATCHED'", 
                            "'UNPIVOT'", "'UNSET'", "'UNSUPPORTED_DDL_ACTION'", 
                            "'UPDATE'", "'UPPER'", "'URL'", "'USAGE'", "'USE'", 
                            "'USER'", "'USERADMIN'", "'USERS'", "'USER_SPECIFIED'", 
                            "'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE'", 
                            "'USER_TASK_TIMEOUT_MS'", "'USE_ANY_ROLE'", 
                            "'USE_CACHED_RESULT'", "'USING'", "'UTF8'", 
                            "'VALIDATE'", "'VALIDATION_MODE'", "'VALUE'", 
                            "'VALUES'", "'VARIABLES'", "'VERSION'", "'VIEW'", 
                            "'VIEWS'", "'VOLATILE'", "'WAREHOUSE'", "'WAREHOUSES'", 
                            "'WAREHOUSE_SIZE'", "'WAREHOUSE_TYPE'", "'WEEKLY'", 
                            "'WEEK_OF_YEAR_POLICY'", "'WEEK_START'", "'WHEN'", 
                            "'WHERE'", "'WITH'", "'WITHIN'", "'WORK'", "'WRITE'", 
                            "'X4LARGE'", "'X5LARGE'", "'X6LARGE'", "'XLARGE'", 
                            "'XML'", "''XML''", "'XSMALL'", "'XXLARGE'", 
                            "'XXXLARGE'", "'YEARLY'", "'ZSTD'", "'ARRAY'", 
                            "''ARRAY''", "'BIGINT'", "'BINARY'", "'BOOLEAN'", 
                            "'BYTEINT'", "'CHAR VARYING'", "'DATE'", "'DATETIME'", 
                            "'DECIMAL'", "'DOUBLE'", "'DOUBLE PRECISION'", 
                            "'FLOAT4'", "'FLOAT8'", "'FLOAT'", "'FLOOR'", 
                            "'GEOGRAPHY'", "'GEOMETRY'", "'INTEGER'", "'NCHAR'", 
                            "'NCHAR VARYING'", "'NUMERIC'", "'NVARCHAR2'", 
                            "'NVARCHAR'", "'REAL'", "'SMALLINT'", "'STRING'", 
                            "'TEXT'", "'TINYINT'", "'VARBINARY'", "'VARCHAR'", 
                            "'VARIANT'", "'LISTAGG'", "'DUMMY'", null, null, 
                            null, null, null, "'\"\"'", "'''", null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, "'->'", "'=>'", "'!='", "'<>'", 
                            "'='", "'>'", "'>='", "'<'", "'<='", "'||'", 
                            "'.'", "'@'", "''@''", "'$'", "'('", "')'", 
                            "'['", "']'", "'{'", "'}'", "','", "';'", "':'", 
                            "'::'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'" ];
    static symbolicNames = [ null, "AAD_PROVISIONER_Q", "ABORT", "ABORT_DETACHED_QUERY", 
                             "ABORT_STATEMENT", "ACCESS", "ACCOUNT", "ACCOUNTADMIN", 
                             "ACCOUNTS", "ACTION", "ADD", "ADMIN_NAME", 
                             "ADMIN_PASSWORD", "AES", "AFTER", "ALERT", 
                             "ALERTS", "ALL", "ALLOWED_ACCOUNTS", "ALLOWED_DATABASES", 
                             "ALLOWED_INTEGRATION_TYPES", "ALLOWED_IP_LIST", 
                             "ALLOWED_SHARES", "ALLOWED_VALUES", "ALLOW_CLIENT_MFA_CACHING", 
                             "ALLOW_DUPLICATE", "ALLOW_ID_TOKEN", "ALLOW_OVERLAPPING_EXECUTION", 
                             "ALTER", "AND", "ANY", "ANY_VALUE", "API", 
                             "API_ALLOWED_PREFIXES", "API_AWS_ROLE_ARN", 
                             "API_BLOCKED_PREFIXES", "API_INTEGRATION", 
                             "API_KEY", "API_PROVIDER", "APPEND", "APPEND_ONLY", 
                             "APPLY", "ARRAY_AGG", "AS", "ASC", "ATTACH", 
                             "AT_KEYWORD", "AUTHORIZATION", "AUTHORIZATIONS", 
                             "AUTO", "AUTO_Q", "AUTOCOMMIT", "AUTOCOMMIT_API_SUPPORTED", 
                             "AUTOINCREMENT", "AUTO_COMPRESS", "AUTO_DETECT", 
                             "AUTO_INGEST", "AUTO_REFRESH", "AUTO_RESUME", 
                             "AUTO_SUSPEND", "AVG", "AVRO", "AVRO_Q", "AWS_KEY_ID", 
                             "AWS_ROLE", "AWS_SECRET_KEY", "AWS_SNS", "AWS_SNS_ROLE_ARN", 
                             "AWS_SNS_TOPIC", "AWS_SNS_TOPIC_ARN", "AWS_TOKEN", 
                             "AZURE", "AZURE_AD_APPLICATION_ID", "AZURE_CSE_Q", 
                             "AZURE_EVENT_GRID", "AZURE_EVENT_GRID_TOPIC_ENDPOINT", 
                             "AZURE_Q", "AZURE_SAS_TOKEN", "AZURE_STORAGE_QUEUE_PRIMARY_URI", 
                             "AZURE_TENANT_ID", "BASE64", "BEFORE", "BEGIN", 
                             "BERNOULLI", "BETWEEN", "BINARY_AS_TEXT", "BINARY_FORMAT", 
                             "BINARY_INPUT_FORMAT", "BINARY_OUTPUT_FORMAT", 
                             "BLOCK", "BLOCKED_IP_LIST", "BLOCKED_ROLES_LIST", 
                             "BODY", "BOTH_Q", "BROTLI", "BUSINESS_CRITICAL", 
                             "BY", "BZ2", "CALL", "CALLED", "CALLER", "CASCADE", 
                             "CASE", "CASE_INSENSITIVE", "CASE_SENSITIVE", 
                             "CAST", "CEIL", "CHANGES", "CHANGE_TRACKING", 
                             "CHANNELS", "CHAR", "CHARACTER", "CHARINDEX", 
                             "CHECK", "CHECKSUM", "CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS", 
                             "CLIENT_ENCRYPTION_KEY_SIZE", "CLIENT_MEMORY_LIMIT", 
                             "CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX", 
                             "CLIENT_METADATA_USE_SESSION_DATABASE", "CLIENT_PREFETCH_THREADS", 
                             "CLIENT_RESULT_CHUNK_SIZE", "CLIENT_RESULT_COLUMN_CASE_INSENSITIVE", 
                             "CLIENT_SESSION_KEEP_ALIVE", "CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY", 
                             "CLIENT_TIMESTAMP_TYPE_MAPPING", "CLONE", "CLUSTER", 
                             "CLUSTERING", "COALESCE", "COLLATE", "COLLECTION", 
                             "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMPRESSION", 
                             "CONCAT", "CONCAT_WS", "CONDITION", "CONFIGURATION", 
                             "CONNECT", "CONNECTION", "CONNECTIONS", "CONSTRAINT", 
                             "CONTAINS", "CONTEXT_HEADERS", "CONTINUE", 
                             "COPY", "COPY_OPTIONS_", "COUNT", "CREATE", 
                             "CREDENTIALS", "CREDIT_QUOTA", "CROSS", "CSV", 
                             "CSV_Q", "CUBE", "CURRENT", "CURRENT_DATE", 
                             "CURRENT_TIMESTAMP", "CUSTOM", "DAILY", "DATA", 
                             "DATABASE", "DATABASES", "DATA_RETENTION_TIME_IN_DAYS", 
                             "DATEADD", "DATEDIFF", "DATE_FORMAT", "DATE_INPUT_FORMAT", 
                             "DATE_OUTPUT_FORMAT", "DATE_PART", "DAYS_TO_EXPIRY", 
                             "DEFAULT", "DEFAULT_DDL_COLLATION_", "DEFAULT_NAMESPACE", 
                             "DEFAULT_ROLE", "DEFAULT_WAREHOUSE", "DEFERRABLE", 
                             "DEFERRED", "DEFINE", "DEFINITION", "DEFLATE", 
                             "DELEGATED", "DELETE", "DELTA", "DENSE_RANK", 
                             "DESC", "DESCRIBE", "DIRECTION", "DIRECTORY", 
                             "DISABLE", "DISABLED", "DISABLE_AUTO_CONVERT", 
                             "DISABLE_SNOWFLAKE_DATA", "DISPLAY_NAME", "DISTINCT", 
                             "DO", "DOWNSTREAM", "DROP", "DYNAMIC", "ECONOMY", 
                             "EDITION", "ELSE", "EMAIL", "EMPTY_", "EMPTY_FIELD_AS_NULL", 
                             "ENABLE", "ENABLED", "ENABLE_FOR_PRIVILEGE", 
                             "ENABLE_INTERNAL_STAGES_PRIVATELINK", "ENABLE_OCTAL", 
                             "ENABLE_QUERY_ACCELERATION", "ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION", 
                             "ENCODING", "ENCRYPTION", "END", "END_TIMESTAMP", 
                             "ENFORCED", "ENFORCE_LENGTH", "ENFORCE_SESSION_POLICY", 
                             "ENTERPRISE", "EQUAL_NULL", "EQUALITY", "ERROR_INTEGRATION", 
                             "ERROR_ON_COLUMN_COUNT_MISMATCH", "ERROR_ON_NONDETERMINISTIC_MERGE", 
                             "ERROR_ON_NONDETERMINISTIC_UPDATE", "ESCAPE", 
                             "ESCAPE_UNENCLOSED_FIELD", "EVENT", "EXCEPT", 
                             "EXCHANGE", "EXECUTE", "EXECUTION", "EXISTS", 
                             "EXPIRY_DATE", "EXPLAIN", "EXPR", "EXTERNAL", 
                             "EXTERNAL_OAUTH", "EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST", 
                             "EXTERNAL_OAUTH_ALLOWED_ROLES_LIST", "EXTERNAL_OAUTH_ANY_ROLE_MODE", 
                             "EXTERNAL_OAUTH_AUDIENCE_LIST", "EXTERNAL_OAUTH_BLOCKED_ROLES_LIST", 
                             "EXTERNAL_OAUTH_ISSUER", "EXTERNAL_OAUTH_JWS_KEYS_URL", 
                             "EXTERNAL_OAUTH_RSA_PUBLIC_KEY", "EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2", 
                             "EXTERNAL_OAUTH_SCOPE_DELIMITER", "EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE", 
                             "EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM", 
                             "EXTERNAL_OAUTH_TYPE", "EXTERNAL_STAGE", "FAILOVER", 
                             "FALSE", "FETCH", "FIELD_DELIMITER", "FIELD_OPTIONALLY_ENCLOSED_BY", 
                             "FILE", "FILES", "FILE_EXTENSION", "FILE_FORMAT", 
                             "FIRST", "FIRST_NAME", "FIRST_VALUE", "FLATTEN", 
                             "FOR", "FORCE", "FOREIGN", "FORMAT", "FORMATS", 
                             "FORMAT_NAME", "FREQUENCY", "FROM", "FULL", 
                             "FUNCTION", "FUNCTIONS", "FUTURE", "GCP_PUBSUB", 
                             "GCP_PUBSUB_SUBSCRIPTION_NAME", "GCP_PUBSUB_TOPIC_NAME", 
                             "GCS", "GCS_SSE_KMS_Q", "GENERIC_Q", "GENERIC_SCIM_PROVISIONER_Q", 
                             "GEO", "GEOGRAPHY_OUTPUT_FORMAT", "GEOMETRY_OUTPUT_FORMAT", 
                             "GET", "GETDATE", "GLOBAL", "GOOGLE_AUDIENCE", 
                             "GRANT", "GRANTS", "GROUP", "GROUPING", "GROUPS", 
                             "GZIP", "HALF_AWAY_FROM_ZERO_Q", "HALF_TO_EVEN_Q", 
                             "HANDLER", "HASH", "HAVING", "HEADER", "HEADERS", 
                             "HEX", "HISTORY", "IDENTIFIER", "IDENTITY", 
                             "IF", "IFF", "IFNULL", "IGNORE", "IGNORE_UTF8_ERRORS", 
                             "ILIKE", "IMMEDIATE", "IMMEDIATELY", "IMMUTABLE", 
                             "IMPLICIT", "IMPORT", "IMPORTS", "IMPORTED", 
                             "IN", "INCREMENT", "INDEX", "INFORMATION", 
                             "INITIALLY", "INITIALLY_SUSPENDED", "INITIAL_REPLICATION_SIZE_LIMIT_IN_TB", 
                             "INNER", "INPUT", "INSERT", "INSERT_ONLY", 
                             "INT", "INTEGRATION", "INTEGRATIONS", "INTERSECT", 
                             "INTERVAL", "INTO", "IS", "JAVA", "JAVASCRIPT", 
                             "JDBC_TREAT_DECIMAL_AS_INT", "JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC", 
                             "JDBC_USE_SESSION_TIMEZONE", "JOIN", "JSON", 
                             "JSON_Q", "JSON_INDENT", "JS_TREAT_INTEGER_AS_BIGINT", 
                             "KEY", "KEYS", "KMS_KEY_ID", "LAG", "LANGUAGE", 
                             "LARGE", "LAST", "LAST_NAME", "LAST_QUERY_ID", 
                             "LAST_VALUE", "LATERAL", "LEAD", "LEFT", "LEN", 
                             "LENGTH", "LIKE", "LIMIT", "LINEAR", "LIST", 
                             "LISTING", "LOCAL", "LOCATION", "LOCKS", "LOCK_TIMEOUT", 
                             "LOGIN_NAME", "LOOKER", "LOWER", "LTRIM", "LZO", 
                             "MANAGE", "MANAGED", "MASKING", "MASTER_KEY", 
                             "MATCH", "MATCHED", "MATCHES", "MATCH_BY_COLUMN_NAME", 
                             "MATCH_RECOGNIZE", "MATERIALIZED", "MAX_BATCH_ROWS", 
                             "MAX_CLUSTER_COUNT", "MAX_CONCURRENCY_LEVEL", 
                             "MAX_DATA_EXTENSION_TIME_IN_DAYS", "MAX_SIZE", 
                             "MEASURES", "MEDIUM", "MEMOIZABLE", "MERGE", 
                             "MIDDLE_NAME", "MIN", "MINS_TO_BYPASS_MFA", 
                             "MINS_TO_UNLOCK", "MINUS_", "MIN_CLUSTER_COUNT", 
                             "MIN_DATA_RETENTION_TIME_IN_DAYS", "MODE", 
                             "MODIFIED_AFTER", "MODIFY", "MONITOR", "MONITORS", 
                             "MONTHLY", "MOVE", "MULTI_STATEMENT_COUNT", 
                             "MUST_CHANGE_PASSWORD", "NAME", "NATURAL", 
                             "NETWORK", "NETWORK_POLICY", "NEVER", "NEXT", 
                             "NEXTVAL", "NO", "NONE", "NONE_Q", "NOORDER", 
                             "NORELY", "NOT", "NOTIFICATION", "NOTIFICATION_INTEGRATION", 
                             "NOTIFICATION_PROVIDER", "NOTIFY", "NOTIFY_USERS", 
                             "NOVALIDATE", "NTILE", "NULLIF", "NULLS", "NULL_", 
                             "NULL_IF", "NUMBER", "NVL", "NVL2", "OAUTH", 
                             "OAUTH_ALLOW_NON_TLS_REDIRECT_URI", "OAUTH_CLIENT", 
                             "OAUTH_CLIENT_RSA_PUBLIC_KEY", "OAUTH_CLIENT_RSA_PUBLIC_KEY_2", 
                             "OAUTH_ENFORCE_PKCE", "OAUTH_ISSUE_REFRESH_TOKENS", 
                             "OAUTH_REDIRECT_URI", "OAUTH_REFRESH_TOKEN_VALIDITY", 
                             "OAUTH_USE_SECONDARY_ROLES", "OBJECT", "OBJECT_Q", 
                             "OBJECTS", "OBJECT_TYPES", "OF", "OFFSET", 
                             "OKTA", "OKTA_PROVISIONER_Q", "OKTA_Q", "OLD", 
                             "OMIT", "ON", "ONE", "ONLY", "ON_ERROR", "OPERATE", 
                             "OPTIMIZATION", "OPTION", "OR", "ORC", "ORC_Q", 
                             "ORDER", "ORGADMIN", "ORGANIZATION", "OUTBOUND", 
                             "OUTER", "OVER", "OVERRIDE", "OVERWRITE", "OWNER", 
                             "OWNERSHIP", "PACKAGES", "PARALLEL", "PARAMETERS", 
                             "PARQUET", "PARQUET_Q", "PARTIAL", "PARTITION", 
                             "PARTITION_TYPE", "PASSWORD", "PASSWORD_HISTORY", 
                             "PASSWORD_LOCKOUT_TIME_MINS", "PASSWORD_MAX_AGE_DAYS", 
                             "PASSWORD_MAX_LENGTH", "PASSWORD_MAX_RETRIES", 
                             "PASSWORD_MIN_AGE_DAYS", "PASSWORD_MIN_LENGTH", 
                             "PASSWORD_MIN_LOWER_CASE_CHARS", "PASSWORD_MIN_NUMERIC_CHARS", 
                             "PASSWORD_MIN_SPECIAL_CHARS", "PASSWORD_MIN_UPPER_CASE_CHARS", 
                             "PAST", "PATH_", "PATTERN", "PER", "PERCENT", 
                             "PERIODIC_DATA_REKEYING", "PING_FEDERATE", 
                             "PIPE", "PIPES", "PIPE_EXECUTION_PAUSED", "PIVOT", 
                             "POLICIES", "POLICY", "PORT", "PREFIX", "PRESERVE_SPACE", 
                             "PREVENT_UNLOAD_TO_INLINE_URL", "PREVENT_UNLOAD_TO_INTERNAL_STAGES", 
                             "PRE_AUTHORIZED_ROLES_LIST", "PRIMARY", "PRIOR", 
                             "PRIVILEGES", "PROCEDURE", "PROCEDURES", "PROCEDURE_NAME", 
                             "PROPERTY", "PROVIDER", "PUBLIC", "PURGE", 
                             "PUT", "PYTHON", "QUALIFY", "QUERIES", "QUERY_ACCELERATION_MAX_SCALE_FACTOR", 
                             "QUERY_TAG", "QUEUE", "QUOTED_IDENTIFIERS_IGNORE_CASE", 
                             "RANK", "RAW_DEFLATE", "READ", "READER", "RECLUSTER", 
                             "RECORD_DELIMITER", "RECURSIVE", "REFERENCES", 
                             "REFERENCE_USAGE", "REFRESH", "REFRESH_ON_CREATE", 
                             "REGION", "REGIONS", "REGION_GROUP", "RELY", 
                             "REMOVE", "RENAME", "REPEATABLE", "REPLACE", 
                             "REPLACE_INVALID_CHARACTERS", "REPLICA", "REPLICATION", 
                             "REPLICATION_SCHEDULE", "REQUEST_TRANSLATOR", 
                             "REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION", 
                             "REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION", 
                             "RESET", "RESOURCE", "RESOURCES", "RESOURCE_MONITOR", 
                             "RESPECT", "RESPONSE_TRANSLATOR", "RESTRICT", 
                             "RESTRICTIONS", "RESULT", "RESUME", "RETURNS", 
                             "RETURN_ALL_ERRORS", "RETURN_ERRORS", "RETURN_FAILED_ONLY", 
                             "RETURN_N_ROWS", "RETURN_ROWS", "REVOKE", "RIGHT", 
                             "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", 
                             "ROUND", "ROUNDING_MODE", "ROW", "ROWS", "ROWS_PER_RESULTSET", 
                             "ROW_NUMBER", "RSA_PUBLIC_KEY", "RSA_PUBLIC_KEY_2", 
                             "RTRIM", "RUN_AS_ROLE", "RUNTIME_VERSION", 
                             "S3", "SAML2", "SAML2_ENABLE_SP_INITIATED", 
                             "SAML2_FORCE_AUTHN", "SAML2_ISSUER", "SAML2_POST_LOGOUT_REDIRECT_URL", 
                             "SAML2_PROVIDER", "SAML2_REQUESTED_NAMEID_FORMAT", 
                             "SAML2_SIGN_REQUEST", "SAML2_SNOWFLAKE_ACS_URL", 
                             "SAML2_SNOWFLAKE_ISSUER_URL", "SAML2_SNOWFLAKE_X509_CERT", 
                             "SAML2_SP_INITIATED_LOGIN_PAGE_LABEL", "SAML2_SSO_URL", 
                             "SAML2_X509_CERT", "SAML_IDENTITY_PROVIDER", 
                             "SAMPLE", "SAVE_OLD_URL", "SCALE", "SCALING_POLICY", 
                             "SCHEDULE", "SCHEMA", "SCHEMAS", "SCIM", "SCIM_CLIENT", 
                             "SEARCH", "SECONDARY", "SECURE", "SECURITY", 
                             "SECURITYADMIN", "SEED", "SELECT", "SEQUENCE", 
                             "SEQUENCES", "SESSION", "SESSION_IDLE_TIMEOUT_MINS", 
                             "SESSION_POLICY", "SESSION_UI_IDLE_TIMEOUT_MINS", 
                             "SET", "SETS", "SHARE", "SHARES", "SHARE_RESTRICTIONS", 
                             "SHOW", "SHOW_INITIAL_ROWS", "SIMPLE", "SIMULATED_DATA_SHARING_CONSUMER", 
                             "SIZE_LIMIT", "SKIP_", "SKIP_BLANK_LINES", 
                             "SKIP_BYTE_ORDER_MARK", "SKIP_FILE", "SKIP_FILE_N", 
                             "SKIP_HEADER", "SMALL", "SNAPPY", "SNAPPY_COMPRESSION", 
                             "SNOWFLAKE_FULL", "SNOWFLAKE_SSE", "SNOWPARK_OPTIMIZED", 
                             "SOME", "SOURCE", "SOURCE_COMPRESSION", "SPLIT", 
                             "SPLIT_PART", "SPLIT_TO_TABLE", "SQL", "SSO_LOGIN_PAGE", 
                             "STAGE", "STAGES", "STAGE_COPY_OPTIONS", "STAGE_FILE_FORMAT", 
                             "STANDARD", "START", "STARTS", "START_TIMESTAMP", 
                             "STATE", "STATEMENT", "STATEMENT_QUEUED_TIMEOUT_IN_SECONDS", 
                             "STATEMENT_TIMEOUT_IN_SECONDS", "STATS", "STORAGE", 
                             "STORAGE_ALLOWED_LOCATIONS", "STORAGE_AWS_OBJECT_ACL", 
                             "STORAGE_AWS_ROLE_ARN", "STORAGE_BLOCKED_LOCATIONS", 
                             "STORAGE_INTEGRATION", "STORAGE_PROVIDER", 
                             "STREAM", "STREAMS", "STRICT", "STRICT_JSON_OUTPUT", 
                             "STRIP_NULL_VALUES", "STRIP_OUTER_ARRAY", "STRIP_OUTER_ELEMENT", 
                             "SUBSTR", "SUBSTRING", "SUM", "SUSPEND", "SUSPENDED", 
                             "SUSPEND_IMMEDIATE", "SUSPEND_TASK_AFTER_NUM_FAILURES", 
                             "SWAP", "SYNC_PASSWORD", "SYSADMIN", "SYSTEM", 
                             "TABLE", "TABLEAU_DESKTOP", "TABLEAU_SERVER", 
                             "TABLES", "TABLESAMPLE", "TABLE_FORMAT", "TABULAR", 
                             "TAG", "TAGS", "TARGET_LAG", "TASK", "TASKS", 
                             "TEMP", "TEMPORARY", "TERSE", "THEN", "TIME", 
                             "TIMEADD", "TIMEDIFF", "TIMESTAMP", "TIMESTAMP_DAY_IS_ALWAYS_24H", 
                             "TIMESTAMP_FORMAT", "TIMESTAMP_INPUT_FORMAT", 
                             "TIMESTAMP_LTZ", "TIMESTAMP_LTZ_OUTPUT_FORMAT", 
                             "TIMESTAMP_NTZ", "TIMESTAMP_NTZ_OUTPUT_FORMAT", 
                             "TIMESTAMP_OUTPUT_FORMAT", "TIMESTAMP_TYPE_MAPPING", 
                             "TIMESTAMP_TZ", "TIMESTAMP_TZ_OUTPUT_FORMAT", 
                             "TIMESTAMPADD", "TIMESTAMPDIFF", "TIMEZONE", 
                             "TIME_FORMAT", "TIME_INPUT_FORMAT", "TIME_OUTPUT_FORMAT", 
                             "TO", "TO_BOOLEAN", "TO_DATE", "TO_TIMESTAMP", 
                             "TOP", "TRANSACTION", "TRANSACTIONS", "TRANSACTION_ABORT_ON_ERROR", 
                             "TRANSACTION_DEFAULT_ISOLATION_LEVEL", "TRANSIENT", 
                             "TRIGGERS", "TRIM", "TRIM_SPACE", "TRUE", "TRUNC", 
                             "TRUNCATE", "TRUNCATECOLUMNS", "TRY_CAST", 
                             "TWO_DIGIT_CENTURY_START", "TYPE", "UNDROP", 
                             "UNION", "UNIQUE", "UNMATCHED", "UNPIVOT", 
                             "UNSET", "UNSUPPORTED_DDL_ACTION", "UPDATE", 
                             "UPPER", "URL", "USAGE", "USE", "USER", "USERADMIN", 
                             "USERS", "USER_SPECIFIED", "USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE", 
                             "USER_TASK_TIMEOUT_MS", "USE_ANY_ROLE", "USE_CACHED_RESULT", 
                             "USING", "UTF8", "VALIDATE", "VALIDATION_MODE", 
                             "VALUE", "VALUES", "VARIABLES", "VERSION", 
                             "VIEW", "VIEWS", "VOLATILE", "WAREHOUSE", "WAREHOUSES", 
                             "WAREHOUSE_SIZE", "WAREHOUSE_TYPE", "WEEKLY", 
                             "WEEK_OF_YEAR_POLICY", "WEEK_START", "WHEN", 
                             "WHERE", "WITH", "WITHIN", "WORK", "WRITE", 
                             "X4LARGE", "X5LARGE", "X6LARGE", "XLARGE", 
                             "XML", "XML_Q", "XSMALL", "XXLARGE", "XXXLARGE", 
                             "YEARLY", "ZSTD", "ARRAY", "ARRAY_Q", "BIGINT", 
                             "BINARY", "BOOLEAN", "BYTEINT", "CHAR_VARYING", 
                             "DATE", "DATETIME", "DECIMAL_", "DOUBLE", "DOUBLE_PRECISION", 
                             "FLOAT4", "FLOAT8", "FLOAT_", "FLOOR", "GEOGRAPHY", 
                             "GEOMETRY", "INTEGER", "NCHAR", "NCHAR_VARYING", 
                             "NUMERIC", "NVARCHAR2", "NVARCHAR", "REAL_", 
                             "SMALLINT", "STRING_", "TEXT", "TINYINT", "VARBINARY", 
                             "VARCHAR", "VARIANT", "LISTAGG", "DUMMY", "SPACE", 
                             "SQL_COMMENT", "LINE_COMMENT", "LINE_COMMENT_2", 
                             "DOUBLE_QUOTE_ID", "DOUBLE_QUOTE_BLANK", "SINGLE_QUOTE", 
                             "ID", "ID2", "S3_PATH", "S3GOV_PATH", "GCS_PATH", 
                             "AZURE_PATH", "FILE_PATH", "DBL_DOLLAR", "STRING", 
                             "DECIMAL", "FLOAT", "REAL", "CHAR_LITERAL", 
                             "ARROW", "ASSOC", "NE", "LTGT", "EQ", "GT", 
                             "GE", "LT", "LE", "PIPE_PIPE", "DOT", "AT", 
                             "AT_Q", "DOLLAR", "LR_BRACKET", "RR_BRACKET", 
                             "LSB", "RSB", "LCB", "RCB", "COMMA", "SEMI", 
                             "COLON", "COLON_COLON", "STAR", "DIVIDE", "MODULE", 
                             "PLUS", "MINUS", "TILDA" ];
    static ruleNames = [ "snowflake_file", "batch", "sql_command", "ddl_command", 
                         "dml_command", "insert_statement", "insert_multi_table_statement", 
                         "into_clause2", "values_list", "value_item", "merge_statement", 
                         "merge_matches", "merge_cond", "merge_update_delete", 
                         "merge_insert", "update_statement", "table_or_query", 
                         "delete_statement", "values_builder", "other_command", 
                         "begin_txn", "copy_into_table", "external_location", 
                         "files", "file_format", "format_name", "format_type", 
                         "stage_file_format", "copy_into_location", "comment", 
                         "function_signature", "commit", "execute_immediate", 
                         "execute_task", "explain", "parallel", "get_dml", 
                         "grant_ownership", "grant_to_role", "global_privileges", 
                         "global_privilege", "account_object_privileges", 
                         "account_object_privilege", "schema_privileges", 
                         "schema_privilege", "schema_object_privileges", 
                         "schema_object_privilege", "grant_to_share", "object_privilege", 
                         "grant_role", "role_name", "system_defined_role", 
                         "list", "user_stage", "table_stage", "named_stage", 
                         "stage_path", "put", "remove", "revoke_from_role", 
                         "revoke_from_share", "revoke_role", "rollback", 
                         "set", "truncate_materialized_view", "truncate_table", 
                         "unset", "alter_command", "account_params", "object_params", 
                         "default_ddl_collation", "object_properties", "session_params", 
                         "alter_account", "enabled_true_false", "alter_alert", 
                         "resume_suspend", "alert_set_clause", "alert_unset_clause", 
                         "alter_api_integration", "api_integration_property", 
                         "alter_connection", "alter_database", "database_property", 
                         "account_id_list", "alter_dynamic_table", "alter_external_table", 
                         "ignore_edition_check", "replication_schedule", 
                         "db_name_list", "share_name_list", "full_acct_list", 
                         "alter_failover_group", "alter_file_format", "alter_function", 
                         "alter_function_signature", "data_type_list", "alter_masking_policy", 
                         "alter_materialized_view", "alter_network_policy", 
                         "alter_notification_integration", "alter_pipe", 
                         "alter_procedure", "alter_replication_group", "credit_quota", 
                         "frequency", "notify_users", "triggerDefinition", 
                         "alter_resource_monitor", "alter_role", "alter_row_access_policy", 
                         "alter_schema", "schema_property", "alter_sequence", 
                         "alter_security_integration_external_oauth", "security_integration_external_oauth_property", 
                         "alter_security_integration_snowflake_oauth", "security_integration_snowflake_oauth_property", 
                         "alter_security_integration_saml2", "alter_security_integration_scim", 
                         "security_integration_scim_property", "alter_session", 
                         "alter_session_policy", "alter_password_policy", 
                         "alter_share", "alter_storage_integration", "alter_stream", 
                         "alter_table", "clustering_action", "table_column_action", 
                         "alter_column_clause", "inline_constraint", "enforced_not_enforced", 
                         "deferrable_not_deferrable", "initially_deferred_or_immediate", 
                         "common_constraint_properties", "on_update", "on_delete", 
                         "foreign_key_match", "on_action", "constraint_properties", 
                         "ext_table_column_action", "constraint_action", 
                         "search_optimization_action", "search_method_with_target", 
                         "alter_table_alter_column", "alter_column_decl_list", 
                         "alter_column_decl", "alter_column_opts", "column_set_tags", 
                         "column_unset_tags", "alter_tag", "alter_task", 
                         "alter_user", "alter_view", "alter_modify", "alter_warehouse", 
                         "alter_connection_opts", "alter_user_opts", "alter_tag_opts", 
                         "alter_network_policy_opts", "alter_warehouse_opts", 
                         "alter_account_opts", "set_tags", "tag_decl_list", 
                         "unset_tags", "create_command", "create_account", 
                         "create_alert", "alert_condition", "alert_action", 
                         "create_api_integration", "create_object_clone", 
                         "create_connection", "create_database", "clone_at_before", 
                         "at_before1", "header_decl", "compression_type", 
                         "compression", "create_dynamic_table", "create_event_table", 
                         "create_external_function", "create_external_table", 
                         "external_table_column_decl", "external_table_column_decl_list", 
                         "full_acct", "integration_type_name", "create_failover_group", 
                         "type_fileformat", "create_file_format", "arg_decl", 
                         "arg_default_value_clause", "col_decl", "virtual_column_decl", 
                         "function_definition", "create_function", "create_managed_account", 
                         "create_masking_policy", "tag_decl", "column_list_in_parentheses", 
                         "create_materialized_view", "create_network_policy", 
                         "cloud_provider_params_auto", "cloud_provider_params_push", 
                         "create_notification_integration", "create_pipe", 
                         "caller_owner", "executa_as", "procedure_definition", 
                         "not_null", "create_procedure", "create_replication_group", 
                         "create_resource_monitor", "create_role", "create_row_access_policy", 
                         "create_schema", "create_security_integration_external_oauth", 
                         "implicit_none", "create_security_integration_snowflake_oauth", 
                         "create_security_integration_saml2", "create_security_integration_scim", 
                         "network_policy", "partner_application", "start_with", 
                         "increment_by", "create_sequence", "create_session_policy", 
                         "session_policy_params", "session_policy_param_name", 
                         "create_password_policy", "password_policy_params", 
                         "password_policy_param_name", "create_share", "character", 
                         "format_type_options", "copy_options", "stage_encryption_opts_internal", 
                         "stage_type", "stage_master_key", "stage_kms_key", 
                         "stage_encryption_opts_aws", "aws_token", "aws_key_id", 
                         "aws_secret_key", "aws_role", "azure_encryption_value", 
                         "stage_encryption_opts_az", "storage_integration_eq_id", 
                         "az_credential_or_storage_integration", "gcp_encryption_value", 
                         "stage_encryption_opts_gcp", "aws_credential_or_storage_integration", 
                         "external_stage_params", "true_false", "enable", 
                         "refresh_on_create", "auto_refresh", "notification_integration", 
                         "directory_table_internal_params", "directory_table_external_params", 
                         "create_stage", "alter_stage", "drop_stage", "describe_stage", 
                         "show_stages", "cloud_provider_params", "cloud_provider_params2", 
                         "cloud_provider_params3", "create_storage_integration", 
                         "copy_grants", "append_only", "insert_only", "show_initial_rows", 
                         "stream_time", "create_stream", "temporary", "table_type", 
                         "with_tags", "with_row_access_policy", "cluster_by", 
                         "change_tracking", "with_masking_policy", "collate", 
                         "order_noorder", "default_value", "foreign_key", 
                         "primary_key", "out_of_line_constraint", "full_col_decl", 
                         "column_decl_item", "column_decl_item_list", "create_table", 
                         "column_decl_item_list_paren", "create_table_clause", 
                         "create_table_as_select", "create_table_like", 
                         "create_tag", "tag_allowed_values", "session_parameter", 
                         "session_parameter_list", "session_params_list", 
                         "create_task", "task_parameters", "task_compute", 
                         "task_schedule", "task_timeout", "task_suspend_after_failure_number", 
                         "task_error_integration", "task_overlap", "sql", 
                         "call", "create_user", "view_col", "create_view", 
                         "create_warehouse", "wh_common_size", "wh_extra_size", 
                         "wh_properties", "wh_params", "trigger_definition", 
                         "object_type_name", "object_type_plural", "drop_command", 
                         "drop_object", "drop_alert", "drop_connection", 
                         "drop_database", "drop_dynamic_table", "drop_external_table", 
                         "drop_failover_group", "drop_file_format", "drop_function", 
                         "drop_integration", "drop_managed_account", "drop_masking_policy", 
                         "drop_materialized_view", "drop_network_policy", 
                         "drop_pipe", "drop_procedure", "drop_replication_group", 
                         "drop_resource_monitor", "drop_role", "drop_row_access_policy", 
                         "drop_schema", "drop_sequence", "drop_session_policy", 
                         "drop_password_policy", "drop_share", "drop_stream", 
                         "drop_table", "drop_tag", "drop_task", "drop_user", 
                         "drop_view", "drop_warehouse", "cascade_restrict", 
                         "arg_types", "undrop_command", "undrop_database", 
                         "undrop_schema", "undrop_table", "undrop_tag", 
                         "use_command", "use_database", "use_role", "use_schema", 
                         "use_secondary_roles", "use_warehouse", "comment_clause", 
                         "if_suspended", "if_exists", "if_not_exists", "or_replace", 
                         "describe", "describe_command", "describe_alert", 
                         "describe_database", "describe_dynamic_table", 
                         "describe_event_table", "describe_external_table", 
                         "describe_file_format", "describe_function", "describe_integration", 
                         "describe_masking_policy", "describe_materialized_view", 
                         "describe_network_policy", "describe_pipe", "describe_procedure", 
                         "describe_result", "describe_row_access_policy", 
                         "describe_schema", "describe_search_optimization", 
                         "describe_sequence", "describe_session_policy", 
                         "describe_password_policy", "describe_share", "describe_stream", 
                         "describe_table", "describe_task", "describe_transaction", 
                         "describe_user", "describe_view", "describe_warehouse", 
                         "show_command", "show_alerts", "show_channels", 
                         "show_columns", "show_connections", "starts_with", 
                         "limit_rows", "show_databases", "show_databases_in_failover_group", 
                         "show_databases_in_replication_group", "show_delegated_authorizations", 
                         "show_dynamic_tables", "show_event_tables", "show_external_functions", 
                         "show_external_tables", "show_failover_groups", 
                         "show_file_formats", "show_functions", "show_global_accounts", 
                         "show_grants", "show_grants_opts", "show_integrations", 
                         "show_locks", "show_managed_accounts", "show_masking_policies", 
                         "in_obj", "in_obj_2", "show_materialized_views", 
                         "show_network_policies", "show_objects", "show_organization_accounts", 
                         "in_for", "show_parameters", "show_pipes", "show_primary_keys", 
                         "show_procedures", "show_regions", "show_replication_accounts", 
                         "show_replication_databases", "show_replication_groups", 
                         "show_resource_monitors", "show_roles", "show_row_access_policies", 
                         "show_schemas", "show_sequences", "show_session_policies", 
                         "show_password_policies", "show_shares", "show_shares_in_failover_group", 
                         "show_shares_in_replication_group", "show_streams", 
                         "show_tables", "show_tags", "show_tasks", "show_transactions", 
                         "show_user_functions", "show_users", "show_variables", 
                         "show_views", "show_warehouses", "like_pattern", 
                         "account_identifier", "schema_name", "object_type", 
                         "object_type_list", "tag_value", "arg_data_type", 
                         "arg_name", "param_name", "region_group_id", "snowflake_region_id", 
                         "string", "string_list", "id_fn", "id_", "keyword", 
                         "non_reserved_words", "builtin_function", "unary_or_binary_builtin_function", 
                         "binary_builtin_function", "binary_or_ternary_builtin_function", 
                         "ternary_builtin_function", "list_function", "pattern", 
                         "column_name", "column_list", "column_list_with_comment", 
                         "object_name", "object_name_or_identifier", "num", 
                         "expr_list", "expr_list_sorted", "expr", "iff_expr", 
                         "trim_expression", "try_cast_expr", "cast_expr", 
                         "json_literal", "kv_pair", "value", "arr_literal", 
                         "data_type_size", "data_type", "primitive_expression", 
                         "order_by_expr", "asc_desc", "over_clause", "function_call", 
                         "param_assoc_list", "param_assoc", "ignore_or_repect_nulls", 
                         "ranking_windowed_function", "aggregate_function", 
                         "literal", "sign", "full_column_name", "bracket_expression", 
                         "case_expression", "switch_search_condition_section", 
                         "switch_section", "query_statement", "with_expression", 
                         "common_table_expression", "select_statement", 
                         "set_operators", "select_optional_clauses", "select_clause", 
                         "select_top_clause", "select_list_no_top", "select_list_top", 
                         "select_list", "select_list_elem", "column_elem_star", 
                         "column_elem", "object_name_or_alias", "as_alias", 
                         "expression_elem", "column_position", "all_distinct", 
                         "top_clause", "into_clause", "var_list", "var", 
                         "from_clause", "table_sources", "table_source", 
                         "table_source_item_joined", "object_ref", "flatten_table_option", 
                         "flatten_table", "splited_table", "prior_list", 
                         "prior_item", "outer_join", "join_type", "join_clause", 
                         "at_before", "end", "changes", "default_append_only", 
                         "partition_by", "alias", "expr_alias_list", "measures", 
                         "match_opts", "row_match", "first_last", "symbol", 
                         "after_match", "symbol_list", "define", "match_recognize", 
                         "pivot_unpivot", "column_alias_list_in_brackets", 
                         "expr_list_in_parentheses", "values_table", "values_table_body", 
                         "sample_method", "repeatable_seed", "sample_opts", 
                         "sample", "search_condition", "comparison_operator", 
                         "null_not_null", "subquery", "predicate", "where_clause", 
                         "group_by_elem", "group_by_list", "group_by_clause", 
                         "having_clause", "qualify_clause", "order_item", 
                         "order_by_clause", "row_rows", "first_next", "limit_clause", 
                         "round_mode", "round_expr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SnowflakeParser.ruleNames;
        this.literalNames = SnowflakeParser.literalNames;
        this.symbolicNames = SnowflakeParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 496:
    	    		return this.expr_sempred(localctx, predIndex);
    	case 585:
    	    		return this.search_condition_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 28);
    		case 1:
    			return this.precpred(this._ctx, 21);
    		case 2:
    			return this.precpred(this._ctx, 20);
    		case 3:
    			return this.precpred(this._ctx, 19);
    		case 4:
    			return this.precpred(this._ctx, 17);
    		case 5:
    			return this.precpred(this._ctx, 16);
    		case 6:
    			return this.precpred(this._ctx, 3);
    		case 7:
    			return this.precpred(this._ctx, 29);
    		case 8:
    			return this.precpred(this._ctx, 27);
    		case 9:
    			return this.precpred(this._ctx, 26);
    		case 10:
    			return this.precpred(this._ctx, 14);
    		case 11:
    			return this.precpred(this._ctx, 12);
    		case 12:
    			return this.precpred(this._ctx, 6);
    		case 13:
    			return this.precpred(this._ctx, 5);
    		case 14:
    			return this.precpred(this._ctx, 4);
    		case 15:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    search_condition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return this.precpred(this._ctx, 2);
    		case 17:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	snowflake_file() {
	    let localctx = new Snowflake_fileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SnowflakeParser.RULE_snowflake_file);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===28 || _la===82 || _la===98 || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 147459) !== 0) || ((((_la - 185)) & ~0x1f) === 0 && ((1 << (_la - 185)) & 32793) !== 0) || _la===234 || _la===238 || _la===291 || _la===295 || _la===334 || _la===371 || _la===400 || _la===534 || _la===557 || _la===584 || _la===589 || ((((_la - 633)) & ~0x1f) === 0 && ((1 << (_la - 633)) & 4225) !== 0) || _la===675 || ((((_la - 760)) & ~0x1f) === 0 && ((1 << (_la - 760)) & 70689) !== 0) || _la===805) {
	            this.state = 1206;
	            this.batch();
	        }

	        this.state = 1209;
	        this.match(SnowflakeParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	batch() {
	    let localctx = new BatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SnowflakeParser.RULE_batch);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1211;
	        this.sql_command();
	        this.state = 1216;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1212;
	                this.match(SnowflakeParser.SEMI);
	                this.state = 1213;
	                this.sql_command(); 
	            }
	            this.state = 1218;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	        }

	        this.state = 1220;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===895) {
	            this.state = 1219;
	            this.match(SnowflakeParser.SEMI);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_command() {
	    let localctx = new Sql_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SnowflakeParser.RULE_sql_command);
	    try {
	        this.state = 1228;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	        case 151:
	        case 200:
	        case 765:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1222;
	            this.ddl_command();
	            break;
	        case 185:
	        case 334:
	        case 400:
	        case 633:
	        case 772:
	        case 805:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1223;
	            this.dml_command();
	            break;
	        case 645:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1224;
	            this.show_command();
	            break;
	        case 776:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1225;
	            this.use_command();
	            break;
	        case 188:
	        case 189:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1226;
	            this.describe_command();
	            break;
	        case 82:
	        case 98:
	        case 134:
	        case 135:
	        case 148:
	        case 234:
	        case 238:
	        case 291:
	        case 295:
	        case 371:
	        case 534:
	        case 557:
	        case 584:
	        case 589:
	        case 640:
	        case 675:
	        case 760:
	        case 770:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1227;
	            this.other_command();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddl_command() {
	    let localctx = new Ddl_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SnowflakeParser.RULE_ddl_command);
	    try {
	        this.state = 1234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1230;
	            this.alter_command();
	            break;
	        case 151:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1231;
	            this.create_command();
	            break;
	        case 200:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1232;
	            this.drop_command();
	            break;
	        case 765:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1233;
	            this.undrop_command();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dml_command() {
	    let localctx = new Dml_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SnowflakeParser.RULE_dml_command);
	    try {
	        this.state = 1242;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1236;
	            this.query_statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1237;
	            this.insert_statement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1238;
	            this.insert_multi_table_statement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1239;
	            this.update_statement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1240;
	            this.delete_statement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1241;
	            this.merge_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_statement() {
	    let localctx = new Insert_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SnowflakeParser.RULE_insert_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1244;
	        this.match(SnowflakeParser.INSERT);
	        this.state = 1246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===482) {
	            this.state = 1245;
	            this.match(SnowflakeParser.OVERWRITE);
	        }

	        this.state = 1248;
	        this.match(SnowflakeParser.INTO);
	        this.state = 1249;
	        this.object_name();
	        this.state = 1251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===888) {
	            this.state = 1250;
	            this.column_list_in_parentheses();
	        }

	        this.state = 1255;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 790:
	            this.state = 1253;
	            this.values_builder();
	            break;
	        case 633:
	        case 805:
	            this.state = 1254;
	            this.query_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_multi_table_statement() {
	    let localctx = new Insert_multi_table_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SnowflakeParser.RULE_insert_multi_table_statement);
	    var _la = 0;
	    try {
	        this.state = 1286;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1257;
	            this.match(SnowflakeParser.INSERT);
	            this.state = 1259;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===482) {
	                this.state = 1258;
	                this.match(SnowflakeParser.OVERWRITE);
	            }

	            this.state = 1261;
	            this.match(SnowflakeParser.ALL);
	            this.state = 1262;
	            this.into_clause2();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1263;
	            this.match(SnowflakeParser.INSERT);
	            this.state = 1265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===482) {
	                this.state = 1264;
	                this.match(SnowflakeParser.OVERWRITE);
	            }

	            this.state = 1267;
	            _la = this._input.LA(1);
	            if(!(_la===17 || _la===265)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1276; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1268;
	                this.match(SnowflakeParser.WHEN);
	                this.state = 1269;
	                this.predicate();
	                this.state = 1270;
	                this.match(SnowflakeParser.THEN);
	                this.state = 1272; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 1271;
	                    this.into_clause2();
	                    this.state = 1274; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===341);
	                this.state = 1278; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===803);
	            this.state = 1282;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===204) {
	                this.state = 1280;
	                this.match(SnowflakeParser.ELSE);
	                this.state = 1281;
	                this.into_clause2();
	            }

	            this.state = 1284;
	            this.subquery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_clause2() {
	    let localctx = new Into_clause2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SnowflakeParser.RULE_into_clause2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1288;
	        this.match(SnowflakeParser.INTO);
	        this.state = 1289;
	        this.object_name();
	        this.state = 1294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===888) {
	            this.state = 1290;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 1291;
	            this.column_list();
	            this.state = 1292;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 1297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===790) {
	            this.state = 1296;
	            this.values_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_list() {
	    let localctx = new Values_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SnowflakeParser.RULE_values_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.match(SnowflakeParser.VALUES);
	        this.state = 1300;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 1301;
	        this.value_item();
	        this.state = 1306;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 1302;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 1303;
	            this.value_item();
	            this.state = 1308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1309;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_item() {
	    let localctx = new Value_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SnowflakeParser.RULE_value_item);
	    try {
	        this.state = 1314;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 7:
	        case 9:
	        case 13:
	        case 15:
	        case 16:
	        case 31:
	        case 42:
	        case 46:
	        case 60:
	        case 105:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 127:
	        case 130:
	        case 131:
	        case 134:
	        case 139:
	        case 140:
	        case 145:
	        case 149:
	        case 150:
	        case 159:
	        case 160:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 172:
	        case 182:
	        case 186:
	        case 190:
	        case 199:
	        case 201:
	        case 203:
	        case 205:
	        case 223:
	        case 231:
	        case 237:
	        case 239:
	        case 266:
	        case 267:
	        case 268:
	        case 278:
	        case 291:
	        case 292:
	        case 293:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 317:
	        case 327:
	        case 333:
	        case 336:
	        case 338:
	        case 340:
	        case 344:
	        case 348:
	        case 353:
	        case 357:
	        case 360:
	        case 361:
	        case 364:
	        case 365:
	        case 367:
	        case 368:
	        case 373:
	        case 379:
	        case 394:
	        case 402:
	        case 408:
	        case 417:
	        case 419:
	        case 427:
	        case 437:
	        case 441:
	        case 442:
	        case 443:
	        case 454:
	        case 459:
	        case 466:
	        case 471:
	        case 475:
	        case 476:
	        case 478:
	        case 479:
	        case 491:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 506:
	        case 507:
	        case 516:
	        case 517:
	        case 518:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 542:
	        case 548:
	        case 553:
	        case 560:
	        case 569:
	        case 570:
	        case 572:
	        case 574:
	        case 576:
	        case 585:
	        case 587:
	        case 588:
	        case 590:
	        case 591:
	        case 592:
	        case 596:
	        case 620:
	        case 624:
	        case 631:
	        case 634:
	        case 636:
	        case 663:
	        case 665:
	        case 666:
	        case 667:
	        case 670:
	        case 671:
	        case 678:
	        case 682:
	        case 691:
	        case 697:
	        case 698:
	        case 699:
	        case 706:
	        case 711:
	        case 715:
	        case 716:
	        case 717:
	        case 719:
	        case 720:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 731:
	        case 733:
	        case 737:
	        case 739:
	        case 740:
	        case 741:
	        case 746:
	        case 747:
	        case 748:
	        case 759:
	        case 760:
	        case 762:
	        case 764:
	        case 773:
	        case 774:
	        case 777:
	        case 778:
	        case 779:
	        case 789:
	        case 790:
	        case 792:
	        case 794:
	        case 796:
	        case 797:
	        case 799:
	        case 820:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 858:
	        case 859:
	        case 861:
	        case 862:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1311;
	            this.column_name();
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1312;
	            this.match(SnowflakeParser.DEFAULT);
	            break;
	        case 439:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1313;
	            this.match(SnowflakeParser.NULL_);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_statement() {
	    let localctx = new Merge_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SnowflakeParser.RULE_merge_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1316;
	        this.match(SnowflakeParser.MERGE);
	        this.state = 1317;
	        this.match(SnowflakeParser.INTO);
	        this.state = 1318;
	        this.object_name();
	        this.state = 1320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262163) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	            this.state = 1319;
	            this.as_alias();
	        }

	        this.state = 1322;
	        this.match(SnowflakeParser.USING);
	        this.state = 1323;
	        this.table_source();
	        this.state = 1324;
	        this.match(SnowflakeParser.ON);
	        this.state = 1325;
	        this.search_condition(0);
	        this.state = 1326;
	        this.merge_matches();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_matches() {
	    let localctx = new Merge_matchesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SnowflakeParser.RULE_merge_matches);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1329; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1328;
	            this.merge_cond();
	            this.state = 1331; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===803);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_cond() {
	    let localctx = new Merge_condContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SnowflakeParser.RULE_merge_cond);
	    var _la = 0;
	    try {
	        this.state = 1354;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1341; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1333;
	            		this.match(SnowflakeParser.WHEN);
	            		this.state = 1334;
	            		this.match(SnowflakeParser.MATCHED);
	            		this.state = 1337;
	            		this._errHandler.sync(this);
	            		_la = this._input.LA(1);
	            		if(_la===29) {
	            		    this.state = 1335;
	            		    this.match(SnowflakeParser.AND);
	            		    this.state = 1336;
	            		    this.search_condition(0);
	            		}

	            		this.state = 1339;
	            		this.match(SnowflakeParser.THEN);
	            		this.state = 1340;
	            		this.merge_update_delete();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1343; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,22, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1345;
	            this.match(SnowflakeParser.WHEN);
	            this.state = 1346;
	            this.match(SnowflakeParser.NOT);
	            this.state = 1347;
	            this.match(SnowflakeParser.MATCHED);
	            this.state = 1350;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===29) {
	                this.state = 1348;
	                this.match(SnowflakeParser.AND);
	                this.state = 1349;
	                this.search_condition(0);
	            }

	            this.state = 1352;
	            this.match(SnowflakeParser.THEN);
	            this.state = 1353;
	            this.merge_insert();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_update_delete() {
	    let localctx = new Merge_update_deleteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SnowflakeParser.RULE_merge_update_delete);
	    var _la = 0;
	    try {
	        this.state = 1372;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 772:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1356;
	            this.match(SnowflakeParser.UPDATE);
	            this.state = 1357;
	            this.match(SnowflakeParser.SET);
	            this.state = 1358;
	            this.column_name();
	            this.state = 1359;
	            this.match(SnowflakeParser.EQ);
	            this.state = 1360;
	            this.expr(0);
	            this.state = 1368;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 1361;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 1362;
	                this.column_name();
	                this.state = 1363;
	                this.match(SnowflakeParser.EQ);
	                this.state = 1364;
	                this.expr(0);
	                this.state = 1370;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 185:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1371;
	            this.match(SnowflakeParser.DELETE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_insert() {
	    let localctx = new Merge_insertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SnowflakeParser.RULE_merge_insert);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1374;
	        this.match(SnowflakeParser.INSERT);
	        this.state = 1379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===888) {
	            this.state = 1375;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 1376;
	            this.column_list();
	            this.state = 1377;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 1381;
	        this.match(SnowflakeParser.VALUES);
	        this.state = 1382;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 1383;
	        this.expr_list();
	        this.state = 1384;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_statement() {
	    let localctx = new Update_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SnowflakeParser.RULE_update_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1386;
	        this.match(SnowflakeParser.UPDATE);
	        this.state = 1387;
	        this.object_name();
	        this.state = 1389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262163) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	            this.state = 1388;
	            this.as_alias();
	        }

	        this.state = 1391;
	        this.match(SnowflakeParser.SET);
	        this.state = 1392;
	        this.column_name();
	        this.state = 1393;
	        this.match(SnowflakeParser.EQ);
	        this.state = 1394;
	        this.expr(0);
	        this.state = 1402;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 1395;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 1396;
	            this.column_name();
	            this.state = 1397;
	            this.match(SnowflakeParser.EQ);
	            this.state = 1398;
	            this.expr(0);
	            this.state = 1404;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===276) {
	            this.state = 1405;
	            this.match(SnowflakeParser.FROM);
	            this.state = 1406;
	            this.table_sources();
	        }

	        this.state = 1411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===804) {
	            this.state = 1409;
	            this.match(SnowflakeParser.WHERE);
	            this.state = 1410;
	            this.search_condition(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_or_query() {
	    let localctx = new Table_or_queryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SnowflakeParser.RULE_table_or_query);
	    var _la = 0;
	    try {
	        this.state = 1423;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 7:
	        case 9:
	        case 13:
	        case 15:
	        case 16:
	        case 31:
	        case 42:
	        case 46:
	        case 60:
	        case 105:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 127:
	        case 130:
	        case 131:
	        case 134:
	        case 139:
	        case 140:
	        case 145:
	        case 149:
	        case 150:
	        case 159:
	        case 160:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 172:
	        case 182:
	        case 186:
	        case 190:
	        case 199:
	        case 201:
	        case 203:
	        case 205:
	        case 223:
	        case 231:
	        case 237:
	        case 239:
	        case 266:
	        case 267:
	        case 268:
	        case 278:
	        case 291:
	        case 292:
	        case 293:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 317:
	        case 327:
	        case 333:
	        case 336:
	        case 338:
	        case 340:
	        case 344:
	        case 348:
	        case 353:
	        case 357:
	        case 360:
	        case 361:
	        case 364:
	        case 365:
	        case 367:
	        case 368:
	        case 373:
	        case 379:
	        case 394:
	        case 402:
	        case 408:
	        case 417:
	        case 419:
	        case 427:
	        case 437:
	        case 441:
	        case 442:
	        case 443:
	        case 454:
	        case 459:
	        case 466:
	        case 471:
	        case 475:
	        case 476:
	        case 478:
	        case 479:
	        case 491:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 506:
	        case 507:
	        case 516:
	        case 517:
	        case 518:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 542:
	        case 548:
	        case 553:
	        case 560:
	        case 569:
	        case 570:
	        case 572:
	        case 574:
	        case 576:
	        case 585:
	        case 587:
	        case 588:
	        case 590:
	        case 591:
	        case 592:
	        case 596:
	        case 620:
	        case 624:
	        case 631:
	        case 634:
	        case 636:
	        case 663:
	        case 665:
	        case 666:
	        case 667:
	        case 670:
	        case 671:
	        case 678:
	        case 682:
	        case 691:
	        case 697:
	        case 698:
	        case 699:
	        case 706:
	        case 711:
	        case 715:
	        case 716:
	        case 717:
	        case 719:
	        case 720:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 731:
	        case 733:
	        case 737:
	        case 739:
	        case 740:
	        case 741:
	        case 746:
	        case 747:
	        case 748:
	        case 759:
	        case 760:
	        case 762:
	        case 764:
	        case 773:
	        case 774:
	        case 777:
	        case 778:
	        case 779:
	        case 789:
	        case 790:
	        case 792:
	        case 794:
	        case 796:
	        case 797:
	        case 799:
	        case 820:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 858:
	        case 859:
	        case 861:
	        case 862:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1413;
	            this.object_name();
	            this.state = 1415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262163) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 1414;
	                this.as_alias();
	            }

	            break;
	        case 888:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1417;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 1418;
	            this.subquery();
	            this.state = 1419;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 1421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262163) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 1420;
	                this.as_alias();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_statement() {
	    let localctx = new Delete_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SnowflakeParser.RULE_delete_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1425;
	        this.match(SnowflakeParser.DELETE);
	        this.state = 1426;
	        this.match(SnowflakeParser.FROM);
	        this.state = 1427;
	        this.object_name();
	        this.state = 1429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262163) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	            this.state = 1428;
	            this.as_alias();
	        }

	        this.state = 1437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===785) {
	            this.state = 1431;
	            this.match(SnowflakeParser.USING);
	            this.state = 1432;
	            this.table_or_query();
	            this.state = 1435;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===894) {
	                this.state = 1433;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 1434;
	                this.table_or_query();
	            }

	        }

	        this.state = 1441;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===804) {
	            this.state = 1439;
	            this.match(SnowflakeParser.WHERE);
	            this.state = 1440;
	            this.search_condition(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_builder() {
	    let localctx = new Values_builderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SnowflakeParser.RULE_values_builder);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1443;
	        this.match(SnowflakeParser.VALUES);
	        this.state = 1444;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 1445;
	        this.expr_list();
	        this.state = 1446;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 1452;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===894) {
	            this.state = 1447;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 1448;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 1449;
	            this.expr_list();
	            this.state = 1450;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	other_command() {
	    let localctx = new Other_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SnowflakeParser.RULE_other_command);
	    try {
	        this.state = 1479;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1454;
	            this.copy_into_table();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1455;
	            this.copy_into_location();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1456;
	            this.comment();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1457;
	            this.commit();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1458;
	            this.execute_immediate();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1459;
	            this.execute_task();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1460;
	            this.explain();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1461;
	            this.get_dml();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1462;
	            this.grant_ownership();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1463;
	            this.grant_to_role();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1464;
	            this.grant_to_share();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1465;
	            this.grant_role();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1466;
	            this.list();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1467;
	            this.put();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1468;
	            this.remove();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1469;
	            this.revoke_from_role();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1470;
	            this.revoke_from_share();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1471;
	            this.revoke_role();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1472;
	            this.rollback();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1473;
	            this.set();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1474;
	            this.truncate_materialized_view();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1475;
	            this.truncate_table();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1476;
	            this.unset();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1477;
	            this.call();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1478;
	            this.begin_txn();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	begin_txn() {
	    let localctx = new Begin_txnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SnowflakeParser.RULE_begin_txn);
	    var _la = 0;
	    try {
	        this.state = 1495;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 82:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1481;
	            this.match(SnowflakeParser.BEGIN);
	            this.state = 1483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750 || _la===807) {
	                this.state = 1482;
	                _la = this._input.LA(1);
	                if(!(_la===750 || _la===807)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1487;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===417) {
	                this.state = 1485;
	                this.match(SnowflakeParser.NAME);
	                this.state = 1486;
	                this.id_();
	            }

	            break;
	        case 675:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1489;
	            this.match(SnowflakeParser.START);
	            this.state = 1490;
	            this.match(SnowflakeParser.TRANSACTION);
	            this.state = 1493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===417) {
	                this.state = 1491;
	                this.match(SnowflakeParser.NAME);
	                this.state = 1492;
	                this.id_();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_into_table() {
	    let localctx = new Copy_into_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SnowflakeParser.RULE_copy_into_table);
	    var _la = 0;
	    try {
	        this.state = 1562;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1497;
	            this.match(SnowflakeParser.COPY);
	            this.state = 1498;
	            this.match(SnowflakeParser.INTO);
	            this.state = 1499;
	            this.object_name();
	            this.state = 1500;
	            this.match(SnowflakeParser.FROM);
	            this.state = 1505;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1501;
	                this.table_stage();
	                break;

	            case 2:
	                this.state = 1502;
	                this.user_stage();
	                break;

	            case 3:
	                this.state = 1503;
	                this.named_stage();
	                break;

	            case 4:
	                this.state = 1504;
	                this.external_location();
	                break;

	            }
	            this.state = 1508;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===262) {
	                this.state = 1507;
	                this.files();
	            }

	            this.state = 1511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===507) {
	                this.state = 1510;
	                this.pattern();
	            }

	            this.state = 1514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===264) {
	                this.state = 1513;
	                this.file_format();
	            }

	            this.state = 1519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103 || _la===220 || _la===270 || _la===389 || _la===425 || _la===468 || _la===533 || _la===581 || _la===649 || _la===761) {
	                this.state = 1516;
	                this.copy_options();
	                this.state = 1521;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===788) {
	                this.state = 1522;
	                this.match(SnowflakeParser.VALIDATION_MODE);
	                this.state = 1523;
	                this.match(SnowflakeParser.EQ);
	                this.state = 1524;
	                _la = this._input.LA(1);
	                if(!(((((_la - 579)) & ~0x1f) === 0 && ((1 << (_la - 579)) & 11) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1527;
	            this.match(SnowflakeParser.COPY);
	            this.state = 1528;
	            this.match(SnowflakeParser.INTO);
	            this.state = 1529;
	            this.object_name();
	            this.state = 1534;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===888) {
	                this.state = 1530;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 1531;
	                this.column_list();
	                this.state = 1532;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 1536;
	            this.match(SnowflakeParser.FROM);
	            this.state = 1537;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 1538;
	            this.match(SnowflakeParser.SELECT);
	            this.state = 1539;
	            this.select_list();
	            this.state = 1540;
	            this.match(SnowflakeParser.FROM);
	            this.state = 1544;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1541;
	                this.table_stage();
	                break;

	            case 2:
	                this.state = 1542;
	                this.user_stage();
	                break;

	            case 3:
	                this.state = 1543;
	                this.named_stage();
	                break;

	            }
	            this.state = 1546;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 1548;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===262) {
	                this.state = 1547;
	                this.files();
	            }

	            this.state = 1551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===507) {
	                this.state = 1550;
	                this.pattern();
	            }

	            this.state = 1554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===264) {
	                this.state = 1553;
	                this.file_format();
	            }

	            this.state = 1559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103 || _la===220 || _la===270 || _la===389 || _la===425 || _la===468 || _la===533 || _la===581 || _la===649 || _la===761) {
	                this.state = 1556;
	                this.copy_options();
	                this.state = 1561;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_location() {
	    let localctx = new External_locationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SnowflakeParser.RULE_external_location);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1564;
	        _la = this._input.LA(1);
	        if(!(((((_la - 863)) & ~0x1f) === 0 && ((1 << (_la - 863)) & 13) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	files() {
	    let localctx = new FilesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SnowflakeParser.RULE_files);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1566;
	        this.match(SnowflakeParser.FILES);
	        this.state = 1567;
	        this.match(SnowflakeParser.EQ);
	        this.state = 1568;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 1569;
	        this.string();
	        this.state = 1574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 1570;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 1571;
	            this.string();
	            this.state = 1576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1577;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_format() {
	    let localctx = new File_formatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SnowflakeParser.RULE_file_format);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1579;
	        this.match(SnowflakeParser.FILE_FORMAT);
	        this.state = 1580;
	        this.match(SnowflakeParser.EQ);
	        this.state = 1581;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 1584;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 274:
	            this.state = 1582;
	            this.format_name();
	            break;
	        case 764:
	            this.state = 1583;
	            this.format_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1586;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	format_name() {
	    let localctx = new Format_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SnowflakeParser.RULE_format_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1588;
	        this.match(SnowflakeParser.FORMAT_NAME);
	        this.state = 1589;
	        this.match(SnowflakeParser.EQ);
	        this.state = 1590;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	format_type() {
	    let localctx = new Format_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SnowflakeParser.RULE_format_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1592;
	        this.match(SnowflakeParser.TYPE);
	        this.state = 1593;
	        this.match(SnowflakeParser.EQ);
	        this.state = 1594;
	        this.type_fileformat();
	        this.state = 1598;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===25 || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4611) !== 0) || _la===136 || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 100679681) !== 0) || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 13107489) !== 0) || ((((_la - 259)) & ~0x1f) === 0 && ((1 << (_la - 259)) & 19) !== 0) || _la===300 || _la===316 || _la===381 || _la===425 || _la===440 || ((((_la - 520)) & ~0x1f) === 0 && ((1 << (_la - 520)) & 142606337) !== 0) || _la===561 || ((((_la - 651)) & ~0x1f) === 0 && ((1 << (_la - 651)) & 211) !== 0) || ((((_la - 694)) & ~0x1f) === 0 && ((1 << (_la - 694)) & 7) !== 0) || ((((_la - 729)) & ~0x1f) === 0 && ((1 << (_la - 729)) & 268443649) !== 0) || _la===819) {
	            this.state = 1595;
	            this.format_type_options();
	            this.state = 1600;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stage_file_format() {
	    let localctx = new Stage_file_formatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SnowflakeParser.RULE_stage_file_format);
	    var _la = 0;
	    try {
	        this.state = 1617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 673:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1601;
	            this.match(SnowflakeParser.STAGE_FILE_FORMAT);
	            this.state = 1602;
	            this.match(SnowflakeParser.EQ);
	            this.state = 1603;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 1604;
	            this.match(SnowflakeParser.FORMAT_NAME);
	            this.state = 1605;
	            this.match(SnowflakeParser.EQ);
	            this.state = 1606;
	            this.string();
	            break;
	        case 764:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1607;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 1608;
	            this.match(SnowflakeParser.EQ);
	            this.state = 1609;
	            this.type_fileformat();
	            this.state = 1611; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1610;
	                this.format_type_options();
	                this.state = 1613; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===25 || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4611) !== 0) || _la===136 || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 100679681) !== 0) || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 13107489) !== 0) || ((((_la - 259)) & ~0x1f) === 0 && ((1 << (_la - 259)) & 19) !== 0) || _la===300 || _la===316 || _la===381 || _la===425 || _la===440 || ((((_la - 520)) & ~0x1f) === 0 && ((1 << (_la - 520)) & 142606337) !== 0) || _la===561 || ((((_la - 651)) & ~0x1f) === 0 && ((1 << (_la - 651)) & 211) !== 0) || ((((_la - 694)) & ~0x1f) === 0 && ((1 << (_la - 694)) & 7) !== 0) || ((((_la - 729)) & ~0x1f) === 0 && ((1 << (_la - 729)) & 268443649) !== 0) || _la===819);
	            this.state = 1615;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_into_location() {
	    let localctx = new Copy_into_locationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SnowflakeParser.RULE_copy_into_location);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1619;
	        this.match(SnowflakeParser.COPY);
	        this.state = 1620;
	        this.match(SnowflakeParser.INTO);
	        this.state = 1625;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1621;
	            this.table_stage();
	            break;

	        case 2:
	            this.state = 1622;
	            this.user_stage();
	            break;

	        case 3:
	            this.state = 1623;
	            this.named_stage();
	            break;

	        case 4:
	            this.state = 1624;
	            this.external_location();
	            break;

	        }
	        this.state = 1627;
	        this.match(SnowflakeParser.FROM);
	        this.state = 1633;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 7:
	        case 9:
	        case 13:
	        case 15:
	        case 16:
	        case 31:
	        case 42:
	        case 46:
	        case 60:
	        case 105:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 127:
	        case 130:
	        case 131:
	        case 134:
	        case 139:
	        case 140:
	        case 145:
	        case 149:
	        case 150:
	        case 159:
	        case 160:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 172:
	        case 182:
	        case 186:
	        case 190:
	        case 199:
	        case 201:
	        case 203:
	        case 205:
	        case 223:
	        case 231:
	        case 237:
	        case 239:
	        case 266:
	        case 267:
	        case 268:
	        case 278:
	        case 291:
	        case 292:
	        case 293:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 317:
	        case 327:
	        case 333:
	        case 336:
	        case 338:
	        case 340:
	        case 344:
	        case 348:
	        case 353:
	        case 357:
	        case 360:
	        case 361:
	        case 364:
	        case 365:
	        case 367:
	        case 368:
	        case 373:
	        case 379:
	        case 394:
	        case 402:
	        case 408:
	        case 417:
	        case 419:
	        case 427:
	        case 437:
	        case 441:
	        case 442:
	        case 443:
	        case 454:
	        case 459:
	        case 466:
	        case 471:
	        case 475:
	        case 476:
	        case 478:
	        case 479:
	        case 491:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 506:
	        case 507:
	        case 516:
	        case 517:
	        case 518:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 542:
	        case 548:
	        case 553:
	        case 560:
	        case 569:
	        case 570:
	        case 572:
	        case 574:
	        case 576:
	        case 585:
	        case 587:
	        case 588:
	        case 590:
	        case 591:
	        case 592:
	        case 596:
	        case 620:
	        case 624:
	        case 631:
	        case 634:
	        case 636:
	        case 663:
	        case 665:
	        case 666:
	        case 667:
	        case 670:
	        case 671:
	        case 678:
	        case 682:
	        case 691:
	        case 697:
	        case 698:
	        case 699:
	        case 706:
	        case 711:
	        case 715:
	        case 716:
	        case 717:
	        case 719:
	        case 720:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 731:
	        case 733:
	        case 737:
	        case 739:
	        case 740:
	        case 741:
	        case 746:
	        case 747:
	        case 748:
	        case 759:
	        case 760:
	        case 762:
	        case 764:
	        case 773:
	        case 774:
	        case 777:
	        case 778:
	        case 779:
	        case 789:
	        case 790:
	        case 792:
	        case 794:
	        case 796:
	        case 797:
	        case 799:
	        case 820:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 858:
	        case 859:
	        case 861:
	        case 862:
	            this.state = 1628;
	            this.object_name();
	            break;
	        case 888:
	            this.state = 1629;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 1630;
	            this.query_statement();
	            this.state = 1631;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===491) {
	            this.state = 1635;
	            this.partition_by();
	        }

	        this.state = 1639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===264) {
	            this.state = 1638;
	            this.file_format();
	        }

	        this.state = 1642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103 || _la===220 || _la===270 || _la===389 || _la===425 || _la===468 || _la===533 || _la===581 || _la===649 || _la===761) {
	            this.state = 1641;
	            this.copy_options();
	        }

	        this.state = 1647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===788) {
	            this.state = 1644;
	            this.match(SnowflakeParser.VALIDATION_MODE);
	            this.state = 1645;
	            this.match(SnowflakeParser.EQ);
	            this.state = 1646;
	            this.match(SnowflakeParser.RETURN_ROWS);
	        }

	        this.state = 1650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===306) {
	            this.state = 1649;
	            this.match(SnowflakeParser.HEADER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SnowflakeParser.RULE_comment);
	    var _la = 0;
	    try {
	        this.state = 1675;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1652;
	            this.match(SnowflakeParser.COMMENT);
	            this.state = 1654;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===312) {
	                this.state = 1653;
	                this.if_exists();
	            }

	            this.state = 1656;
	            this.match(SnowflakeParser.ON);
	            this.state = 1657;
	            this.object_type_name();
	            this.state = 1658;
	            this.object_name();
	            this.state = 1660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===888) {
	                this.state = 1659;
	                this.function_signature();
	            }

	            this.state = 1662;
	            this.match(SnowflakeParser.IS);
	            this.state = 1663;
	            this.string();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1665;
	            this.match(SnowflakeParser.COMMENT);
	            this.state = 1667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===312) {
	                this.state = 1666;
	                this.if_exists();
	            }

	            this.state = 1669;
	            this.match(SnowflakeParser.ON);
	            this.state = 1670;
	            this.match(SnowflakeParser.COLUMN);
	            this.state = 1671;
	            this.full_column_name();
	            this.state = 1672;
	            this.match(SnowflakeParser.IS);
	            this.state = 1673;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_signature() {
	    let localctx = new Function_signatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SnowflakeParser.RULE_function_signature);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1677;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 1679;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110 || _la===111 || _la===336 || _la===441 || _la===454 || ((((_la - 724)) & ~0x1f) === 0 && ((1 << (_la - 724)) & 8841) !== 0) || ((((_la - 820)) & ~0x1f) === 0 && ((1 << (_la - 820)) & 4294934525) !== 0)) {
	            this.state = 1678;
	            this.data_type_list();
	        }

	        this.state = 1681;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commit() {
	    let localctx = new CommitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SnowflakeParser.RULE_commit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1683;
	        this.match(SnowflakeParser.COMMIT);
	        this.state = 1685;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===807) {
	            this.state = 1684;
	            this.match(SnowflakeParser.WORK);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execute_immediate() {
	    let localctx = new Execute_immediateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SnowflakeParser.RULE_execute_immediate);
	    var _la = 0;
	    try {
	        this.state = 1711;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1687;
	            this.match(SnowflakeParser.EXECUTE);
	            this.state = 1688;
	            this.match(SnowflakeParser.IMMEDIATE);
	            this.state = 1692;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1689;
	                this.string();
	                break;

	            case 2:
	                this.state = 1690;
	                this.id_();
	                break;

	            case 3:
	                this.state = 1691;
	                this.match(SnowflakeParser.ID2);
	                break;

	            }
	            this.state = 1706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===785) {
	                this.state = 1694;
	                this.match(SnowflakeParser.USING);
	                this.state = 1695;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 1696;
	                this.id_();
	                this.state = 1701;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 1697;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 1698;
	                    this.id_();
	                    this.state = 1703;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1704;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1708;
	            this.match(SnowflakeParser.EXECUTE);
	            this.state = 1709;
	            this.match(SnowflakeParser.IMMEDIATE);
	            this.state = 1710;
	            this.match(SnowflakeParser.DBL_DOLLAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execute_task() {
	    let localctx = new Execute_taskContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SnowflakeParser.RULE_execute_task);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1713;
	        this.match(SnowflakeParser.EXECUTE);
	        this.state = 1714;
	        this.match(SnowflakeParser.TASK);
	        this.state = 1715;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explain() {
	    let localctx = new ExplainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SnowflakeParser.RULE_explain);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1717;
	        this.match(SnowflakeParser.EXPLAIN);
	        this.state = 1720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===785) {
	            this.state = 1718;
	            this.match(SnowflakeParser.USING);
	            this.state = 1719;
	            _la = this._input.LA(1);
	            if(!(_la===349 || _la===714 || _la===847)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1722;
	        this.sql_command();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parallel() {
	    let localctx = new ParallelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SnowflakeParser.RULE_parallel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1724;
	        this.match(SnowflakeParser.PARALLEL);
	        this.state = 1725;
	        this.match(SnowflakeParser.EQ);
	        this.state = 1726;
	        this.num();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_dml() {
	    let localctx = new Get_dmlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SnowflakeParser.RULE_get_dml);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1728;
	        this.match(SnowflakeParser.GET);
	        this.state = 1732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1729;
	            this.named_stage();
	            break;

	        case 2:
	            this.state = 1730;
	            this.user_stage();
	            break;

	        case 3:
	            this.state = 1731;
	            this.table_stage();
	            break;

	        }
	        this.state = 1734;
	        this.match(SnowflakeParser.FILE_PATH);
	        this.state = 1736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===486) {
	            this.state = 1735;
	            this.parallel();
	        }

	        this.state = 1739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===507) {
	            this.state = 1738;
	            this.pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grant_ownership() {
	    let localctx = new Grant_ownershipContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SnowflakeParser.RULE_grant_ownership);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1741;
	        this.match(SnowflakeParser.GRANT);
	        this.state = 1742;
	        this.match(SnowflakeParser.OWNERSHIP);
	        this.state = 1768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1743;
	            this.match(SnowflakeParser.ON);
	            this.state = 1756;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 164:
	            case 261:
	            case 278:
	            case 337:
	            case 384:
	            case 419:
	            case 512:
	            case 527:
	            case 587:
	            case 593:
	            case 623:
	            case 634:
	            case 636:
	            case 670:
	            case 690:
	            case 708:
	            case 715:
	            case 718:
	            case 777:
	            case 793:
	            case 796:
	                this.state = 1744;
	                this.object_type_name();
	                this.state = 1745;
	                this.object_name();
	                break;
	            case 17:
	                this.state = 1747;
	                this.match(SnowflakeParser.ALL);
	                this.state = 1748;
	                this.object_type_plural();
	                this.state = 1749;
	                this.match(SnowflakeParser.IN);
	                this.state = 1754;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 164:
	                    this.state = 1750;
	                    this.match(SnowflakeParser.DATABASE);
	                    this.state = 1751;
	                    this.id_();
	                    break;
	                case 623:
	                    this.state = 1752;
	                    this.match(SnowflakeParser.SCHEMA);
	                    this.state = 1753;
	                    this.schema_name();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.state = 1758;
	            this.match(SnowflakeParser.ON);
	            this.state = 1759;
	            this.match(SnowflakeParser.FUTURE);
	            this.state = 1760;
	            this.object_type_plural();
	            this.state = 1761;
	            this.match(SnowflakeParser.IN);
	            this.state = 1766;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 164:
	                this.state = 1762;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 1763;
	                this.id_();
	                break;
	            case 623:
	                this.state = 1764;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 1765;
	                this.schema_name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	        this.state = 1770;
	        this.match(SnowflakeParser.TO);
	        this.state = 1771;
	        this.match(SnowflakeParser.ROLE);
	        this.state = 1772;
	        this.id_();
	        this.state = 1776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148 || _la===584) {
	            this.state = 1773;
	            _la = this._input.LA(1);
	            if(!(_la===148 || _la===584)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1774;
	            this.match(SnowflakeParser.CURRENT);
	            this.state = 1775;
	            this.match(SnowflakeParser.GRANTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grant_to_role() {
	    let localctx = new Grant_to_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SnowflakeParser.RULE_grant_to_role);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1778;
	        this.match(SnowflakeParser.GRANT);
	        this.state = 1874;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1784;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 41:
	            case 45:
	            case 151:
	            case 234:
	            case 322:
	            case 382:
	            case 411:
	            case 481:
	                this.state = 1779;
	                this.global_privileges();
	                break;
	            case 17:
	                this.state = 1780;
	                this.match(SnowflakeParser.ALL);
	                this.state = 1782;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 1781;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1786;
	            this.match(SnowflakeParser.ON);
	            this.state = 1787;
	            this.match(SnowflakeParser.ACCOUNT);
	            break;

	        case 2:
	            this.state = 1793;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 151:
	            case 324:
	            case 410:
	            case 411:
	            case 469:
	            case 775:
	            case 783:
	                this.state = 1788;
	                this.account_object_privileges();
	                break;
	            case 17:
	                this.state = 1789;
	                this.match(SnowflakeParser.ALL);
	                this.state = 1791;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 1790;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1795;
	            this.match(SnowflakeParser.ON);
	            this.state = 1802;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 777:
	                this.state = 1796;
	                this.match(SnowflakeParser.USER);
	                break;
	            case 569:
	                this.state = 1797;
	                this.match(SnowflakeParser.RESOURCE);
	                this.state = 1798;
	                this.match(SnowflakeParser.MONITOR);
	                break;
	            case 796:
	                this.state = 1799;
	                this.match(SnowflakeParser.WAREHOUSE);
	                break;
	            case 164:
	                this.state = 1800;
	                this.match(SnowflakeParser.DATABASE);
	                break;
	            case 337:
	                this.state = 1801;
	                this.match(SnowflakeParser.INTEGRATION);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1804;
	            this.object_name();
	            break;

	        case 3:
	            this.state = 1810;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 10:
	            case 151:
	            case 410:
	            case 411:
	            case 775:
	                this.state = 1805;
	                this.schema_privileges();
	                break;
	            case 17:
	                this.state = 1806;
	                this.match(SnowflakeParser.ALL);
	                this.state = 1808;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 1807;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1812;
	            this.match(SnowflakeParser.ON);
	            this.state = 1820;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 623:
	                this.state = 1813;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 1814;
	                this.schema_name();
	                break;
	            case 17:
	                this.state = 1815;
	                this.match(SnowflakeParser.ALL);
	                this.state = 1816;
	                this.match(SnowflakeParser.SCHEMAS);
	                this.state = 1817;
	                this.match(SnowflakeParser.IN);
	                this.state = 1818;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 1819;
	                this.id_();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.state = 1827;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 10:
	            case 151:
	            case 410:
	            case 411:
	            case 775:
	                this.state = 1822;
	                this.schema_privileges();
	                break;
	            case 17:
	                this.state = 1823;
	                this.match(SnowflakeParser.ALL);
	                this.state = 1825;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 1824;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1829;
	            this.match(SnowflakeParser.ON);
	            this.state = 1830;
	            this.match(SnowflakeParser.FUTURE);
	            this.state = 1831;
	            this.match(SnowflakeParser.SCHEMAS);
	            this.state = 1832;
	            this.match(SnowflakeParser.IN);
	            this.state = 1833;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 1834;
	            this.id_();
	            break;

	        case 5:
	            this.state = 1840;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 41:
	            case 185:
	            case 334:
	            case 411:
	            case 469:
	            case 544:
	            case 549:
	            case 633:
	            case 760:
	            case 772:
	            case 775:
	                this.state = 1835;
	                this.schema_object_privileges();
	                break;
	            case 17:
	                this.state = 1836;
	                this.match(SnowflakeParser.ALL);
	                this.state = 1838;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 1837;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1842;
	            this.match(SnowflakeParser.ON);
	            this.state = 1855;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 6:
	            case 165:
	            case 338:
	            case 419:
	            case 569:
	            case 588:
	            case 643:
	            case 779:
	            case 797:
	                this.state = 1843;
	                this.object_type();
	                this.state = 1844;
	                this.object_name();
	                break;
	            case 17:
	                this.state = 1846;
	                this.match(SnowflakeParser.ALL);
	                this.state = 1847;
	                this.object_type_plural();
	                this.state = 1848;
	                this.match(SnowflakeParser.IN);
	                this.state = 1853;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 164:
	                    this.state = 1849;
	                    this.match(SnowflakeParser.DATABASE);
	                    this.state = 1850;
	                    this.id_();
	                    break;
	                case 623:
	                    this.state = 1851;
	                    this.match(SnowflakeParser.SCHEMA);
	                    this.state = 1852;
	                    this.schema_name();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 6:
	            this.state = 1862;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 41:
	            case 185:
	            case 334:
	            case 411:
	            case 469:
	            case 544:
	            case 549:
	            case 633:
	            case 760:
	            case 772:
	            case 775:
	                this.state = 1857;
	                this.schema_object_privileges();
	                break;
	            case 17:
	                this.state = 1858;
	                this.match(SnowflakeParser.ALL);
	                this.state = 1860;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 1859;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1864;
	            this.match(SnowflakeParser.ON);
	            this.state = 1865;
	            this.match(SnowflakeParser.FUTURE);
	            this.state = 1866;
	            this.object_type_plural();
	            this.state = 1867;
	            this.match(SnowflakeParser.IN);
	            this.state = 1872;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 164:
	                this.state = 1868;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 1869;
	                this.id_();
	                break;
	            case 623:
	                this.state = 1870;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 1871;
	                this.schema_name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	        this.state = 1876;
	        this.match(SnowflakeParser.TO);
	        this.state = 1878;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        if(la_===1) {
	            this.state = 1877;
	            this.match(SnowflakeParser.ROLE);

	        }
	        this.state = 1880;
	        this.id_();
	        this.state = 1884;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===805) {
	            this.state = 1881;
	            this.match(SnowflakeParser.WITH);
	            this.state = 1882;
	            this.match(SnowflakeParser.GRANT);
	            this.state = 1883;
	            this.match(SnowflakeParser.OPTION);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_privileges() {
	    let localctx = new Global_privilegesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SnowflakeParser.RULE_global_privileges);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1886;
	        this.global_privilege();
	        this.state = 1891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 1887;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 1888;
	            this.global_privilege();
	            this.state = 1893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_privilege() {
	    let localctx = new Global_privilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SnowflakeParser.RULE_global_privilege);
	    var _la = 0;
	    try {
	        this.state = 1938;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 151:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1894;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 1907;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 6:
	                this.state = 1895;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;
	            case 163:
	                this.state = 1896;
	                this.match(SnowflakeParser.DATA);
	                this.state = 1897;
	                this.match(SnowflakeParser.EXCHANGE);
	                this.state = 1898;
	                this.match(SnowflakeParser.LISTING);
	                break;
	            case 164:
	                this.state = 1899;
	                this.match(SnowflakeParser.DATABASE);
	                break;
	            case 337:
	                this.state = 1900;
	                this.match(SnowflakeParser.INTEGRATION);
	                break;
	            case 419:
	                this.state = 1901;
	                this.match(SnowflakeParser.NETWORK);
	                this.state = 1902;
	                this.match(SnowflakeParser.POLICY);
	                break;
	            case 587:
	                this.state = 1903;
	                this.match(SnowflakeParser.ROLE);
	                break;
	            case 642:
	                this.state = 1904;
	                this.match(SnowflakeParser.SHARE);
	                break;
	            case 777:
	                this.state = 1905;
	                this.match(SnowflakeParser.USER);
	                break;
	            case 796:
	                this.state = 1906;
	                this.match(SnowflakeParser.WAREHOUSE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 41:
	        case 45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1923;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1909;
	                this.match(SnowflakeParser.APPLY);
	                this.state = 1910;
	                this.match(SnowflakeParser.MASKING);
	                this.state = 1911;
	                this.match(SnowflakeParser.POLICY);
	                break;

	            case 2:
	                this.state = 1912;
	                this.match(SnowflakeParser.APPLY);
	                this.state = 1913;
	                this.match(SnowflakeParser.ROW);
	                this.state = 1914;
	                this.match(SnowflakeParser.ACCESS);
	                this.state = 1915;
	                this.match(SnowflakeParser.POLICY);
	                break;

	            case 3:
	                this.state = 1916;
	                this.match(SnowflakeParser.APPLY);
	                this.state = 1917;
	                this.match(SnowflakeParser.SESSION);
	                this.state = 1918;
	                this.match(SnowflakeParser.POLICY);
	                break;

	            case 4:
	                this.state = 1919;
	                this.match(SnowflakeParser.APPLY);
	                this.state = 1920;
	                this.match(SnowflakeParser.TAG);
	                break;

	            case 5:
	                this.state = 1921;
	                this.match(SnowflakeParser.ATTACH);
	                this.state = 1922;
	                this.match(SnowflakeParser.POLICY);
	                break;

	            }
	            break;
	        case 234:
	        case 322:
	        case 382:
	        case 411:
	        case 481:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1936;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 234:
	                this.state = 1925;
	                this.match(SnowflakeParser.EXECUTE);
	                this.state = 1926;
	                this.match(SnowflakeParser.TASK);
	                break;
	            case 322:
	                this.state = 1927;
	                this.match(SnowflakeParser.IMPORT);
	                this.state = 1928;
	                this.match(SnowflakeParser.SHARE);
	                break;
	            case 382:
	                this.state = 1929;
	                this.match(SnowflakeParser.MANAGE);
	                this.state = 1930;
	                this.match(SnowflakeParser.GRANTS);
	                break;
	            case 411:
	                this.state = 1931;
	                this.match(SnowflakeParser.MONITOR);
	                this.state = 1932;
	                _la = this._input.LA(1);
	                if(!(_la===235 || _la===775)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case 481:
	                this.state = 1933;
	                this.match(SnowflakeParser.OVERRIDE);
	                this.state = 1934;
	                this.match(SnowflakeParser.SHARE);
	                this.state = 1935;
	                this.match(SnowflakeParser.RESTRICTIONS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	account_object_privileges() {
	    let localctx = new Account_object_privilegesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SnowflakeParser.RULE_account_object_privileges);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1940;
	        this.account_object_privilege();
	        this.state = 1945;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 1941;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 1942;
	            this.account_object_privilege();
	            this.state = 1947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	account_object_privilege() {
	    let localctx = new Account_object_privilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SnowflakeParser.RULE_account_object_privilege);
	    try {
	        this.state = 1957;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 411:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1948;
	            this.match(SnowflakeParser.MONITOR);
	            break;
	        case 410:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1949;
	            this.match(SnowflakeParser.MODIFY);
	            break;
	        case 775:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1950;
	            this.match(SnowflakeParser.USAGE);
	            break;
	        case 469:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1951;
	            this.match(SnowflakeParser.OPERATE);
	            break;
	        case 151:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1952;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 1953;
	            this.match(SnowflakeParser.SCHEMA);
	            break;
	        case 324:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1954;
	            this.match(SnowflakeParser.IMPORTED);
	            this.state = 1955;
	            this.match(SnowflakeParser.PRIVILEGES);
	            break;
	        case 783:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1956;
	            this.match(SnowflakeParser.USE_ANY_ROLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schema_privileges() {
	    let localctx = new Schema_privilegesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SnowflakeParser.RULE_schema_privileges);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1959;
	        this.schema_privilege();
	        this.state = 1964;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 1960;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 1961;
	            this.schema_privilege();
	            this.state = 1966;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schema_privilege() {
	    let localctx = new Schema_privilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SnowflakeParser.RULE_schema_privilege);
	    try {
	        this.state = 1999;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 410:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1967;
	            this.match(SnowflakeParser.MODIFY);
	            break;
	        case 411:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1968;
	            this.match(SnowflakeParser.MONITOR);
	            break;
	        case 775:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1969;
	            this.match(SnowflakeParser.USAGE);
	            break;
	        case 151:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1970;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 1994;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 708:
	                this.state = 1971;
	                this.match(SnowflakeParser.TABLE);
	                break;
	            case 240:
	                this.state = 1972;
	                this.match(SnowflakeParser.EXTERNAL);
	                this.state = 1973;
	                this.match(SnowflakeParser.TABLE);
	                break;
	            case 793:
	                this.state = 1974;
	                this.match(SnowflakeParser.VIEW);
	                break;
	            case 391:
	                this.state = 1975;
	                this.match(SnowflakeParser.MATERIALIZED);
	                this.state = 1976;
	                this.match(SnowflakeParser.VIEW);
	                break;
	            case 384:
	                this.state = 1977;
	                this.match(SnowflakeParser.MASKING);
	                this.state = 1978;
	                this.match(SnowflakeParser.POLICY);
	                break;
	            case 593:
	                this.state = 1979;
	                this.match(SnowflakeParser.ROW);
	                this.state = 1980;
	                this.match(SnowflakeParser.ACCESS);
	                this.state = 1981;
	                this.match(SnowflakeParser.POLICY);
	                break;
	            case 636:
	                this.state = 1982;
	                this.match(SnowflakeParser.SESSION);
	                this.state = 1983;
	                this.match(SnowflakeParser.POLICY);
	                break;
	            case 715:
	                this.state = 1984;
	                this.match(SnowflakeParser.TAG);
	                break;
	            case 634:
	                this.state = 1985;
	                this.match(SnowflakeParser.SEQUENCE);
	                break;
	            case 278:
	                this.state = 1986;
	                this.match(SnowflakeParser.FUNCTION);
	                break;
	            case 527:
	                this.state = 1987;
	                this.match(SnowflakeParser.PROCEDURE);
	                break;
	            case 261:
	                this.state = 1988;
	                this.match(SnowflakeParser.FILE);
	                this.state = 1989;
	                this.match(SnowflakeParser.FORMAT);
	                break;
	            case 670:
	                this.state = 1990;
	                this.match(SnowflakeParser.STAGE);
	                break;
	            case 512:
	                this.state = 1991;
	                this.match(SnowflakeParser.PIPE);
	                break;
	            case 690:
	                this.state = 1992;
	                this.match(SnowflakeParser.STREAM);
	                break;
	            case 718:
	                this.state = 1993;
	                this.match(SnowflakeParser.TASK);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1996;
	            this.match(SnowflakeParser.ADD);
	            this.state = 1997;
	            this.match(SnowflakeParser.SEARCH);
	            this.state = 1998;
	            this.match(SnowflakeParser.OPTIMIZATION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schema_object_privileges() {
	    let localctx = new Schema_object_privilegesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SnowflakeParser.RULE_schema_object_privileges);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2001;
	        this.schema_object_privilege();
	        this.state = 2006;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 2002;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 2003;
	            this.schema_object_privilege();
	            this.state = 2008;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schema_object_privilege() {
	    let localctx = new Schema_object_privilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SnowflakeParser.RULE_schema_object_privilege);
	    try {
	        this.state = 2024;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 633:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2009;
	            this.match(SnowflakeParser.SELECT);
	            break;
	        case 334:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2010;
	            this.match(SnowflakeParser.INSERT);
	            break;
	        case 772:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2011;
	            this.match(SnowflakeParser.UPDATE);
	            break;
	        case 185:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2012;
	            this.match(SnowflakeParser.DELETE);
	            break;
	        case 760:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2013;
	            this.match(SnowflakeParser.TRUNCATE);
	            break;
	        case 549:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2014;
	            this.match(SnowflakeParser.REFERENCES);
	            break;
	        case 775:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2015;
	            this.match(SnowflakeParser.USAGE);
	            break;
	        case 544:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2016;
	            this.match(SnowflakeParser.READ);
	            this.state = 2019;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	            if(la_===1) {
	                this.state = 2017;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 2018;
	                this.match(SnowflakeParser.WRITE);

	            }
	            break;
	        case 411:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2021;
	            this.match(SnowflakeParser.MONITOR);
	            break;
	        case 469:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2022;
	            this.match(SnowflakeParser.OPERATE);
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2023;
	            this.match(SnowflakeParser.APPLY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grant_to_share() {
	    let localctx = new Grant_to_shareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SnowflakeParser.RULE_grant_to_share);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2026;
	        this.match(SnowflakeParser.GRANT);
	        this.state = 2027;
	        this.object_privilege();
	        this.state = 2028;
	        this.match(SnowflakeParser.ON);
	        this.state = 2046;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 164:
	            this.state = 2029;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2030;
	            this.id_();
	            break;
	        case 623:
	            this.state = 2031;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 2032;
	            this.id_();
	            break;
	        case 278:
	            this.state = 2033;
	            this.match(SnowflakeParser.FUNCTION);
	            this.state = 2034;
	            this.id_();
	            break;
	        case 17:
	        case 708:
	            this.state = 2042;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 708:
	                this.state = 2035;
	                this.match(SnowflakeParser.TABLE);
	                this.state = 2036;
	                this.object_name();
	                break;
	            case 17:
	                this.state = 2037;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2038;
	                this.match(SnowflakeParser.TABLES);
	                this.state = 2039;
	                this.match(SnowflakeParser.IN);
	                this.state = 2040;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 2041;
	                this.schema_name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 793:
	            this.state = 2044;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 2045;
	            this.id_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2048;
	        this.match(SnowflakeParser.TO);
	        this.state = 2049;
	        this.match(SnowflakeParser.SHARE);
	        this.state = 2050;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_privilege() {
	    let localctx = new Object_privilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SnowflakeParser.RULE_object_privilege);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2052;
	        _la = this._input.LA(1);
	        if(!(_la===550 || _la===633 || _la===775)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grant_role() {
	    let localctx = new Grant_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SnowflakeParser.RULE_grant_role);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2054;
	        this.match(SnowflakeParser.GRANT);
	        this.state = 2055;
	        this.match(SnowflakeParser.ROLE);
	        this.state = 2056;
	        this.role_name();
	        this.state = 2057;
	        this.match(SnowflakeParser.TO);
	        this.state = 2062;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 587:
	            this.state = 2058;
	            this.match(SnowflakeParser.ROLE);
	            this.state = 2059;
	            this.role_name();
	            break;
	        case 777:
	            this.state = 2060;
	            this.match(SnowflakeParser.USER);
	            this.state = 2061;
	            this.id_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	role_name() {
	    let localctx = new Role_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SnowflakeParser.RULE_role_name);
	    try {
	        this.state = 2066;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2064;
	            this.system_defined_role();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2065;
	            this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	system_defined_role() {
	    let localctx = new System_defined_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SnowflakeParser.RULE_system_defined_role);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2068;
	        _la = this._input.LA(1);
	        if(!(_la===7 || _la===476 || _la===532 || _la===631 || _la===706 || _la===778)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	list() {
	    let localctx = new ListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SnowflakeParser.RULE_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2070;
	        this.match(SnowflakeParser.LIST);
	        this.state = 2074;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2071;
	            this.user_stage();
	            break;

	        case 2:
	            this.state = 2072;
	            this.table_stage();
	            break;

	        case 3:
	            this.state = 2073;
	            this.named_stage();
	            break;

	        }
	        this.state = 2077;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===507) {
	            this.state = 2076;
	            this.pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	user_stage() {
	    let localctx = new User_stageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SnowflakeParser.RULE_user_stage);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2079;
	        this.match(SnowflakeParser.AT);
	        this.state = 2080;
	        this.match(SnowflakeParser.TILDA);
	        this.state = 2082;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===899) {
	            this.state = 2081;
	            this.stage_path();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_stage() {
	    let localctx = new Table_stageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SnowflakeParser.RULE_table_stage);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2084;
	        this.match(SnowflakeParser.AT);
	        this.state = 2086;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	            this.state = 2085;
	            this.schema_name();
	        }

	        this.state = 2088;
	        this.match(SnowflakeParser.MODULE);
	        this.state = 2089;
	        this.id_();
	        this.state = 2091;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===899) {
	            this.state = 2090;
	            this.stage_path();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_stage() {
	    let localctx = new Named_stageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SnowflakeParser.RULE_named_stage);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2093;
	        this.match(SnowflakeParser.AT);
	        this.state = 2094;
	        this.object_name();
	        this.state = 2096;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===899) {
	            this.state = 2095;
	            this.stage_path();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stage_path() {
	    let localctx = new Stage_pathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SnowflakeParser.RULE_stage_path);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2098;
	        this.match(SnowflakeParser.DIVIDE);
	        this.state = 2110;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===861) {
	            this.state = 2099;
	            this.match(SnowflakeParser.ID);
	            this.state = 2104;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,132,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2100;
	                    this.match(SnowflakeParser.DIVIDE);
	                    this.state = 2101;
	                    this.match(SnowflakeParser.ID); 
	                }
	                this.state = 2106;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,132,this._ctx);
	            }

	            this.state = 2108;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===899) {
	                this.state = 2107;
	                this.match(SnowflakeParser.DIVIDE);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	put() {
	    let localctx = new PutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SnowflakeParser.RULE_put);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2112;
	        this.match(SnowflakeParser.PUT);
	        this.state = 2113;
	        this.match(SnowflakeParser.FILE_PATH);
	        this.state = 2117;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2114;
	            this.table_stage();
	            break;

	        case 2:
	            this.state = 2115;
	            this.user_stage();
	            break;

	        case 3:
	            this.state = 2116;
	            this.named_stage();
	            break;

	        }
	        this.state = 2122;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===486) {
	            this.state = 2119;
	            this.match(SnowflakeParser.PARALLEL);
	            this.state = 2120;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2121;
	            this.num();
	        }

	        this.state = 2127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===54) {
	            this.state = 2124;
	            this.match(SnowflakeParser.AUTO_COMPRESS);
	            this.state = 2125;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2126;
	            this.true_false();
	        }

	        this.state = 2132;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===664) {
	            this.state = 2129;
	            this.match(SnowflakeParser.SOURCE_COMPRESSION);
	            this.state = 2130;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2131;
	            _la = this._input.LA(1);
	            if(!(_la===55 || _la===94 || _la===97 || _la===183 || _la===300 || _la===425 || _la===543 || _la===819)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===482) {
	            this.state = 2134;
	            this.match(SnowflakeParser.OVERWRITE);
	            this.state = 2135;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2136;
	            this.true_false();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	remove() {
	    let localctx = new RemoveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SnowflakeParser.RULE_remove);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2139;
	        this.match(SnowflakeParser.REMOVE);
	        this.state = 2143;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2140;
	            this.table_stage();
	            break;

	        case 2:
	            this.state = 2141;
	            this.user_stage();
	            break;

	        case 3:
	            this.state = 2142;
	            this.named_stage();
	            break;

	        }
	        this.state = 2146;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===507) {
	            this.state = 2145;
	            this.pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revoke_from_role() {
	    let localctx = new Revoke_from_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SnowflakeParser.RULE_revoke_from_role);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2148;
	        this.match(SnowflakeParser.REVOKE);
	        this.state = 2152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===295) {
	            this.state = 2149;
	            this.match(SnowflakeParser.GRANT);
	            this.state = 2150;
	            this.match(SnowflakeParser.OPTION);
	            this.state = 2151;
	            this.match(SnowflakeParser.FOR);
	        }

	        this.state = 2244;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2159;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 41:
	            case 45:
	            case 151:
	            case 234:
	            case 322:
	            case 382:
	            case 411:
	            case 481:
	                this.state = 2154;
	                this.global_privilege();
	                break;
	            case 17:
	                this.state = 2155;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2157;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 2156;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2161;
	            this.match(SnowflakeParser.ON);
	            this.state = 2162;
	            this.match(SnowflakeParser.ACCOUNT);
	            break;

	        case 2:
	            this.state = 2168;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 151:
	            case 324:
	            case 410:
	            case 411:
	            case 469:
	            case 775:
	            case 783:
	                this.state = 2163;
	                this.account_object_privileges();
	                break;
	            case 17:
	                this.state = 2164;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2166;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 2165;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2170;
	            this.match(SnowflakeParser.ON);
	            this.state = 2176;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 569:
	                this.state = 2171;
	                this.match(SnowflakeParser.RESOURCE);
	                this.state = 2172;
	                this.match(SnowflakeParser.MONITOR);
	                break;
	            case 796:
	                this.state = 2173;
	                this.match(SnowflakeParser.WAREHOUSE);
	                break;
	            case 164:
	                this.state = 2174;
	                this.match(SnowflakeParser.DATABASE);
	                break;
	            case 337:
	                this.state = 2175;
	                this.match(SnowflakeParser.INTEGRATION);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2178;
	            this.object_name();
	            break;

	        case 3:
	            this.state = 2184;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 10:
	            case 151:
	            case 410:
	            case 411:
	            case 775:
	                this.state = 2179;
	                this.schema_privileges();
	                break;
	            case 17:
	                this.state = 2180;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2182;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 2181;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2186;
	            this.match(SnowflakeParser.ON);
	            this.state = 2194;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 623:
	                this.state = 2187;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 2188;
	                this.schema_name();
	                break;
	            case 17:
	                this.state = 2189;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2190;
	                this.match(SnowflakeParser.SCHEMAS);
	                this.state = 2191;
	                this.match(SnowflakeParser.IN);
	                this.state = 2192;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 2193;
	                this.id_();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.state = 2201;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 10:
	            case 151:
	            case 410:
	            case 411:
	            case 775:
	                this.state = 2196;
	                this.schema_privileges();
	                break;
	            case 17:
	                this.state = 2197;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2199;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 2198;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2203;
	            this.match(SnowflakeParser.ON);

	            this.state = 2204;
	            this.match(SnowflakeParser.FUTURE);
	            this.state = 2205;
	            this.match(SnowflakeParser.SCHEMAS);
	            this.state = 2206;
	            this.match(SnowflakeParser.IN);
	            this.state = 2207;
	            this.match(SnowflakeParser.DATABASE);
	            break;

	        case 5:
	            this.state = 2213;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 41:
	            case 185:
	            case 334:
	            case 411:
	            case 469:
	            case 544:
	            case 549:
	            case 633:
	            case 760:
	            case 772:
	            case 775:
	                this.state = 2208;
	                this.schema_object_privileges();
	                break;
	            case 17:
	                this.state = 2209;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2211;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 2210;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2215;
	            this.match(SnowflakeParser.ON);
	            this.state = 2225;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 6:
	            case 165:
	            case 338:
	            case 419:
	            case 569:
	            case 588:
	            case 643:
	            case 779:
	            case 797:
	                this.state = 2216;
	                this.object_type();
	                this.state = 2217;
	                this.object_name();
	                break;
	            case 17:
	                this.state = 2219;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2220;
	                this.object_type_plural();
	                this.state = 2221;
	                this.match(SnowflakeParser.IN);
	                this.state = 2222;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 2223;
	                this.schema_name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 6:
	            this.state = 2232;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 41:
	            case 185:
	            case 334:
	            case 411:
	            case 469:
	            case 544:
	            case 549:
	            case 633:
	            case 760:
	            case 772:
	            case 775:
	                this.state = 2227;
	                this.schema_object_privileges();
	                break;
	            case 17:
	                this.state = 2228;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2230;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===526) {
	                    this.state = 2229;
	                    this.match(SnowflakeParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2234;
	            this.match(SnowflakeParser.ON);
	            this.state = 2235;
	            this.match(SnowflakeParser.FUTURE);
	            this.state = 2236;
	            this.object_type_plural();
	            this.state = 2237;
	            this.match(SnowflakeParser.IN);
	            this.state = 2242;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 164:
	                this.state = 2238;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 2239;
	                this.id_();
	                break;
	            case 623:
	                this.state = 2240;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 2241;
	                this.schema_name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	        this.state = 2246;
	        this.match(SnowflakeParser.FROM);
	        this.state = 2248;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        if(la_===1) {
	            this.state = 2247;
	            this.match(SnowflakeParser.ROLE);

	        }
	        this.state = 2250;
	        this.id_();
	        this.state = 2252;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101 || _la===574) {
	            this.state = 2251;
	            this.cascade_restrict();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revoke_from_share() {
	    let localctx = new Revoke_from_shareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SnowflakeParser.RULE_revoke_from_share);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2254;
	        this.match(SnowflakeParser.REVOKE);
	        this.state = 2255;
	        this.object_privilege();
	        this.state = 2256;
	        this.match(SnowflakeParser.ON);
	        this.state = 2279;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2257;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2258;
	            this.id_();
	            break;

	        case 2:
	            this.state = 2259;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 2260;
	            this.schema_name();
	            break;

	        case 3:
	            this.state = 2268;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 708:
	                this.state = 2261;
	                this.match(SnowflakeParser.TABLE);
	                this.state = 2262;
	                this.object_name();
	                break;
	            case 17:
	                this.state = 2263;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2264;
	                this.match(SnowflakeParser.TABLES);
	                this.state = 2265;
	                this.match(SnowflakeParser.IN);
	                this.state = 2266;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 2267;
	                this.schema_name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.state = 2277;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 793:
	                this.state = 2270;
	                this.match(SnowflakeParser.VIEW);
	                this.state = 2271;
	                this.object_name();
	                break;
	            case 17:
	                this.state = 2272;
	                this.match(SnowflakeParser.ALL);
	                this.state = 2273;
	                this.match(SnowflakeParser.VIEWS);
	                this.state = 2274;
	                this.match(SnowflakeParser.IN);
	                this.state = 2275;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 2276;
	                this.schema_name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	        this.state = 2281;
	        this.match(SnowflakeParser.FROM);
	        this.state = 2282;
	        this.match(SnowflakeParser.SHARE);
	        this.state = 2283;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revoke_role() {
	    let localctx = new Revoke_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SnowflakeParser.RULE_revoke_role);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2285;
	        this.match(SnowflakeParser.REVOKE);
	        this.state = 2286;
	        this.match(SnowflakeParser.ROLE);
	        this.state = 2287;
	        this.role_name();
	        this.state = 2288;
	        this.match(SnowflakeParser.FROM);
	        this.state = 2293;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 587:
	            this.state = 2289;
	            this.match(SnowflakeParser.ROLE);
	            this.state = 2290;
	            this.role_name();
	            break;
	        case 777:
	            this.state = 2291;
	            this.match(SnowflakeParser.USER);
	            this.state = 2292;
	            this.id_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollback() {
	    let localctx = new RollbackContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SnowflakeParser.RULE_rollback);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2295;
	        this.match(SnowflakeParser.ROLLBACK);
	        this.state = 2297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===807) {
	            this.state = 2296;
	            this.match(SnowflakeParser.WORK);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set() {
	    let localctx = new SetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SnowflakeParser.RULE_set);
	    var _la = 0;
	    try {
	        this.state = 2327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2299;
	            this.match(SnowflakeParser.SET);
	            this.state = 2300;
	            this.id_();
	            this.state = 2301;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2302;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2304;
	            this.match(SnowflakeParser.SET);
	            this.state = 2305;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 2306;
	            this.id_();
	            this.state = 2311;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 2307;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 2308;
	                this.id_();
	                this.state = 2313;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2314;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 2315;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2316;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 2317;
	            this.expr(0);
	            this.state = 2322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 2318;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 2319;
	                this.expr(0);
	                this.state = 2324;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2325;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncate_materialized_view() {
	    let localctx = new Truncate_materialized_viewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SnowflakeParser.RULE_truncate_materialized_view);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2329;
	        this.match(SnowflakeParser.TRUNCATE);
	        this.state = 2330;
	        this.match(SnowflakeParser.MATERIALIZED);
	        this.state = 2331;
	        this.match(SnowflakeParser.VIEW);
	        this.state = 2332;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncate_table() {
	    let localctx = new Truncate_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SnowflakeParser.RULE_truncate_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2334;
	        this.match(SnowflakeParser.TRUNCATE);
	        this.state = 2336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===708) {
	            this.state = 2335;
	            this.match(SnowflakeParser.TABLE);
	        }

	        this.state = 2339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	        if(la_===1) {
	            this.state = 2338;
	            this.if_exists();

	        }
	        this.state = 2341;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unset() {
	    let localctx = new UnsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SnowflakeParser.RULE_unset);
	    var _la = 0;
	    try {
	        this.state = 2357;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2343;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 2344;
	            this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2345;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 2346;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 2347;
	            this.id_();
	            this.state = 2352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 2348;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 2349;
	                this.id_();
	                this.state = 2354;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2355;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_command() {
	    let localctx = new Alter_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SnowflakeParser.RULE_alter_command);
	    try {
	        this.state = 2399;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2359;
	            this.alter_account();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2360;
	            this.alter_alert();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2361;
	            this.alter_api_integration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2362;
	            this.alter_connection();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2363;
	            this.alter_database();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2364;
	            this.alter_dynamic_table();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2365;
	            this.alter_external_table();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2366;
	            this.alter_failover_group();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2367;
	            this.alter_file_format();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2368;
	            this.alter_function();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2369;
	            this.alter_masking_policy();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2370;
	            this.alter_materialized_view();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2371;
	            this.alter_network_policy();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2372;
	            this.alter_notification_integration();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2373;
	            this.alter_password_policy();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2374;
	            this.alter_pipe();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2375;
	            this.alter_procedure();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2376;
	            this.alter_replication_group();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2377;
	            this.alter_resource_monitor();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2378;
	            this.alter_role();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2379;
	            this.alter_row_access_policy();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2380;
	            this.alter_schema();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2381;
	            this.alter_security_integration_external_oauth();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2382;
	            this.alter_security_integration_snowflake_oauth();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2383;
	            this.alter_security_integration_saml2();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2384;
	            this.alter_security_integration_scim();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 2385;
	            this.alter_sequence();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 2386;
	            this.alter_session();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 2387;
	            this.alter_session_policy();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 2388;
	            this.alter_share();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 2389;
	            this.alter_stage();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 2390;
	            this.alter_storage_integration();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 2391;
	            this.alter_stream();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 2392;
	            this.alter_table();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 2393;
	            this.alter_table_alter_column();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 2394;
	            this.alter_tag();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 2395;
	            this.alter_task();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 2396;
	            this.alter_user();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 2397;
	            this.alter_view();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 2398;
	            this.alter_warehouse();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	account_params() {
	    let localctx = new Account_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SnowflakeParser.RULE_account_params);
	    try {
	        this.state = 2443;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2401;
	            this.match(SnowflakeParser.ALLOW_ID_TOKEN);
	            this.state = 2402;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2403;
	            this.true_false();
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2404;
	            this.match(SnowflakeParser.CLIENT_ENCRYPTION_KEY_SIZE);
	            this.state = 2405;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2406;
	            this.num();
	            break;
	        case 221:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2407;
	            this.match(SnowflakeParser.ENFORCE_SESSION_POLICY);
	            this.state = 2408;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2409;
	            this.true_false();
	            break;
	        case 242:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2410;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST);
	            this.state = 2411;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2412;
	            this.true_false();
	            break;
	        case 331:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2413;
	            this.match(SnowflakeParser.INITIAL_REPLICATION_SIZE_LIMIT_IN_TB);
	            this.state = 2414;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2415;
	            this.num();
	            break;
	        case 420:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2416;
	            this.match(SnowflakeParser.NETWORK_POLICY);
	            this.state = 2417;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2418;
	            this.string();
	            break;
	        case 510:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2419;
	            this.match(SnowflakeParser.PERIODIC_DATA_REKEYING);
	            this.state = 2420;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2421;
	            this.true_false();
	            break;
	        case 521:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2422;
	            this.match(SnowflakeParser.PREVENT_UNLOAD_TO_INLINE_URL);
	            this.state = 2423;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2424;
	            this.true_false();
	            break;
	        case 522:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2425;
	            this.match(SnowflakeParser.PREVENT_UNLOAD_TO_INTERNAL_STAGES);
	            this.state = 2426;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2427;
	            this.true_false();
	            break;
	        case 566:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2428;
	            this.match(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION);
	            this.state = 2429;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2430;
	            this.true_false();
	            break;
	        case 567:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2431;
	            this.match(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION);
	            this.state = 2432;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2433;
	            this.true_false();
	            break;
	        case 617:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2434;
	            this.match(SnowflakeParser.SAML_IDENTITY_PROVIDER);
	            this.state = 2435;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2436;
	            this.json_literal();
	            break;
	        case 638:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2437;
	            this.match(SnowflakeParser.SESSION_POLICY);
	            this.state = 2438;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2439;
	            this.string();
	            break;
	        case 669:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2440;
	            this.match(SnowflakeParser.SSO_LOGIN_PAGE);
	            this.state = 2441;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2442;
	            this.true_false();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_params() {
	    let localctx = new Object_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SnowflakeParser.RULE_object_params);
	    try {
	        this.state = 2470;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 166:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2445;
	            this.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS);
	            this.state = 2446;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2447;
	            this.num();
	            break;
	        case 395:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2448;
	            this.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS);
	            this.state = 2449;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2450;
	            this.num();
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2451;
	            this.default_ddl_collation();
	            break;
	        case 394:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2452;
	            this.match(SnowflakeParser.MAX_CONCURRENCY_LEVEL);
	            this.state = 2453;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2454;
	            this.num();
	            break;
	        case 420:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2455;
	            this.match(SnowflakeParser.NETWORK_POLICY);
	            this.state = 2456;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2457;
	            this.string();
	            break;
	        case 514:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2458;
	            this.match(SnowflakeParser.PIPE_EXECUTION_PAUSED);
	            this.state = 2459;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2460;
	            this.true_false();
	            break;
	        case 638:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2461;
	            this.match(SnowflakeParser.SESSION_POLICY);
	            this.state = 2462;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2463;
	            this.string();
	            break;
	        case 680:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2464;
	            this.match(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS);
	            this.state = 2465;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2466;
	            this.num();
	            break;
	        case 681:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2467;
	            this.match(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS);
	            this.state = 2468;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2469;
	            this.num();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_ddl_collation() {
	    let localctx = new Default_ddl_collationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SnowflakeParser.RULE_default_ddl_collation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2472;
	        this.match(SnowflakeParser.DEFAULT_DDL_COLLATION_);
	        this.state = 2473;
	        this.match(SnowflakeParser.EQ);
	        this.state = 2474;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_properties() {
	    let localctx = new Object_propertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SnowflakeParser.RULE_object_properties);
	    try {
	        this.state = 2528;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 493:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2476;
	            this.match(SnowflakeParser.PASSWORD);
	            this.state = 2477;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2478;
	            this.string();
	            break;
	        case 377:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2479;
	            this.match(SnowflakeParser.LOGIN_NAME);
	            this.state = 2480;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2481;
	            this.string();
	            break;
	        case 196:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2482;
	            this.match(SnowflakeParser.DISPLAY_NAME);
	            this.state = 2483;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2484;
	            this.string();
	            break;
	        case 266:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2485;
	            this.match(SnowflakeParser.FIRST_NAME);
	            this.state = 2486;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2487;
	            this.string();
	            break;
	        case 401:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2488;
	            this.match(SnowflakeParser.MIDDLE_NAME);
	            this.state = 2489;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2490;
	            this.string();
	            break;
	        case 360:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2491;
	            this.match(SnowflakeParser.LAST_NAME);
	            this.state = 2492;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2493;
	            this.string();
	            break;
	        case 205:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2494;
	            this.match(SnowflakeParser.EMAIL);
	            this.state = 2495;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2496;
	            this.string();
	            break;
	        case 416:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2497;
	            this.match(SnowflakeParser.MUST_CHANGE_PASSWORD);
	            this.state = 2498;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2499;
	            this.true_false();
	            break;
	        case 193:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2500;
	            this.match(SnowflakeParser.DISABLED);
	            this.state = 2501;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2502;
	            this.true_false();
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2503;
	            this.match(SnowflakeParser.DAYS_TO_EXPIRY);
	            this.state = 2504;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2505;
	            this.num();
	            break;
	        case 404:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2506;
	            this.match(SnowflakeParser.MINS_TO_UNLOCK);
	            this.state = 2507;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2508;
	            this.num();
	            break;
	        case 178:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2509;
	            this.match(SnowflakeParser.DEFAULT_WAREHOUSE);
	            this.state = 2510;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2511;
	            this.string();
	            break;
	        case 176:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2512;
	            this.match(SnowflakeParser.DEFAULT_NAMESPACE);
	            this.state = 2513;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2514;
	            this.string();
	            break;
	        case 177:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2515;
	            this.match(SnowflakeParser.DEFAULT_ROLE);
	            this.state = 2516;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2517;
	            this.string();
	            break;
	        case 403:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2518;
	            this.match(SnowflakeParser.MINS_TO_BYPASS_MFA);
	            this.state = 2519;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2520;
	            this.num();
	            break;
	        case 597:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2521;
	            this.match(SnowflakeParser.RSA_PUBLIC_KEY);
	            this.state = 2522;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2523;
	            this.string();
	            break;
	        case 598:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2524;
	            this.match(SnowflakeParser.RSA_PUBLIC_KEY_2);
	            this.state = 2525;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2526;
	            this.string();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2527;
	            this.comment_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	session_params() {
	    let localctx = new Session_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SnowflakeParser.RULE_session_params);
	    try {
	        this.state = 2623;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2530;
	            this.match(SnowflakeParser.ABORT_DETACHED_QUERY);
	            this.state = 2531;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2532;
	            this.true_false();
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2533;
	            this.match(SnowflakeParser.AUTOCOMMIT);
	            this.state = 2534;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2535;
	            this.true_false();
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2536;
	            this.match(SnowflakeParser.BINARY_INPUT_FORMAT);
	            this.state = 2537;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2538;
	            this.string();
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2539;
	            this.match(SnowflakeParser.BINARY_OUTPUT_FORMAT);
	            this.state = 2540;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2541;
	            this.string();
	            break;
	        case 170:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2542;
	            this.match(SnowflakeParser.DATE_INPUT_FORMAT);
	            this.state = 2543;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2544;
	            this.string();
	            break;
	        case 171:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2545;
	            this.match(SnowflakeParser.DATE_OUTPUT_FORMAT);
	            this.state = 2546;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2547;
	            this.string();
	            break;
	        case 227:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2548;
	            this.match(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_MERGE);
	            this.state = 2549;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2550;
	            this.true_false();
	            break;
	        case 228:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2551;
	            this.match(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_UPDATE);
	            this.state = 2552;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2553;
	            this.true_false();
	            break;
	        case 351:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2554;
	            this.match(SnowflakeParser.JSON_INDENT);
	            this.state = 2555;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2556;
	            this.num();
	            break;
	        case 376:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2557;
	            this.match(SnowflakeParser.LOCK_TIMEOUT);
	            this.state = 2558;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2559;
	            this.num();
	            break;
	        case 539:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2560;
	            this.match(SnowflakeParser.QUERY_TAG);
	            this.state = 2561;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2562;
	            this.string();
	            break;
	        case 595:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2563;
	            this.match(SnowflakeParser.ROWS_PER_RESULTSET);
	            this.state = 2564;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2565;
	            this.num();
	            break;
	        case 648:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2566;
	            this.match(SnowflakeParser.SIMULATED_DATA_SHARING_CONSUMER);
	            this.state = 2567;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2568;
	            this.string();
	            break;
	        case 681:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2569;
	            this.match(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS);
	            this.state = 2570;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2571;
	            this.num();
	            break;
	        case 693:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2572;
	            this.match(SnowflakeParser.STRICT_JSON_OUTPUT);
	            this.state = 2573;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2574;
	            this.true_false();
	            break;
	        case 728:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2575;
	            this.match(SnowflakeParser.TIMESTAMP_DAY_IS_ALWAYS_24H);
	            this.state = 2576;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2577;
	            this.true_false();
	            break;
	        case 730:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2578;
	            this.match(SnowflakeParser.TIMESTAMP_INPUT_FORMAT);
	            this.state = 2579;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2580;
	            this.string();
	            break;
	        case 732:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2581;
	            this.match(SnowflakeParser.TIMESTAMP_LTZ_OUTPUT_FORMAT);
	            this.state = 2582;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2583;
	            this.string();
	            break;
	        case 734:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2584;
	            this.match(SnowflakeParser.TIMESTAMP_NTZ_OUTPUT_FORMAT);
	            this.state = 2585;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2586;
	            this.string();
	            break;
	        case 735:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2587;
	            this.match(SnowflakeParser.TIMESTAMP_OUTPUT_FORMAT);
	            this.state = 2588;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2589;
	            this.string();
	            break;
	        case 736:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2590;
	            this.match(SnowflakeParser.TIMESTAMP_TYPE_MAPPING);
	            this.state = 2591;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2592;
	            this.string();
	            break;
	        case 738:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2593;
	            this.match(SnowflakeParser.TIMESTAMP_TZ_OUTPUT_FORMAT);
	            this.state = 2594;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2595;
	            this.string();
	            break;
	        case 741:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2596;
	            this.match(SnowflakeParser.TIMEZONE);
	            this.state = 2597;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2598;
	            this.string();
	            break;
	        case 743:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2599;
	            this.match(SnowflakeParser.TIME_INPUT_FORMAT);
	            this.state = 2600;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2601;
	            this.string();
	            break;
	        case 744:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2602;
	            this.match(SnowflakeParser.TIME_OUTPUT_FORMAT);
	            this.state = 2603;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2604;
	            this.string();
	            break;
	        case 753:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2605;
	            this.match(SnowflakeParser.TRANSACTION_DEFAULT_ISOLATION_LEVEL);
	            this.state = 2606;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2607;
	            this.string();
	            break;
	        case 763:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 2608;
	            this.match(SnowflakeParser.TWO_DIGIT_CENTURY_START);
	            this.state = 2609;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2610;
	            this.num();
	            break;
	        case 771:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 2611;
	            this.match(SnowflakeParser.UNSUPPORTED_DDL_ACTION);
	            this.state = 2612;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2613;
	            this.string();
	            break;
	        case 784:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 2614;
	            this.match(SnowflakeParser.USE_CACHED_RESULT);
	            this.state = 2615;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2616;
	            this.true_false();
	            break;
	        case 801:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 2617;
	            this.match(SnowflakeParser.WEEK_OF_YEAR_POLICY);
	            this.state = 2618;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2619;
	            this.num();
	            break;
	        case 802:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 2620;
	            this.match(SnowflakeParser.WEEK_START);
	            this.state = 2621;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2622;
	            this.num();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_account() {
	    let localctx = new Alter_accountContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SnowflakeParser.RULE_alter_account);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2625;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 2626;
	        this.match(SnowflakeParser.ACCOUNT);
	        this.state = 2627;
	        this.alter_account_opts();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enabled_true_false() {
	    let localctx = new Enabled_true_falseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SnowflakeParser.RULE_enabled_true_false);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2629;
	        this.match(SnowflakeParser.ENABLED);
	        this.state = 2630;
	        this.match(SnowflakeParser.EQ);
	        this.state = 2631;
	        this.true_false();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_alert() {
	    let localctx = new Alter_alertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SnowflakeParser.RULE_alter_alert);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2633;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 2634;
	        this.match(SnowflakeParser.ALERT);
	        this.state = 2636;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 2635;
	            this.if_exists();

	        }
	        this.state = 2638;
	        this.id_();
	        this.state = 2662;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2639;
	            this.resume_suspend();
	            break;

	        case 2:
	            this.state = 2640;
	            this.match(SnowflakeParser.SET);
	            this.state = 2642; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2641;
	                this.alert_set_clause();
	                this.state = 2644; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===134 || _la===622 || _la===796);
	            break;

	        case 3:
	            this.state = 2646;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 2648; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2647;
	                this.alert_unset_clause();
	                this.state = 2650; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===134 || _la===622 || _la===796);
	            break;

	        case 4:
	            this.state = 2652;
	            this.match(SnowflakeParser.MODIFY);
	            this.state = 2653;
	            this.match(SnowflakeParser.CONDITION);
	            this.state = 2654;
	            this.match(SnowflakeParser.EXISTS);
	            this.state = 2655;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 2656;
	            this.alert_condition();
	            this.state = 2657;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 5:
	            this.state = 2659;
	            this.match(SnowflakeParser.MODIFY);
	            this.state = 2660;
	            this.match(SnowflakeParser.ACTION);
	            this.state = 2661;
	            this.alert_action();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resume_suspend() {
	    let localctx = new Resume_suspendContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SnowflakeParser.RULE_resume_suspend);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2664;
	        _la = this._input.LA(1);
	        if(!(_la===577 || _la===700)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alert_set_clause() {
	    let localctx = new Alert_set_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SnowflakeParser.RULE_alert_set_clause);
	    try {
	        this.state = 2673;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 796:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2666;
	            this.match(SnowflakeParser.WAREHOUSE);
	            this.state = 2667;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2668;
	            this.id_();
	            break;
	        case 622:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2669;
	            this.match(SnowflakeParser.SCHEDULE);
	            this.state = 2670;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2671;
	            this.string();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2672;
	            this.comment_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alert_unset_clause() {
	    let localctx = new Alert_unset_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SnowflakeParser.RULE_alert_unset_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2675;
	        _la = this._input.LA(1);
	        if(!(_la===134 || _la===622 || _la===796)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_api_integration() {
	    let localctx = new Alter_api_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SnowflakeParser.RULE_alter_api_integration);
	    var _la = 0;
	    try {
	        this.state = 2758;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2677;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 2678;
	                this.match(SnowflakeParser.API);
	            }

	            this.state = 2681;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 2683;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	            if(la_===1) {
	                this.state = 2682;
	                this.if_exists();

	            }
	            this.state = 2685;
	            this.id_();
	            this.state = 2686;
	            this.match(SnowflakeParser.SET);
	            this.state = 2690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34) {
	                this.state = 2687;
	                this.match(SnowflakeParser.API_AWS_ROLE_ARN);
	                this.state = 2688;
	                this.match(SnowflakeParser.EQ);
	                this.state = 2689;
	                this.string();
	            }

	            this.state = 2695;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 2692;
	                this.match(SnowflakeParser.AZURE_AD_APPLICATION_ID);
	                this.state = 2693;
	                this.match(SnowflakeParser.EQ);
	                this.state = 2694;
	                this.string();
	            }

	            this.state = 2700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37) {
	                this.state = 2697;
	                this.match(SnowflakeParser.API_KEY);
	                this.state = 2698;
	                this.match(SnowflakeParser.EQ);
	                this.state = 2699;
	                this.string();
	            }

	            this.state = 2703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 2702;
	                this.enabled_true_false();
	            }

	            this.state = 2711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33) {
	                this.state = 2705;
	                this.match(SnowflakeParser.API_ALLOWED_PREFIXES);
	                this.state = 2706;
	                this.match(SnowflakeParser.EQ);
	                this.state = 2707;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 2708;
	                this.string();
	                this.state = 2709;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 2719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 2713;
	                this.match(SnowflakeParser.API_BLOCKED_PREFIXES);
	                this.state = 2714;
	                this.match(SnowflakeParser.EQ);
	                this.state = 2715;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 2716;
	                this.string();
	                this.state = 2717;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 2722;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 2721;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2724;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 2725;
	                this.match(SnowflakeParser.API);
	            }

	            this.state = 2728;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 2729;
	            this.id_();
	            this.state = 2730;
	            this.set_tags();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2732;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 2733;
	                this.match(SnowflakeParser.API);
	            }

	            this.state = 2736;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 2737;
	            this.id_();
	            this.state = 2738;
	            this.unset_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2740;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2742;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 2741;
	                this.match(SnowflakeParser.API);
	            }

	            this.state = 2744;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 2746;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	            if(la_===1) {
	                this.state = 2745;
	                this.if_exists();

	            }
	            this.state = 2748;
	            this.id_();
	            this.state = 2749;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 2750;
	            this.api_integration_property();
	            this.state = 2755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 2751;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 2752;
	                this.api_integration_property();
	                this.state = 2757;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	api_integration_property() {
	    let localctx = new Api_integration_propertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SnowflakeParser.RULE_api_integration_property);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2760;
	        _la = this._input.LA(1);
	        if(!(_la===35 || _la===37 || _la===134 || _la===209)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_connection() {
	    let localctx = new Alter_connectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SnowflakeParser.RULE_alter_connection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2762;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 2763;
	        this.match(SnowflakeParser.CONNECTION);
	        this.state = 2764;
	        this.alter_connection_opts();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_database() {
	    let localctx = new Alter_databaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SnowflakeParser.RULE_alter_database);
	    var _la = 0;
	    try {
	        this.state = 2886;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2766;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2767;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2769;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	            if(la_===1) {
	                this.state = 2768;
	                this.if_exists();

	            }
	            this.state = 2771;
	            this.id_();
	            this.state = 2772;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 2773;
	            this.match(SnowflakeParser.TO);
	            this.state = 2774;
	            this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2776;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2777;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2779;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	            if(la_===1) {
	                this.state = 2778;
	                this.if_exists();

	            }
	            this.state = 2781;
	            this.id_();
	            this.state = 2782;
	            this.match(SnowflakeParser.SWAP);
	            this.state = 2783;
	            this.match(SnowflakeParser.WITH);
	            this.state = 2784;
	            this.id_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2786;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2787;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2789;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	            if(la_===1) {
	                this.state = 2788;
	                this.if_exists();

	            }
	            this.state = 2791;
	            this.id_();
	            this.state = 2792;
	            this.match(SnowflakeParser.SET);
	            this.state = 2796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===166) {
	                this.state = 2793;
	                this.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS);
	                this.state = 2794;
	                this.match(SnowflakeParser.EQ);
	                this.state = 2795;
	                this.num();
	            }

	            this.state = 2801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===395) {
	                this.state = 2798;
	                this.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS);
	                this.state = 2799;
	                this.match(SnowflakeParser.EQ);
	                this.state = 2800;
	                this.num();
	            }

	            this.state = 2804;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===175) {
	                this.state = 2803;
	                this.default_ddl_collation();
	            }

	            this.state = 2807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 2806;
	                this.comment_clause();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2809;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2810;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2811;
	            this.id_();
	            this.state = 2812;
	            this.set_tags();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2814;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2815;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2816;
	            this.id_();
	            this.state = 2817;
	            this.unset_tags();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2819;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2820;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2822;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	            if(la_===1) {
	                this.state = 2821;
	                this.if_exists();

	            }
	            this.state = 2824;
	            this.id_();
	            this.state = 2825;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 2826;
	            this.database_property();
	            this.state = 2831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 2827;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 2828;
	                this.database_property();
	                this.state = 2833;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2834;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2835;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2836;
	            this.id_();
	            this.state = 2837;
	            this.match(SnowflakeParser.ENABLE);
	            this.state = 2838;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 2839;
	            this.match(SnowflakeParser.TO);
	            this.state = 2840;
	            this.match(SnowflakeParser.ACCOUNTS);
	            this.state = 2841;
	            this.account_id_list();
	            this.state = 2845;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===315) {
	                this.state = 2842;
	                this.match(SnowflakeParser.IGNORE);
	                this.state = 2843;
	                this.match(SnowflakeParser.EDITION);
	                this.state = 2844;
	                this.match(SnowflakeParser.CHECK);
	            }

	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2847;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2848;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2849;
	            this.id_();
	            this.state = 2850;
	            this.match(SnowflakeParser.DISABLE);
	            this.state = 2851;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 2855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===745) {
	                this.state = 2852;
	                this.match(SnowflakeParser.TO);
	                this.state = 2853;
	                this.match(SnowflakeParser.ACCOUNTS);
	                this.state = 2854;
	                this.account_id_list();
	            }

	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2857;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2858;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2859;
	            this.id_();
	            this.state = 2860;
	            this.match(SnowflakeParser.REFRESH);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2862;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2863;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2864;
	            this.id_();
	            this.state = 2865;
	            this.match(SnowflakeParser.ENABLE);
	            this.state = 2866;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 2867;
	            this.match(SnowflakeParser.TO);
	            this.state = 2868;
	            this.match(SnowflakeParser.ACCOUNTS);
	            this.state = 2869;
	            this.account_id_list();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2871;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2872;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2873;
	            this.id_();
	            this.state = 2874;
	            this.match(SnowflakeParser.DISABLE);
	            this.state = 2875;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 2879;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===745) {
	                this.state = 2876;
	                this.match(SnowflakeParser.TO);
	                this.state = 2877;
	                this.match(SnowflakeParser.ACCOUNTS);
	                this.state = 2878;
	                this.account_id_list();
	            }

	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2881;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2882;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 2883;
	            this.id_();
	            this.state = 2884;
	            this.match(SnowflakeParser.PRIMARY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	database_property() {
	    let localctx = new Database_propertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SnowflakeParser.RULE_database_property);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2888;
	        _la = this._input.LA(1);
	        if(!(_la===134 || _la===166 || _la===175 || _la===395)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	account_id_list() {
	    let localctx = new Account_id_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SnowflakeParser.RULE_account_id_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2890;
	        this.account_identifier();
	        this.state = 2895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 2891;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 2892;
	            this.account_identifier();
	            this.state = 2897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_dynamic_table() {
	    let localctx = new Alter_dynamic_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SnowflakeParser.RULE_alter_dynamic_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2898;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 2899;
	        this.match(SnowflakeParser.DYNAMIC);
	        this.state = 2900;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 2901;
	        this.id_();
	        this.state = 2908;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 577:
	        case 700:
	            this.state = 2902;
	            this.resume_suspend();
	            break;
	        case 551:
	            this.state = 2903;
	            this.match(SnowflakeParser.REFRESH);
	            break;
	        case 640:
	            this.state = 2904;
	            this.match(SnowflakeParser.SET);
	            this.state = 2905;
	            this.match(SnowflakeParser.WAREHOUSE);
	            this.state = 2906;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2907;
	            this.id_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_external_table() {
	    let localctx = new Alter_external_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SnowflakeParser.RULE_alter_external_table);
	    var _la = 0;
	    try {
	        this.state = 3011;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2910;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2911;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 2912;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 2914;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	            if(la_===1) {
	                this.state = 2913;
	                this.if_exists();

	            }
	            this.state = 2916;
	            this.object_name();
	            this.state = 2917;
	            this.match(SnowflakeParser.REFRESH);
	            this.state = 2919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===869) {
	                this.state = 2918;
	                this.string();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2921;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2922;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 2923;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 2925;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	            if(la_===1) {
	                this.state = 2924;
	                this.if_exists();

	            }
	            this.state = 2927;
	            this.object_name();
	            this.state = 2928;
	            this.match(SnowflakeParser.ADD);
	            this.state = 2929;
	            this.match(SnowflakeParser.FILES);
	            this.state = 2930;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 2931;
	            this.string_list();
	            this.state = 2932;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2934;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2935;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 2936;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 2938;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	            if(la_===1) {
	                this.state = 2937;
	                this.if_exists();

	            }
	            this.state = 2940;
	            this.object_name();
	            this.state = 2941;
	            this.match(SnowflakeParser.REMOVE);
	            this.state = 2942;
	            this.match(SnowflakeParser.FILES);
	            this.state = 2943;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 2944;
	            this.string_list();
	            this.state = 2945;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2947;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2948;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 2949;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 2951;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	            if(la_===1) {
	                this.state = 2950;
	                this.if_exists();

	            }
	            this.state = 2953;
	            this.object_name();
	            this.state = 2954;
	            this.match(SnowflakeParser.SET);
	            this.state = 2958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57) {
	                this.state = 2955;
	                this.match(SnowflakeParser.AUTO_REFRESH);
	                this.state = 2956;
	                this.match(SnowflakeParser.EQ);
	                this.state = 2957;
	                this.true_false();
	            }

	            this.state = 2961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===715) {
	                this.state = 2960;
	                this.tag_decl_list();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2963;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2964;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 2965;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 2967;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	            if(la_===1) {
	                this.state = 2966;
	                this.if_exists();

	            }
	            this.state = 2969;
	            this.object_name();
	            this.state = 2970;
	            this.unset_tags();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2972;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 2973;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 2974;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 2975;
	            this.object_name();
	            this.state = 2977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===312) {
	                this.state = 2976;
	                this.if_exists();
	            }

	            this.state = 2979;
	            this.match(SnowflakeParser.ADD);
	            this.state = 2980;
	            this.match(SnowflakeParser.PARTITION);
	            this.state = 2981;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 2982;
	            this.column_name();
	            this.state = 2983;
	            this.match(SnowflakeParser.EQ);
	            this.state = 2984;
	            this.string();
	            this.state = 2992;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 2985;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 2986;
	                this.column_name();
	                this.state = 2987;
	                this.match(SnowflakeParser.EQ);
	                this.state = 2988;
	                this.string();
	                this.state = 2994;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2995;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 2996;
	            this.match(SnowflakeParser.LOCATION);
	            this.state = 2997;
	            this.string();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2999;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3000;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 3001;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 3002;
	            this.object_name();
	            this.state = 3004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===312) {
	                this.state = 3003;
	                this.if_exists();
	            }

	            this.state = 3006;
	            this.match(SnowflakeParser.DROP);
	            this.state = 3007;
	            this.match(SnowflakeParser.PARTITION);
	            this.state = 3008;
	            this.match(SnowflakeParser.LOCATION);
	            this.state = 3009;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ignore_edition_check() {
	    let localctx = new Ignore_edition_checkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SnowflakeParser.RULE_ignore_edition_check);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3013;
	        this.match(SnowflakeParser.IGNORE);
	        this.state = 3014;
	        this.match(SnowflakeParser.EDITION);
	        this.state = 3015;
	        this.match(SnowflakeParser.CHECK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replication_schedule() {
	    let localctx = new Replication_scheduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SnowflakeParser.RULE_replication_schedule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3017;
	        this.match(SnowflakeParser.REPLICATION_SCHEDULE);
	        this.state = 3018;
	        this.match(SnowflakeParser.EQ);
	        this.state = 3019;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	db_name_list() {
	    let localctx = new Db_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SnowflakeParser.RULE_db_name_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3021;
	        this.id_();
	        this.state = 3026;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 3022;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 3023;
	            this.id_();
	            this.state = 3028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	share_name_list() {
	    let localctx = new Share_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SnowflakeParser.RULE_share_name_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3029;
	        this.id_();
	        this.state = 3034;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 3030;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 3031;
	            this.id_();
	            this.state = 3036;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	full_acct_list() {
	    let localctx = new Full_acct_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SnowflakeParser.RULE_full_acct_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3037;
	        this.full_acct();
	        this.state = 3042;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 3038;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 3039;
	            this.full_acct();
	            this.state = 3044;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_failover_group() {
	    let localctx = new Alter_failover_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SnowflakeParser.RULE_alter_failover_group);
	    var _la = 0;
	    try {
	        this.state = 3199;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3045;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3046;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3047;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3049;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	            if(la_===1) {
	                this.state = 3048;
	                this.if_exists();

	            }
	            this.state = 3051;
	            this.id_();
	            this.state = 3052;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3053;
	            this.match(SnowflakeParser.TO);
	            this.state = 3054;
	            this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3056;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3057;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3058;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3060;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	            if(la_===1) {
	                this.state = 3059;
	                this.if_exists();

	            }
	            this.state = 3062;
	            this.id_();
	            this.state = 3063;
	            this.match(SnowflakeParser.SET);
	            this.state = 3067;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===457) {
	                this.state = 3064;
	                this.match(SnowflakeParser.OBJECT_TYPES);
	                this.state = 3065;
	                this.match(SnowflakeParser.EQ);
	                this.state = 3066;
	                this.object_type_list();
	            }

	            this.state = 3070;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===564) {
	                this.state = 3069;
	                this.replication_schedule();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3072;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3073;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3074;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3076;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
	            if(la_===1) {
	                this.state = 3075;
	                this.if_exists();

	            }
	            this.state = 3078;
	            this.id_();
	            this.state = 3079;
	            this.match(SnowflakeParser.SET);
	            this.state = 3080;
	            this.match(SnowflakeParser.OBJECT_TYPES);
	            this.state = 3081;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3082;
	            this.object_type_list();
	            this.state = 3084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===564) {
	                this.state = 3083;
	                this.replication_schedule();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3086;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3087;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3088;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3090;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	            if(la_===1) {
	                this.state = 3089;
	                this.if_exists();

	            }
	            this.state = 3092;
	            this.id_();
	            this.state = 3093;
	            this.match(SnowflakeParser.ADD);
	            this.state = 3094;
	            this.db_name_list();
	            this.state = 3095;
	            this.match(SnowflakeParser.TO);
	            this.state = 3096;
	            this.match(SnowflakeParser.ALLOWED_DATABASES);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3098;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3099;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3100;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3102;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	            if(la_===1) {
	                this.state = 3101;
	                this.if_exists();

	            }
	            this.state = 3104;
	            this.id_();
	            this.state = 3105;
	            this.match(SnowflakeParser.MOVE);
	            this.state = 3106;
	            this.match(SnowflakeParser.DATABASES);
	            this.state = 3107;
	            this.db_name_list();
	            this.state = 3108;
	            this.match(SnowflakeParser.TO);
	            this.state = 3109;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3110;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3111;
	            this.id_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3113;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3114;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3115;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3117;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	            if(la_===1) {
	                this.state = 3116;
	                this.if_exists();

	            }
	            this.state = 3119;
	            this.id_();
	            this.state = 3120;
	            this.match(SnowflakeParser.REMOVE);
	            this.state = 3121;
	            this.db_name_list();
	            this.state = 3122;
	            this.match(SnowflakeParser.FROM);
	            this.state = 3123;
	            this.match(SnowflakeParser.ALLOWED_DATABASES);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3125;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3126;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3127;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3129;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	            if(la_===1) {
	                this.state = 3128;
	                this.if_exists();

	            }
	            this.state = 3131;
	            this.id_();
	            this.state = 3132;
	            this.match(SnowflakeParser.ADD);
	            this.state = 3133;
	            this.share_name_list();
	            this.state = 3134;
	            this.match(SnowflakeParser.TO);
	            this.state = 3135;
	            this.match(SnowflakeParser.ALLOWED_SHARES);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3137;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3138;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3139;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3141;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	            if(la_===1) {
	                this.state = 3140;
	                this.if_exists();

	            }
	            this.state = 3143;
	            this.id_();
	            this.state = 3144;
	            this.match(SnowflakeParser.MOVE);
	            this.state = 3145;
	            this.match(SnowflakeParser.SHARES);
	            this.state = 3146;
	            this.share_name_list();
	            this.state = 3147;
	            this.match(SnowflakeParser.TO);
	            this.state = 3148;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3149;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3150;
	            this.id_();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3152;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3153;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3154;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3156;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	            if(la_===1) {
	                this.state = 3155;
	                this.if_exists();

	            }
	            this.state = 3158;
	            this.id_();
	            this.state = 3159;
	            this.match(SnowflakeParser.REMOVE);
	            this.state = 3160;
	            this.share_name_list();
	            this.state = 3161;
	            this.match(SnowflakeParser.FROM);
	            this.state = 3162;
	            this.match(SnowflakeParser.ALLOWED_SHARES);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3164;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3165;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3166;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3168;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	            if(la_===1) {
	                this.state = 3167;
	                this.if_exists();

	            }
	            this.state = 3170;
	            this.id_();
	            this.state = 3171;
	            this.match(SnowflakeParser.ADD);
	            this.state = 3172;
	            this.full_acct_list();
	            this.state = 3173;
	            this.match(SnowflakeParser.TO);
	            this.state = 3174;
	            this.match(SnowflakeParser.ALLOWED_ACCOUNTS);
	            this.state = 3176;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===315) {
	                this.state = 3175;
	                this.ignore_edition_check();
	            }

	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3178;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3179;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3180;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3182;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	            if(la_===1) {
	                this.state = 3181;
	                this.if_exists();

	            }
	            this.state = 3184;
	            this.id_();
	            this.state = 3185;
	            this.match(SnowflakeParser.REMOVE);
	            this.state = 3186;
	            this.full_acct_list();
	            this.state = 3187;
	            this.match(SnowflakeParser.FROM);
	            this.state = 3188;
	            this.match(SnowflakeParser.ALLOWED_ACCOUNTS);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3190;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3191;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 3192;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3194;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	            if(la_===1) {
	                this.state = 3193;
	                this.if_exists();

	            }
	            this.state = 3196;
	            this.id_();
	            this.state = 3197;
	            _la = this._input.LA(1);
	            if(!(_la===524 || _la===551 || _la===577 || _la===700)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_file_format() {
	    let localctx = new Alter_file_formatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SnowflakeParser.RULE_alter_file_format);
	    var _la = 0;
	    try {
	        this.state = 3229;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3201;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3202;
	            this.match(SnowflakeParser.FILE);
	            this.state = 3203;
	            this.match(SnowflakeParser.FORMAT);
	            this.state = 3205;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
	            if(la_===1) {
	                this.state = 3204;
	                this.if_exists();

	            }
	            this.state = 3207;
	            this.id_();
	            this.state = 3208;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3209;
	            this.match(SnowflakeParser.TO);
	            this.state = 3210;
	            this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3212;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3213;
	            this.match(SnowflakeParser.FILE);
	            this.state = 3214;
	            this.match(SnowflakeParser.FORMAT);
	            this.state = 3216;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	            if(la_===1) {
	                this.state = 3215;
	                this.if_exists();

	            }
	            this.state = 3218;
	            this.id_();
	            this.state = 3219;
	            this.match(SnowflakeParser.SET);

	            this.state = 3223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===25 || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4611) !== 0) || _la===136 || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 100679681) !== 0) || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 13107489) !== 0) || ((((_la - 259)) & ~0x1f) === 0 && ((1 << (_la - 259)) & 19) !== 0) || _la===300 || _la===316 || _la===381 || _la===425 || _la===440 || ((((_la - 520)) & ~0x1f) === 0 && ((1 << (_la - 520)) & 142606337) !== 0) || _la===561 || ((((_la - 651)) & ~0x1f) === 0 && ((1 << (_la - 651)) & 211) !== 0) || ((((_la - 694)) & ~0x1f) === 0 && ((1 << (_la - 694)) & 7) !== 0) || ((((_la - 729)) & ~0x1f) === 0 && ((1 << (_la - 729)) & 268443649) !== 0) || _la===819) {
	                this.state = 3220;
	                this.format_type_options();
	                this.state = 3225;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 3226;
	                this.comment_clause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_function() {
	    let localctx = new Alter_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SnowflakeParser.RULE_alter_function);
	    var _la = 0;
	    try {
	        this.state = 3302;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3231;
	            this.alter_function_signature();
	            this.state = 3232;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3233;
	            this.match(SnowflakeParser.TO);
	            this.state = 3234;
	            this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3236;
	            this.alter_function_signature();
	            this.state = 3237;
	            this.match(SnowflakeParser.SET);
	            this.state = 3238;
	            this.comment_clause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3240;
	            this.alter_function_signature();
	            this.state = 3241;
	            this.match(SnowflakeParser.SET);
	            this.state = 3242;
	            this.match(SnowflakeParser.SECURE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3244;
	            this.alter_function_signature();
	            this.state = 3245;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 3246;
	            _la = this._input.LA(1);
	            if(!(_la===134 || _la===629)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3248;
	            this.alter_function_signature();
	            this.state = 3249;
	            this.match(SnowflakeParser.SET);
	            this.state = 3250;
	            this.match(SnowflakeParser.API_INTEGRATION);
	            this.state = 3251;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3252;
	            this.id_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3254;
	            this.alter_function_signature();
	            this.state = 3255;
	            this.match(SnowflakeParser.SET);
	            this.state = 3256;
	            this.match(SnowflakeParser.HEADERS);
	            this.state = 3257;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3258;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 3262;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===869) {
	                this.state = 3259;
	                this.header_decl();
	                this.state = 3264;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3265;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3267;
	            this.alter_function_signature();
	            this.state = 3268;
	            this.match(SnowflakeParser.SET);
	            this.state = 3269;
	            this.match(SnowflakeParser.CONTEXT_HEADERS);
	            this.state = 3270;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3271;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 3275;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 3272;
	                this.id_();
	                this.state = 3277;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3278;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3280;
	            this.alter_function_signature();
	            this.state = 3281;
	            this.match(SnowflakeParser.SET);
	            this.state = 3282;
	            this.match(SnowflakeParser.MAX_BATCH_ROWS);
	            this.state = 3283;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3284;
	            this.num();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3286;
	            this.alter_function_signature();
	            this.state = 3287;
	            this.match(SnowflakeParser.SET);
	            this.state = 3288;
	            this.match(SnowflakeParser.COMPRESSION);
	            this.state = 3289;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3290;
	            this.compression_type();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3292;
	            this.alter_function_signature();
	            this.state = 3293;
	            this.match(SnowflakeParser.SET);
	            this.state = 3294;
	            _la = this._input.LA(1);
	            if(!(_la===565 || _la===573)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3295;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3296;
	            this.id_();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3298;
	            this.alter_function_signature();
	            this.state = 3299;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 3300;
	            _la = this._input.LA(1);
	            if(!(((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 4101) !== 0) || _la===307 || _la===392 || _la===565 || _la===573 || _la===629)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_function_signature() {
	    let localctx = new Alter_function_signatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, SnowflakeParser.RULE_alter_function_signature);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3304;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 3305;
	        this.match(SnowflakeParser.FUNCTION);
	        this.state = 3307;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        if(la_===1) {
	            this.state = 3306;
	            this.if_exists();

	        }
	        this.state = 3309;
	        this.id_();
	        this.state = 3310;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 3312;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110 || _la===111 || _la===336 || _la===441 || _la===454 || ((((_la - 724)) & ~0x1f) === 0 && ((1 << (_la - 724)) & 8841) !== 0) || ((((_la - 820)) & ~0x1f) === 0 && ((1 << (_la - 820)) & 4294934525) !== 0)) {
	            this.state = 3311;
	            this.data_type_list();
	        }

	        this.state = 3314;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	data_type_list() {
	    let localctx = new Data_type_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, SnowflakeParser.RULE_data_type_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3316;
	        this.data_type();
	        this.state = 3321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 3317;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 3318;
	            this.data_type();
	            this.state = 3323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_masking_policy() {
	    let localctx = new Alter_masking_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, SnowflakeParser.RULE_alter_masking_policy);
	    try {
	        this.state = 3357;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3324;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3325;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 3326;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 3328;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	            if(la_===1) {
	                this.state = 3327;
	                this.if_exists();

	            }
	            this.state = 3330;
	            this.id_();
	            this.state = 3331;
	            this.match(SnowflakeParser.SET);
	            this.state = 3332;
	            this.match(SnowflakeParser.BODY);
	            this.state = 3333;
	            this.match(SnowflakeParser.ARROW);
	            this.state = 3334;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3336;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3337;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 3338;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 3340;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	            if(la_===1) {
	                this.state = 3339;
	                this.if_exists();

	            }
	            this.state = 3342;
	            this.id_();
	            this.state = 3343;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3344;
	            this.match(SnowflakeParser.TO);
	            this.state = 3345;
	            this.id_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3347;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3348;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 3349;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 3351;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	            if(la_===1) {
	                this.state = 3350;
	                this.if_exists();

	            }
	            this.state = 3353;
	            this.id_();
	            this.state = 3354;
	            this.match(SnowflakeParser.SET);
	            this.state = 3355;
	            this.comment_clause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_materialized_view() {
	    let localctx = new Alter_materialized_viewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, SnowflakeParser.RULE_alter_materialized_view);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3359;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 3360;
	        this.match(SnowflakeParser.MATERIALIZED);
	        this.state = 3361;
	        this.match(SnowflakeParser.VIEW);
	        this.state = 3362;
	        this.id_();
	        this.state = 3388;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 558:
	            this.state = 3363;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3364;
	            this.match(SnowflakeParser.TO);
	            this.state = 3365;
	            this.id_();
	            break;
	        case 127:
	            this.state = 3366;
	            this.match(SnowflakeParser.CLUSTER);
	            this.state = 3367;
	            this.match(SnowflakeParser.BY);
	            this.state = 3368;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 3369;
	            this.expr_list();
	            this.state = 3370;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        case 200:
	            this.state = 3372;
	            this.match(SnowflakeParser.DROP);
	            this.state = 3373;
	            this.match(SnowflakeParser.CLUSTERING);
	            this.state = 3374;
	            this.match(SnowflakeParser.KEY);
	            break;
	        case 577:
	        case 700:
	            this.state = 3375;
	            this.resume_suspend();
	            this.state = 3377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===546) {
	                this.state = 3376;
	                this.match(SnowflakeParser.RECLUSTER);
	            }

	            break;
	        case 640:
	            this.state = 3379;
	            this.match(SnowflakeParser.SET);

	            this.state = 3381;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===629) {
	                this.state = 3380;
	                this.match(SnowflakeParser.SECURE);
	            }

	            this.state = 3384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 3383;
	                this.comment_clause();
	            }

	            break;
	        case 770:
	            this.state = 3386;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 3387;
	            _la = this._input.LA(1);
	            if(!(_la===134 || _la===629)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_network_policy() {
	    let localctx = new Alter_network_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, SnowflakeParser.RULE_alter_network_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3390;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 3391;
	        this.match(SnowflakeParser.NETWORK);
	        this.state = 3392;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 3393;
	        this.alter_network_policy_opts();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_notification_integration() {
	    let localctx = new Alter_notification_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, SnowflakeParser.RULE_alter_notification_integration);
	    var _la = 0;
	    try {
	        this.state = 3455;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3395;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===430) {
	                this.state = 3396;
	                this.match(SnowflakeParser.NOTIFICATION);
	            }

	            this.state = 3399;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 3401;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	            if(la_===1) {
	                this.state = 3400;
	                this.if_exists();

	            }
	            this.state = 3403;
	            this.id_();
	            this.state = 3404;
	            this.match(SnowflakeParser.SET);
	            this.state = 3406;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 3405;
	                this.enabled_true_false();
	            }

	            this.state = 3408;
	            this.cloud_provider_params_auto();
	            this.state = 3410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 3409;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3412;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3414;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===430) {
	                this.state = 3413;
	                this.match(SnowflakeParser.NOTIFICATION);
	            }

	            this.state = 3416;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 3418;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	            if(la_===1) {
	                this.state = 3417;
	                this.if_exists();

	            }
	            this.state = 3420;
	            this.id_();
	            this.state = 3421;
	            this.match(SnowflakeParser.SET);
	            this.state = 3423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 3422;
	                this.enabled_true_false();
	            }

	            this.state = 3425;
	            this.cloud_provider_params_push();
	            this.state = 3427;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 3426;
	                this.comment_clause();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3429;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3431;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===430) {
	                this.state = 3430;
	                this.match(SnowflakeParser.NOTIFICATION);
	            }

	            this.state = 3433;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 3434;
	            this.id_();
	            this.state = 3435;
	            this.set_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3437;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3439;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===430) {
	                this.state = 3438;
	                this.match(SnowflakeParser.NOTIFICATION);
	            }

	            this.state = 3441;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 3442;
	            this.id_();
	            this.state = 3443;
	            this.unset_tags();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3445;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===430) {
	                this.state = 3446;
	                this.match(SnowflakeParser.NOTIFICATION);
	            }

	            this.state = 3449;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 3450;
	            this.if_exists();
	            this.state = 3451;
	            this.id_();
	            this.state = 3452;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 3453;
	            _la = this._input.LA(1);
	            if(!(_la===134 || _la===209)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_pipe() {
	    let localctx = new Alter_pipeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, SnowflakeParser.RULE_alter_pipe);
	    var _la = 0;
	    try {
	        this.state = 3517;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3457;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3458;
	            this.match(SnowflakeParser.PIPE);
	            this.state = 3460;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	            if(la_===1) {
	                this.state = 3459;
	                this.if_exists();

	            }
	            this.state = 3462;
	            this.id_();
	            this.state = 3463;
	            this.match(SnowflakeParser.SET);

	            this.state = 3465;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	            if(la_===1) {
	                this.state = 3464;
	                this.object_properties();

	            }
	            this.state = 3468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 3467;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3470;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3471;
	            this.match(SnowflakeParser.PIPE);
	            this.state = 3472;
	            this.id_();
	            this.state = 3473;
	            this.set_tags();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3475;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3476;
	            this.match(SnowflakeParser.PIPE);
	            this.state = 3477;
	            this.id_();
	            this.state = 3478;
	            this.unset_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3480;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3481;
	            this.match(SnowflakeParser.PIPE);
	            this.state = 3483;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	            if(la_===1) {
	                this.state = 3482;
	                this.if_exists();

	            }
	            this.state = 3485;
	            this.id_();
	            this.state = 3486;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 3487;
	            this.match(SnowflakeParser.PIPE_EXECUTION_PAUSED);
	            this.state = 3488;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3489;
	            this.true_false();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3491;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3492;
	            this.match(SnowflakeParser.PIPE);
	            this.state = 3494;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	            if(la_===1) {
	                this.state = 3493;
	                this.if_exists();

	            }
	            this.state = 3496;
	            this.id_();
	            this.state = 3497;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 3498;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3500;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3501;
	            this.match(SnowflakeParser.PIPE);
	            this.state = 3503;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	            if(la_===1) {
	                this.state = 3502;
	                this.if_exists();

	            }
	            this.state = 3505;
	            this.id_();
	            this.state = 3506;
	            this.match(SnowflakeParser.REFRESH);
	            this.state = 3510;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===519) {
	                this.state = 3507;
	                this.match(SnowflakeParser.PREFIX);
	                this.state = 3508;
	                this.match(SnowflakeParser.EQ);
	                this.state = 3509;
	                this.string();
	            }

	            this.state = 3515;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===409) {
	                this.state = 3512;
	                this.match(SnowflakeParser.MODIFIED_AFTER);
	                this.state = 3513;
	                this.match(SnowflakeParser.EQ);
	                this.state = 3514;
	                this.string();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_procedure() {
	    let localctx = new Alter_procedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, SnowflakeParser.RULE_alter_procedure);
	    var _la = 0;
	    try {
	        this.state = 3577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3519;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3520;
	            this.match(SnowflakeParser.PROCEDURE);
	            this.state = 3522;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	            if(la_===1) {
	                this.state = 3521;
	                this.if_exists();

	            }
	            this.state = 3524;
	            this.id_();
	            this.state = 3525;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 3527;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110 || _la===111 || _la===336 || _la===441 || _la===454 || ((((_la - 724)) & ~0x1f) === 0 && ((1 << (_la - 724)) & 8841) !== 0) || ((((_la - 820)) & ~0x1f) === 0 && ((1 << (_la - 820)) & 4294934525) !== 0)) {
	                this.state = 3526;
	                this.data_type_list();
	            }

	            this.state = 3529;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 3530;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3531;
	            this.match(SnowflakeParser.TO);
	            this.state = 3532;
	            this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3534;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3535;
	            this.match(SnowflakeParser.PROCEDURE);
	            this.state = 3537;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
	            if(la_===1) {
	                this.state = 3536;
	                this.if_exists();

	            }
	            this.state = 3539;
	            this.id_();
	            this.state = 3540;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 3542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110 || _la===111 || _la===336 || _la===441 || _la===454 || ((((_la - 724)) & ~0x1f) === 0 && ((1 << (_la - 724)) & 8841) !== 0) || ((((_la - 820)) & ~0x1f) === 0 && ((1 << (_la - 820)) & 4294934525) !== 0)) {
	                this.state = 3541;
	                this.data_type_list();
	            }

	            this.state = 3544;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 3545;
	            this.match(SnowflakeParser.SET);
	            this.state = 3546;
	            this.comment_clause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3548;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3549;
	            this.match(SnowflakeParser.PROCEDURE);
	            this.state = 3551;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	            if(la_===1) {
	                this.state = 3550;
	                this.if_exists();

	            }
	            this.state = 3553;
	            this.id_();
	            this.state = 3554;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 3556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110 || _la===111 || _la===336 || _la===441 || _la===454 || ((((_la - 724)) & ~0x1f) === 0 && ((1 << (_la - 724)) & 8841) !== 0) || ((((_la - 820)) & ~0x1f) === 0 && ((1 << (_la - 820)) & 4294934525) !== 0)) {
	                this.state = 3555;
	                this.data_type_list();
	            }

	            this.state = 3558;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 3559;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 3560;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3562;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3563;
	            this.match(SnowflakeParser.PROCEDURE);
	            this.state = 3565;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
	            if(la_===1) {
	                this.state = 3564;
	                this.if_exists();

	            }
	            this.state = 3567;
	            this.id_();
	            this.state = 3568;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 3570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110 || _la===111 || _la===336 || _la===441 || _la===454 || ((((_la - 724)) & ~0x1f) === 0 && ((1 << (_la - 724)) & 8841) !== 0) || ((((_la - 820)) & ~0x1f) === 0 && ((1 << (_la - 820)) & 4294934525) !== 0)) {
	                this.state = 3569;
	                this.data_type_list();
	            }

	            this.state = 3572;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 3573;
	            this.match(SnowflakeParser.EXECUTE);
	            this.state = 3574;
	            this.match(SnowflakeParser.AS);
	            this.state = 3575;
	            this.caller_owner();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_replication_group() {
	    let localctx = new Alter_replication_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, SnowflakeParser.RULE_alter_replication_group);
	    var _la = 0;
	    try {
	        this.state = 3765;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3579;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3580;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3581;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3583;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	            if(la_===1) {
	                this.state = 3582;
	                this.if_exists();

	            }
	            this.state = 3585;
	            this.id_();
	            this.state = 3586;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3587;
	            this.match(SnowflakeParser.TO);
	            this.state = 3588;
	            this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3590;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3591;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3592;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3594;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	            if(la_===1) {
	                this.state = 3593;
	                this.if_exists();

	            }
	            this.state = 3596;
	            this.id_();
	            this.state = 3597;
	            this.match(SnowflakeParser.SET);
	            this.state = 3601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===457) {
	                this.state = 3598;
	                this.match(SnowflakeParser.OBJECT_TYPES);
	                this.state = 3599;
	                this.match(SnowflakeParser.EQ);
	                this.state = 3600;
	                this.object_type_list();
	            }

	            this.state = 3606;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===564) {
	                this.state = 3603;
	                this.match(SnowflakeParser.REPLICATION_SCHEDULE);
	                this.state = 3604;
	                this.match(SnowflakeParser.EQ);
	                this.state = 3605;
	                this.string();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3608;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3609;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3610;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3612;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	            if(la_===1) {
	                this.state = 3611;
	                this.if_exists();

	            }
	            this.state = 3614;
	            this.id_();
	            this.state = 3615;
	            this.match(SnowflakeParser.SET);
	            this.state = 3616;
	            this.match(SnowflakeParser.OBJECT_TYPES);
	            this.state = 3617;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3618;
	            this.object_type_list();
	            this.state = 3619;
	            this.match(SnowflakeParser.ALLOWED_INTEGRATION_TYPES);
	            this.state = 3620;
	            this.match(SnowflakeParser.EQ);
	            this.state = 3621;
	            this.integration_type_name();
	            this.state = 3626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 3622;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 3623;
	                this.integration_type_name();
	                this.state = 3628;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===564) {
	                this.state = 3629;
	                this.match(SnowflakeParser.REPLICATION_SCHEDULE);
	                this.state = 3630;
	                this.match(SnowflakeParser.EQ);
	                this.state = 3631;
	                this.string();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3634;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3635;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3636;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3638;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	            if(la_===1) {
	                this.state = 3637;
	                this.if_exists();

	            }
	            this.state = 3640;
	            this.id_();
	            this.state = 3641;
	            this.match(SnowflakeParser.ADD);
	            this.state = 3642;
	            this.db_name_list();
	            this.state = 3643;
	            this.match(SnowflakeParser.TO);
	            this.state = 3644;
	            this.match(SnowflakeParser.ALLOWED_DATABASES);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3646;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3647;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3648;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3650;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	            if(la_===1) {
	                this.state = 3649;
	                this.if_exists();

	            }
	            this.state = 3652;
	            this.id_();
	            this.state = 3653;
	            this.match(SnowflakeParser.MOVE);
	            this.state = 3654;
	            this.match(SnowflakeParser.DATABASES);
	            this.state = 3655;
	            this.db_name_list();
	            this.state = 3656;
	            this.match(SnowflakeParser.TO);
	            this.state = 3657;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3658;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3659;
	            this.id_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3661;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3662;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3663;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3665;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	            if(la_===1) {
	                this.state = 3664;
	                this.if_exists();

	            }
	            this.state = 3667;
	            this.id_();
	            this.state = 3668;
	            this.match(SnowflakeParser.REMOVE);
	            this.state = 3669;
	            this.db_name_list();
	            this.state = 3670;
	            this.match(SnowflakeParser.FROM);
	            this.state = 3671;
	            this.match(SnowflakeParser.ALLOWED_DATABASES);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3673;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3674;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3675;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3677;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
	            if(la_===1) {
	                this.state = 3676;
	                this.if_exists();

	            }
	            this.state = 3679;
	            this.id_();
	            this.state = 3680;
	            this.match(SnowflakeParser.ADD);
	            this.state = 3681;
	            this.share_name_list();
	            this.state = 3682;
	            this.match(SnowflakeParser.TO);
	            this.state = 3683;
	            this.match(SnowflakeParser.ALLOWED_SHARES);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3685;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3686;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3687;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3689;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	            if(la_===1) {
	                this.state = 3688;
	                this.if_exists();

	            }
	            this.state = 3691;
	            this.id_();
	            this.state = 3692;
	            this.match(SnowflakeParser.MOVE);
	            this.state = 3693;
	            this.match(SnowflakeParser.SHARES);
	            this.state = 3694;
	            this.share_name_list();
	            this.state = 3695;
	            this.match(SnowflakeParser.TO);
	            this.state = 3696;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3697;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3698;
	            this.id_();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3700;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3701;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3702;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3704;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	            if(la_===1) {
	                this.state = 3703;
	                this.if_exists();

	            }
	            this.state = 3706;
	            this.id_();
	            this.state = 3707;
	            this.match(SnowflakeParser.REMOVE);
	            this.state = 3708;
	            this.share_name_list();
	            this.state = 3709;
	            this.match(SnowflakeParser.FROM);
	            this.state = 3710;
	            this.match(SnowflakeParser.ALLOWED_SHARES);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3712;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3713;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3714;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3716;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	            if(la_===1) {
	                this.state = 3715;
	                this.if_exists();

	            }
	            this.state = 3718;
	            this.id_();
	            this.state = 3719;
	            this.match(SnowflakeParser.ADD);
	            this.state = 3720;
	            this.account_id_list();
	            this.state = 3721;
	            this.match(SnowflakeParser.TO);
	            this.state = 3722;
	            this.match(SnowflakeParser.ALLOWED_ACCOUNTS);
	            this.state = 3724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===315) {
	                this.state = 3723;
	                this.ignore_edition_check();
	            }

	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3726;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3727;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3728;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3730;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	            if(la_===1) {
	                this.state = 3729;
	                this.if_exists();

	            }
	            this.state = 3732;
	            this.id_();
	            this.state = 3733;
	            this.match(SnowflakeParser.REMOVE);
	            this.state = 3734;
	            this.account_id_list();
	            this.state = 3735;
	            this.match(SnowflakeParser.FROM);
	            this.state = 3736;
	            this.match(SnowflakeParser.ALLOWED_ACCOUNTS);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3738;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3739;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3740;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3742;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
	            if(la_===1) {
	                this.state = 3741;
	                this.if_exists();

	            }
	            this.state = 3744;
	            this.id_();
	            this.state = 3745;
	            this.match(SnowflakeParser.REFRESH);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3747;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3748;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3749;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3751;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
	            if(la_===1) {
	                this.state = 3750;
	                this.if_exists();

	            }
	            this.state = 3753;
	            this.id_();
	            this.state = 3754;
	            this.match(SnowflakeParser.SUSPEND);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3756;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3757;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 3758;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 3760;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,313,this._ctx);
	            if(la_===1) {
	                this.state = 3759;
	                this.if_exists();

	            }
	            this.state = 3762;
	            this.id_();
	            this.state = 3763;
	            this.match(SnowflakeParser.RESUME);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	credit_quota() {
	    let localctx = new Credit_quotaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, SnowflakeParser.RULE_credit_quota);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3767;
	        this.match(SnowflakeParser.CREDIT_QUOTA);
	        this.state = 3768;
	        this.match(SnowflakeParser.EQ);
	        this.state = 3769;
	        this.num();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frequency() {
	    let localctx = new FrequencyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, SnowflakeParser.RULE_frequency);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3771;
	        this.match(SnowflakeParser.FREQUENCY);
	        this.state = 3772;
	        this.match(SnowflakeParser.EQ);
	        this.state = 3773;
	        _la = this._input.LA(1);
	        if(!(_la===162 || _la===413 || _la===421 || _la===800 || _la===818)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notify_users() {
	    let localctx = new Notify_usersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, SnowflakeParser.RULE_notify_users);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3775;
	        this.match(SnowflakeParser.NOTIFY_USERS);
	        this.state = 3776;
	        this.match(SnowflakeParser.EQ);
	        this.state = 3777;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 3778;
	        this.id_();
	        this.state = 3783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 3779;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 3780;
	            this.id_();
	            this.state = 3785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3786;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerDefinition() {
	    let localctx = new TriggerDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, SnowflakeParser.RULE_triggerDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3788;
	        this.match(SnowflakeParser.ON);
	        this.state = 3789;
	        this.num();
	        this.state = 3790;
	        this.match(SnowflakeParser.PERCENT);
	        this.state = 3791;
	        this.match(SnowflakeParser.DO);
	        this.state = 3792;
	        _la = this._input.LA(1);
	        if(!(_la===433 || _la===700 || _la===702)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_resource_monitor() {
	    let localctx = new Alter_resource_monitorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, SnowflakeParser.RULE_alter_resource_monitor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3794;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 3795;
	        this.match(SnowflakeParser.RESOURCE);
	        this.state = 3796;
	        this.match(SnowflakeParser.MONITOR);
	        this.state = 3798;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
	        if(la_===1) {
	            this.state = 3797;
	            this.if_exists();

	        }
	        this.state = 3800;
	        this.id_();
	        this.state = 3821;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===640) {
	            this.state = 3801;
	            this.match(SnowflakeParser.SET);
	            this.state = 3803;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===153) {
	                this.state = 3802;
	                this.credit_quota();
	            }

	            this.state = 3806;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275) {
	                this.state = 3805;
	                this.frequency();
	            }

	            this.state = 3814;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 677:
	            	this.state = 3808;
	            	this.match(SnowflakeParser.START_TIMESTAMP);
	            	this.state = 3809;
	            	this.match(SnowflakeParser.EQ);
	            	this.state = 3810;
	            	this.match(SnowflakeParser.LR_BRACKET);
	            	this.state = 3811;
	            	this.string();
	            	break;
	            case 319:
	            	this.state = 3812;
	            	this.match(SnowflakeParser.IMMEDIATELY);
	            	this.state = 3813;
	            	this.match(SnowflakeParser.RR_BRACKET);
	            	break;
	            case -1:
	            case 218:
	            case 434:
	            case 895:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 3819;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===218) {
	                this.state = 3816;
	                this.match(SnowflakeParser.END_TIMESTAMP);
	                this.state = 3817;
	                this.match(SnowflakeParser.EQ);
	                this.state = 3818;
	                this.string();
	            }

	        }

	        this.state = 3835;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===434) {
	            this.state = 3823;
	            this.notify_users();
	            this.state = 3833;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===755) {
	                this.state = 3824;
	                this.match(SnowflakeParser.TRIGGERS);
	                this.state = 3825;
	                this.triggerDefinition();
	                this.state = 3830;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 3826;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 3827;
	                    this.triggerDefinition();
	                    this.state = 3832;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_role() {
	    let localctx = new Alter_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, SnowflakeParser.RULE_alter_role);
	    try {
	        this.state = 3881;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3837;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3838;
	            this.match(SnowflakeParser.ROLE);
	            this.state = 3840;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	            if(la_===1) {
	                this.state = 3839;
	                this.if_exists();

	            }
	            this.state = 3842;
	            this.id_();
	            this.state = 3843;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3844;
	            this.match(SnowflakeParser.TO);
	            this.state = 3845;
	            this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3847;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3848;
	            this.match(SnowflakeParser.ROLE);
	            this.state = 3850;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	            if(la_===1) {
	                this.state = 3849;
	                this.if_exists();

	            }
	            this.state = 3852;
	            this.id_();
	            this.state = 3853;
	            this.match(SnowflakeParser.SET);
	            this.state = 3854;
	            this.comment_clause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3856;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3857;
	            this.match(SnowflakeParser.ROLE);
	            this.state = 3859;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	            if(la_===1) {
	                this.state = 3858;
	                this.if_exists();

	            }
	            this.state = 3861;
	            this.id_();
	            this.state = 3862;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 3863;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3865;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3866;
	            this.match(SnowflakeParser.ROLE);
	            this.state = 3868;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	            if(la_===1) {
	                this.state = 3867;
	                this.if_exists();

	            }
	            this.state = 3870;
	            this.id_();
	            this.state = 3871;
	            this.set_tags();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3873;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3874;
	            this.match(SnowflakeParser.ROLE);
	            this.state = 3876;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	            if(la_===1) {
	                this.state = 3875;
	                this.if_exists();

	            }
	            this.state = 3878;
	            this.id_();
	            this.state = 3879;
	            this.unset_tags();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_row_access_policy() {
	    let localctx = new Alter_row_access_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, SnowflakeParser.RULE_alter_row_access_policy);
	    try {
	        this.state = 3919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3883;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3884;
	            this.match(SnowflakeParser.ROW);
	            this.state = 3885;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 3886;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 3888;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	            if(la_===1) {
	                this.state = 3887;
	                this.if_exists();

	            }
	            this.state = 3890;
	            this.id_();
	            this.state = 3891;
	            this.match(SnowflakeParser.SET);
	            this.state = 3892;
	            this.match(SnowflakeParser.BODY);
	            this.state = 3893;
	            this.match(SnowflakeParser.ARROW);
	            this.state = 3894;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3896;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3897;
	            this.match(SnowflakeParser.ROW);
	            this.state = 3898;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 3899;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 3901;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	            if(la_===1) {
	                this.state = 3900;
	                this.if_exists();

	            }
	            this.state = 3903;
	            this.id_();
	            this.state = 3904;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3905;
	            this.match(SnowflakeParser.TO);
	            this.state = 3906;
	            this.id_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3908;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3909;
	            this.match(SnowflakeParser.ROW);
	            this.state = 3910;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 3911;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 3913;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	            if(la_===1) {
	                this.state = 3912;
	                this.if_exists();

	            }
	            this.state = 3915;
	            this.id_();
	            this.state = 3916;
	            this.match(SnowflakeParser.SET);
	            this.state = 3917;
	            this.comment_clause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_schema() {
	    let localctx = new Alter_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, SnowflakeParser.RULE_alter_schema);
	    var _la = 0;
	    try {
	        this.state = 4005;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3921;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3922;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 3924;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	            if(la_===1) {
	                this.state = 3923;
	                this.if_exists();

	            }
	            this.state = 3926;
	            this.schema_name();
	            this.state = 3927;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 3928;
	            this.match(SnowflakeParser.TO);
	            this.state = 3929;
	            this.schema_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3931;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3932;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 3934;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	            if(la_===1) {
	                this.state = 3933;
	                this.if_exists();

	            }
	            this.state = 3936;
	            this.schema_name();
	            this.state = 3937;
	            this.match(SnowflakeParser.SWAP);
	            this.state = 3938;
	            this.match(SnowflakeParser.WITH);
	            this.state = 3939;
	            this.schema_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3941;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3942;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 3944;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	            if(la_===1) {
	                this.state = 3943;
	                this.if_exists();

	            }
	            this.state = 3946;
	            this.schema_name();
	            this.state = 3947;
	            this.match(SnowflakeParser.SET);

	            this.state = 3951;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===166) {
	                this.state = 3948;
	                this.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS);
	                this.state = 3949;
	                this.match(SnowflakeParser.EQ);
	                this.state = 3950;
	                this.num();
	            }

	            this.state = 3956;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===395) {
	                this.state = 3953;
	                this.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS);
	                this.state = 3954;
	                this.match(SnowflakeParser.EQ);
	                this.state = 3955;
	                this.num();
	            }

	            this.state = 3959;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===175) {
	                this.state = 3958;
	                this.default_ddl_collation();
	            }

	            this.state = 3962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 3961;
	                this.comment_clause();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3964;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3965;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 3967;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	            if(la_===1) {
	                this.state = 3966;
	                this.if_exists();

	            }
	            this.state = 3969;
	            this.schema_name();
	            this.state = 3970;
	            this.set_tags();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3972;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3973;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 3975;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	            if(la_===1) {
	                this.state = 3974;
	                this.if_exists();

	            }
	            this.state = 3977;
	            this.schema_name();
	            this.state = 3978;
	            this.unset_tags();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3980;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3981;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 3983;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	            if(la_===1) {
	                this.state = 3982;
	                this.if_exists();

	            }
	            this.state = 3985;
	            this.schema_name();
	            this.state = 3986;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 3987;
	            this.schema_property();
	            this.state = 3992;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 3988;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 3989;
	                this.schema_property();
	                this.state = 3994;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3995;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 3996;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 3998;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	            if(la_===1) {
	                this.state = 3997;
	                this.if_exists();

	            }
	            this.state = 4000;
	            this.schema_name();
	            this.state = 4001;
	            _la = this._input.LA(1);
	            if(!(_la===192 || _la===208)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4002;
	            this.match(SnowflakeParser.MANAGED);
	            this.state = 4003;
	            this.match(SnowflakeParser.ACCESS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schema_property() {
	    let localctx = new Schema_propertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, SnowflakeParser.RULE_schema_property);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4007;
	        _la = this._input.LA(1);
	        if(!(_la===134 || _la===166 || _la===175 || _la===395)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_sequence() {
	    let localctx = new Alter_sequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, SnowflakeParser.RULE_alter_sequence);
	    var _la = 0;
	    try {
	        this.state = 4061;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4009;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4010;
	            this.match(SnowflakeParser.SEQUENCE);
	            this.state = 4012;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	            if(la_===1) {
	                this.state = 4011;
	                this.if_exists();

	            }
	            this.state = 4014;
	            this.object_name();
	            this.state = 4015;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 4016;
	            this.match(SnowflakeParser.TO);
	            this.state = 4017;
	            this.object_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4019;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4020;
	            this.match(SnowflakeParser.SEQUENCE);
	            this.state = 4022;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,349,this._ctx);
	            if(la_===1) {
	                this.state = 4021;
	                this.if_exists();

	            }
	            this.state = 4024;
	            this.object_name();
	            this.state = 4026;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===640) {
	                this.state = 4025;
	                this.match(SnowflakeParser.SET);
	            }

	            this.state = 4036;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===326) {
	                this.state = 4028;
	                this.match(SnowflakeParser.INCREMENT);
	                this.state = 4030;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===96) {
	                    this.state = 4029;
	                    this.match(SnowflakeParser.BY);
	                }

	                this.state = 4033;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===878) {
	                    this.state = 4032;
	                    this.match(SnowflakeParser.EQ);
	                }

	                this.state = 4035;
	                this.num();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4038;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4039;
	            this.match(SnowflakeParser.SEQUENCE);
	            this.state = 4041;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,354,this._ctx);
	            if(la_===1) {
	                this.state = 4040;
	                this.if_exists();

	            }
	            this.state = 4043;
	            this.object_name();
	            this.state = 4044;
	            this.match(SnowflakeParser.SET);
	            this.state = 4050;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4046;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===427 || _la===475) {
	                    this.state = 4045;
	                    this.order_noorder();
	                }

	                this.state = 4048;
	                this.comment_clause();
	                break;

	            case 2:
	                this.state = 4049;
	                this.order_noorder();
	                break;

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4052;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4053;
	            this.match(SnowflakeParser.SEQUENCE);
	            this.state = 4055;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	            if(la_===1) {
	                this.state = 4054;
	                this.if_exists();

	            }
	            this.state = 4057;
	            this.object_name();
	            this.state = 4058;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4059;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_security_integration_external_oauth() {
	    let localctx = new Alter_security_integration_external_oauthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, SnowflakeParser.RULE_alter_security_integration_external_oauth);
	    var _la = 0;
	    try {
	        this.state = 4201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4063;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4064;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4067;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4068;
	            this.if_exists();
	            this.state = 4069;
	            this.id_();
	            this.state = 4070;
	            this.match(SnowflakeParser.SET);
	            this.state = 4074;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===764) {
	                this.state = 4071;
	                this.match(SnowflakeParser.TYPE);
	                this.state = 4072;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4073;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH);
	            }

	            this.state = 4079;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 4076;
	                this.match(SnowflakeParser.ENABLED);
	                this.state = 4077;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4078;
	                this.true_false();
	            }

	            this.state = 4084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===254) {
	                this.state = 4081;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_TYPE);
	                this.state = 4082;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4083;
	                _la = this._input.LA(1);
	                if(!(_la===71 || _la===161 || _la===460 || _la===511)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 4089;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===247) {
	                this.state = 4086;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_ISSUER);
	                this.state = 4087;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4088;
	                this.string();
	            }

	            this.state = 4100;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===253) {
	                this.state = 4091;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM);
	                this.state = 4092;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4098;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 869:
	                    this.state = 4093;
	                    this.string();
	                    break;
	                case 888:
	                    this.state = 4094;
	                    this.match(SnowflakeParser.LR_BRACKET);
	                    this.state = 4095;
	                    this.string_list();
	                    this.state = 4096;
	                    this.match(SnowflakeParser.RR_BRACKET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 4105;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===252) {
	                this.state = 4102;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE);
	                this.state = 4103;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4104;
	                this.string();
	            }

	            this.state = 4110;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
	            if(la_===1) {
	                this.state = 4107;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL);
	                this.state = 4108;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4109;
	                this.string();

	            }
	            this.state = 4121;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===248) {
	                this.state = 4112;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL);
	                this.state = 4113;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4119;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 869:
	                    this.state = 4114;
	                    this.string();
	                    break;
	                case 888:
	                    this.state = 4115;
	                    this.match(SnowflakeParser.LR_BRACKET);
	                    this.state = 4116;
	                    this.string_list();
	                    this.state = 4117;
	                    this.match(SnowflakeParser.RR_BRACKET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 4126;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===249) {
	                this.state = 4123;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY);
	                this.state = 4124;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4125;
	                this.string();
	            }

	            this.state = 4131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===250) {
	                this.state = 4128;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2);
	                this.state = 4129;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4130;
	                this.string();
	            }

	            this.state = 4139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===246) {
	                this.state = 4133;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST);
	                this.state = 4134;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4135;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 4136;
	                this.string_list();
	                this.state = 4137;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 4147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===243) {
	                this.state = 4141;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST);
	                this.state = 4142;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4143;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 4144;
	                this.string_list();
	                this.state = 4145;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 4155;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===245) {
	                this.state = 4149;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST);
	                this.state = 4150;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4151;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 4152;
	                this.string();
	                this.state = 4153;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 4160;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
	            if(la_===1) {
	                this.state = 4157;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE);
	                this.state = 4158;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4159;
	                _la = this._input.LA(1);
	                if(!(((((_la - 192)) & ~0x1f) === 0 && ((1 << (_la - 192)) & 327681) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 4165;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===244) {
	                this.state = 4162;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE);
	                this.state = 4163;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4164;
	                this.string();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4167;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4169;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4168;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4171;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4173;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
	            if(la_===1) {
	                this.state = 4172;
	                this.if_exists();

	            }
	            this.state = 4175;
	            this.id_();
	            this.state = 4176;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4177;
	            this.security_integration_external_oauth_property();
	            this.state = 4182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 4178;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 4179;
	                this.security_integration_external_oauth_property();
	                this.state = 4184;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4185;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4186;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4189;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4190;
	            this.id_();
	            this.state = 4191;
	            this.set_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4193;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4195;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4194;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4197;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4198;
	            this.id_();
	            this.state = 4199;
	            this.unset_tags();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	security_integration_external_oauth_property() {
	    let localctx = new Security_integration_external_oauth_propertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, SnowflakeParser.RULE_security_integration_external_oauth_property);
	    var _la = 0;
	    try {
	        this.state = 4211;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 209:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4203;
	            this.match(SnowflakeParser.ENABLED);
	            break;
	        case 420:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4204;
	            this.match(SnowflakeParser.NETWORK_POLICY);
	            break;
	        case 447:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4205;
	            this.match(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY);
	            break;
	        case 448:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4206;
	            this.match(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2);
	            break;
	        case 453:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4207;
	            this.match(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES);
	            this.state = 4208;
	            this.match(SnowflakeParser.EQ);
	            this.state = 4209;
	            _la = this._input.LA(1);
	            if(!(_la===321 || _la===425)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4210;
	            this.match(SnowflakeParser.COMMENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_security_integration_snowflake_oauth() {
	    let localctx = new Alter_security_integration_snowflake_oauthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, SnowflakeParser.RULE_alter_security_integration_snowflake_oauth);
	    var _la = 0;
	    try {
	        this.state = 4352;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4213;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4215;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4214;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4217;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4219;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,385,this._ctx);
	            if(la_===1) {
	                this.state = 4218;
	                this.if_exists();

	            }
	            this.state = 4221;
	            this.id_();
	            this.state = 4222;
	            this.match(SnowflakeParser.SET);
	            this.state = 4226;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===764) {
	                this.state = 4223;
	                this.match(SnowflakeParser.TYPE);
	                this.state = 4224;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4225;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH);
	            }

	            this.state = 4229;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 4228;
	                this.enabled_true_false();
	            }

	            this.state = 4234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===254) {
	                this.state = 4231;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_TYPE);
	                this.state = 4232;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4233;
	                _la = this._input.LA(1);
	                if(!(_la===71 || _la===161 || _la===460 || _la===511)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 4239;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===247) {
	                this.state = 4236;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_ISSUER);
	                this.state = 4237;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4238;
	                this.string();
	            }

	            this.state = 4250;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===253) {
	                this.state = 4241;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM);
	                this.state = 4242;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4248;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 869:
	                    this.state = 4243;
	                    this.string();
	                    break;
	                case 888:
	                    this.state = 4244;
	                    this.match(SnowflakeParser.LR_BRACKET);
	                    this.state = 4245;
	                    this.string_list();
	                    this.state = 4246;
	                    this.match(SnowflakeParser.RR_BRACKET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 4255;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===252) {
	                this.state = 4252;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE);
	                this.state = 4253;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4254;
	                this.string();
	            }

	            this.state = 4260;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
	            if(la_===1) {
	                this.state = 4257;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL);
	                this.state = 4258;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4259;
	                this.string();

	            }
	            this.state = 4271;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===248) {
	                this.state = 4262;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL);
	                this.state = 4263;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4269;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 869:
	                    this.state = 4264;
	                    this.string();
	                    break;
	                case 888:
	                    this.state = 4265;
	                    this.match(SnowflakeParser.LR_BRACKET);
	                    this.state = 4266;
	                    this.string_list();
	                    this.state = 4267;
	                    this.match(SnowflakeParser.RR_BRACKET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 4276;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===249) {
	                this.state = 4273;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY);
	                this.state = 4274;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4275;
	                this.string();
	            }

	            this.state = 4281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===250) {
	                this.state = 4278;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2);
	                this.state = 4279;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4280;
	                this.string();
	            }

	            this.state = 4289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===246) {
	                this.state = 4283;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST);
	                this.state = 4284;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4285;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 4286;
	                this.string_list();
	                this.state = 4287;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 4297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===243) {
	                this.state = 4291;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST);
	                this.state = 4292;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4293;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 4294;
	                this.string_list();
	                this.state = 4295;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 4305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===245) {
	                this.state = 4299;
	                this.match(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST);
	                this.state = 4300;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4301;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 4302;
	                this.string();
	                this.state = 4303;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 4312;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 244:
	            	this.state = 4307;
	            	this.match(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE);
	            	this.state = 4308;
	            	this.match(SnowflakeParser.EQ);
	            	this.state = 4309;
	            	this.match(SnowflakeParser.DISABLE);
	            	break;
	            case 208:
	            	this.state = 4310;
	            	this.match(SnowflakeParser.ENABLE);
	            	break;
	            case 210:
	            	this.state = 4311;
	            	this.match(SnowflakeParser.ENABLE_FOR_PRIVILEGE);
	            	break;
	            case 251:
	            	break;
	            default:
	            	break;
	            }

	            this.state = 4314;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER);
	            this.state = 4315;
	            this.match(SnowflakeParser.EQ);
	            this.state = 4316;
	            this.string();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4318;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4320;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4319;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4322;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4324;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,403,this._ctx);
	            if(la_===1) {
	                this.state = 4323;
	                this.if_exists();

	            }
	            this.state = 4326;
	            this.id_();
	            this.state = 4327;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4328;
	            this.security_integration_snowflake_oauth_property();
	            this.state = 4333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 4329;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 4330;
	                this.security_integration_snowflake_oauth_property();
	                this.state = 4335;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4336;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4337;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4340;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4341;
	            this.id_();
	            this.state = 4342;
	            this.set_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4344;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4345;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4348;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4349;
	            this.id_();
	            this.state = 4350;
	            this.unset_tags();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	security_integration_snowflake_oauth_property() {
	    let localctx = new Security_integration_snowflake_oauth_propertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, SnowflakeParser.RULE_security_integration_snowflake_oauth_property);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4354;
	        _la = this._input.LA(1);
	        if(!(_la===209 || _la===245)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_security_integration_saml2() {
	    let localctx = new Alter_security_integration_saml2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, SnowflakeParser.RULE_alter_security_integration_saml2);
	    var _la = 0;
	    try {
	        this.state = 4467;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,429,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4356;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4357;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4360;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4362;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,409,this._ctx);
	            if(la_===1) {
	                this.state = 4361;
	                this.if_exists();

	            }
	            this.state = 4364;
	            this.id_();
	            this.state = 4365;
	            this.match(SnowflakeParser.SET);
	            this.state = 4369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===764) {
	                this.state = 4366;
	                this.match(SnowflakeParser.TYPE);
	                this.state = 4367;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4368;
	                this.match(SnowflakeParser.SAML2);
	            }

	            this.state = 4372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 4371;
	                this.enabled_true_false();
	            }

	            this.state = 4377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===606) {
	                this.state = 4374;
	                this.match(SnowflakeParser.SAML2_ISSUER);
	                this.state = 4375;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4376;
	                this.string();
	            }

	            this.state = 4382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===615) {
	                this.state = 4379;
	                this.match(SnowflakeParser.SAML2_SSO_URL);
	                this.state = 4380;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4381;
	                this.string();
	            }

	            this.state = 4387;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===608) {
	                this.state = 4384;
	                this.match(SnowflakeParser.SAML2_PROVIDER);
	                this.state = 4385;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4386;
	                this.string();
	            }

	            this.state = 4392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===616) {
	                this.state = 4389;
	                this.match(SnowflakeParser.SAML2_X509_CERT);
	                this.state = 4390;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4391;
	                this.string();
	            }

	            this.state = 4397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===614) {
	                this.state = 4394;
	                this.match(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL);
	                this.state = 4395;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4396;
	                this.string();
	            }

	            this.state = 4402;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===604) {
	                this.state = 4399;
	                this.match(SnowflakeParser.SAML2_ENABLE_SP_INITIATED);
	                this.state = 4400;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4401;
	                this.true_false();
	            }

	            this.state = 4407;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===613) {
	                this.state = 4404;
	                this.match(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT);
	                this.state = 4405;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4406;
	                this.string();
	            }

	            this.state = 4412;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===610) {
	                this.state = 4409;
	                this.match(SnowflakeParser.SAML2_SIGN_REQUEST);
	                this.state = 4410;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4411;
	                this.true_false();
	            }

	            this.state = 4417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===609) {
	                this.state = 4414;
	                this.match(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT);
	                this.state = 4415;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4416;
	                this.string();
	            }

	            this.state = 4422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===607) {
	                this.state = 4419;
	                this.match(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL);
	                this.state = 4420;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4421;
	                this.string();
	            }

	            this.state = 4427;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===605) {
	                this.state = 4424;
	                this.match(SnowflakeParser.SAML2_FORCE_AUTHN);
	                this.state = 4425;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4426;
	                this.true_false();
	            }

	            this.state = 4432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===612) {
	                this.state = 4429;
	                this.match(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL);
	                this.state = 4430;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4431;
	                this.string();
	            }

	            this.state = 4437;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===611) {
	                this.state = 4434;
	                this.match(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL);
	                this.state = 4435;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4436;
	                this.string();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4439;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4440;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4443;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4445;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,426,this._ctx);
	            if(la_===1) {
	                this.state = 4444;
	                this.if_exists();

	            }
	            this.state = 4447;
	            this.id_();
	            this.state = 4448;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4449;
	            this.match(SnowflakeParser.ENABLED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4451;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4453;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4452;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4455;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4456;
	            this.id_();
	            this.state = 4457;
	            this.set_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4459;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4460;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4463;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4464;
	            this.id_();
	            this.state = 4465;
	            this.unset_tags();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_security_integration_scim() {
	    let localctx = new Alter_security_integration_scimContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, SnowflakeParser.RULE_alter_security_integration_scim);
	    var _la = 0;
	    try {
	        this.state = 4526;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,440,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4469;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4470;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4473;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4475;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
	            if(la_===1) {
	                this.state = 4474;
	                this.if_exists();

	            }
	            this.state = 4477;
	            this.id_();
	            this.state = 4478;
	            this.match(SnowflakeParser.SET);
	            this.state = 4482;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===420) {
	                this.state = 4479;
	                this.match(SnowflakeParser.NETWORK_POLICY);
	                this.state = 4480;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4481;
	                this.string();
	            }

	            this.state = 4487;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===705) {
	                this.state = 4484;
	                this.match(SnowflakeParser.SYNC_PASSWORD);
	                this.state = 4485;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4486;
	                this.true_false();
	            }

	            this.state = 4490;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 4489;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4492;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4494;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4493;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4496;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4498;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,436,this._ctx);
	            if(la_===1) {
	                this.state = 4497;
	                this.if_exists();

	            }
	            this.state = 4500;
	            this.id_();
	            this.state = 4501;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4502;
	            this.security_integration_scim_property();
	            this.state = 4507;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 4503;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 4504;
	                this.security_integration_scim_property();
	                this.state = 4509;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4510;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4512;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4511;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4514;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4515;
	            this.id_();
	            this.state = 4516;
	            this.set_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4518;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4520;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 4519;
	                this.match(SnowflakeParser.SECURITY);
	            }

	            this.state = 4522;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4523;
	            this.id_();
	            this.state = 4524;
	            this.unset_tags();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	security_integration_scim_property() {
	    let localctx = new Security_integration_scim_propertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, SnowflakeParser.RULE_security_integration_scim_property);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4528;
	        _la = this._input.LA(1);
	        if(!(_la===134 || _la===420 || _la===705)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_session() {
	    let localctx = new Alter_sessionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, SnowflakeParser.RULE_alter_session);
	    var _la = 0;
	    try {
	        this.state = 4545;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4530;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4531;
	            this.match(SnowflakeParser.SESSION);
	            this.state = 4532;
	            this.match(SnowflakeParser.SET);
	            this.state = 4533;
	            this.session_params();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4534;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4535;
	            this.match(SnowflakeParser.SESSION);
	            this.state = 4536;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4537;
	            this.param_name();
	            this.state = 4542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 4538;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 4539;
	                this.param_name();
	                this.state = 4544;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_session_policy() {
	    let localctx = new Alter_session_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, SnowflakeParser.RULE_alter_session_policy);
	    var _la = 0;
	    try {
	        this.state = 4595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,450,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4547;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4548;
	            this.match(SnowflakeParser.SESSION);
	            this.state = 4549;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4551;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
	            if(la_===1) {
	                this.state = 4550;
	                this.if_exists();

	            }
	            this.state = 4553;
	            this.object_name();
	            this.state = 4554;
	            this.match(SnowflakeParser.SET);
	            this.state = 4558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===134 || _la===637 || _la===639) {
	                this.state = 4555;
	                this.session_policy_params();
	                this.state = 4560;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4561;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4562;
	            this.match(SnowflakeParser.SESSION);
	            this.state = 4563;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4565;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,445,this._ctx);
	            if(la_===1) {
	                this.state = 4564;
	                this.if_exists();

	            }
	            this.state = 4567;
	            this.object_name();
	            this.state = 4568;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4571;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 637:
	            case 639:
	                this.state = 4569;
	                this.session_policy_param_name();
	                break;
	            case 134:
	                this.state = 4570;
	                this.match(SnowflakeParser.COMMENT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4573;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4574;
	            this.match(SnowflakeParser.SESSION);
	            this.state = 4575;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4577;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,447,this._ctx);
	            if(la_===1) {
	                this.state = 4576;
	                this.if_exists();

	            }
	            this.state = 4579;
	            this.object_name();
	            this.state = 4580;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 4581;
	            this.match(SnowflakeParser.TO);
	            this.state = 4582;
	            this.object_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4584;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4585;
	            this.match(SnowflakeParser.SESSION);
	            this.state = 4586;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4588;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,448,this._ctx);
	            if(la_===1) {
	                this.state = 4587;
	                this.if_exists();

	            }
	            this.state = 4590;
	            this.object_name();
	            this.state = 4593;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 640:
	                this.state = 4591;
	                this.set_tags();
	                break;
	            case 770:
	                this.state = 4592;
	                this.unset_tags();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_password_policy() {
	    let localctx = new Alter_password_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, SnowflakeParser.RULE_alter_password_policy);
	    var _la = 0;
	    try {
	        this.state = 4645;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,458,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4597;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4598;
	            this.match(SnowflakeParser.PASSWORD);
	            this.state = 4599;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4601;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
	            if(la_===1) {
	                this.state = 4600;
	                this.if_exists();

	            }
	            this.state = 4603;
	            this.object_name();
	            this.state = 4604;
	            this.match(SnowflakeParser.SET);
	            this.state = 4608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===134 || ((((_la - 494)) & ~0x1f) === 0 && ((1 << (_la - 494)) & 2047) !== 0)) {
	                this.state = 4605;
	                this.password_policy_params();
	                this.state = 4610;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4611;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4612;
	            this.match(SnowflakeParser.PASSWORD);
	            this.state = 4613;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4615;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
	            if(la_===1) {
	                this.state = 4614;
	                this.if_exists();

	            }
	            this.state = 4617;
	            this.object_name();
	            this.state = 4618;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4621;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	                this.state = 4619;
	                this.password_policy_param_name();
	                break;
	            case 134:
	                this.state = 4620;
	                this.match(SnowflakeParser.COMMENT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4623;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4624;
	            this.match(SnowflakeParser.PASSWORD);
	            this.state = 4625;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4627;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,455,this._ctx);
	            if(la_===1) {
	                this.state = 4626;
	                this.if_exists();

	            }
	            this.state = 4629;
	            this.object_name();
	            this.state = 4630;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 4631;
	            this.match(SnowflakeParser.TO);
	            this.state = 4632;
	            this.object_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4634;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4635;
	            this.match(SnowflakeParser.PASSWORD);
	            this.state = 4636;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4638;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,456,this._ctx);
	            if(la_===1) {
	                this.state = 4637;
	                this.if_exists();

	            }
	            this.state = 4640;
	            this.object_name();
	            this.state = 4643;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 640:
	                this.state = 4641;
	                this.set_tags();
	                break;
	            case 770:
	                this.state = 4642;
	                this.unset_tags();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_share() {
	    let localctx = new Alter_shareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, SnowflakeParser.RULE_alter_share);
	    var _la = 0;
	    try {
	        this.state = 4735;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4647;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4648;
	            this.match(SnowflakeParser.SHARE);
	            this.state = 4650;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,459,this._ctx);
	            if(la_===1) {
	                this.state = 4649;
	                this.if_exists();

	            }
	            this.state = 4652;
	            this.id_();
	            this.state = 4653;
	            _la = this._input.LA(1);
	            if(!(_la===10 || _la===557)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4654;
	            this.match(SnowflakeParser.ACCOUNTS);
	            this.state = 4655;
	            this.match(SnowflakeParser.EQ);
	            this.state = 4656;
	            this.id_();
	            this.state = 4661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 4657;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 4658;
	                this.id_();
	                this.state = 4663;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===644) {
	                this.state = 4664;
	                this.match(SnowflakeParser.SHARE_RESTRICTIONS);
	                this.state = 4665;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4666;
	                this.true_false();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4669;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4670;
	            this.match(SnowflakeParser.SHARE);
	            this.state = 4672;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
	            if(la_===1) {
	                this.state = 4671;
	                this.if_exists();

	            }
	            this.state = 4674;
	            this.id_();
	            this.state = 4675;
	            this.match(SnowflakeParser.ADD);
	            this.state = 4676;
	            this.match(SnowflakeParser.ACCOUNTS);
	            this.state = 4677;
	            this.match(SnowflakeParser.EQ);
	            this.state = 4678;
	            this.id_();
	            this.state = 4683;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 4679;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 4680;
	                this.id_();
	                this.state = 4685;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===644) {
	                this.state = 4686;
	                this.match(SnowflakeParser.SHARE_RESTRICTIONS);
	                this.state = 4687;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4688;
	                this.true_false();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4691;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4692;
	            this.match(SnowflakeParser.SHARE);
	            this.state = 4694;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	            if(la_===1) {
	                this.state = 4693;
	                this.if_exists();

	            }
	            this.state = 4696;
	            this.id_();
	            this.state = 4697;
	            this.match(SnowflakeParser.SET);
	            this.state = 4708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===8) {
	                this.state = 4698;
	                this.match(SnowflakeParser.ACCOUNTS);
	                this.state = 4699;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4700;
	                this.id_();
	                this.state = 4705;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 4701;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 4702;
	                    this.id_();
	                    this.state = 4707;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 4711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 4710;
	                this.comment_clause();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4713;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4714;
	            this.match(SnowflakeParser.SHARE);
	            this.state = 4716;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,469,this._ctx);
	            if(la_===1) {
	                this.state = 4715;
	                this.if_exists();

	            }
	            this.state = 4718;
	            this.id_();
	            this.state = 4719;
	            this.set_tags();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4721;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4722;
	            this.match(SnowflakeParser.SHARE);
	            this.state = 4723;
	            this.id_();
	            this.state = 4724;
	            this.unset_tags();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4726;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4727;
	            this.match(SnowflakeParser.SHARE);
	            this.state = 4729;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,470,this._ctx);
	            if(la_===1) {
	                this.state = 4728;
	                this.if_exists();

	            }
	            this.state = 4731;
	            this.id_();
	            this.state = 4732;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4733;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_storage_integration() {
	    let localctx = new Alter_storage_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, SnowflakeParser.RULE_alter_storage_integration);
	    var _la = 0;
	    try {
	        this.state = 4803;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4737;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===683) {
	                this.state = 4738;
	                this.match(SnowflakeParser.STORAGE);
	            }

	            this.state = 4741;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4743;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	            if(la_===1) {
	                this.state = 4742;
	                this.if_exists();

	            }
	            this.state = 4745;
	            this.id_();
	            this.state = 4746;
	            this.match(SnowflakeParser.SET);
	            this.state = 4748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79 || _la===686) {
	                this.state = 4747;
	                this.cloud_provider_params2();
	            }

	            this.state = 4751;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 4750;
	                this.enabled_true_false();
	            }

	            this.state = 4759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===684) {
	                this.state = 4753;
	                this.match(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS);
	                this.state = 4754;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4755;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 4756;
	                this.string_list();
	                this.state = 4757;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 4767;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===687) {
	                this.state = 4761;
	                this.match(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS);
	                this.state = 4762;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4763;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 4764;
	                this.string_list();
	                this.state = 4765;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 4770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 4769;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4772;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===683) {
	                this.state = 4773;
	                this.match(SnowflakeParser.STORAGE);
	            }

	            this.state = 4776;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4778;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,480,this._ctx);
	            if(la_===1) {
	                this.state = 4777;
	                this.if_exists();

	            }
	            this.state = 4780;
	            this.id_();
	            this.state = 4781;
	            this.set_tags();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4783;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===683) {
	                this.state = 4784;
	                this.match(SnowflakeParser.STORAGE);
	            }

	            this.state = 4787;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4788;
	            this.id_();
	            this.state = 4789;
	            this.unset_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4791;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4793;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===683) {
	                this.state = 4792;
	                this.match(SnowflakeParser.STORAGE);
	            }

	            this.state = 4795;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 4797;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,483,this._ctx);
	            if(la_===1) {
	                this.state = 4796;
	                this.if_exists();

	            }
	            this.state = 4799;
	            this.id_();
	            this.state = 4800;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4801;
	            _la = this._input.LA(1);
	            if(!(_la===134 || _la===209 || _la===687)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_stream() {
	    let localctx = new Alter_streamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, SnowflakeParser.RULE_alter_stream);
	    var _la = 0;
	    try {
	        this.state = 4840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4805;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4806;
	            this.match(SnowflakeParser.STREAM);
	            this.state = 4808;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,485,this._ctx);
	            if(la_===1) {
	                this.state = 4807;
	                this.if_exists();

	            }
	            this.state = 4810;
	            this.id_();
	            this.state = 4811;
	            this.match(SnowflakeParser.SET);
	            this.state = 4813;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===715) {
	                this.state = 4812;
	                this.tag_decl_list();
	            }

	            this.state = 4816;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 4815;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4818;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4819;
	            this.match(SnowflakeParser.STREAM);
	            this.state = 4821;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,488,this._ctx);
	            if(la_===1) {
	                this.state = 4820;
	                this.if_exists();

	            }
	            this.state = 4823;
	            this.id_();
	            this.state = 4824;
	            this.set_tags();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4826;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4827;
	            this.match(SnowflakeParser.STREAM);
	            this.state = 4828;
	            this.id_();
	            this.state = 4829;
	            this.unset_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4831;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4832;
	            this.match(SnowflakeParser.STREAM);
	            this.state = 4834;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
	            if(la_===1) {
	                this.state = 4833;
	                this.if_exists();

	            }
	            this.state = 4836;
	            this.id_();
	            this.state = 4837;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4838;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table() {
	    let localctx = new Alter_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, SnowflakeParser.RULE_alter_table);
	    var _la = 0;
	    try {
	        this.state = 5017;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,513,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4842;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4843;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4845;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
	            if(la_===1) {
	                this.state = 4844;
	                this.if_exists();

	            }
	            this.state = 4847;
	            this.object_name();
	            this.state = 4848;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 4849;
	            this.match(SnowflakeParser.TO);
	            this.state = 4850;
	            this.object_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4852;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4853;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4855;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,492,this._ctx);
	            if(la_===1) {
	                this.state = 4854;
	                this.if_exists();

	            }
	            this.state = 4857;
	            this.object_name();
	            this.state = 4858;
	            this.match(SnowflakeParser.SWAP);
	            this.state = 4859;
	            this.match(SnowflakeParser.WITH);
	            this.state = 4860;
	            this.object_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4862;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4863;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4865;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,493,this._ctx);
	            if(la_===1) {
	                this.state = 4864;
	                this.if_exists();

	            }
	            this.state = 4867;
	            this.object_name();
	            this.state = 4871;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4868;
	                this.clustering_action();
	                break;

	            case 2:
	                this.state = 4869;
	                this.table_column_action();
	                break;

	            case 3:
	                this.state = 4870;
	                this.constraint_action();
	                break;

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4873;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4874;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4876;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,495,this._ctx);
	            if(la_===1) {
	                this.state = 4875;
	                this.if_exists();

	            }
	            this.state = 4878;
	            this.object_name();
	            this.state = 4879;
	            this.ext_table_column_action();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4881;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4882;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4884;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,496,this._ctx);
	            if(la_===1) {
	                this.state = 4883;
	                this.if_exists();

	            }
	            this.state = 4886;
	            this.object_name();
	            this.state = 4887;
	            this.search_optimization_action();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4889;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4890;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4892;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
	            if(la_===1) {
	                this.state = 4891;
	                this.if_exists();

	            }
	            this.state = 4894;
	            this.object_name();
	            this.state = 4895;
	            this.match(SnowflakeParser.SET);
	            this.state = 4897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===673 || _la===764) {
	                this.state = 4896;
	                this.stage_file_format();
	            }

	            this.state = 4905;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===672) {
	                this.state = 4899;
	                this.match(SnowflakeParser.STAGE_COPY_OPTIONS);
	                this.state = 4900;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4901;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 4902;
	                this.copy_options();
	                this.state = 4903;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 4910;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===166) {
	                this.state = 4907;
	                this.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS);
	                this.state = 4908;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4909;
	                this.num();
	            }

	            this.state = 4915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===395) {
	                this.state = 4912;
	                this.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS);
	                this.state = 4913;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4914;
	                this.num();
	            }

	            this.state = 4920;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===108) {
	                this.state = 4917;
	                this.match(SnowflakeParser.CHANGE_TRACKING);
	                this.state = 4918;
	                this.match(SnowflakeParser.EQ);
	                this.state = 4919;
	                this.true_false();
	            }

	            this.state = 4923;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===175) {
	                this.state = 4922;
	                this.default_ddl_collation();
	            }

	            this.state = 4926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 4925;
	                this.comment_clause();
	            }

	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4928;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4929;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4931;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
	            if(la_===1) {
	                this.state = 4930;
	                this.if_exists();

	            }
	            this.state = 4933;
	            this.object_name();
	            this.state = 4934;
	            this.set_tags();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4936;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4937;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4939;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,506,this._ctx);
	            if(la_===1) {
	                this.state = 4938;
	                this.if_exists();

	            }
	            this.state = 4941;
	            this.object_name();
	            this.state = 4942;
	            this.unset_tags();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4944;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4945;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4947;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,507,this._ctx);
	            if(la_===1) {
	                this.state = 4946;
	                this.if_exists();

	            }
	            this.state = 4949;
	            this.object_name();
	            this.state = 4950;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 4957;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 166:
	                this.state = 4951;
	                this.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS);
	                break;
	            case 395:
	                this.state = 4952;
	                this.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS);
	                break;
	            case 108:
	                this.state = 4953;
	                this.match(SnowflakeParser.CHANGE_TRACKING);
	                break;
	            case 175:
	                this.state = 4954;
	                this.match(SnowflakeParser.DEFAULT_DDL_COLLATION_);
	                break;
	            case 134:
	                this.state = 4955;
	                this.match(SnowflakeParser.COMMENT);
	                break;
	            case -1:
	            case 895:
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4959;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4960;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4962;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,509,this._ctx);
	            if(la_===1) {
	                this.state = 4961;
	                this.if_exists();

	            }
	            this.state = 4964;
	            this.object_name();
	            this.state = 4965;
	            this.match(SnowflakeParser.ADD);
	            this.state = 4966;
	            this.match(SnowflakeParser.ROW);
	            this.state = 4967;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 4968;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4969;
	            this.id_();
	            this.state = 4970;
	            this.match(SnowflakeParser.ON);
	            this.state = 4971;
	            this.column_list_in_parentheses();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4973;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4974;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4976;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
	            if(la_===1) {
	                this.state = 4975;
	                this.if_exists();

	            }
	            this.state = 4978;
	            this.object_name();
	            this.state = 4979;
	            this.match(SnowflakeParser.DROP);
	            this.state = 4980;
	            this.match(SnowflakeParser.ROW);
	            this.state = 4981;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 4982;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4983;
	            this.id_();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4985;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 4986;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 4988;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,511,this._ctx);
	            if(la_===1) {
	                this.state = 4987;
	                this.if_exists();

	            }
	            this.state = 4990;
	            this.object_name();
	            this.state = 4991;
	            this.match(SnowflakeParser.DROP);
	            this.state = 4992;
	            this.match(SnowflakeParser.ROW);
	            this.state = 4993;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 4994;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 4995;
	            this.id_();
	            this.state = 4996;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 4997;
	            this.match(SnowflakeParser.ADD);
	            this.state = 4998;
	            this.match(SnowflakeParser.ROW);
	            this.state = 4999;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 5000;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5001;
	            this.id_();
	            this.state = 5002;
	            this.match(SnowflakeParser.ON);
	            this.state = 5003;
	            this.column_list_in_parentheses();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5005;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5006;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 5008;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,512,this._ctx);
	            if(la_===1) {
	                this.state = 5007;
	                this.if_exists();

	            }
	            this.state = 5010;
	            this.object_name();
	            this.state = 5011;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5012;
	            this.match(SnowflakeParser.ALL);
	            this.state = 5013;
	            this.match(SnowflakeParser.ROW);
	            this.state = 5014;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 5015;
	            this.match(SnowflakeParser.POLICIES);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clustering_action() {
	    let localctx = new Clustering_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, SnowflakeParser.RULE_clustering_action);
	    var _la = 0;
	    try {
	        this.state = 5041;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 127:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5019;
	            this.match(SnowflakeParser.CLUSTER);
	            this.state = 5020;
	            this.match(SnowflakeParser.BY);
	            this.state = 5021;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 5022;
	            this.expr_list();
	            this.state = 5023;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        case 546:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5025;
	            this.match(SnowflakeParser.RECLUSTER);
	            this.state = 5029;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===396) {
	                this.state = 5026;
	                this.match(SnowflakeParser.MAX_SIZE);
	                this.state = 5027;
	                this.match(SnowflakeParser.EQ);
	                this.state = 5028;
	                this.num();
	            }

	            this.state = 5033;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===804) {
	                this.state = 5031;
	                this.match(SnowflakeParser.WHERE);
	                this.state = 5032;
	                this.expr(0);
	            }

	            break;
	        case 577:
	        case 700:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5035;
	            this.resume_suspend();
	            this.state = 5036;
	            this.match(SnowflakeParser.RECLUSTER);
	            break;
	        case 200:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5038;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5039;
	            this.match(SnowflakeParser.CLUSTERING);
	            this.state = 5040;
	            this.match(SnowflakeParser.KEY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_column_action() {
	    let localctx = new Table_column_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, SnowflakeParser.RULE_table_column_action);
	    var _la = 0;
	    try {
	        this.state = 5138;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,529,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5043;
	            this.match(SnowflakeParser.ADD);
	            this.state = 5045;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 5044;
	                this.match(SnowflakeParser.COLUMN);
	            }

	            this.state = 5048;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
	            if(la_===1) {
	                this.state = 5047;
	                this.if_not_exists();

	            }
	            this.state = 5050;
	            this.full_col_decl();
	            this.state = 5055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 5051;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5052;
	                this.full_col_decl();
	                this.state = 5057;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5058;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 5059;
	            this.match(SnowflakeParser.COLUMN);
	            this.state = 5060;
	            this.column_name();
	            this.state = 5061;
	            this.match(SnowflakeParser.TO);
	            this.state = 5062;
	            this.column_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5064;
	            this.alter_modify();
	            this.state = 5084;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 888:
	                this.state = 5065;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 5066;
	                this.alter_column_clause();
	                this.state = 5071;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 5067;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 5068;
	                    this.alter_column_clause();
	                    this.state = 5073;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 5074;
	                this.match(SnowflakeParser.RR_BRACKET);
	                break;
	            case 6:
	            case 7:
	            case 9:
	            case 13:
	            case 15:
	            case 16:
	            case 31:
	            case 42:
	            case 46:
	            case 60:
	            case 105:
	            case 106:
	            case 110:
	            case 111:
	            case 112:
	            case 114:
	            case 127:
	            case 130:
	            case 131:
	            case 132:
	            case 134:
	            case 139:
	            case 140:
	            case 145:
	            case 149:
	            case 150:
	            case 159:
	            case 160:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 172:
	            case 182:
	            case 186:
	            case 190:
	            case 199:
	            case 201:
	            case 203:
	            case 205:
	            case 223:
	            case 231:
	            case 237:
	            case 239:
	            case 266:
	            case 267:
	            case 268:
	            case 278:
	            case 291:
	            case 292:
	            case 293:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 317:
	            case 327:
	            case 333:
	            case 336:
	            case 338:
	            case 340:
	            case 344:
	            case 348:
	            case 353:
	            case 357:
	            case 360:
	            case 361:
	            case 364:
	            case 365:
	            case 367:
	            case 368:
	            case 373:
	            case 379:
	            case 394:
	            case 402:
	            case 408:
	            case 417:
	            case 419:
	            case 427:
	            case 437:
	            case 441:
	            case 442:
	            case 443:
	            case 454:
	            case 459:
	            case 466:
	            case 471:
	            case 475:
	            case 476:
	            case 478:
	            case 479:
	            case 491:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 506:
	            case 507:
	            case 516:
	            case 517:
	            case 518:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 542:
	            case 548:
	            case 553:
	            case 560:
	            case 569:
	            case 570:
	            case 572:
	            case 574:
	            case 576:
	            case 585:
	            case 587:
	            case 588:
	            case 590:
	            case 591:
	            case 592:
	            case 596:
	            case 620:
	            case 624:
	            case 631:
	            case 634:
	            case 636:
	            case 663:
	            case 665:
	            case 666:
	            case 667:
	            case 670:
	            case 671:
	            case 678:
	            case 682:
	            case 691:
	            case 697:
	            case 698:
	            case 699:
	            case 706:
	            case 711:
	            case 715:
	            case 716:
	            case 717:
	            case 719:
	            case 720:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 731:
	            case 733:
	            case 737:
	            case 739:
	            case 740:
	            case 741:
	            case 746:
	            case 747:
	            case 748:
	            case 759:
	            case 760:
	            case 762:
	            case 764:
	            case 773:
	            case 774:
	            case 777:
	            case 778:
	            case 779:
	            case 789:
	            case 790:
	            case 792:
	            case 794:
	            case 796:
	            case 797:
	            case 799:
	            case 820:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 858:
	            case 859:
	            case 861:
	            case 862:
	                this.state = 5076;
	                this.alter_column_clause();
	                this.state = 5081;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 5077;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 5078;
	                    this.alter_column_clause();
	                    this.state = 5083;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5086;
	            this.alter_modify();
	            this.state = 5087;
	            this.match(SnowflakeParser.COLUMN);
	            this.state = 5088;
	            this.column_name();
	            this.state = 5089;
	            this.match(SnowflakeParser.SET);
	            this.state = 5090;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 5091;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5092;
	            this.id_();
	            this.state = 5100;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===785) {
	                this.state = 5093;
	                this.match(SnowflakeParser.USING);
	                this.state = 5094;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 5095;
	                this.column_name();
	                this.state = 5096;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5097;
	                this.column_list();
	                this.state = 5098;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 5103;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===270) {
	                this.state = 5102;
	                this.match(SnowflakeParser.FORCE);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5105;
	            this.alter_modify();
	            this.state = 5106;
	            this.match(SnowflakeParser.COLUMN);
	            this.state = 5107;
	            this.column_name();
	            this.state = 5108;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5109;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 5110;
	            this.match(SnowflakeParser.POLICY);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5112;
	            this.alter_modify();
	            this.state = 5113;
	            this.column_set_tags();
	            this.state = 5118;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 5114;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5115;
	                this.column_set_tags();
	                this.state = 5120;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5121;
	            this.alter_modify();
	            this.state = 5122;
	            this.column_unset_tags();
	            this.state = 5127;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 5123;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5124;
	                this.column_unset_tags();
	                this.state = 5129;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5130;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5132;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 5131;
	                this.match(SnowflakeParser.COLUMN);
	            }

	            this.state = 5135;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,528,this._ctx);
	            if(la_===1) {
	                this.state = 5134;
	                this.if_exists();

	            }
	            this.state = 5137;
	            this.column_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_column_clause() {
	    let localctx = new Alter_column_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, SnowflakeParser.RULE_alter_column_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5141;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 5140;
	            this.match(SnowflakeParser.COLUMN);
	        }

	        this.state = 5143;
	        this.column_name();
	        this.state = 5174;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,535,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5144;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5145;
	            this.match(SnowflakeParser.DEFAULT);
	            break;

	        case 2:
	            this.state = 5146;
	            this.match(SnowflakeParser.SET);
	            this.state = 5147;
	            this.match(SnowflakeParser.DEFAULT);
	            this.state = 5148;
	            this.object_name();
	            this.state = 5149;
	            this.match(SnowflakeParser.DOT);
	            this.state = 5150;
	            this.match(SnowflakeParser.NEXTVAL);
	            break;

	        case 3:
	            this.state = 5160;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 429:
	            case 640:
	                this.state = 5153;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===640) {
	                    this.state = 5152;
	                    this.match(SnowflakeParser.SET);
	                }

	                this.state = 5155;
	                this.match(SnowflakeParser.NOT);
	                this.state = 5156;
	                this.match(SnowflakeParser.NULL_);
	                break;
	            case 200:
	                this.state = 5157;
	                this.match(SnowflakeParser.DROP);
	                this.state = 5158;
	                this.match(SnowflakeParser.NOT);
	                this.state = 5159;
	                this.match(SnowflakeParser.NULL_);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.state = 5167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===640 || _la===764) {
	                this.state = 5164;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===640) {
	                    this.state = 5162;
	                    this.match(SnowflakeParser.SET);
	                    this.state = 5163;
	                    this.match(SnowflakeParser.DATA);
	                }

	                this.state = 5166;
	                this.match(SnowflakeParser.TYPE);
	            }

	            this.state = 5169;
	            this.data_type();
	            break;

	        case 5:
	            this.state = 5170;
	            this.match(SnowflakeParser.COMMENT);
	            this.state = 5171;
	            this.string();
	            break;

	        case 6:
	            this.state = 5172;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5173;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inline_constraint() {
	    let localctx = new Inline_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, SnowflakeParser.RULE_inline_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===144) {
	            this.state = 5176;
	            this.match(SnowflakeParser.CONSTRAINT);
	            this.state = 5177;
	            this.id_();
	        }

	        this.state = 5201;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 524:
	        case 767:
	            this.state = 5182;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 767:
	                this.state = 5180;
	                this.match(SnowflakeParser.UNIQUE);
	                break;
	            case 524:
	                this.state = 5181;
	                this.primary_key();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5187;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,538,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5184;
	                    this.common_constraint_properties(); 
	                }
	                this.state = 5189;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,538,this._ctx);
	            }

	            break;
	        case 271:
	            this.state = 5190;
	            this.foreign_key();
	            this.state = 5191;
	            this.match(SnowflakeParser.REFERENCES);
	            this.state = 5192;
	            this.object_name();
	            this.state = 5197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===888) {
	                this.state = 5193;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 5194;
	                this.column_name();
	                this.state = 5195;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 5199;
	            this.constraint_properties();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enforced_not_enforced() {
	    let localctx = new Enforced_not_enforcedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, SnowflakeParser.RULE_enforced_not_enforced);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===429) {
	            this.state = 5203;
	            this.match(SnowflakeParser.NOT);
	        }

	        this.state = 5206;
	        this.match(SnowflakeParser.ENFORCED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deferrable_not_deferrable() {
	    let localctx = new Deferrable_not_deferrableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, SnowflakeParser.RULE_deferrable_not_deferrable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===429) {
	            this.state = 5208;
	            this.match(SnowflakeParser.NOT);
	        }

	        this.state = 5211;
	        this.match(SnowflakeParser.DEFERRABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initially_deferred_or_immediate() {
	    let localctx = new Initially_deferred_or_immediateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, SnowflakeParser.RULE_initially_deferred_or_immediate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5213;
	        this.match(SnowflakeParser.INITIALLY);
	        this.state = 5214;
	        _la = this._input.LA(1);
	        if(!(_la===180 || _la===318)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_constraint_properties() {
	    let localctx = new Common_constraint_propertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, SnowflakeParser.RULE_common_constraint_properties);
	    var _la = 0;
	    try {
	        this.state = 5228;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,545,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5216;
	            this.enforced_not_enforced();
	            this.state = 5218;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===435 || _la===787) {
	                this.state = 5217;
	                _la = this._input.LA(1);
	                if(!(_la===435 || _la===787)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5220;
	            this.deferrable_not_deferrable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5221;
	            this.initially_deferred_or_immediate();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5222;
	            _la = this._input.LA(1);
	            if(!(_la===192 || _la===208)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===435 || _la===787) {
	                this.state = 5223;
	                _la = this._input.LA(1);
	                if(!(_la===435 || _la===787)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5226;
	            this.match(SnowflakeParser.RELY);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5227;
	            this.match(SnowflakeParser.NORELY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	on_update() {
	    let localctx = new On_updateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, SnowflakeParser.RULE_on_update);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5230;
	        this.match(SnowflakeParser.ON);
	        this.state = 5231;
	        this.match(SnowflakeParser.UPDATE);
	        this.state = 5232;
	        this.on_action();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	on_delete() {
	    let localctx = new On_deleteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, SnowflakeParser.RULE_on_delete);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5234;
	        this.match(SnowflakeParser.ON);
	        this.state = 5235;
	        this.match(SnowflakeParser.DELETE);
	        this.state = 5236;
	        this.on_action();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreign_key_match() {
	    let localctx = new Foreign_key_matchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, SnowflakeParser.RULE_foreign_key_match);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5238;
	        this.match(SnowflakeParser.MATCH);
	        this.state = 5239;
	        localctx.match_type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===277 || _la===490 || _la===647)) {
	            localctx.match_type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	on_action() {
	    let localctx = new On_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, SnowflakeParser.RULE_on_action);
	    var _la = 0;
	    try {
	        this.state = 5247;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 101:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5241;
	            this.match(SnowflakeParser.CASCADE);
	            break;
	        case 640:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5242;
	            this.match(SnowflakeParser.SET);
	            this.state = 5243;
	            _la = this._input.LA(1);
	            if(!(_la===174 || _la===439)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 574:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5244;
	            this.match(SnowflakeParser.RESTRICT);
	            break;
	        case 424:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5245;
	            this.match(SnowflakeParser.NO);
	            this.state = 5246;
	            this.match(SnowflakeParser.ACTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraint_properties() {
	    let localctx = new Constraint_propertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, SnowflakeParser.RULE_constraint_properties);
	    var _la = 0;
	    try {
	        this.state = 5269;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,552,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5252;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,547,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5249;
	                    this.common_constraint_properties(); 
	                }
	                this.state = 5254;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,547,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5255;
	            this.foreign_key_match();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===386) {
	                this.state = 5256;
	                this.foreign_key_match();
	            }

	            this.state = 5267;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,551,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5259;
	                this.on_update();
	                this.state = 5261;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===465) {
	                    this.state = 5260;
	                    this.on_delete();
	                }

	                break;

	            case 2:
	                this.state = 5263;
	                this.on_delete();
	                this.state = 5265;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===465) {
	                    this.state = 5264;
	                    this.on_update();
	                }

	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ext_table_column_action() {
	    let localctx = new Ext_table_column_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, SnowflakeParser.RULE_ext_table_column_action);
	    var _la = 0;
	    try {
	        this.state = 5293;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5271;
	            this.match(SnowflakeParser.ADD);
	            this.state = 5273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 5272;
	                this.match(SnowflakeParser.COLUMN);
	            }

	            this.state = 5275;
	            this.column_name();
	            this.state = 5276;
	            this.data_type();
	            this.state = 5277;
	            this.match(SnowflakeParser.AS);
	            this.state = 5278;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 5279;
	            this.expr(0);
	            this.state = 5280;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        case 558:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5282;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 5283;
	            this.match(SnowflakeParser.COLUMN);
	            this.state = 5284;
	            this.column_name();
	            this.state = 5285;
	            this.match(SnowflakeParser.TO);
	            this.state = 5286;
	            this.column_name();
	            break;
	        case 200:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5288;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 5289;
	                this.match(SnowflakeParser.COLUMN);
	            }

	            this.state = 5292;
	            this.column_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraint_action() {
	    let localctx = new Constraint_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, SnowflakeParser.RULE_constraint_action);
	    var _la = 0;
	    try {
	        this.state = 5335;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,561,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5295;
	            this.match(SnowflakeParser.ADD);
	            this.state = 5296;
	            this.out_of_line_constraint();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5297;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 5298;
	            this.match(SnowflakeParser.CONSTRAINT);
	            this.state = 5299;
	            this.id_();
	            this.state = 5300;
	            this.match(SnowflakeParser.TO);
	            this.state = 5301;
	            this.id_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5303;
	            this.alter_modify();
	            this.state = 5309;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 144:
	                this.state = 5304;
	                this.match(SnowflakeParser.CONSTRAINT);
	                this.state = 5305;
	                this.id_();
	                break;
	            case 524:
	                this.state = 5306;
	                this.primary_key();
	                break;
	            case 767:
	                this.state = 5307;
	                this.match(SnowflakeParser.UNIQUE);
	                break;
	            case 271:
	                this.state = 5308;
	                this.foreign_key();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5311;
	            this.column_list_in_parentheses();
	            this.state = 5313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===219 || _la===429) {
	                this.state = 5312;
	                this.enforced_not_enforced();
	            }

	            this.state = 5315;
	            _la = this._input.LA(1);
	            if(!(_la===435 || _la===787)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5316;
	            _la = this._input.LA(1);
	            if(!(_la===428 || _la===556)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5318;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5324;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 144:
	                this.state = 5319;
	                this.match(SnowflakeParser.CONSTRAINT);
	                this.state = 5320;
	                this.id_();
	                break;
	            case 524:
	                this.state = 5321;
	                this.primary_key();
	                break;
	            case 767:
	                this.state = 5322;
	                this.match(SnowflakeParser.UNIQUE);
	                break;
	            case 271:
	                this.state = 5323;
	                this.foreign_key();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5327;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===888) {
	                this.state = 5326;
	                this.column_list_in_parentheses();
	            }

	            this.state = 5330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===101 || _la===574) {
	                this.state = 5329;
	                this.cascade_restrict();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5332;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5333;
	            this.match(SnowflakeParser.PRIMARY);
	            this.state = 5334;
	            this.match(SnowflakeParser.KEY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	search_optimization_action() {
	    let localctx = new Search_optimization_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, SnowflakeParser.RULE_search_optimization_action);
	    var _la = 0;
	    try {
	        this.state = 5365;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5337;
	            this.match(SnowflakeParser.ADD);
	            this.state = 5338;
	            this.match(SnowflakeParser.SEARCH);
	            this.state = 5339;
	            this.match(SnowflakeParser.OPTIMIZATION);
	            this.state = 5349;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===465) {
	                this.state = 5340;
	                this.match(SnowflakeParser.ON);
	                this.state = 5341;
	                this.search_method_with_target();
	                this.state = 5346;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 5342;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 5343;
	                    this.search_method_with_target();
	                    this.state = 5348;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;
	        case 200:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5351;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5352;
	            this.match(SnowflakeParser.SEARCH);
	            this.state = 5353;
	            this.match(SnowflakeParser.OPTIMIZATION);
	            this.state = 5363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===465) {
	                this.state = 5354;
	                this.match(SnowflakeParser.ON);
	                this.state = 5355;
	                this.search_method_with_target();
	                this.state = 5360;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 5356;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 5357;
	                    this.search_method_with_target();
	                    this.state = 5362;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	search_method_with_target() {
	    let localctx = new Search_method_with_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, SnowflakeParser.RULE_search_method_with_target);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5367;
	        _la = this._input.LA(1);
	        if(!(_la===224 || _la===288 || _la===698)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5368;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 5371;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 898:
	            this.state = 5369;
	            this.match(SnowflakeParser.STAR);
	            break;
	        case 6:
	        case 7:
	        case 9:
	        case 13:
	        case 15:
	        case 16:
	        case 31:
	        case 42:
	        case 46:
	        case 60:
	        case 93:
	        case 102:
	        case 105:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 127:
	        case 129:
	        case 130:
	        case 131:
	        case 134:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 145:
	        case 149:
	        case 150:
	        case 159:
	        case 160:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 172:
	        case 174:
	        case 182:
	        case 186:
	        case 187:
	        case 190:
	        case 199:
	        case 201:
	        case 203:
	        case 205:
	        case 223:
	        case 231:
	        case 237:
	        case 239:
	        case 257:
	        case 266:
	        case 267:
	        case 268:
	        case 278:
	        case 291:
	        case 292:
	        case 293:
	        case 304:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 317:
	        case 327:
	        case 333:
	        case 336:
	        case 338:
	        case 340:
	        case 344:
	        case 348:
	        case 353:
	        case 356:
	        case 357:
	        case 360:
	        case 361:
	        case 362:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 373:
	        case 379:
	        case 380:
	        case 394:
	        case 402:
	        case 408:
	        case 417:
	        case 419:
	        case 427:
	        case 429:
	        case 436:
	        case 437:
	        case 439:
	        case 441:
	        case 442:
	        case 443:
	        case 454:
	        case 455:
	        case 459:
	        case 466:
	        case 471:
	        case 475:
	        case 476:
	        case 478:
	        case 479:
	        case 491:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 506:
	        case 507:
	        case 516:
	        case 517:
	        case 518:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 542:
	        case 548:
	        case 553:
	        case 560:
	        case 569:
	        case 570:
	        case 572:
	        case 574:
	        case 576:
	        case 585:
	        case 587:
	        case 588:
	        case 590:
	        case 591:
	        case 592:
	        case 596:
	        case 599:
	        case 620:
	        case 624:
	        case 631:
	        case 633:
	        case 634:
	        case 636:
	        case 663:
	        case 665:
	        case 666:
	        case 667:
	        case 670:
	        case 671:
	        case 678:
	        case 682:
	        case 691:
	        case 697:
	        case 698:
	        case 699:
	        case 706:
	        case 711:
	        case 715:
	        case 716:
	        case 717:
	        case 719:
	        case 720:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 731:
	        case 733:
	        case 737:
	        case 739:
	        case 740:
	        case 741:
	        case 746:
	        case 747:
	        case 748:
	        case 756:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 764:
	        case 773:
	        case 774:
	        case 777:
	        case 778:
	        case 779:
	        case 789:
	        case 790:
	        case 792:
	        case 794:
	        case 796:
	        case 797:
	        case 799:
	        case 805:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 858:
	        case 859:
	        case 861:
	        case 862:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 884:
	        case 886:
	        case 888:
	        case 890:
	        case 892:
	        case 901:
	        case 902:
	            this.state = 5370;
	            this.expr(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 5373;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_column() {
	    let localctx = new Alter_table_alter_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, SnowflakeParser.RULE_alter_table_alter_column);
	    var _la = 0;
	    try {
	        this.state = 5442;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,573,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5375;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5376;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 5377;
	            this.object_name();
	            this.state = 5378;
	            this.alter_modify();
	            this.state = 5384;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 888:
	                this.state = 5379;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 5380;
	                this.alter_column_decl_list();
	                this.state = 5381;
	                this.match(SnowflakeParser.RR_BRACKET);
	                break;
	            case 6:
	            case 7:
	            case 9:
	            case 13:
	            case 15:
	            case 16:
	            case 31:
	            case 42:
	            case 46:
	            case 60:
	            case 105:
	            case 106:
	            case 110:
	            case 111:
	            case 112:
	            case 114:
	            case 127:
	            case 130:
	            case 131:
	            case 132:
	            case 134:
	            case 139:
	            case 140:
	            case 145:
	            case 149:
	            case 150:
	            case 159:
	            case 160:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 172:
	            case 182:
	            case 186:
	            case 190:
	            case 199:
	            case 201:
	            case 203:
	            case 205:
	            case 223:
	            case 231:
	            case 237:
	            case 239:
	            case 266:
	            case 267:
	            case 268:
	            case 278:
	            case 291:
	            case 292:
	            case 293:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 317:
	            case 327:
	            case 333:
	            case 336:
	            case 338:
	            case 340:
	            case 344:
	            case 348:
	            case 353:
	            case 357:
	            case 360:
	            case 361:
	            case 364:
	            case 365:
	            case 367:
	            case 368:
	            case 373:
	            case 379:
	            case 394:
	            case 402:
	            case 408:
	            case 417:
	            case 419:
	            case 427:
	            case 437:
	            case 441:
	            case 442:
	            case 443:
	            case 454:
	            case 459:
	            case 466:
	            case 471:
	            case 475:
	            case 476:
	            case 478:
	            case 479:
	            case 491:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 506:
	            case 507:
	            case 516:
	            case 517:
	            case 518:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 542:
	            case 548:
	            case 553:
	            case 560:
	            case 569:
	            case 570:
	            case 572:
	            case 574:
	            case 576:
	            case 585:
	            case 587:
	            case 588:
	            case 590:
	            case 591:
	            case 592:
	            case 596:
	            case 620:
	            case 624:
	            case 631:
	            case 634:
	            case 636:
	            case 663:
	            case 665:
	            case 666:
	            case 667:
	            case 670:
	            case 671:
	            case 678:
	            case 682:
	            case 691:
	            case 697:
	            case 698:
	            case 699:
	            case 706:
	            case 711:
	            case 715:
	            case 716:
	            case 717:
	            case 719:
	            case 720:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 731:
	            case 733:
	            case 737:
	            case 739:
	            case 740:
	            case 741:
	            case 746:
	            case 747:
	            case 748:
	            case 759:
	            case 760:
	            case 762:
	            case 764:
	            case 773:
	            case 774:
	            case 777:
	            case 778:
	            case 779:
	            case 789:
	            case 790:
	            case 792:
	            case 794:
	            case 796:
	            case 797:
	            case 799:
	            case 820:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 858:
	            case 859:
	            case 861:
	            case 862:
	                this.state = 5383;
	                this.alter_column_decl_list();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5386;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5387;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 5388;
	            this.object_name();
	            this.state = 5389;
	            this.alter_modify();
	            this.state = 5390;
	            this.match(SnowflakeParser.COLUMN);
	            this.state = 5391;
	            this.column_name();
	            this.state = 5392;
	            this.match(SnowflakeParser.SET);
	            this.state = 5393;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 5394;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5395;
	            this.id_();
	            this.state = 5403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===785) {
	                this.state = 5396;
	                this.match(SnowflakeParser.USING);
	                this.state = 5397;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 5398;
	                this.column_name();
	                this.state = 5399;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5400;
	                this.column_list();
	                this.state = 5401;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 5406;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===270) {
	                this.state = 5405;
	                this.match(SnowflakeParser.FORCE);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5408;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5409;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 5410;
	            this.object_name();
	            this.state = 5411;
	            this.alter_modify();
	            this.state = 5412;
	            this.match(SnowflakeParser.COLUMN);
	            this.state = 5413;
	            this.column_name();
	            this.state = 5414;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5415;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 5416;
	            this.match(SnowflakeParser.POLICY);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5418;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5419;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 5420;
	            this.object_name();
	            this.state = 5421;
	            this.alter_modify();
	            this.state = 5422;
	            this.column_set_tags();
	            this.state = 5427;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 5423;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5424;
	                this.column_set_tags();
	                this.state = 5429;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5430;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5431;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 5432;
	            this.object_name();
	            this.state = 5433;
	            this.alter_modify();
	            this.state = 5434;
	            this.column_unset_tags();
	            this.state = 5439;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 5435;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5436;
	                this.column_unset_tags();
	                this.state = 5441;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_column_decl_list() {
	    let localctx = new Alter_column_decl_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, SnowflakeParser.RULE_alter_column_decl_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5444;
	        this.alter_column_decl();
	        this.state = 5449;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 5445;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 5446;
	            this.alter_column_decl();
	            this.state = 5451;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_column_decl() {
	    let localctx = new Alter_column_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, SnowflakeParser.RULE_alter_column_decl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 5452;
	            this.match(SnowflakeParser.COLUMN);
	        }

	        this.state = 5455;
	        this.column_name();
	        this.state = 5456;
	        this.alter_column_opts();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_column_opts() {
	    let localctx = new Alter_column_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, SnowflakeParser.RULE_alter_column_opts);
	    var _la = 0;
	    try {
	        this.state = 5487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,580,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5458;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5459;
	            this.match(SnowflakeParser.DEFAULT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5460;
	            this.match(SnowflakeParser.SET);
	            this.state = 5461;
	            this.match(SnowflakeParser.DEFAULT);
	            this.state = 5462;
	            this.object_name();
	            this.state = 5463;
	            this.match(SnowflakeParser.DOT);
	            this.state = 5464;
	            this.match(SnowflakeParser.NEXTVAL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5474;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 429:
	            case 640:
	                this.state = 5467;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===640) {
	                    this.state = 5466;
	                    this.match(SnowflakeParser.SET);
	                }

	                this.state = 5469;
	                this.match(SnowflakeParser.NOT);
	                this.state = 5470;
	                this.match(SnowflakeParser.NULL_);
	                break;
	            case 200:
	                this.state = 5471;
	                this.match(SnowflakeParser.DROP);
	                this.state = 5472;
	                this.match(SnowflakeParser.NOT);
	                this.state = 5473;
	                this.match(SnowflakeParser.NULL_);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5481;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===640 || _la===764) {
	                this.state = 5478;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===640) {
	                    this.state = 5476;
	                    this.match(SnowflakeParser.SET);
	                    this.state = 5477;
	                    this.match(SnowflakeParser.DATA);
	                }

	                this.state = 5480;
	                this.match(SnowflakeParser.TYPE);
	            }

	            this.state = 5483;
	            this.data_type();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5484;
	            this.comment_clause();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5485;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5486;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_set_tags() {
	    let localctx = new Column_set_tagsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, SnowflakeParser.RULE_column_set_tags);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 5489;
	            this.match(SnowflakeParser.COLUMN);
	        }

	        this.state = 5492;
	        this.column_name();
	        this.state = 5493;
	        this.set_tags();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_unset_tags() {
	    let localctx = new Column_unset_tagsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, SnowflakeParser.RULE_column_unset_tags);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5495;
	        this.match(SnowflakeParser.COLUMN);
	        this.state = 5496;
	        this.column_name();
	        this.state = 5497;
	        this.unset_tags();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_tag() {
	    let localctx = new Alter_tagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, SnowflakeParser.RULE_alter_tag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5499;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 5500;
	        this.match(SnowflakeParser.TAG);
	        this.state = 5502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,582,this._ctx);
	        if(la_===1) {
	            this.state = 5501;
	            this.if_exists();

	        }
	        this.state = 5504;
	        this.object_name();
	        this.state = 5505;
	        this.alter_tag_opts();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_task() {
	    let localctx = new Alter_taskContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, SnowflakeParser.RULE_alter_task);
	    var _la = 0;
	    try {
	        this.state = 5619;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,605,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5507;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5508;
	            this.match(SnowflakeParser.TASK);
	            this.state = 5510;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,583,this._ctx);
	            if(la_===1) {
	                this.state = 5509;
	                this.if_exists();

	            }
	            this.state = 5512;
	            this.object_name();
	            this.state = 5513;
	            this.resume_suspend();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5515;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5516;
	            this.match(SnowflakeParser.TASK);
	            this.state = 5518;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,584,this._ctx);
	            if(la_===1) {
	                this.state = 5517;
	                this.if_exists();

	            }
	            this.state = 5520;
	            this.object_name();
	            this.state = 5521;
	            _la = this._input.LA(1);
	            if(!(_la===10 || _la===557)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5522;
	            this.match(SnowflakeParser.AFTER);
	            this.state = 5523;
	            this.string_list();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5525;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5526;
	            this.match(SnowflakeParser.TASK);
	            this.state = 5528;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,585,this._ctx);
	            if(la_===1) {
	                this.state = 5527;
	                this.if_exists();

	            }
	            this.state = 5530;
	            this.object_name();
	            this.state = 5531;
	            this.match(SnowflakeParser.SET);
	            this.state = 5535;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===796) {
	                this.state = 5532;
	                this.match(SnowflakeParser.WAREHOUSE);
	                this.state = 5533;
	                this.match(SnowflakeParser.EQ);
	                this.state = 5534;
	                this.id_();
	            }

	            this.state = 5538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===622) {
	                this.state = 5537;
	                this.task_schedule();
	            }

	            this.state = 5541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 5540;
	                this.task_overlap();
	            }

	            this.state = 5544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===782) {
	                this.state = 5543;
	                this.task_timeout();
	            }

	            this.state = 5547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===703) {
	                this.state = 5546;
	                this.task_suspend_after_failure_number();
	            }

	            this.state = 5550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 5549;
	                this.comment_clause();
	            }

	            this.state = 5553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===51 || _la===87 || _la===88 || _la===170 || _la===171 || _la===227 || _la===228 || _la===351 || _la===376 || _la===539 || _la===595 || _la===648 || _la===681 || _la===693 || ((((_la - 728)) & ~0x1f) === 0 && ((1 << (_la - 728)) & 33662421) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 2097409) !== 0) || _la===801 || _la===802) {
	                this.state = 5552;
	                this.session_params_list();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5555;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5556;
	            this.match(SnowflakeParser.TASK);
	            this.state = 5558;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,593,this._ctx);
	            if(la_===1) {
	                this.state = 5557;
	                this.if_exists();

	            }
	            this.state = 5560;
	            this.object_name();
	            this.state = 5561;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5563;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===796) {
	                this.state = 5562;
	                this.match(SnowflakeParser.WAREHOUSE);
	            }

	            this.state = 5566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===622) {
	                this.state = 5565;
	                this.match(SnowflakeParser.SCHEDULE);
	            }

	            this.state = 5569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 5568;
	                this.match(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION);
	            }

	            this.state = 5572;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,597,this._ctx);
	            if(la_===1) {
	                this.state = 5571;
	                this.match(SnowflakeParser.USER_TASK_TIMEOUT_MS);

	            }
	            this.state = 5575;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,598,this._ctx);
	            if(la_===1) {
	                this.state = 5574;
	                this.match(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES);

	            }
	            this.state = 5578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 5577;
	                this.match(SnowflakeParser.COMMENT);
	            }

	            this.state = 5581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 83886088) !== 0) || _la===51 || _la===52 || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 4026531843) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 127) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 561) !== 0) || ((((_la - 211)) & ~0x1f) === 0 && ((1 << (_la - 211)) & 2147681289) !== 0) || _la===289 || _la===290 || ((((_la - 331)) & ~0x1f) === 0 && ((1 << (_la - 331)) & 3260417) !== 0) || ((((_la - 376)) & ~0x1f) === 0 && ((1 << (_la - 376)) & 2148270081) !== 0) || _la===415 || _la===420 || ((((_la - 510)) & ~0x1f) === 0 && ((1 << (_la - 510)) & 2684360721) !== 0) || ((((_la - 566)) & ~0x1f) === 0 && ((1 << (_la - 566)) & 536870915) !== 0) || ((((_la - 617)) & ~0x1f) === 0 && ((1 << (_la - 617)) & 2281701377) !== 0) || ((((_la - 669)) & ~0x1f) === 0 && ((1 << (_la - 669)) & 16783361) !== 0) || ((((_la - 703)) & ~0x1f) === 0 && ((1 << (_la - 703)) & 2852126721) !== 0) || ((((_la - 735)) & ~0x1f) === 0 && ((1 << (_la - 735)) & 268829515) !== 0) || ((((_la - 771)) & ~0x1f) === 0 && ((1 << (_la - 771)) & 3221236737) !== 0)) {
	                this.state = 5580;
	                this.session_parameter_list();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5583;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5584;
	            this.match(SnowflakeParser.TASK);
	            this.state = 5586;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,601,this._ctx);
	            if(la_===1) {
	                this.state = 5585;
	                this.if_exists();

	            }
	            this.state = 5588;
	            this.object_name();
	            this.state = 5589;
	            this.set_tags();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5591;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5592;
	            this.match(SnowflakeParser.TASK);
	            this.state = 5594;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,602,this._ctx);
	            if(la_===1) {
	                this.state = 5593;
	                this.if_exists();

	            }
	            this.state = 5596;
	            this.object_name();
	            this.state = 5597;
	            this.unset_tags();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5599;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5600;
	            this.match(SnowflakeParser.TASK);
	            this.state = 5602;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,603,this._ctx);
	            if(la_===1) {
	                this.state = 5601;
	                this.if_exists();

	            }
	            this.state = 5604;
	            this.object_name();
	            this.state = 5605;
	            this.match(SnowflakeParser.MODIFY);
	            this.state = 5606;
	            this.match(SnowflakeParser.AS);
	            this.state = 5607;
	            this.sql();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5609;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5610;
	            this.match(SnowflakeParser.TASK);
	            this.state = 5612;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,604,this._ctx);
	            if(la_===1) {
	                this.state = 5611;
	                this.if_exists();

	            }
	            this.state = 5614;
	            this.object_name();
	            this.state = 5615;
	            this.match(SnowflakeParser.MODIFY);
	            this.state = 5616;
	            this.match(SnowflakeParser.WHEN);
	            this.state = 5617;
	            this.expr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_user() {
	    let localctx = new Alter_userContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, SnowflakeParser.RULE_alter_user);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5621;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 5622;
	        this.match(SnowflakeParser.USER);
	        this.state = 5624;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,606,this._ctx);
	        if(la_===1) {
	            this.state = 5623;
	            this.if_exists();

	        }
	        this.state = 5626;
	        this.id_();
	        this.state = 5627;
	        this.alter_user_opts();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_view() {
	    let localctx = new Alter_viewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, SnowflakeParser.RULE_alter_view);
	    var _la = 0;
	    try {
	        this.state = 5797;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,621,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5629;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5630;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5632;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,607,this._ctx);
	            if(la_===1) {
	                this.state = 5631;
	                this.if_exists();

	            }
	            this.state = 5634;
	            this.object_name();
	            this.state = 5635;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 5636;
	            this.match(SnowflakeParser.TO);
	            this.state = 5637;
	            this.object_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5639;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5640;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5642;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,608,this._ctx);
	            if(la_===1) {
	                this.state = 5641;
	                this.if_exists();

	            }
	            this.state = 5644;
	            this.object_name();
	            this.state = 5645;
	            this.match(SnowflakeParser.SET);
	            this.state = 5646;
	            this.comment_clause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5648;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5649;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5651;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,609,this._ctx);
	            if(la_===1) {
	                this.state = 5650;
	                this.if_exists();

	            }
	            this.state = 5653;
	            this.object_name();
	            this.state = 5654;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5655;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5657;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5658;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5659;
	            this.object_name();
	            this.state = 5660;
	            this.match(SnowflakeParser.SET);
	            this.state = 5661;
	            this.match(SnowflakeParser.SECURE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5663;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5664;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5665;
	            this.object_name();
	            this.state = 5666;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5667;
	            this.match(SnowflakeParser.SECURE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5669;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5670;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5672;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,610,this._ctx);
	            if(la_===1) {
	                this.state = 5671;
	                this.if_exists();

	            }
	            this.state = 5674;
	            this.object_name();
	            this.state = 5675;
	            this.set_tags();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5677;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5678;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5680;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,611,this._ctx);
	            if(la_===1) {
	                this.state = 5679;
	                this.if_exists();

	            }
	            this.state = 5682;
	            this.object_name();
	            this.state = 5683;
	            this.unset_tags();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5685;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5686;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5688;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,612,this._ctx);
	            if(la_===1) {
	                this.state = 5687;
	                this.if_exists();

	            }
	            this.state = 5690;
	            this.object_name();
	            this.state = 5691;
	            this.match(SnowflakeParser.ADD);
	            this.state = 5692;
	            this.match(SnowflakeParser.ROW);
	            this.state = 5693;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 5694;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5695;
	            this.id_();
	            this.state = 5696;
	            this.match(SnowflakeParser.ON);
	            this.state = 5697;
	            this.column_list_in_parentheses();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5699;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5700;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5702;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,613,this._ctx);
	            if(la_===1) {
	                this.state = 5701;
	                this.if_exists();

	            }
	            this.state = 5704;
	            this.object_name();
	            this.state = 5705;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5706;
	            this.match(SnowflakeParser.ROW);
	            this.state = 5707;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 5708;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5709;
	            this.id_();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5711;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5712;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5714;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,614,this._ctx);
	            if(la_===1) {
	                this.state = 5713;
	                this.if_exists();

	            }
	            this.state = 5716;
	            this.object_name();
	            this.state = 5717;
	            this.match(SnowflakeParser.ADD);
	            this.state = 5718;
	            this.match(SnowflakeParser.ROW);
	            this.state = 5719;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 5720;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5721;
	            this.id_();
	            this.state = 5722;
	            this.match(SnowflakeParser.ON);
	            this.state = 5723;
	            this.column_list_in_parentheses();
	            this.state = 5724;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 5725;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5726;
	            this.match(SnowflakeParser.ROW);
	            this.state = 5727;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 5728;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5729;
	            this.id_();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5731;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5732;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5734;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,615,this._ctx);
	            if(la_===1) {
	                this.state = 5733;
	                this.if_exists();

	            }
	            this.state = 5736;
	            this.object_name();
	            this.state = 5737;
	            this.match(SnowflakeParser.DROP);
	            this.state = 5738;
	            this.match(SnowflakeParser.ALL);
	            this.state = 5739;
	            this.match(SnowflakeParser.ROW);
	            this.state = 5740;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 5741;
	            this.match(SnowflakeParser.POLICIES);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5743;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5744;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5745;
	            this.object_name();
	            this.state = 5746;
	            this.alter_modify();
	            this.state = 5748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 5747;
	                this.match(SnowflakeParser.COLUMN);
	            }

	            this.state = 5750;
	            this.id_();
	            this.state = 5751;
	            this.match(SnowflakeParser.SET);
	            this.state = 5752;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 5753;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5754;
	            this.id_();
	            this.state = 5762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===785) {
	                this.state = 5755;
	                this.match(SnowflakeParser.USING);
	                this.state = 5756;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 5757;
	                this.column_name();
	                this.state = 5758;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5759;
	                this.column_list();
	                this.state = 5760;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 5765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===270) {
	                this.state = 5764;
	                this.match(SnowflakeParser.FORCE);
	            }

	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5767;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5768;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5769;
	            this.object_name();
	            this.state = 5770;
	            this.alter_modify();
	            this.state = 5772;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 5771;
	                this.match(SnowflakeParser.COLUMN);
	            }

	            this.state = 5774;
	            this.id_();
	            this.state = 5775;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5776;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 5777;
	            this.match(SnowflakeParser.POLICY);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5779;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5780;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5781;
	            this.object_name();
	            this.state = 5782;
	            this.alter_modify();
	            this.state = 5784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 5783;
	                this.match(SnowflakeParser.COLUMN);
	            }

	            this.state = 5786;
	            this.id_();
	            this.state = 5787;
	            this.set_tags();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 5789;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 5790;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 5791;
	            this.object_name();
	            this.state = 5792;
	            this.alter_modify();
	            this.state = 5793;
	            this.match(SnowflakeParser.COLUMN);
	            this.state = 5794;
	            this.id_();
	            this.state = 5795;
	            this.unset_tags();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_modify() {
	    let localctx = new Alter_modifyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, SnowflakeParser.RULE_alter_modify);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5799;
	        _la = this._input.LA(1);
	        if(!(_la===28 || _la===410)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_warehouse() {
	    let localctx = new Alter_warehouseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, SnowflakeParser.RULE_alter_warehouse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5801;
	        this.match(SnowflakeParser.ALTER);
	        this.state = 5802;
	        this.match(SnowflakeParser.WAREHOUSE);
	        this.state = 5804;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,622,this._ctx);
	        if(la_===1) {
	            this.state = 5803;
	            this.if_exists();

	        }
	        this.state = 5806;
	        this.alter_warehouse_opts();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_connection_opts() {
	    let localctx = new Alter_connection_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, SnowflakeParser.RULE_alter_connection_opts);
	    var _la = 0;
	    try {
	        this.state = 5861;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,628,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5808;
	            this.id_();
	            this.state = 5809;
	            this.match(SnowflakeParser.ENABLE);
	            this.state = 5810;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 5811;
	            this.match(SnowflakeParser.TO);
	            this.state = 5812;
	            this.match(SnowflakeParser.ACCOUNTS);
	            this.state = 5813;
	            this.id_();
	            this.state = 5814;
	            this.match(SnowflakeParser.DOT);
	            this.state = 5815;
	            this.id_();
	            this.state = 5823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 5816;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5817;
	                this.id_();
	                this.state = 5818;
	                this.match(SnowflakeParser.DOT);
	                this.state = 5819;
	                this.id_();
	                this.state = 5825;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===315) {
	                this.state = 5826;
	                this.ignore_edition_check();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5829;
	            this.id_();
	            this.state = 5830;
	            this.match(SnowflakeParser.DISABLE);
	            this.state = 5831;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 5842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===745) {
	                this.state = 5832;
	                this.match(SnowflakeParser.TO);
	                this.state = 5833;
	                this.match(SnowflakeParser.ACCOUNTS);
	                this.state = 5834;
	                this.id_();
	                this.state = 5835;
	                this.match(SnowflakeParser.DOT);
	                this.state = 5836;
	                this.id_();

	                this.state = 5837;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5838;
	                this.id_();
	                this.state = 5839;
	                this.match(SnowflakeParser.DOT);
	                this.state = 5840;
	                this.id_();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5844;
	            this.id_();
	            this.state = 5845;
	            this.match(SnowflakeParser.PRIMARY);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5848;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,626,this._ctx);
	            if(la_===1) {
	                this.state = 5847;
	                this.if_exists();

	            }
	            this.state = 5850;
	            this.id_();
	            this.state = 5851;
	            this.match(SnowflakeParser.SET);
	            this.state = 5852;
	            this.comment_clause();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5855;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,627,this._ctx);
	            if(la_===1) {
	                this.state = 5854;
	                this.if_exists();

	            }
	            this.state = 5857;
	            this.id_();
	            this.state = 5858;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5859;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_user_opts() {
	    let localctx = new Alter_user_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, SnowflakeParser.RULE_alter_user_opts);
	    try {
	        this.state = 5897;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 558:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5863;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 5864;
	            this.match(SnowflakeParser.TO);
	            this.state = 5865;
	            this.id_();
	            break;
	        case 568:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5866;
	            this.match(SnowflakeParser.RESET);
	            this.state = 5867;
	            this.match(SnowflakeParser.PASSWORD);
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5868;
	            this.match(SnowflakeParser.ABORT);
	            this.state = 5869;
	            this.match(SnowflakeParser.ALL);
	            this.state = 5870;
	            this.match(SnowflakeParser.QUERIES);
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5871;
	            this.match(SnowflakeParser.ADD);
	            this.state = 5872;
	            this.match(SnowflakeParser.DELEGATED);
	            this.state = 5873;
	            this.match(SnowflakeParser.AUTHORIZATION);
	            this.state = 5874;
	            this.match(SnowflakeParser.OF);
	            this.state = 5875;
	            this.match(SnowflakeParser.ROLE);
	            this.state = 5876;
	            this.id_();
	            this.state = 5877;
	            this.match(SnowflakeParser.TO);
	            this.state = 5878;
	            this.match(SnowflakeParser.SECURITY);
	            this.state = 5879;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 5880;
	            this.id_();
	            break;
	        case 557:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5882;
	            this.match(SnowflakeParser.REMOVE);
	            this.state = 5883;
	            this.match(SnowflakeParser.DELEGATED);
	            this.state = 5889;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 47:
	                this.state = 5884;
	                this.match(SnowflakeParser.AUTHORIZATION);
	                this.state = 5885;
	                this.match(SnowflakeParser.OF);
	                this.state = 5886;
	                this.match(SnowflakeParser.ROLE);
	                this.state = 5887;
	                this.id_();
	                break;
	            case 48:
	                this.state = 5888;
	                this.match(SnowflakeParser.AUTHORIZATIONS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5891;
	            this.match(SnowflakeParser.FROM);
	            this.state = 5892;
	            this.match(SnowflakeParser.SECURITY);
	            this.state = 5893;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 5894;
	            this.id_();
	            break;
	        case 640:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5895;
	            this.set_tags();
	            break;
	        case 770:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5896;
	            this.unset_tags();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_tag_opts() {
	    let localctx = new Alter_tag_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, SnowflakeParser.RULE_alter_tag_opts);
	    var _la = 0;
	    try {
	        this.state = 5936;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,633,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5899;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 5900;
	            this.match(SnowflakeParser.TO);
	            this.state = 5901;
	            this.object_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5902;
	            _la = this._input.LA(1);
	            if(!(_la===10 || _la===200)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5903;
	            this.tag_allowed_values();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5904;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5905;
	            this.match(SnowflakeParser.ALLOWED_VALUES);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5906;
	            this.match(SnowflakeParser.SET);
	            this.state = 5907;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 5908;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5909;
	            this.id_();
	            this.state = 5916;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 5910;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5911;
	                this.match(SnowflakeParser.MASKING);
	                this.state = 5912;
	                this.match(SnowflakeParser.POLICY);
	                this.state = 5913;
	                this.id_();
	                this.state = 5918;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5919;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5920;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 5921;
	            this.match(SnowflakeParser.POLICY);
	            this.state = 5922;
	            this.id_();
	            this.state = 5929;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 5923;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 5924;
	                this.match(SnowflakeParser.MASKING);
	                this.state = 5925;
	                this.match(SnowflakeParser.POLICY);
	                this.state = 5926;
	                this.id_();
	                this.state = 5931;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5932;
	            this.match(SnowflakeParser.SET);
	            this.state = 5933;
	            this.comment_clause();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5934;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5935;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_network_policy_opts() {
	    let localctx = new Alter_network_policy_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, SnowflakeParser.RULE_alter_network_policy_opts);
	    var _la = 0;
	    try {
	        this.state = 5974;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,639,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5939;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,634,this._ctx);
	            if(la_===1) {
	                this.state = 5938;
	                this.if_exists();

	            }
	            this.state = 5941;
	            this.id_();
	            this.state = 5942;
	            this.match(SnowflakeParser.SET);
	            this.state = 5949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 5943;
	                this.match(SnowflakeParser.ALLOWED_IP_LIST);
	                this.state = 5944;
	                this.match(SnowflakeParser.EQ);
	                this.state = 5945;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 5946;
	                this.string_list();
	                this.state = 5947;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 5957;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 5951;
	                this.match(SnowflakeParser.BLOCKED_IP_LIST);
	                this.state = 5952;
	                this.match(SnowflakeParser.EQ);
	                this.state = 5953;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 5954;
	                this.string_list();
	                this.state = 5955;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 5960;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 5959;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5963;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,638,this._ctx);
	            if(la_===1) {
	                this.state = 5962;
	                this.if_exists();

	            }
	            this.state = 5965;
	            this.id_();
	            this.state = 5966;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 5967;
	            this.match(SnowflakeParser.COMMENT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5969;
	            this.id_();
	            this.state = 5970;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 5971;
	            this.match(SnowflakeParser.TO);
	            this.state = 5972;
	            this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_warehouse_opts() {
	    let localctx = new Alter_warehouse_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, SnowflakeParser.RULE_alter_warehouse_opts);
	    var _la = 0;
	    try {
	        this.state = 6023;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,646,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 5976;
	                this.id_fn();
	            }

	            this.state = 5984;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 700:
	                this.state = 5979;
	                this.match(SnowflakeParser.SUSPEND);
	                break;
	            case 577:
	                this.state = 5980;
	                this.match(SnowflakeParser.RESUME);
	                this.state = 5982;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===312) {
	                    this.state = 5981;
	                    this.if_suspended();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5987;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 5986;
	                this.id_fn();
	            }

	            this.state = 5989;
	            this.match(SnowflakeParser.ABORT);
	            this.state = 5990;
	            this.match(SnowflakeParser.ALL);
	            this.state = 5991;
	            this.match(SnowflakeParser.QUERIES);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5992;
	            this.id_fn();
	            this.state = 5993;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 5994;
	            this.match(SnowflakeParser.TO);
	            this.state = 5995;
	            this.id_();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5997;
	            this.id_fn();
	            this.state = 5998;
	            this.set_tags();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6000;
	            this.id_fn();
	            this.state = 6001;
	            this.unset_tags();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6003;
	            this.id_fn();
	            this.state = 6004;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 6005;
	            this.id_();
	            this.state = 6010;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 6006;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6007;
	                this.id_();
	                this.state = 6012;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6013;
	            this.id_();
	            this.state = 6014;
	            this.match(SnowflakeParser.SET);
	            this.state = 6015;
	            this.wh_properties();
	            this.state = 6020;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 6016;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6017;
	                this.wh_properties();
	                this.state = 6022;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_account_opts() {
	    let localctx = new Alter_account_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, SnowflakeParser.RULE_alter_account_opts);
	    var _la = 0;
	    try {
	        this.state = 6061;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,652,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6025;
	            this.match(SnowflakeParser.SET);
	            this.state = 6027;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,647,this._ctx);
	            if(la_===1) {
	                this.state = 6026;
	                this.account_params();

	            }
	            this.state = 6030;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,648,this._ctx);
	            if(la_===1) {
	                this.state = 6029;
	                this.object_params();

	            }
	            this.state = 6033;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===51 || _la===87 || _la===88 || _la===170 || _la===171 || _la===227 || _la===228 || _la===351 || _la===376 || _la===539 || _la===595 || _la===648 || _la===681 || _la===693 || ((((_la - 728)) & ~0x1f) === 0 && ((1 << (_la - 728)) & 33662421) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 2097409) !== 0) || _la===801 || _la===802) {
	                this.state = 6032;
	                this.session_params();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6035;
	            this.match(SnowflakeParser.UNSET);
	            this.state = 6036;
	            this.param_name();
	            this.state = 6039;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===894) {
	                this.state = 6037;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6038;
	                this.param_name();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6041;
	            this.match(SnowflakeParser.SET);
	            this.state = 6042;
	            this.match(SnowflakeParser.RESOURCE_MONITOR);
	            this.state = 6043;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6044;
	            this.id_();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6045;
	            this.set_tags();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6046;
	            this.unset_tags();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6047;
	            this.id_();
	            this.state = 6048;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 6049;
	            this.match(SnowflakeParser.TO);
	            this.state = 6050;
	            this.id_();
	            this.state = 6054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===619) {
	                this.state = 6051;
	                this.match(SnowflakeParser.SAVE_OLD_URL);
	                this.state = 6052;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6053;
	                this.true_false();
	            }

	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6056;
	            this.id_();
	            this.state = 6057;
	            this.match(SnowflakeParser.DROP);
	            this.state = 6058;
	            this.match(SnowflakeParser.OLD);
	            this.state = 6059;
	            this.match(SnowflakeParser.URL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_tags() {
	    let localctx = new Set_tagsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, SnowflakeParser.RULE_set_tags);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6063;
	        this.match(SnowflakeParser.SET);
	        this.state = 6064;
	        this.tag_decl_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tag_decl_list() {
	    let localctx = new Tag_decl_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, SnowflakeParser.RULE_tag_decl_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6066;
	        this.match(SnowflakeParser.TAG);
	        this.state = 6067;
	        this.object_name();
	        this.state = 6068;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6069;
	        this.tag_value();
	        this.state = 6077;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,653,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6070;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6071;
	                this.object_name();
	                this.state = 6072;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6073;
	                this.tag_value(); 
	            }
	            this.state = 6079;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,653,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unset_tags() {
	    let localctx = new Unset_tagsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, SnowflakeParser.RULE_unset_tags);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6080;
	        this.match(SnowflakeParser.UNSET);
	        this.state = 6081;
	        this.match(SnowflakeParser.TAG);
	        this.state = 6082;
	        this.object_name();
	        this.state = 6087;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,654,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6083;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6084;
	                this.object_name(); 
	            }
	            this.state = 6089;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,654,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_command() {
	    let localctx = new Create_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, SnowflakeParser.RULE_create_command);
	    try {
	        this.state = 6134;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,655,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6090;
	            this.create_account();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6091;
	            this.create_alert();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6092;
	            this.create_api_integration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6093;
	            this.create_object_clone();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6094;
	            this.create_connection();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6095;
	            this.create_database();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6096;
	            this.create_dynamic_table();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6097;
	            this.create_event_table();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6098;
	            this.create_external_function();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6099;
	            this.create_external_table();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6100;
	            this.create_failover_group();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6101;
	            this.create_file_format();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6102;
	            this.create_function();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6103;
	            this.create_managed_account();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6104;
	            this.create_masking_policy();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 6105;
	            this.create_materialized_view();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 6106;
	            this.create_network_policy();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 6107;
	            this.create_notification_integration();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 6108;
	            this.create_password_policy();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 6109;
	            this.create_pipe();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 6110;
	            this.create_procedure();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 6111;
	            this.create_replication_group();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 6112;
	            this.create_resource_monitor();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 6113;
	            this.create_role();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 6114;
	            this.create_row_access_policy();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 6115;
	            this.create_schema();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 6116;
	            this.create_security_integration_external_oauth();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 6117;
	            this.create_security_integration_snowflake_oauth();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 6118;
	            this.create_security_integration_saml2();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 6119;
	            this.create_security_integration_scim();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 6120;
	            this.create_sequence();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 6121;
	            this.create_session_policy();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 6122;
	            this.create_share();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 6123;
	            this.create_stage();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 6124;
	            this.create_storage_integration();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 6125;
	            this.create_stream();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 6126;
	            this.create_table();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 6127;
	            this.create_table_as_select();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 6128;
	            this.create_table_like();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 6129;
	            this.create_tag();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 6130;
	            this.create_task();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 6131;
	            this.create_user();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 6132;
	            this.create_view();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 6133;
	            this.create_warehouse();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_account() {
	    let localctx = new Create_accountContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, SnowflakeParser.RULE_create_account);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6136;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 6137;
	        this.match(SnowflakeParser.ACCOUNT);
	        this.state = 6138;
	        this.id_();
	        this.state = 6139;
	        this.match(SnowflakeParser.ADMIN_NAME);
	        this.state = 6140;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6141;
	        this.id_();
	        this.state = 6142;
	        this.match(SnowflakeParser.ADMIN_PASSWORD);
	        this.state = 6143;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6144;
	        this.string();
	        this.state = 6148;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===266) {
	            this.state = 6145;
	            this.match(SnowflakeParser.FIRST_NAME);
	            this.state = 6146;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6147;
	            this.id_();
	        }

	        this.state = 6153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===360) {
	            this.state = 6150;
	            this.match(SnowflakeParser.LAST_NAME);
	            this.state = 6151;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6152;
	            this.id_();
	        }

	        this.state = 6155;
	        this.match(SnowflakeParser.EMAIL);
	        this.state = 6156;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6157;
	        this.string();
	        this.state = 6161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===416) {
	            this.state = 6158;
	            this.match(SnowflakeParser.MUST_CHANGE_PASSWORD);
	            this.state = 6159;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6160;
	            this.true_false();
	        }

	        this.state = 6163;
	        this.match(SnowflakeParser.EDITION);
	        this.state = 6164;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6165;
	        _la = this._input.LA(1);
	        if(!(_la===95 || _la===222 || _la===674)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===555) {
	            this.state = 6166;
	            this.match(SnowflakeParser.REGION_GROUP);
	            this.state = 6167;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6168;
	            this.region_group_id();
	        }

	        this.state = 6174;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===553) {
	            this.state = 6171;
	            this.match(SnowflakeParser.REGION);
	            this.state = 6172;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6173;
	            this.snowflake_region_id();
	        }

	        this.state = 6177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 6176;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_alert() {
	    let localctx = new Create_alertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, SnowflakeParser.RULE_create_alert);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6179;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 6181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 6180;
	            this.or_replace();
	        }

	        this.state = 6183;
	        this.match(SnowflakeParser.ALERT);
	        this.state = 6185;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,663,this._ctx);
	        if(la_===1) {
	            this.state = 6184;
	            this.if_not_exists();

	        }
	        this.state = 6187;
	        this.id_();
	        this.state = 6188;
	        this.match(SnowflakeParser.WAREHOUSE);
	        this.state = 6189;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6190;
	        this.id_();
	        this.state = 6191;
	        this.match(SnowflakeParser.SCHEDULE);
	        this.state = 6192;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6193;
	        this.string();
	        this.state = 6194;
	        this.match(SnowflakeParser.IF);
	        this.state = 6195;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 6196;
	        this.match(SnowflakeParser.EXISTS);
	        this.state = 6197;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 6198;
	        this.alert_condition();
	        this.state = 6199;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 6200;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 6201;
	        this.match(SnowflakeParser.THEN);
	        this.state = 6202;
	        this.alert_action();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alert_condition() {
	    let localctx = new Alert_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, SnowflakeParser.RULE_alert_condition);
	    try {
	        this.state = 6207;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 633:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6204;
	            this.select_statement();
	            break;
	        case 645:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6205;
	            this.show_command();
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6206;
	            this.call();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alert_action() {
	    let localctx = new Alert_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, SnowflakeParser.RULE_alert_action);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6209;
	        this.sql_command();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_api_integration() {
	    let localctx = new Create_api_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, SnowflakeParser.RULE_create_api_integration);
	    var _la = 0;
	    try {
	        this.state = 6325;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,677,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6211;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6213;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 6212;
	                this.or_replace();
	            }

	            this.state = 6215;
	            this.match(SnowflakeParser.API);
	            this.state = 6216;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 6218;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,666,this._ctx);
	            if(la_===1) {
	                this.state = 6217;
	                this.if_not_exists();

	            }
	            this.state = 6220;
	            this.id_();
	            this.state = 6221;
	            this.match(SnowflakeParser.API_PROVIDER);
	            this.state = 6222;
	            this.match(SnowflakeParser.EQ);

	            this.state = 6223;
	            this.id_();
	            this.state = 6224;
	            this.match(SnowflakeParser.API_AWS_ROLE_ARN);
	            this.state = 6225;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6226;
	            this.string();
	            this.state = 6230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37) {
	                this.state = 6227;
	                this.match(SnowflakeParser.API_KEY);
	                this.state = 6228;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6229;
	                this.string();
	            }

	            this.state = 6232;
	            this.match(SnowflakeParser.API_ALLOWED_PREFIXES);
	            this.state = 6233;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6234;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6235;
	            this.string();
	            this.state = 6236;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 6243;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 6237;
	                this.match(SnowflakeParser.API_BLOCKED_PREFIXES);
	                this.state = 6238;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6239;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 6240;
	                this.string();
	                this.state = 6241;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 6245;
	            this.match(SnowflakeParser.ENABLED);
	            this.state = 6246;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6247;
	            this.true_false();
	            this.state = 6249;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 6248;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6251;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 6252;
	                this.or_replace();
	            }

	            this.state = 6255;
	            this.match(SnowflakeParser.API);
	            this.state = 6256;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 6258;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,671,this._ctx);
	            if(la_===1) {
	                this.state = 6257;
	                this.if_not_exists();

	            }
	            this.state = 6260;
	            this.id_();
	            this.state = 6261;
	            this.match(SnowflakeParser.API_PROVIDER);
	            this.state = 6262;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6263;
	            this.id_();
	            this.state = 6264;
	            this.match(SnowflakeParser.AZURE_TENANT_ID);
	            this.state = 6265;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6266;
	            this.string();
	            this.state = 6267;
	            this.match(SnowflakeParser.AZURE_AD_APPLICATION_ID);
	            this.state = 6268;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6269;
	            this.string();
	            this.state = 6273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37) {
	                this.state = 6270;
	                this.match(SnowflakeParser.API_KEY);
	                this.state = 6271;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6272;
	                this.string();
	            }

	            this.state = 6275;
	            this.match(SnowflakeParser.API_ALLOWED_PREFIXES);
	            this.state = 6276;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6277;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6278;
	            this.string();
	            this.state = 6279;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 6286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 6280;
	                this.match(SnowflakeParser.API_BLOCKED_PREFIXES);
	                this.state = 6281;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6282;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 6283;
	                this.string();
	                this.state = 6284;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 6288;
	            this.match(SnowflakeParser.ENABLED);
	            this.state = 6289;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6290;
	            this.true_false();
	            this.state = 6292;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 6291;
	                this.comment_clause();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6294;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6295;
	            this.or_replace();
	            this.state = 6296;
	            this.match(SnowflakeParser.API);
	            this.state = 6297;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 6298;
	            this.if_not_exists();
	            this.state = 6299;
	            this.id_();
	            this.state = 6300;
	            this.match(SnowflakeParser.API_PROVIDER);
	            this.state = 6301;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6302;
	            this.id_();
	            this.state = 6303;
	            this.match(SnowflakeParser.GOOGLE_AUDIENCE);
	            this.state = 6304;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6305;
	            this.string();
	            this.state = 6306;
	            this.match(SnowflakeParser.API_ALLOWED_PREFIXES);
	            this.state = 6307;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6308;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6309;
	            this.string();
	            this.state = 6310;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 6317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 6311;
	                this.match(SnowflakeParser.API_BLOCKED_PREFIXES);
	                this.state = 6312;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6313;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 6314;
	                this.string();
	                this.state = 6315;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 6319;
	            this.match(SnowflakeParser.ENABLED);
	            this.state = 6320;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6321;
	            this.true_false();
	            this.state = 6323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 6322;
	                this.comment_clause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_object_clone() {
	    let localctx = new Create_object_cloneContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, SnowflakeParser.RULE_create_object_clone);
	    var _la = 0;
	    try {
	        this.state = 6374;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,685,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6327;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 6328;
	                this.or_replace();
	            }

	            this.state = 6331;
	            _la = this._input.LA(1);
	            if(!(_la===164 || _la===623 || _la===708)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6333;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,679,this._ctx);
	            if(la_===1) {
	                this.state = 6332;
	                this.if_not_exists();

	            }
	            this.state = 6335;
	            this.id_();
	            this.state = 6336;
	            this.match(SnowflakeParser.CLONE);
	            this.state = 6337;
	            this.object_name();
	            this.state = 6353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===46 || _la===81) {
	                this.state = 6338;
	                this.at_before1();
	                this.state = 6339;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 6349;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 727:
	                    this.state = 6340;
	                    this.match(SnowflakeParser.TIMESTAMP);
	                    this.state = 6341;
	                    this.match(SnowflakeParser.ASSOC);
	                    this.state = 6342;
	                    this.string();
	                    break;
	                case 459:
	                    this.state = 6343;
	                    this.match(SnowflakeParser.OFFSET);
	                    this.state = 6344;
	                    this.match(SnowflakeParser.ASSOC);
	                    this.state = 6345;
	                    this.string();
	                    break;
	                case 679:
	                    this.state = 6346;
	                    this.match(SnowflakeParser.STATEMENT);
	                    this.state = 6347;
	                    this.match(SnowflakeParser.ASSOC);
	                    this.state = 6348;
	                    this.id_();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 6351;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6355;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6357;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 6356;
	                this.or_replace();
	            }

	            this.state = 6365;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 670:
	                this.state = 6359;
	                this.match(SnowflakeParser.STAGE);
	                break;
	            case 261:
	                this.state = 6360;
	                this.match(SnowflakeParser.FILE);
	                this.state = 6361;
	                this.match(SnowflakeParser.FORMAT);
	                break;
	            case 634:
	                this.state = 6362;
	                this.match(SnowflakeParser.SEQUENCE);
	                break;
	            case 690:
	                this.state = 6363;
	                this.match(SnowflakeParser.STREAM);
	                break;
	            case 718:
	                this.state = 6364;
	                this.match(SnowflakeParser.TASK);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6368;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,684,this._ctx);
	            if(la_===1) {
	                this.state = 6367;
	                this.if_not_exists();

	            }
	            this.state = 6370;
	            this.object_name();
	            this.state = 6371;
	            this.match(SnowflakeParser.CLONE);
	            this.state = 6372;
	            this.object_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_connection() {
	    let localctx = new Create_connectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, SnowflakeParser.RULE_create_connection);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6376;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 6377;
	        this.match(SnowflakeParser.CONNECTION);
	        this.state = 6379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,686,this._ctx);
	        if(la_===1) {
	            this.state = 6378;
	            this.if_not_exists();

	        }
	        this.state = 6381;
	        this.id_();
	        this.state = 6396;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	        case 134:
	        case 895:
	            this.state = 6383;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 6382;
	                this.comment_clause();
	            }

	            break;
	        case 43:
	            this.state = 6385;
	            this.match(SnowflakeParser.AS);
	            this.state = 6386;
	            this.match(SnowflakeParser.REPLICA);
	            this.state = 6387;
	            this.match(SnowflakeParser.OF);
	            this.state = 6388;
	            this.id_();
	            this.state = 6389;
	            this.match(SnowflakeParser.DOT);
	            this.state = 6390;
	            this.id_();
	            this.state = 6391;
	            this.match(SnowflakeParser.DOT);
	            this.state = 6392;
	            this.id_();
	            this.state = 6394;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 6393;
	                this.comment_clause();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_database() {
	    let localctx = new Create_databaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, SnowflakeParser.RULE_create_database);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6398;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 6400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 6399;
	            this.or_replace();
	        }

	        this.state = 6403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===754) {
	            this.state = 6402;
	            this.match(SnowflakeParser.TRANSIENT);
	        }

	        this.state = 6405;
	        this.match(SnowflakeParser.DATABASE);
	        this.state = 6407;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,692,this._ctx);
	        if(la_===1) {
	            this.state = 6406;
	            this.if_not_exists();

	        }
	        this.state = 6409;
	        this.id_();
	        this.state = 6411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 6410;
	            this.clone_at_before();
	        }

	        this.state = 6416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===166) {
	            this.state = 6413;
	            this.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS);
	            this.state = 6414;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6415;
	            this.num();
	        }

	        this.state = 6421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===395) {
	            this.state = 6418;
	            this.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS);
	            this.state = 6419;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6420;
	            this.num();
	        }

	        this.state = 6424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===175) {
	            this.state = 6423;
	            this.default_ddl_collation();
	        }

	        this.state = 6427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===715 || _la===805) {
	            this.state = 6426;
	            this.with_tags();
	        }

	        this.state = 6430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 6429;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clone_at_before() {
	    let localctx = new Clone_at_beforeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, SnowflakeParser.RULE_clone_at_before);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6432;
	        this.match(SnowflakeParser.CLONE);
	        this.state = 6433;
	        this.id_();
	        this.state = 6449;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===46 || _la===81) {
	            this.state = 6434;
	            this.at_before1();
	            this.state = 6435;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6445;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 727:
	                this.state = 6436;
	                this.match(SnowflakeParser.TIMESTAMP);
	                this.state = 6437;
	                this.match(SnowflakeParser.ASSOC);
	                this.state = 6438;
	                this.string();
	                break;
	            case 459:
	                this.state = 6439;
	                this.match(SnowflakeParser.OFFSET);
	                this.state = 6440;
	                this.match(SnowflakeParser.ASSOC);
	                this.state = 6441;
	                this.string();
	                break;
	            case 679:
	                this.state = 6442;
	                this.match(SnowflakeParser.STATEMENT);
	                this.state = 6443;
	                this.match(SnowflakeParser.ASSOC);
	                this.state = 6444;
	                this.id_();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6447;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	at_before1() {
	    let localctx = new At_before1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, SnowflakeParser.RULE_at_before1);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6451;
	        _la = this._input.LA(1);
	        if(!(_la===46 || _la===81)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	header_decl() {
	    let localctx = new Header_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, SnowflakeParser.RULE_header_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6453;
	        this.string();
	        this.state = 6454;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6455;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compression_type() {
	    let localctx = new Compression_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, SnowflakeParser.RULE_compression_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6457;
	        _la = this._input.LA(1);
	        if(!(_la===49 || _la===183 || _la===300 || _la===425)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compression() {
	    let localctx = new CompressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, SnowflakeParser.RULE_compression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6459;
	        this.match(SnowflakeParser.COMPRESSION);
	        this.state = 6460;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6461;
	        this.compression_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_dynamic_table() {
	    let localctx = new Create_dynamic_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, SnowflakeParser.RULE_create_dynamic_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6463;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 6465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 6464;
	            this.or_replace();
	        }

	        this.state = 6467;
	        this.match(SnowflakeParser.DYNAMIC);
	        this.state = 6468;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 6469;
	        this.id_();
	        this.state = 6470;
	        this.match(SnowflakeParser.TARGET_LAG);
	        this.state = 6471;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6474;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 869:
	            this.state = 6472;
	            this.string();
	            break;
	        case 199:
	            this.state = 6473;
	            this.match(SnowflakeParser.DOWNSTREAM);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 6476;
	        this.match(SnowflakeParser.WAREHOUSE);
	        this.state = 6477;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6478;
	        localctx.wh = this.id_();
	        this.state = 6479;
	        this.match(SnowflakeParser.AS);
	        this.state = 6480;
	        this.query_statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_event_table() {
	    let localctx = new Create_event_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, SnowflakeParser.RULE_create_event_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6482;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 6484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 6483;
	            this.or_replace();
	        }

	        this.state = 6486;
	        this.match(SnowflakeParser.EVENT);
	        this.state = 6487;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 6489;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,704,this._ctx);
	        if(la_===1) {
	            this.state = 6488;
	            this.if_not_exists();

	        }
	        this.state = 6491;
	        this.id_();
	        this.state = 6493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 6492;
	            this.cluster_by();
	        }

	        this.state = 6498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===166) {
	            this.state = 6495;
	            this.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS);
	            this.state = 6496;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6497;
	            this.num();
	        }

	        this.state = 6503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===395) {
	            this.state = 6500;
	            this.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS);
	            this.state = 6501;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6502;
	            this.num();
	        }

	        this.state = 6506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108) {
	            this.state = 6505;
	            this.change_tracking();
	        }

	        this.state = 6511;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===175) {
	            this.state = 6508;
	            this.match(SnowflakeParser.DEFAULT_DDL_COLLATION_);
	            this.state = 6509;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6510;
	            this.string();
	        }

	        this.state = 6514;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 6513;
	            this.copy_grants();
	        }

	        this.state = 6517;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,711,this._ctx);
	        if(la_===1) {
	            this.state = 6516;
	            this.with_row_access_policy();

	        }
	        this.state = 6520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,712,this._ctx);
	        if(la_===1) {
	            this.state = 6519;
	            this.with_tags();

	        }
	        this.state = 6526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134 || _la===805) {
	            this.state = 6523;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===805) {
	                this.state = 6522;
	                this.match(SnowflakeParser.WITH);
	            }

	            this.state = 6525;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_external_function() {
	    let localctx = new Create_external_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, SnowflakeParser.RULE_create_external_function);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6528;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 6530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 6529;
	            this.or_replace();
	        }

	        this.state = 6533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===629) {
	            this.state = 6532;
	            this.match(SnowflakeParser.SECURE);
	        }

	        this.state = 6535;
	        this.match(SnowflakeParser.EXTERNAL);
	        this.state = 6536;
	        this.match(SnowflakeParser.FUNCTION);
	        this.state = 6537;
	        this.object_name();
	        this.state = 6538;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 6550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	            this.state = 6539;
	            this.arg_name();
	            this.state = 6540;
	            this.arg_data_type();
	            this.state = 6547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 6541;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6542;
	                this.arg_name();
	                this.state = 6543;
	                this.arg_data_type();
	                this.state = 6549;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 6552;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 6553;
	        this.match(SnowflakeParser.RETURNS);
	        this.state = 6554;
	        this.data_type();
	        this.state = 6556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===429 || _la===439) {
	            this.state = 6555;
	            this.null_not_null();
	        }

	        this.state = 6570;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 99:
	        	this.state = 6558;
	        	this.match(SnowflakeParser.CALLED);
	        	this.state = 6559;
	        	this.match(SnowflakeParser.ON);
	        	this.state = 6560;
	        	this.match(SnowflakeParser.NULL_);
	        	this.state = 6561;
	        	this.match(SnowflakeParser.INPUT);
	        	break;
	        case 578:
	        case 692:
	        	this.state = 6568;
	        	this._errHandler.sync(this);
	        	switch(this._input.LA(1)) {
	        	case 578:
	        	    this.state = 6562;
	        	    this.match(SnowflakeParser.RETURNS);
	        	    this.state = 6563;
	        	    this.match(SnowflakeParser.NULL_);
	        	    this.state = 6564;
	        	    this.match(SnowflakeParser.ON);
	        	    this.state = 6565;
	        	    this.match(SnowflakeParser.NULL_);
	        	    this.state = 6566;
	        	    this.match(SnowflakeParser.INPUT);
	        	    break;
	        	case 692:
	        	    this.state = 6567;
	        	    this.match(SnowflakeParser.STRICT);
	        	    break;
	        	default:
	        	    throw new antlr4.error.NoViableAltException(this);
	        	}
	        	break;
	        case 36:
	        case 134:
	        case 320:
	        case 795:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 6573;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===320 || _la===795) {
	            this.state = 6572;
	            _la = this._input.LA(1);
	            if(!(_la===320 || _la===795)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 6576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 6575;
	            this.comment_clause();
	        }

	        this.state = 6578;
	        this.match(SnowflakeParser.API_INTEGRATION);
	        this.state = 6579;
	        this.match(SnowflakeParser.EQ);
	        this.state = 6580;
	        this.id_();
	        this.state = 6594;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===307) {
	            this.state = 6581;
	            this.match(SnowflakeParser.HEADERS);
	            this.state = 6582;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6583;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6584;
	            this.header_decl();
	            this.state = 6589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 6585;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6586;
	                this.header_decl();
	                this.state = 6591;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6592;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 6609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 6596;
	            this.match(SnowflakeParser.CONTEXT_HEADERS);
	            this.state = 6597;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6598;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6599;
	            this.id_();
	            this.state = 6604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 6600;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6601;
	                this.id_();
	                this.state = 6606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6607;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 6614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===392) {
	            this.state = 6611;
	            this.match(SnowflakeParser.MAX_BATCH_ROWS);
	            this.state = 6612;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6613;
	            this.num();
	        }

	        this.state = 6617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===136) {
	            this.state = 6616;
	            this.compression();
	        }

	        this.state = 6622;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===565) {
	            this.state = 6619;
	            this.match(SnowflakeParser.REQUEST_TRANSLATOR);
	            this.state = 6620;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6621;
	            this.id_();
	        }

	        this.state = 6627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===573) {
	            this.state = 6624;
	            this.match(SnowflakeParser.RESPONSE_TRANSLATOR);
	            this.state = 6625;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6626;
	            this.id_();
	        }

	        this.state = 6629;
	        this.match(SnowflakeParser.AS);
	        this.state = 6630;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_external_table() {
	    let localctx = new Create_external_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, SnowflakeParser.RULE_create_external_table);
	    var _la = 0;
	    try {
	        this.state = 6775;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,764,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6632;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 6633;
	                this.or_replace();
	            }

	            this.state = 6636;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 6637;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 6639;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,733,this._ctx);
	            if(la_===1) {
	                this.state = 6638;
	                this.if_not_exists();

	            }
	            this.state = 6641;
	            this.object_name();
	            this.state = 6642;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6643;
	            this.external_table_column_decl_list();
	            this.state = 6644;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 6646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===337) {
	                this.state = 6645;
	                this.cloud_provider_params3();
	            }

	            this.state = 6649;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===491) {
	                this.state = 6648;
	                this.partition_by();
	            }

	            this.state = 6652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===805) {
	                this.state = 6651;
	                this.match(SnowflakeParser.WITH);
	            }

	            this.state = 6654;
	            this.match(SnowflakeParser.LOCATION);
	            this.state = 6655;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6656;
	            this.named_stage();
	            this.state = 6660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===552) {
	                this.state = 6657;
	                this.match(SnowflakeParser.REFRESH_ON_CREATE);
	                this.state = 6658;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6659;
	                this.true_false();
	            }

	            this.state = 6665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57) {
	                this.state = 6662;
	                this.match(SnowflakeParser.AUTO_REFRESH);
	                this.state = 6663;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6664;
	                this.true_false();
	            }

	            this.state = 6668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===507) {
	                this.state = 6667;
	                this.pattern();
	            }

	            this.state = 6670;
	            this.file_format();
	            this.state = 6674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 6671;
	                this.match(SnowflakeParser.AWS_SNS_TOPIC);
	                this.state = 6672;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6673;
	                this.string();
	            }

	            this.state = 6677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 6676;
	                this.copy_grants();
	            }

	            this.state = 6680;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,742,this._ctx);
	            if(la_===1) {
	                this.state = 6679;
	                this.with_row_access_policy();

	            }
	            this.state = 6683;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===715 || _la===805) {
	                this.state = 6682;
	                this.with_tags();
	            }

	            this.state = 6686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 6685;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6688;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 6689;
	                this.or_replace();
	            }

	            this.state = 6692;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 6693;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 6695;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,746,this._ctx);
	            if(la_===1) {
	                this.state = 6694;
	                this.if_not_exists();

	            }
	            this.state = 6697;
	            this.object_name();
	            this.state = 6698;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6699;
	            this.external_table_column_decl_list();
	            this.state = 6700;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 6702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===337) {
	                this.state = 6701;
	                this.cloud_provider_params3();
	            }

	            this.state = 6705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===491) {
	                this.state = 6704;
	                this.partition_by();
	            }

	            this.state = 6708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===805) {
	                this.state = 6707;
	                this.match(SnowflakeParser.WITH);
	            }

	            this.state = 6710;
	            this.match(SnowflakeParser.LOCATION);
	            this.state = 6711;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6712;
	            this.named_stage();
	            this.state = 6713;
	            this.match(SnowflakeParser.PARTITION_TYPE);
	            this.state = 6714;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6715;
	            this.match(SnowflakeParser.USER_SPECIFIED);
	            this.state = 6716;
	            this.file_format();
	            this.state = 6718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 6717;
	                this.copy_grants();
	            }

	            this.state = 6721;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,751,this._ctx);
	            if(la_===1) {
	                this.state = 6720;
	                this.with_row_access_policy();

	            }
	            this.state = 6724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===715 || _la===805) {
	                this.state = 6723;
	                this.with_tags();
	            }

	            this.state = 6727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 6726;
	                this.comment_clause();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6729;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 6730;
	                this.or_replace();
	            }

	            this.state = 6733;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 6734;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 6736;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,755,this._ctx);
	            if(la_===1) {
	                this.state = 6735;
	                this.if_not_exists();

	            }
	            this.state = 6738;
	            this.object_name();
	            this.state = 6739;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6740;
	            this.external_table_column_decl_list();
	            this.state = 6741;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 6743;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===337) {
	                this.state = 6742;
	                this.cloud_provider_params3();
	            }

	            this.state = 6746;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===491) {
	                this.state = 6745;
	                this.partition_by();
	            }

	            this.state = 6749;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===805) {
	                this.state = 6748;
	                this.match(SnowflakeParser.WITH);
	            }

	            this.state = 6751;
	            this.match(SnowflakeParser.LOCATION);
	            this.state = 6752;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6753;
	            this.named_stage();
	            this.state = 6754;
	            this.match(SnowflakeParser.PARTITION_TYPE);
	            this.state = 6755;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6756;
	            this.match(SnowflakeParser.USER_SPECIFIED);
	            this.state = 6757;
	            this.file_format();
	            this.state = 6761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===713) {
	                this.state = 6758;
	                this.match(SnowflakeParser.TABLE_FORMAT);
	                this.state = 6759;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6760;
	                this.match(SnowflakeParser.DELTA);
	            }

	            this.state = 6764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 6763;
	                this.copy_grants();
	            }

	            this.state = 6767;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,761,this._ctx);
	            if(la_===1) {
	                this.state = 6766;
	                this.with_row_access_policy();

	            }
	            this.state = 6770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===715 || _la===805) {
	                this.state = 6769;
	                this.with_tags();
	            }

	            this.state = 6773;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 6772;
	                this.comment_clause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_table_column_decl() {
	    let localctx = new External_table_column_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, SnowflakeParser.RULE_external_table_column_decl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6777;
	        this.column_name();
	        this.state = 6778;
	        this.data_type();
	        this.state = 6779;
	        this.match(SnowflakeParser.AS);
	        this.state = 6782;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,765,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6780;
	            this.expr(0);
	            break;

	        case 2:
	            this.state = 6781;
	            this.id_();
	            break;

	        }
	        this.state = 6785;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===144 || _la===271 || _la===524 || _la===767) {
	            this.state = 6784;
	            this.inline_constraint();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_table_column_decl_list() {
	    let localctx = new External_table_column_decl_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, SnowflakeParser.RULE_external_table_column_decl_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6787;
	        this.external_table_column_decl();
	        this.state = 6792;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 6788;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 6789;
	            this.external_table_column_decl();
	            this.state = 6794;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	full_acct() {
	    let localctx = new Full_acctContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, SnowflakeParser.RULE_full_acct);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6795;
	        this.id_();
	        this.state = 6796;
	        this.match(SnowflakeParser.DOT);
	        this.state = 6797;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integration_type_name() {
	    let localctx = new Integration_type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, SnowflakeParser.RULE_integration_type_name);
	    try {
	        this.state = 6803;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 630:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6799;
	            this.match(SnowflakeParser.SECURITY);
	            this.state = 6800;
	            this.match(SnowflakeParser.INTEGRATIONS);
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6801;
	            this.match(SnowflakeParser.API);
	            this.state = 6802;
	            this.match(SnowflakeParser.INTEGRATIONS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_failover_group() {
	    let localctx = new Create_failover_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, SnowflakeParser.RULE_create_failover_group);
	    var _la = 0;
	    try {
	        this.state = 6894;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,781,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6805;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6806;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 6807;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 6809;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,769,this._ctx);
	            if(la_===1) {
	                this.state = 6808;
	                this.if_not_exists();

	            }
	            this.state = 6811;
	            this.id_();
	            this.state = 6812;
	            this.match(SnowflakeParser.OBJECT_TYPES);
	            this.state = 6813;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6814;
	            this.object_type();
	            this.state = 6819;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 6815;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6816;
	                this.object_type();
	                this.state = 6821;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 6822;
	                this.match(SnowflakeParser.ALLOWED_DATABASES);
	                this.state = 6823;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6824;
	                this.id_();
	                this.state = 6829;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 6825;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 6826;
	                    this.id_();
	                    this.state = 6831;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6844;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 6834;
	                this.match(SnowflakeParser.ALLOWED_SHARES);
	                this.state = 6835;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6836;
	                this.id_();
	                this.state = 6841;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 6837;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 6838;
	                    this.id_();
	                    this.state = 6843;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6856;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 6846;
	                this.match(SnowflakeParser.ALLOWED_INTEGRATION_TYPES);
	                this.state = 6847;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6848;
	                this.integration_type_name();
	                this.state = 6853;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 6849;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 6850;
	                    this.integration_type_name();
	                    this.state = 6855;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6858;
	            this.match(SnowflakeParser.ALLOWED_ACCOUNTS);
	            this.state = 6859;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6860;
	            this.full_acct();
	            this.state = 6865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 6861;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 6862;
	                this.full_acct();
	                this.state = 6867;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===315) {
	                this.state = 6868;
	                this.match(SnowflakeParser.IGNORE);
	                this.state = 6869;
	                this.match(SnowflakeParser.EDITION);
	                this.state = 6870;
	                this.match(SnowflakeParser.CHECK);
	            }

	            this.state = 6876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===564) {
	                this.state = 6873;
	                this.match(SnowflakeParser.REPLICATION_SCHEDULE);
	                this.state = 6874;
	                this.match(SnowflakeParser.EQ);
	                this.state = 6875;
	                this.string();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6878;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6879;
	            this.match(SnowflakeParser.FAILOVER);
	            this.state = 6880;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 6882;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,780,this._ctx);
	            if(la_===1) {
	                this.state = 6881;
	                this.if_not_exists();

	            }
	            this.state = 6884;
	            this.id_();
	            this.state = 6885;
	            this.match(SnowflakeParser.AS);
	            this.state = 6886;
	            this.match(SnowflakeParser.REPLICA);
	            this.state = 6887;
	            this.match(SnowflakeParser.OF);
	            this.state = 6888;
	            this.id_();
	            this.state = 6889;
	            this.match(SnowflakeParser.DOT);
	            this.state = 6890;
	            this.id_();
	            this.state = 6891;
	            this.match(SnowflakeParser.DOT);
	            this.state = 6892;
	            this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_fileformat() {
	    let localctx = new Type_fileformatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, SnowflakeParser.RULE_type_fileformat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6896;
	        _la = this._input.LA(1);
	        if(!(_la===61 || _la===62 || _la===155 || _la===156 || _la===349 || _la===350 || ((((_la - 473)) & ~0x1f) === 0 && ((1 << (_la - 473)) & 98307) !== 0) || _la===813 || _la===814)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_file_format() {
	    let localctx = new Create_file_formatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, SnowflakeParser.RULE_create_file_format);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6898;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 6900;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 6899;
	            this.or_replace();
	        }

	        this.state = 6902;
	        this.match(SnowflakeParser.FILE);
	        this.state = 6903;
	        this.match(SnowflakeParser.FORMAT);
	        this.state = 6905;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,783,this._ctx);
	        if(la_===1) {
	            this.state = 6904;
	            this.if_not_exists();

	        }
	        this.state = 6907;
	        this.object_name();
	        this.state = 6911;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===764) {
	            this.state = 6908;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 6909;
	            this.match(SnowflakeParser.EQ);
	            this.state = 6910;
	            this.type_fileformat();
	        }

	        this.state = 6916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===25 || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4611) !== 0) || _la===136 || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 100679681) !== 0) || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 13107489) !== 0) || ((((_la - 259)) & ~0x1f) === 0 && ((1 << (_la - 259)) & 19) !== 0) || _la===300 || _la===316 || _la===381 || _la===425 || _la===440 || ((((_la - 520)) & ~0x1f) === 0 && ((1 << (_la - 520)) & 142606337) !== 0) || _la===561 || ((((_la - 651)) & ~0x1f) === 0 && ((1 << (_la - 651)) & 211) !== 0) || ((((_la - 694)) & ~0x1f) === 0 && ((1 << (_la - 694)) & 7) !== 0) || ((((_la - 729)) & ~0x1f) === 0 && ((1 << (_la - 729)) & 268443649) !== 0) || _la===819) {
	            this.state = 6913;
	            this.format_type_options();
	            this.state = 6918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 6919;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_decl() {
	    let localctx = new Arg_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, SnowflakeParser.RULE_arg_decl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6922;
	        this.arg_name();
	        this.state = 6923;
	        this.arg_data_type();
	        this.state = 6925;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===174) {
	            this.state = 6924;
	            this.arg_default_value_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_default_value_clause() {
	    let localctx = new Arg_default_value_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, SnowflakeParser.RULE_arg_default_value_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6927;
	        this.match(SnowflakeParser.DEFAULT);
	        this.state = 6928;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	col_decl() {
	    let localctx = new Col_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, SnowflakeParser.RULE_col_decl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6930;
	        this.column_name();
	        this.state = 6931;
	        this.data_type();
	        this.state = 6933;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43) {
	            this.state = 6932;
	            this.virtual_column_decl();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	virtual_column_decl() {
	    let localctx = new Virtual_column_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, SnowflakeParser.RULE_virtual_column_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6935;
	        this.match(SnowflakeParser.AS);
	        this.state = 6936;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 6937;
	        this.function_call();
	        this.state = 6938;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_definition() {
	    let localctx = new Function_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, SnowflakeParser.RULE_function_definition);
	    try {
	        this.state = 6942;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 869:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6940;
	            this.string();
	            break;
	        case 868:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6941;
	            this.match(SnowflakeParser.DBL_DOLLAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_function() {
	    let localctx = new Create_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, SnowflakeParser.RULE_create_function);
	    var _la = 0;
	    try {
	        this.state = 7115;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,821,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6944;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 6946;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 6945;
	                this.or_replace();
	            }

	            this.state = 6949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===629) {
	                this.state = 6948;
	                this.match(SnowflakeParser.SECURE);
	            }

	            this.state = 6951;
	            this.match(SnowflakeParser.FUNCTION);
	            this.state = 6953;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,792,this._ctx);
	            if(la_===1) {
	                this.state = 6952;
	                this.if_not_exists();

	            }
	            this.state = 6955;
	            this.object_name();
	            this.state = 6956;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 6965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 6957;
	                this.arg_decl();
	                this.state = 6962;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 6958;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 6959;
	                    this.arg_decl();
	                    this.state = 6964;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6967;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 6968;
	            this.match(SnowflakeParser.RETURNS);
	            this.state = 6983;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 110:
	            case 111:
	            case 336:
	            case 441:
	            case 454:
	            case 724:
	            case 727:
	            case 731:
	            case 733:
	            case 737:
	            case 820:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	                this.state = 6969;
	                this.data_type();
	                break;
	            case 708:
	                this.state = 6970;
	                this.match(SnowflakeParser.TABLE);
	                this.state = 6971;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 6980;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 6972;
	                    this.col_decl();
	                    this.state = 6977;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===894) {
	                        this.state = 6973;
	                        this.match(SnowflakeParser.COMMA);
	                        this.state = 6974;
	                        this.col_decl();
	                        this.state = 6979;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 6982;
	                this.match(SnowflakeParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6986;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===429 || _la===439) {
	                this.state = 6985;
	                this.null_not_null();
	            }

	            this.state = 6990;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===357) {
	                this.state = 6988;
	                this.match(SnowflakeParser.LANGUAGE);
	                this.state = 6989;
	                _la = this._input.LA(1);
	                if(!(_la===343 || _la===344 || _la===535 || _la===668)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 7002;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 99:
	            	this.state = 6992;
	            	this.match(SnowflakeParser.CALLED);
	            	this.state = 6993;
	            	this.match(SnowflakeParser.ON);
	            	this.state = 6994;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 6995;
	            	this.match(SnowflakeParser.INPUT);
	            	break;
	            case 578:
	            	this.state = 6996;
	            	this.match(SnowflakeParser.RETURNS);
	            	this.state = 6997;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 6998;
	            	this.match(SnowflakeParser.ON);
	            	this.state = 6999;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7000;
	            	this.match(SnowflakeParser.INPUT);
	            	break;
	            case 692:
	            	this.state = 7001;
	            	this.match(SnowflakeParser.STRICT);
	            	break;
	            case 43:
	            case 134:
	            case 303:
	            case 320:
	            case 323:
	            case 485:
	            case 601:
	            case 795:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 7005;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===320 || _la===795) {
	                this.state = 7004;
	                _la = this._input.LA(1);
	                if(!(_la===320 || _la===795)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 7013;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,802,this._ctx);
	            if(la_===1) {
	                this.state = 7007;
	                this.match(SnowflakeParser.PACKAGES);
	                this.state = 7008;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7009;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7010;
	                this.string_list();
	                this.state = 7011;
	                this.match(SnowflakeParser.RR_BRACKET);

	            }
	            this.state = 7021;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===601) {
	                this.state = 7015;
	                this.match(SnowflakeParser.RUNTIME_VERSION);
	                this.state = 7016;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7019;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 869:
	                    this.state = 7017;
	                    this.string();
	                    break;
	                case 871:
	                    this.state = 7018;
	                    this.match(SnowflakeParser.FLOAT);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 7029;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===323) {
	                this.state = 7023;
	                this.match(SnowflakeParser.IMPORTS);
	                this.state = 7024;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7025;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7026;
	                this.string_list();
	                this.state = 7027;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 7037;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===485) {
	                this.state = 7031;
	                this.match(SnowflakeParser.PACKAGES);
	                this.state = 7032;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7033;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7034;
	                this.string_list();
	                this.state = 7035;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 7042;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===303) {
	                this.state = 7039;
	                this.match(SnowflakeParser.HANDLER);
	                this.state = 7040;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7041;
	                this.string();
	            }

	            this.state = 7045;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 7044;
	                this.comment_clause();
	            }

	            this.state = 7047;
	            this.match(SnowflakeParser.AS);
	            this.state = 7048;
	            this.function_definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7050;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7052;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 7051;
	                this.or_replace();
	            }

	            this.state = 7055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===629) {
	                this.state = 7054;
	                this.match(SnowflakeParser.SECURE);
	            }

	            this.state = 7057;
	            this.match(SnowflakeParser.FUNCTION);
	            this.state = 7058;
	            this.object_name();
	            this.state = 7059;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 7060;
	                this.arg_decl();
	                this.state = 7065;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 7061;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 7062;
	                    this.arg_decl();
	                    this.state = 7067;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7070;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 7071;
	            this.match(SnowflakeParser.RETURNS);
	            this.state = 7086;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 110:
	            case 111:
	            case 336:
	            case 441:
	            case 454:
	            case 724:
	            case 727:
	            case 731:
	            case 733:
	            case 737:
	            case 820:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	                this.state = 7072;
	                this.data_type();
	                break;
	            case 708:
	                this.state = 7073;
	                this.match(SnowflakeParser.TABLE);
	                this.state = 7074;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7083;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 7075;
	                    this.col_decl();
	                    this.state = 7080;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===894) {
	                        this.state = 7076;
	                        this.match(SnowflakeParser.COMMA);
	                        this.state = 7077;
	                        this.col_decl();
	                        this.state = 7082;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 7085;
	                this.match(SnowflakeParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7089;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===429 || _la===439) {
	                this.state = 7088;
	                this.null_not_null();
	            }

	            this.state = 7101;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 99:
	            	this.state = 7091;
	            	this.match(SnowflakeParser.CALLED);
	            	this.state = 7092;
	            	this.match(SnowflakeParser.ON);
	            	this.state = 7093;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7094;
	            	this.match(SnowflakeParser.INPUT);
	            	break;
	            case 578:
	            	this.state = 7095;
	            	this.match(SnowflakeParser.RETURNS);
	            	this.state = 7096;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7097;
	            	this.match(SnowflakeParser.ON);
	            	this.state = 7098;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7099;
	            	this.match(SnowflakeParser.INPUT);
	            	break;
	            case 692:
	            	this.state = 7100;
	            	this.match(SnowflakeParser.STRICT);
	            	break;
	            case 43:
	            case 134:
	            case 320:
	            case 399:
	            case 795:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 7104;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===320 || _la===795) {
	                this.state = 7103;
	                _la = this._input.LA(1);
	                if(!(_la===320 || _la===795)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 7107;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===399) {
	                this.state = 7106;
	                this.match(SnowflakeParser.MEMOIZABLE);
	            }

	            this.state = 7110;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 7109;
	                this.comment_clause();
	            }

	            this.state = 7112;
	            this.match(SnowflakeParser.AS);
	            this.state = 7113;
	            this.function_definition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_managed_account() {
	    let localctx = new Create_managed_accountContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, SnowflakeParser.RULE_create_managed_account);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7117;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7118;
	        this.match(SnowflakeParser.MANAGED);
	        this.state = 7119;
	        this.match(SnowflakeParser.ACCOUNT);
	        this.state = 7120;
	        this.id_();
	        this.state = 7121;
	        this.match(SnowflakeParser.ADMIN_NAME);
	        this.state = 7122;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7123;
	        this.id_();
	        this.state = 7124;
	        this.match(SnowflakeParser.COMMA);
	        this.state = 7125;
	        this.match(SnowflakeParser.ADMIN_PASSWORD);
	        this.state = 7126;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7127;
	        this.string();
	        this.state = 7128;
	        this.match(SnowflakeParser.COMMA);
	        this.state = 7129;
	        this.match(SnowflakeParser.TYPE);
	        this.state = 7130;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7131;
	        this.match(SnowflakeParser.READER);
	        this.state = 7134;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===894) {
	            this.state = 7132;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 7133;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_masking_policy() {
	    let localctx = new Create_masking_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, SnowflakeParser.RULE_create_masking_policy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7136;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7138;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 7137;
	            this.or_replace();
	        }

	        this.state = 7140;
	        this.match(SnowflakeParser.MASKING);
	        this.state = 7141;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 7143;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,824,this._ctx);
	        if(la_===1) {
	            this.state = 7142;
	            this.if_not_exists();

	        }
	        this.state = 7145;
	        this.object_name();
	        this.state = 7146;
	        this.match(SnowflakeParser.AS);
	        this.state = 7147;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 7148;
	        this.arg_name();
	        this.state = 7149;
	        this.arg_data_type();
	        this.state = 7154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===894) {
	            this.state = 7150;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 7151;
	            this.arg_name();
	            this.state = 7152;
	            this.arg_data_type();
	        }

	        this.state = 7156;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 7157;
	        this.match(SnowflakeParser.RETURNS);
	        this.state = 7158;
	        this.arg_data_type();
	        this.state = 7159;
	        this.match(SnowflakeParser.ARROW);
	        this.state = 7160;
	        this.expr(0);
	        this.state = 7162;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 7161;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tag_decl() {
	    let localctx = new Tag_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, SnowflakeParser.RULE_tag_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7164;
	        this.object_name();
	        this.state = 7165;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7166;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_list_in_parentheses() {
	    let localctx = new Column_list_in_parenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, SnowflakeParser.RULE_column_list_in_parentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7168;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 7169;
	        this.column_list();
	        this.state = 7170;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_materialized_view() {
	    let localctx = new Create_materialized_viewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, SnowflakeParser.RULE_create_materialized_view);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7172;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7174;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 7173;
	            this.or_replace();
	        }

	        this.state = 7177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===629) {
	            this.state = 7176;
	            this.match(SnowflakeParser.SECURE);
	        }

	        this.state = 7179;
	        this.match(SnowflakeParser.MATERIALIZED);
	        this.state = 7180;
	        this.match(SnowflakeParser.VIEW);
	        this.state = 7182;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,829,this._ctx);
	        if(la_===1) {
	            this.state = 7181;
	            this.if_not_exists();

	        }
	        this.state = 7184;
	        this.object_name();
	        this.state = 7189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===888) {
	            this.state = 7185;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7186;
	            this.column_list_with_comment();
	            this.state = 7187;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 7194;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,831,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7191;
	                this.view_col(); 
	            }
	            this.state = 7196;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,831,this._ctx);
	        }

	        this.state = 7198;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,832,this._ctx);
	        if(la_===1) {
	            this.state = 7197;
	            this.with_row_access_policy();

	        }
	        this.state = 7201;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===715 || _la===805) {
	            this.state = 7200;
	            this.with_tags();
	        }

	        this.state = 7204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 7203;
	            this.copy_grants();
	        }

	        this.state = 7207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 7206;
	            this.comment_clause();
	        }

	        this.state = 7210;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 7209;
	            this.cluster_by();
	        }

	        this.state = 7212;
	        this.match(SnowflakeParser.AS);
	        this.state = 7213;
	        this.select_statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_network_policy() {
	    let localctx = new Create_network_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, SnowflakeParser.RULE_create_network_policy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7215;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7217;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 7216;
	            this.or_replace();
	        }

	        this.state = 7219;
	        this.match(SnowflakeParser.NETWORK);
	        this.state = 7220;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 7221;
	        this.id_();
	        this.state = 7222;
	        this.match(SnowflakeParser.ALLOWED_IP_LIST);
	        this.state = 7223;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7224;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 7226;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===869) {
	            this.state = 7225;
	            this.string_list();
	        }

	        this.state = 7228;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 7236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 7229;
	            this.match(SnowflakeParser.BLOCKED_IP_LIST);
	            this.state = 7230;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7231;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===869) {
	                this.state = 7232;
	                this.string_list();
	            }

	            this.state = 7235;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 7239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 7238;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cloud_provider_params_auto() {
	    let localctx = new Cloud_provider_params_autoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, SnowflakeParser.RULE_cloud_provider_params_auto);
	    try {
	        this.state = 7257;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,842,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7241;
	            this.match(SnowflakeParser.NOTIFICATION_PROVIDER);
	            this.state = 7242;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7243;
	            this.match(SnowflakeParser.GCP_PUBSUB);
	            this.state = 7244;
	            this.match(SnowflakeParser.GCP_PUBSUB_SUBSCRIPTION_NAME);
	            this.state = 7245;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7246;
	            this.string();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7247;
	            this.match(SnowflakeParser.NOTIFICATION_PROVIDER);
	            this.state = 7248;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7249;
	            this.match(SnowflakeParser.AZURE_EVENT_GRID);
	            this.state = 7250;
	            this.match(SnowflakeParser.AZURE_STORAGE_QUEUE_PRIMARY_URI);
	            this.state = 7251;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7252;
	            this.string();
	            this.state = 7253;
	            this.match(SnowflakeParser.AZURE_TENANT_ID);
	            this.state = 7254;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7255;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cloud_provider_params_push() {
	    let localctx = new Cloud_provider_params_pushContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, SnowflakeParser.RULE_cloud_provider_params_push);
	    try {
	        this.state = 7285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,843,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7259;
	            this.match(SnowflakeParser.NOTIFICATION_PROVIDER);
	            this.state = 7260;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7261;
	            this.match(SnowflakeParser.AWS_SNS);
	            this.state = 7262;
	            this.match(SnowflakeParser.AWS_SNS_TOPIC_ARN);
	            this.state = 7263;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7264;
	            this.string();
	            this.state = 7265;
	            this.match(SnowflakeParser.AWS_SNS_ROLE_ARN);
	            this.state = 7266;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7267;
	            this.string();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7269;
	            this.match(SnowflakeParser.NOTIFICATION_PROVIDER);
	            this.state = 7270;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7271;
	            this.match(SnowflakeParser.GCP_PUBSUB);
	            this.state = 7272;
	            this.match(SnowflakeParser.GCP_PUBSUB_TOPIC_NAME);
	            this.state = 7273;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7274;
	            this.string();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7275;
	            this.match(SnowflakeParser.NOTIFICATION_PROVIDER);
	            this.state = 7276;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7277;
	            this.match(SnowflakeParser.AZURE_EVENT_GRID);
	            this.state = 7278;
	            this.match(SnowflakeParser.AZURE_EVENT_GRID_TOPIC_ENDPOINT);
	            this.state = 7279;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7280;
	            this.string();
	            this.state = 7281;
	            this.match(SnowflakeParser.AZURE_TENANT_ID);
	            this.state = 7282;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7283;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_notification_integration() {
	    let localctx = new Create_notification_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, SnowflakeParser.RULE_create_notification_integration);
	    var _la = 0;
	    try {
	        this.state = 7330;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,850,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7287;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 7288;
	                this.or_replace();
	            }

	            this.state = 7291;
	            this.match(SnowflakeParser.NOTIFICATION);
	            this.state = 7292;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 7294;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,845,this._ctx);
	            if(la_===1) {
	                this.state = 7293;
	                this.if_not_exists();

	            }
	            this.state = 7296;
	            this.id_();
	            this.state = 7297;
	            this.match(SnowflakeParser.ENABLED);
	            this.state = 7298;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7299;
	            this.true_false();
	            this.state = 7300;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 7301;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7302;
	            this.match(SnowflakeParser.QUEUE);
	            this.state = 7303;
	            this.cloud_provider_params_auto();
	            this.state = 7305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 7304;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7307;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7309;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 7308;
	                this.or_replace();
	            }

	            this.state = 7311;
	            this.match(SnowflakeParser.NOTIFICATION);
	            this.state = 7312;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 7314;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,848,this._ctx);
	            if(la_===1) {
	                this.state = 7313;
	                this.if_not_exists();

	            }
	            this.state = 7316;
	            this.id_();
	            this.state = 7317;
	            this.match(SnowflakeParser.ENABLED);
	            this.state = 7318;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7319;
	            this.true_false();
	            this.state = 7320;
	            this.match(SnowflakeParser.DIRECTION);
	            this.state = 7321;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7322;
	            this.match(SnowflakeParser.OUTBOUND);
	            this.state = 7323;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 7324;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7325;
	            this.match(SnowflakeParser.QUEUE);
	            this.state = 7326;
	            this.cloud_provider_params_push();
	            this.state = 7328;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 7327;
	                this.comment_clause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_pipe() {
	    let localctx = new Create_pipeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, SnowflakeParser.RULE_create_pipe);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7332;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 7333;
	            this.or_replace();
	        }

	        this.state = 7336;
	        this.match(SnowflakeParser.PIPE);
	        this.state = 7338;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,852,this._ctx);
	        if(la_===1) {
	            this.state = 7337;
	            this.if_not_exists();

	        }
	        this.state = 7340;
	        this.object_name();
	        this.state = 7344;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 7341;
	            this.match(SnowflakeParser.AUTO_INGEST);
	            this.state = 7342;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7343;
	            this.true_false();
	        }

	        this.state = 7349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===225) {
	            this.state = 7346;
	            this.match(SnowflakeParser.ERROR_INTEGRATION);
	            this.state = 7347;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7348;
	            this.id_();
	        }

	        this.state = 7354;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 7351;
	            this.match(SnowflakeParser.AWS_SNS_TOPIC);
	            this.state = 7352;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7353;
	            this.string();
	        }

	        this.state = 7359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===337) {
	            this.state = 7356;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 7357;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7358;
	            this.string();
	        }

	        this.state = 7362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 7361;
	            this.comment_clause();
	        }

	        this.state = 7364;
	        this.match(SnowflakeParser.AS);
	        this.state = 7365;
	        this.copy_into_table();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caller_owner() {
	    let localctx = new Caller_ownerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, SnowflakeParser.RULE_caller_owner);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7367;
	        _la = this._input.LA(1);
	        if(!(_la===100 || _la===483)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executa_as() {
	    let localctx = new Executa_asContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, SnowflakeParser.RULE_executa_as);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7369;
	        this.match(SnowflakeParser.EXECUTE);
	        this.state = 7370;
	        this.match(SnowflakeParser.AS);
	        this.state = 7371;
	        this.caller_owner();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure_definition() {
	    let localctx = new Procedure_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, SnowflakeParser.RULE_procedure_definition);
	    try {
	        this.state = 7375;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 869:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7373;
	            this.string();
	            break;
	        case 868:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7374;
	            this.match(SnowflakeParser.DBL_DOLLAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	not_null() {
	    let localctx = new Not_nullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, SnowflakeParser.RULE_not_null);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7377;
	        this.match(SnowflakeParser.NOT);
	        this.state = 7378;
	        this.match(SnowflakeParser.NULL_);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_procedure() {
	    let localctx = new Create_procedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, SnowflakeParser.RULE_create_procedure);
	    var _la = 0;
	    try {
	        this.state = 7567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,890,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7380;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 7381;
	                this.or_replace();
	            }

	            this.state = 7384;
	            this.match(SnowflakeParser.PROCEDURE);
	            this.state = 7385;
	            this.object_name();
	            this.state = 7386;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 7387;
	                this.arg_decl();
	                this.state = 7392;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 7388;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 7389;
	                    this.arg_decl();
	                    this.state = 7394;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7397;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 7398;
	            this.match(SnowflakeParser.RETURNS);
	            this.state = 7413;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 110:
	            case 111:
	            case 336:
	            case 441:
	            case 454:
	            case 724:
	            case 727:
	            case 731:
	            case 733:
	            case 737:
	            case 820:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	                this.state = 7399;
	                this.data_type();
	                break;
	            case 708:
	                this.state = 7400;
	                this.match(SnowflakeParser.TABLE);
	                this.state = 7401;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7410;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 7402;
	                    this.col_decl();
	                    this.state = 7407;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===894) {
	                        this.state = 7403;
	                        this.match(SnowflakeParser.COMMA);
	                        this.state = 7404;
	                        this.col_decl();
	                        this.state = 7409;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 7412;
	                this.match(SnowflakeParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7416;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===429) {
	                this.state = 7415;
	                this.not_null();
	            }

	            this.state = 7418;
	            this.match(SnowflakeParser.LANGUAGE);
	            this.state = 7419;
	            this.match(SnowflakeParser.SQL);
	            this.state = 7430;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 99:
	            	this.state = 7420;
	            	this.match(SnowflakeParser.CALLED);
	            	this.state = 7421;
	            	this.match(SnowflakeParser.ON);
	            	this.state = 7422;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7423;
	            	this.match(SnowflakeParser.INPUT);
	            	break;
	            case 578:
	            	this.state = 7424;
	            	this.match(SnowflakeParser.RETURNS);
	            	this.state = 7425;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7426;
	            	this.match(SnowflakeParser.ON);
	            	this.state = 7427;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7428;
	            	this.match(SnowflakeParser.INPUT);
	            	break;
	            case 692:
	            	this.state = 7429;
	            	this.match(SnowflakeParser.STRICT);
	            	break;
	            case 43:
	            case 134:
	            case 234:
	            case 320:
	            case 795:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 7433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===320 || _la===795) {
	                this.state = 7432;
	                _la = this._input.LA(1);
	                if(!(_la===320 || _la===795)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 7436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 7435;
	                this.comment_clause();
	            }

	            this.state = 7439;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===234) {
	                this.state = 7438;
	                this.executa_as();
	            }

	            this.state = 7441;
	            this.match(SnowflakeParser.AS);
	            this.state = 7442;
	            this.procedure_definition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7444;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 7445;
	                this.or_replace();
	            }

	            this.state = 7449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===629) {
	                this.state = 7448;
	                this.match(SnowflakeParser.SECURE);
	            }

	            this.state = 7451;
	            this.match(SnowflakeParser.PROCEDURE);
	            this.state = 7452;
	            this.object_name();
	            this.state = 7453;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 7454;
	                this.arg_decl();
	                this.state = 7459;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 7455;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 7456;
	                    this.arg_decl();
	                    this.state = 7461;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7464;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 7465;
	            this.match(SnowflakeParser.RETURNS);
	            this.state = 7466;
	            this.data_type();
	            this.state = 7468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===429) {
	                this.state = 7467;
	                this.not_null();
	            }

	            this.state = 7470;
	            this.match(SnowflakeParser.LANGUAGE);
	            this.state = 7471;
	            this.match(SnowflakeParser.JAVASCRIPT);
	            this.state = 7482;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 99:
	            	this.state = 7472;
	            	this.match(SnowflakeParser.CALLED);
	            	this.state = 7473;
	            	this.match(SnowflakeParser.ON);
	            	this.state = 7474;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7475;
	            	this.match(SnowflakeParser.INPUT);
	            	break;
	            case 578:
	            	this.state = 7476;
	            	this.match(SnowflakeParser.RETURNS);
	            	this.state = 7477;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7478;
	            	this.match(SnowflakeParser.ON);
	            	this.state = 7479;
	            	this.match(SnowflakeParser.NULL_);
	            	this.state = 7480;
	            	this.match(SnowflakeParser.INPUT);
	            	break;
	            case 692:
	            	this.state = 7481;
	            	this.match(SnowflakeParser.STRICT);
	            	break;
	            case 43:
	            case 134:
	            case 234:
	            case 320:
	            case 795:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 7485;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===320 || _la===795) {
	                this.state = 7484;
	                _la = this._input.LA(1);
	                if(!(_la===320 || _la===795)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 7488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 7487;
	                this.comment_clause();
	            }

	            this.state = 7491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===234) {
	                this.state = 7490;
	                this.executa_as();
	            }

	            this.state = 7493;
	            this.match(SnowflakeParser.AS);
	            this.state = 7494;
	            this.procedure_definition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7496;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7498;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 7497;
	                this.or_replace();
	            }

	            this.state = 7501;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===629) {
	                this.state = 7500;
	                this.match(SnowflakeParser.SECURE);
	            }

	            this.state = 7503;
	            this.match(SnowflakeParser.PROCEDURE);
	            this.state = 7504;
	            this.object_name();
	            this.state = 7505;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 7506;
	                this.arg_decl();
	                this.state = 7511;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 7507;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 7508;
	                    this.arg_decl();
	                    this.state = 7513;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7516;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 7517;
	            this.match(SnowflakeParser.RETURNS);
	            this.state = 7535;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 110:
	            case 111:
	            case 336:
	            case 441:
	            case 454:
	            case 724:
	            case 727:
	            case 731:
	            case 733:
	            case 737:
	            case 820:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	                this.state = 7518;
	                this.data_type();
	                this.state = 7520;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===429) {
	                    this.state = 7519;
	                    this.not_null();
	                }

	                break;
	            case 708:
	                this.state = 7522;
	                this.match(SnowflakeParser.TABLE);
	                this.state = 7523;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7532;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 7524;
	                    this.col_decl();
	                    this.state = 7529;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===894) {
	                        this.state = 7525;
	                        this.match(SnowflakeParser.COMMA);
	                        this.state = 7526;
	                        this.col_decl();
	                        this.state = 7531;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 7534;
	                this.match(SnowflakeParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7537;
	            this.match(SnowflakeParser.LANGUAGE);
	            this.state = 7538;
	            this.match(SnowflakeParser.PYTHON);
	            this.state = 7539;
	            this.match(SnowflakeParser.RUNTIME_VERSION);
	            this.state = 7540;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7541;
	            this.string();
	            this.state = 7548;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===323) {
	                this.state = 7542;
	                this.match(SnowflakeParser.IMPORTS);
	                this.state = 7543;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7544;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7545;
	                this.string_list();
	                this.state = 7546;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 7550;
	            this.match(SnowflakeParser.PACKAGES);
	            this.state = 7551;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7552;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7553;
	            this.string_list();
	            this.state = 7554;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 7555;
	            this.match(SnowflakeParser.HANDLER);
	            this.state = 7556;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7557;
	            this.string();
	            this.state = 7559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 7558;
	                this.comment_clause();
	            }

	            this.state = 7562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===234) {
	                this.state = 7561;
	                this.executa_as();
	            }

	            this.state = 7564;
	            this.match(SnowflakeParser.AS);
	            this.state = 7565;
	            this.procedure_definition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_replication_group() {
	    let localctx = new Create_replication_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, SnowflakeParser.RULE_create_replication_group);
	    var _la = 0;
	    try {
	        this.state = 7658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,903,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7569;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7570;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 7571;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 7573;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,891,this._ctx);
	            if(la_===1) {
	                this.state = 7572;
	                this.if_not_exists();

	            }
	            this.state = 7575;
	            this.id_();
	            this.state = 7576;
	            this.match(SnowflakeParser.OBJECT_TYPES);
	            this.state = 7577;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7578;
	            this.object_type();
	            this.state = 7583;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 7579;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 7580;
	                this.object_type();
	                this.state = 7585;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 7596;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 7586;
	                this.match(SnowflakeParser.ALLOWED_DATABASES);
	                this.state = 7587;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7588;
	                this.id_();
	                this.state = 7593;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 7589;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 7590;
	                    this.id_();
	                    this.state = 7595;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 7598;
	                this.match(SnowflakeParser.ALLOWED_SHARES);
	                this.state = 7599;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7600;
	                this.id_();
	                this.state = 7605;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 7601;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 7602;
	                    this.id_();
	                    this.state = 7607;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 7610;
	                this.match(SnowflakeParser.ALLOWED_INTEGRATION_TYPES);
	                this.state = 7611;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7612;
	                this.integration_type_name();
	                this.state = 7617;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===894) {
	                    this.state = 7613;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 7614;
	                    this.integration_type_name();
	                    this.state = 7619;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7622;
	            this.match(SnowflakeParser.ALLOWED_ACCOUNTS);
	            this.state = 7623;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7624;
	            this.full_acct();
	            this.state = 7629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 7625;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 7626;
	                this.full_acct();
	                this.state = 7631;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 7635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===315) {
	                this.state = 7632;
	                this.match(SnowflakeParser.IGNORE);
	                this.state = 7633;
	                this.match(SnowflakeParser.EDITION);
	                this.state = 7634;
	                this.match(SnowflakeParser.CHECK);
	            }

	            this.state = 7640;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===564) {
	                this.state = 7637;
	                this.match(SnowflakeParser.REPLICATION_SCHEDULE);
	                this.state = 7638;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7639;
	                this.string();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7642;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7643;
	            this.match(SnowflakeParser.REPLICATION);
	            this.state = 7644;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 7646;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,902,this._ctx);
	            if(la_===1) {
	                this.state = 7645;
	                this.if_not_exists();

	            }
	            this.state = 7648;
	            this.id_();
	            this.state = 7649;
	            this.match(SnowflakeParser.AS);
	            this.state = 7650;
	            this.match(SnowflakeParser.REPLICA);
	            this.state = 7651;
	            this.match(SnowflakeParser.OF);
	            this.state = 7652;
	            this.id_();
	            this.state = 7653;
	            this.match(SnowflakeParser.DOT);
	            this.state = 7654;
	            this.id_();
	            this.state = 7655;
	            this.match(SnowflakeParser.DOT);
	            this.state = 7656;
	            this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_resource_monitor() {
	    let localctx = new Create_resource_monitorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, SnowflakeParser.RULE_create_resource_monitor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7660;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 7661;
	            this.or_replace();
	        }

	        this.state = 7664;
	        this.match(SnowflakeParser.RESOURCE);
	        this.state = 7665;
	        this.match(SnowflakeParser.MONITOR);
	        this.state = 7666;
	        this.id_();
	        this.state = 7667;
	        this.match(SnowflakeParser.WITH);
	        this.state = 7669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===153) {
	            this.state = 7668;
	            this.credit_quota();
	        }

	        this.state = 7672;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===275) {
	            this.state = 7671;
	            this.frequency();
	        }

	        this.state = 7680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===677) {
	            this.state = 7674;
	            this.match(SnowflakeParser.START_TIMESTAMP);
	            this.state = 7675;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7678;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 7676;
	                this.string();
	                break;
	            case 319:
	                this.state = 7677;
	                this.match(SnowflakeParser.IMMEDIATELY);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 7685;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===218) {
	            this.state = 7682;
	            this.match(SnowflakeParser.END_TIMESTAMP);
	            this.state = 7683;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7684;
	            this.string();
	        }

	        this.state = 7688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===434) {
	            this.state = 7687;
	            this.notify_users();
	        }

	        this.state = 7696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===755) {
	            this.state = 7690;
	            this.match(SnowflakeParser.TRIGGERS);
	            this.state = 7692; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 7691;
	                this.trigger_definition();
	                this.state = 7694; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===465);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_role() {
	    let localctx = new Create_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, SnowflakeParser.RULE_create_role);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7698;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 7699;
	            this.or_replace();
	        }

	        this.state = 7702;
	        this.match(SnowflakeParser.ROLE);
	        this.state = 7704;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,914,this._ctx);
	        if(la_===1) {
	            this.state = 7703;
	            this.if_not_exists();

	        }
	        this.state = 7706;
	        this.id_();
	        this.state = 7708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===715 || _la===805) {
	            this.state = 7707;
	            this.with_tags();
	        }

	        this.state = 7711;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 7710;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_row_access_policy() {
	    let localctx = new Create_row_access_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, SnowflakeParser.RULE_create_row_access_policy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7713;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7715;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 7714;
	            this.or_replace();
	        }

	        this.state = 7717;
	        this.match(SnowflakeParser.ROW);
	        this.state = 7718;
	        this.match(SnowflakeParser.ACCESS);
	        this.state = 7719;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 7721;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,918,this._ctx);
	        if(la_===1) {
	            this.state = 7720;
	            this.if_not_exists();

	        }
	        this.state = 7723;
	        this.id_();
	        this.state = 7724;
	        this.match(SnowflakeParser.AS);
	        this.state = 7725;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 7726;
	        this.arg_decl();
	        this.state = 7731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 7727;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 7728;
	            this.arg_decl();
	            this.state = 7733;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7734;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 7735;
	        this.match(SnowflakeParser.RETURNS);
	        this.state = 7736;
	        this.match(SnowflakeParser.BOOLEAN);
	        this.state = 7737;
	        this.match(SnowflakeParser.ARROW);
	        this.state = 7738;
	        this.expr(0);
	        this.state = 7740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 7739;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_schema() {
	    let localctx = new Create_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, SnowflakeParser.RULE_create_schema);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7742;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 7743;
	            this.or_replace();
	        }

	        this.state = 7747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===754) {
	            this.state = 7746;
	            this.match(SnowflakeParser.TRANSIENT);
	        }

	        this.state = 7749;
	        this.match(SnowflakeParser.SCHEMA);
	        this.state = 7751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,923,this._ctx);
	        if(la_===1) {
	            this.state = 7750;
	            this.if_not_exists();

	        }
	        this.state = 7753;
	        this.schema_name();
	        this.state = 7755;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 7754;
	            this.clone_at_before();
	        }

	        this.state = 7760;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,925,this._ctx);
	        if(la_===1) {
	            this.state = 7757;
	            this.match(SnowflakeParser.WITH);
	            this.state = 7758;
	            this.match(SnowflakeParser.MANAGED);
	            this.state = 7759;
	            this.match(SnowflakeParser.ACCESS);

	        }
	        this.state = 7765;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===166) {
	            this.state = 7762;
	            this.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS);
	            this.state = 7763;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7764;
	            this.num();
	        }

	        this.state = 7770;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===395) {
	            this.state = 7767;
	            this.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS);
	            this.state = 7768;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7769;
	            this.num();
	        }

	        this.state = 7773;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===175) {
	            this.state = 7772;
	            this.default_ddl_collation();
	        }

	        this.state = 7776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===715 || _la===805) {
	            this.state = 7775;
	            this.with_tags();
	        }

	        this.state = 7779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 7778;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_security_integration_external_oauth() {
	    let localctx = new Create_security_integration_external_oauthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, SnowflakeParser.RULE_create_security_integration_external_oauth);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7781;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 7783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 7782;
	            this.or_replace();
	        }

	        this.state = 7785;
	        this.match(SnowflakeParser.SECURITY);
	        this.state = 7786;
	        this.match(SnowflakeParser.INTEGRATION);
	        this.state = 7788;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,932,this._ctx);
	        if(la_===1) {
	            this.state = 7787;
	            this.if_not_exists();

	        }
	        this.state = 7790;
	        this.id_();
	        this.state = 7791;
	        this.match(SnowflakeParser.TYPE);
	        this.state = 7792;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7793;
	        this.match(SnowflakeParser.EXTERNAL_OAUTH);
	        this.state = 7794;
	        this.match(SnowflakeParser.ENABLED);
	        this.state = 7795;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7796;
	        this.true_false();
	        this.state = 7797;
	        this.match(SnowflakeParser.EXTERNAL_OAUTH_TYPE);
	        this.state = 7798;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7799;
	        _la = this._input.LA(1);
	        if(!(_la===71 || _la===161 || _la===460 || _la===511)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7800;
	        this.match(SnowflakeParser.EXTERNAL_OAUTH_ISSUER);
	        this.state = 7801;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7802;
	        this.string();
	        this.state = 7803;
	        this.match(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM);
	        this.state = 7804;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7810;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 869:
	            this.state = 7805;
	            this.string();
	            break;
	        case 888:
	            this.state = 7806;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7807;
	            this.string_list();
	            this.state = 7808;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 7812;
	        this.match(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE);
	        this.state = 7813;
	        this.match(SnowflakeParser.EQ);
	        this.state = 7814;
	        this.string();
	        this.state = 7818;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,934,this._ctx);
	        if(la_===1) {
	            this.state = 7815;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL);
	            this.state = 7816;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7817;
	            this.string();

	        }
	        this.state = 7829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===248) {
	            this.state = 7820;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL);
	            this.state = 7821;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7827;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 7822;
	                this.string();
	                break;
	            case 888:
	                this.state = 7823;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7824;
	                this.string_list();
	                this.state = 7825;
	                this.match(SnowflakeParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 7837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===246) {
	            this.state = 7831;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST);
	            this.state = 7832;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7833;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7834;
	            this.string_list();
	            this.state = 7835;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 7845;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===243) {
	            this.state = 7839;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST);
	            this.state = 7840;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7841;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7842;
	            this.string_list();
	            this.state = 7843;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 7850;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===249) {
	            this.state = 7847;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY);
	            this.state = 7848;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7849;
	            this.string();
	        }

	        this.state = 7855;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===250) {
	            this.state = 7852;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2);
	            this.state = 7853;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7854;
	            this.string();
	        }

	        this.state = 7863;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===245) {
	            this.state = 7857;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST);
	            this.state = 7858;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7859;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 7860;
	            this.string();
	            this.state = 7861;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 7868;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===244) {
	            this.state = 7865;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE);
	            this.state = 7866;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7867;
	            _la = this._input.LA(1);
	            if(!(((((_la - 192)) & ~0x1f) === 0 && ((1 << (_la - 192)) & 327681) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 7873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===251) {
	            this.state = 7870;
	            this.match(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER);
	            this.state = 7871;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7872;
	            this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicit_none() {
	    let localctx = new Implicit_noneContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, SnowflakeParser.RULE_implicit_none);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7875;
	        _la = this._input.LA(1);
	        if(!(_la===321 || _la===425)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_security_integration_snowflake_oauth() {
	    let localctx = new Create_security_integration_snowflake_oauthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, SnowflakeParser.RULE_create_security_integration_snowflake_oauth);
	    var _la = 0;
	    try {
	        this.state = 8004;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,966,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7877;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7879;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 7878;
	                this.or_replace();
	            }

	            this.state = 7881;
	            this.match(SnowflakeParser.SECURITY);
	            this.state = 7882;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 7884;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,945,this._ctx);
	            if(la_===1) {
	                this.state = 7883;
	                this.if_not_exists();

	            }
	            this.state = 7886;
	            this.id_();
	            this.state = 7887;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 7888;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7889;
	            this.match(SnowflakeParser.OAUTH);
	            this.state = 7890;
	            this.match(SnowflakeParser.OAUTH_CLIENT);
	            this.state = 7891;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7892;
	            this.partner_application();
	            this.state = 7893;
	            this.match(SnowflakeParser.OAUTH_REDIRECT_URI);
	            this.state = 7894;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7895;
	            this.string();
	            this.state = 7897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 7896;
	                this.enabled_true_false();
	            }

	            this.state = 7902;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===450) {
	                this.state = 7899;
	                this.match(SnowflakeParser.OAUTH_ISSUE_REFRESH_TOKENS);
	                this.state = 7900;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7901;
	                this.true_false();
	            }

	            this.state = 7907;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===452) {
	                this.state = 7904;
	                this.match(SnowflakeParser.OAUTH_REFRESH_TOKEN_VALIDITY);
	                this.state = 7905;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7906;
	                this.num();
	            }

	            this.state = 7912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===453) {
	                this.state = 7909;
	                this.match(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES);
	                this.state = 7910;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7911;
	                this.implicit_none();
	            }

	            this.state = 7920;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 7914;
	                this.match(SnowflakeParser.BLOCKED_ROLES_LIST);
	                this.state = 7915;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7916;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7917;
	                this.string_list();
	                this.state = 7918;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 7923;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 7922;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7925;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 7927;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 7926;
	                this.or_replace();
	            }

	            this.state = 7929;
	            this.match(SnowflakeParser.SECURITY);
	            this.state = 7930;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 7932;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,953,this._ctx);
	            if(la_===1) {
	                this.state = 7931;
	                this.if_not_exists();

	            }
	            this.state = 7934;
	            this.id_();
	            this.state = 7935;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 7936;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7937;
	            this.match(SnowflakeParser.OAUTH);
	            this.state = 7938;
	            this.match(SnowflakeParser.OAUTH_CLIENT);
	            this.state = 7939;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7940;
	            this.match(SnowflakeParser.CUSTOM);
	            this.state = 7941;
	            this.match(SnowflakeParser.OAUTH_REDIRECT_URI);
	            this.state = 7942;
	            this.match(SnowflakeParser.EQ);
	            this.state = 7943;
	            this.string();
	            this.state = 7945;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 7944;
	                this.enabled_true_false();
	            }

	            this.state = 7950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===445) {
	                this.state = 7947;
	                this.match(SnowflakeParser.OAUTH_ALLOW_NON_TLS_REDIRECT_URI);
	                this.state = 7948;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7949;
	                this.true_false();
	            }

	            this.state = 7955;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===449) {
	                this.state = 7952;
	                this.match(SnowflakeParser.OAUTH_ENFORCE_PKCE);
	                this.state = 7953;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7954;
	                this.true_false();
	            }

	            this.state = 7960;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===453) {
	                this.state = 7957;
	                this.match(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES);
	                this.state = 7958;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7959;
	                this.implicit_none();
	            }

	            this.state = 7968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===523) {
	                this.state = 7962;
	                this.match(SnowflakeParser.PRE_AUTHORIZED_ROLES_LIST);
	                this.state = 7963;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7964;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7965;
	                this.string_list();
	                this.state = 7966;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 7976;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 7970;
	                this.match(SnowflakeParser.BLOCKED_ROLES_LIST);
	                this.state = 7971;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7972;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 7973;
	                this.string_list();
	                this.state = 7974;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 7981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===450) {
	                this.state = 7978;
	                this.match(SnowflakeParser.OAUTH_ISSUE_REFRESH_TOKENS);
	                this.state = 7979;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7980;
	                this.true_false();
	            }

	            this.state = 7986;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===452) {
	                this.state = 7983;
	                this.match(SnowflakeParser.OAUTH_REFRESH_TOKEN_VALIDITY);
	                this.state = 7984;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7985;
	                this.num();
	            }

	            this.state = 7989;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===420) {
	                this.state = 7988;
	                this.network_policy();
	            }

	            this.state = 7994;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===447) {
	                this.state = 7991;
	                this.match(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY);
	                this.state = 7992;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7993;
	                this.string();
	            }

	            this.state = 7999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===448) {
	                this.state = 7996;
	                this.match(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2);
	                this.state = 7997;
	                this.match(SnowflakeParser.EQ);
	                this.state = 7998;
	                this.string();
	            }

	            this.state = 8002;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 8001;
	                this.comment_clause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_security_integration_saml2() {
	    let localctx = new Create_security_integration_saml2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, SnowflakeParser.RULE_create_security_integration_saml2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8006;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 8008;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 8007;
	            this.or_replace();
	        }

	        this.state = 8010;
	        this.match(SnowflakeParser.SECURITY);
	        this.state = 8011;
	        this.match(SnowflakeParser.INTEGRATION);
	        this.state = 8013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===312) {
	            this.state = 8012;
	            this.if_not_exists();
	        }

	        this.state = 8015;
	        this.match(SnowflakeParser.TYPE);
	        this.state = 8016;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8017;
	        this.match(SnowflakeParser.SAML2);
	        this.state = 8018;
	        this.enabled_true_false();
	        this.state = 8019;
	        this.match(SnowflakeParser.SAML2_ISSUER);
	        this.state = 8020;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8021;
	        this.string();
	        this.state = 8022;
	        this.match(SnowflakeParser.SAML2_SSO_URL);
	        this.state = 8023;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8024;
	        this.string();
	        this.state = 8025;
	        this.match(SnowflakeParser.SAML2_PROVIDER);
	        this.state = 8026;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8027;
	        this.string();
	        this.state = 8028;
	        this.match(SnowflakeParser.SAML2_X509_CERT);
	        this.state = 8029;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8030;
	        this.string();
	        this.state = 8034;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===614) {
	            this.state = 8031;
	            this.match(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL);
	            this.state = 8032;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8033;
	            this.string();
	        }

	        this.state = 8039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===604) {
	            this.state = 8036;
	            this.match(SnowflakeParser.SAML2_ENABLE_SP_INITIATED);
	            this.state = 8037;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8038;
	            this.true_false();
	        }

	        this.state = 8044;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===613) {
	            this.state = 8041;
	            this.match(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT);
	            this.state = 8042;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8043;
	            this.string();
	        }

	        this.state = 8049;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===610) {
	            this.state = 8046;
	            this.match(SnowflakeParser.SAML2_SIGN_REQUEST);
	            this.state = 8047;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8048;
	            this.true_false();
	        }

	        this.state = 8054;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===609) {
	            this.state = 8051;
	            this.match(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT);
	            this.state = 8052;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8053;
	            this.string();
	        }

	        this.state = 8059;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===607) {
	            this.state = 8056;
	            this.match(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL);
	            this.state = 8057;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8058;
	            this.string();
	        }

	        this.state = 8064;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===605) {
	            this.state = 8061;
	            this.match(SnowflakeParser.SAML2_FORCE_AUTHN);
	            this.state = 8062;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8063;
	            this.true_false();
	        }

	        this.state = 8069;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===612) {
	            this.state = 8066;
	            this.match(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL);
	            this.state = 8067;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8068;
	            this.string();
	        }

	        this.state = 8074;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===611) {
	            this.state = 8071;
	            this.match(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL);
	            this.state = 8072;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8073;
	            this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_security_integration_scim() {
	    let localctx = new Create_security_integration_scimContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, SnowflakeParser.RULE_create_security_integration_scim);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8076;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 8078;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 8077;
	            this.or_replace();
	        }

	        this.state = 8080;
	        this.match(SnowflakeParser.SECURITY);
	        this.state = 8081;
	        this.match(SnowflakeParser.INTEGRATION);
	        this.state = 8083;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,979,this._ctx);
	        if(la_===1) {
	            this.state = 8082;
	            this.if_not_exists();

	        }
	        this.state = 8085;
	        this.id_();
	        this.state = 8086;
	        this.match(SnowflakeParser.TYPE);
	        this.state = 8087;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8088;
	        this.match(SnowflakeParser.SCIM);
	        this.state = 8089;
	        this.match(SnowflakeParser.SCIM_CLIENT);
	        this.state = 8090;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8091;
	        _la = this._input.LA(1);
	        if(!(_la===76 || _la===286 || _la===462)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 8092;
	        this.match(SnowflakeParser.RUN_AS_ROLE);
	        this.state = 8093;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8094;
	        _la = this._input.LA(1);
	        if(!(_la===1 || _la===287 || _la===461)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 8096;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===420) {
	            this.state = 8095;
	            this.network_policy();
	        }

	        this.state = 8101;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===705) {
	            this.state = 8098;
	            this.match(SnowflakeParser.SYNC_PASSWORD);
	            this.state = 8099;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8100;
	            this.true_false();
	        }

	        this.state = 8104;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 8103;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	network_policy() {
	    let localctx = new Network_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, SnowflakeParser.RULE_network_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8106;
	        this.match(SnowflakeParser.NETWORK_POLICY);
	        this.state = 8107;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8108;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partner_application() {
	    let localctx = new Partner_applicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, SnowflakeParser.RULE_partner_application);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8110;
	        _la = this._input.LA(1);
	        if(!(_la===378 || _la===709 || _la===710)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_with() {
	    let localctx = new Start_withContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, SnowflakeParser.RULE_start_with);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8112;
	        this.match(SnowflakeParser.START);
	        this.state = 8114;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===805) {
	            this.state = 8113;
	            this.match(SnowflakeParser.WITH);
	        }

	        this.state = 8117;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===878) {
	            this.state = 8116;
	            this.match(SnowflakeParser.EQ);
	        }

	        this.state = 8119;
	        this.num();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	increment_by() {
	    let localctx = new Increment_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, SnowflakeParser.RULE_increment_by);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8121;
	        this.match(SnowflakeParser.INCREMENT);
	        this.state = 8123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===96) {
	            this.state = 8122;
	            this.match(SnowflakeParser.BY);
	        }

	        this.state = 8126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===878) {
	            this.state = 8125;
	            this.match(SnowflakeParser.EQ);
	        }

	        this.state = 8128;
	        this.num();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_sequence() {
	    let localctx = new Create_sequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, SnowflakeParser.RULE_create_sequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8130;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 8132;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 8131;
	            this.or_replace();
	        }

	        this.state = 8134;
	        this.match(SnowflakeParser.SEQUENCE);
	        this.state = 8136;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,988,this._ctx);
	        if(la_===1) {
	            this.state = 8135;
	            this.if_not_exists();

	        }
	        this.state = 8138;
	        this.object_name();
	        this.state = 8140;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===805) {
	            this.state = 8139;
	            this.match(SnowflakeParser.WITH);
	        }

	        this.state = 8143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===675) {
	            this.state = 8142;
	            this.start_with();
	        }

	        this.state = 8146;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===326) {
	            this.state = 8145;
	            this.increment_by();
	        }

	        this.state = 8149;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===427 || _la===475) {
	            this.state = 8148;
	            this.order_noorder();
	        }

	        this.state = 8152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 8151;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_session_policy() {
	    let localctx = new Create_session_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, SnowflakeParser.RULE_create_session_policy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8154;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 8156;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 8155;
	            this.or_replace();
	        }

	        this.state = 8158;
	        this.match(SnowflakeParser.SESSION);
	        this.state = 8159;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 8161;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,995,this._ctx);
	        if(la_===1) {
	            this.state = 8160;
	            this.if_not_exists();

	        }
	        this.state = 8163;
	        this.object_name();
	        this.state = 8167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===134 || _la===637 || _la===639) {
	            this.state = 8164;
	            this.session_policy_params();
	            this.state = 8169;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	session_policy_params() {
	    let localctx = new Session_policy_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, SnowflakeParser.RULE_session_policy_params);
	    try {
	        this.state = 8175;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 637:
	        case 639:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8170;
	            this.session_policy_param_name();
	            this.state = 8171;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8172;
	            this.num();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8174;
	            this.comment_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	session_policy_param_name() {
	    let localctx = new Session_policy_param_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, SnowflakeParser.RULE_session_policy_param_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8177;
	        _la = this._input.LA(1);
	        if(!(_la===637 || _la===639)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_password_policy() {
	    let localctx = new Create_password_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, SnowflakeParser.RULE_create_password_policy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8179;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 8181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 8180;
	            this.or_replace();
	        }

	        this.state = 8183;
	        this.match(SnowflakeParser.PASSWORD);
	        this.state = 8184;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 8186;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,999,this._ctx);
	        if(la_===1) {
	            this.state = 8185;
	            this.if_not_exists();

	        }
	        this.state = 8188;
	        this.object_name();
	        this.state = 8192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===134 || ((((_la - 494)) & ~0x1f) === 0 && ((1 << (_la - 494)) & 2047) !== 0)) {
	            this.state = 8189;
	            this.password_policy_params();
	            this.state = 8194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	password_policy_params() {
	    let localctx = new Password_policy_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, SnowflakeParser.RULE_password_policy_params);
	    try {
	        this.state = 8200;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8195;
	            this.password_policy_param_name();
	            this.state = 8196;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8197;
	            this.num();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8199;
	            this.comment_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	password_policy_param_name() {
	    let localctx = new Password_policy_param_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, SnowflakeParser.RULE_password_policy_param_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8202;
	        _la = this._input.LA(1);
	        if(!(((((_la - 494)) & ~0x1f) === 0 && ((1 << (_la - 494)) & 2047) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_share() {
	    let localctx = new Create_shareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, SnowflakeParser.RULE_create_share);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8204;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 8206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 8205;
	            this.or_replace();
	        }

	        this.state = 8208;
	        this.match(SnowflakeParser.SHARE);
	        this.state = 8209;
	        this.id_();
	        this.state = 8211;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 8210;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	character() {
	    let localctx = new CharacterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, SnowflakeParser.RULE_character);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8213;
	        _la = this._input.LA(1);
	        if(!(_la===1 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 75501569) !== 0) || _la===93 || _la===156 || ((((_la - 285)) & ~0x1f) === 0 && ((1 << (_la - 285)) & 7) !== 0) || _la===350 || _la===426 || _la===455 || ((((_la - 461)) & ~0x1f) === 0 && ((1 << (_la - 461)) & 268443651) !== 0) || _la===602 || _la===661 || _la===814 || _la===821 || _la===873)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	format_type_options() {
	    let localctx = new Format_type_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, SnowflakeParser.RULE_format_type_options);
	    var _la = 0;
	    try {
	        this.state = 8358;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1013,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8215;
	            this.match(SnowflakeParser.COMPRESSION);
	            this.state = 8216;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8217;
	            _la = this._input.LA(1);
	            if(!(_la===49 || _la===50 || _la===94 || _la===97 || _la===183 || _la===300 || _la===425 || _la===543 || _la===819)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8218;
	            this.match(SnowflakeParser.RECORD_DELIMITER);
	            this.state = 8219;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8222;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 8220;
	                this.string();
	                break;
	            case 425:
	                this.state = 8221;
	                this.match(SnowflakeParser.NONE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8224;
	            this.match(SnowflakeParser.FIELD_DELIMITER);
	            this.state = 8225;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8228;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 8226;
	                this.string();
	                break;
	            case 425:
	                this.state = 8227;
	                this.match(SnowflakeParser.NONE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8230;
	            this.match(SnowflakeParser.FILE_EXTENSION);
	            this.state = 8231;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8232;
	            this.string();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8233;
	            this.match(SnowflakeParser.SKIP_HEADER);
	            this.state = 8234;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8235;
	            this.num();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8236;
	            this.match(SnowflakeParser.SKIP_BLANK_LINES);
	            this.state = 8237;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8238;
	            this.true_false();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 8239;
	            this.match(SnowflakeParser.DATE_FORMAT);
	            this.state = 8240;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8243;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 8241;
	                this.string();
	                break;
	            case 49:
	                this.state = 8242;
	                this.match(SnowflakeParser.AUTO);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 8245;
	            this.match(SnowflakeParser.TIME_FORMAT);
	            this.state = 8246;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8249;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 8247;
	                this.string();
	                break;
	            case 49:
	                this.state = 8248;
	                this.match(SnowflakeParser.AUTO);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 8251;
	            this.match(SnowflakeParser.TIMESTAMP_FORMAT);
	            this.state = 8252;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8255;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 8253;
	                this.string();
	                break;
	            case 49:
	                this.state = 8254;
	                this.match(SnowflakeParser.AUTO);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 8257;
	            this.match(SnowflakeParser.BINARY_FORMAT);
	            this.state = 8258;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8259;
	            _la = this._input.LA(1);
	            if(!(_la===80 || _la===308 || _la===786)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 8260;
	            this.match(SnowflakeParser.ESCAPE);
	            this.state = 8261;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8265;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1009,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8262;
	                this.character();
	                break;

	            case 2:
	                this.state = 8263;
	                this.match(SnowflakeParser.NONE);
	                break;

	            case 3:
	                this.state = 8264;
	                this.match(SnowflakeParser.NONE_Q);
	                break;

	            }
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 8267;
	            this.match(SnowflakeParser.ESCAPE_UNENCLOSED_FIELD);
	            this.state = 8268;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8272;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 8269;
	                this.string();
	                break;
	            case 425:
	                this.state = 8270;
	                this.match(SnowflakeParser.NONE);
	                break;
	            case 426:
	                this.state = 8271;
	                this.match(SnowflakeParser.NONE_Q);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 8274;
	            this.match(SnowflakeParser.TRIM_SPACE);
	            this.state = 8275;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8276;
	            this.true_false();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 8277;
	            this.match(SnowflakeParser.FIELD_OPTIONALLY_ENCLOSED_BY);
	            this.state = 8278;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8283;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 8279;
	                this.string();
	                break;
	            case 425:
	                this.state = 8280;
	                this.match(SnowflakeParser.NONE);
	                break;
	            case 426:
	                this.state = 8281;
	                this.match(SnowflakeParser.NONE_Q);
	                break;
	            case 860:
	                this.state = 8282;
	                this.match(SnowflakeParser.SINGLE_QUOTE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 8285;
	            this.match(SnowflakeParser.NULL_IF);
	            this.state = 8286;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8287;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 8288;
	            this.string_list();
	            this.state = 8289;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 8291;
	            this.match(SnowflakeParser.ERROR_ON_COLUMN_COUNT_MISMATCH);
	            this.state = 8292;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8293;
	            this.true_false();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 8294;
	            this.match(SnowflakeParser.REPLACE_INVALID_CHARACTERS);
	            this.state = 8295;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8296;
	            this.true_false();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 8297;
	            this.match(SnowflakeParser.EMPTY_FIELD_AS_NULL);
	            this.state = 8298;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8299;
	            this.true_false();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 8300;
	            this.match(SnowflakeParser.SKIP_BYTE_ORDER_MARK);
	            this.state = 8301;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8302;
	            this.true_false();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 8303;
	            this.match(SnowflakeParser.ENCODING);
	            this.state = 8304;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8307;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 869:
	                this.state = 8305;
	                this.string();
	                break;
	            case 786:
	                this.state = 8306;
	                this.match(SnowflakeParser.UTF8);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 8309;
	            this.match(SnowflakeParser.ENABLE_OCTAL);
	            this.state = 8310;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8311;
	            this.true_false();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 8312;
	            this.match(SnowflakeParser.ALLOW_DUPLICATE);
	            this.state = 8313;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8314;
	            this.true_false();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 8315;
	            this.match(SnowflakeParser.STRIP_OUTER_ARRAY);
	            this.state = 8316;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8317;
	            this.true_false();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 8318;
	            this.match(SnowflakeParser.STRIP_NULL_VALUES);
	            this.state = 8319;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8320;
	            this.true_false();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 8321;
	            this.match(SnowflakeParser.IGNORE_UTF8_ERRORS);
	            this.state = 8322;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8323;
	            this.true_false();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 8324;
	            this.match(SnowflakeParser.COMPRESSION);
	            this.state = 8325;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8326;
	            this.match(SnowflakeParser.AUTO);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 8327;
	            this.match(SnowflakeParser.LZO);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 8328;
	            this.match(SnowflakeParser.SNAPPY);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 8329;
	            this.match(SnowflakeParser.NONE);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 8330;
	            this.match(SnowflakeParser.SNAPPY_COMPRESSION);
	            this.state = 8331;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8332;
	            this.true_false();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 8333;
	            this.match(SnowflakeParser.BINARY_AS_TEXT);
	            this.state = 8334;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8335;
	            this.true_false();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 8336;
	            this.match(SnowflakeParser.COMPRESSION);
	            this.state = 8337;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8338;
	            this.match(SnowflakeParser.AUTO);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 8339;
	            this.match(SnowflakeParser.GZIP);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 8340;
	            this.match(SnowflakeParser.BZ2);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 8341;
	            this.match(SnowflakeParser.BROTLI);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 8342;
	            this.match(SnowflakeParser.ZSTD);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 8343;
	            this.match(SnowflakeParser.DEFLATE);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 8344;
	            this.match(SnowflakeParser.RAW_DEFLATE);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 8345;
	            this.match(SnowflakeParser.NONE);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 8346;
	            this.match(SnowflakeParser.PRESERVE_SPACE);
	            this.state = 8347;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8348;
	            this.true_false();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 8349;
	            this.match(SnowflakeParser.STRIP_OUTER_ELEMENT);
	            this.state = 8350;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8351;
	            this.true_false();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 8352;
	            this.match(SnowflakeParser.DISABLE_SNOWFLAKE_DATA);
	            this.state = 8353;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8354;
	            this.true_false();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 8355;
	            this.match(SnowflakeParser.DISABLE_AUTO_CONVERT);
	            this.state = 8356;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8357;
	            this.true_false();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_options() {
	    let localctx = new Copy_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, SnowflakeParser.RULE_copy_options);
	    try {
	        this.state = 8392;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 468:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8360;
	            this.match(SnowflakeParser.ON_ERROR);
	            this.state = 8361;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8367;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1014,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8362;
	                this.match(SnowflakeParser.CONTINUE);
	                break;

	            case 2:
	                this.state = 8363;
	                this.match(SnowflakeParser.SKIP_FILE);
	                break;

	            case 3:
	                this.state = 8364;
	                this.match(SnowflakeParser.SKIP_FILE_N);
	                break;

	            case 4:
	                this.state = 8365;
	                this.match(SnowflakeParser.SKIP_FILE_N);
	                this.state = 8366;
	                this.match(SnowflakeParser.ABORT_STATEMENT);
	                break;

	            }
	            break;
	        case 649:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8369;
	            this.match(SnowflakeParser.SIZE_LIMIT);
	            this.state = 8370;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8371;
	            this.num();
	            break;
	        case 533:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8372;
	            this.match(SnowflakeParser.PURGE);
	            this.state = 8373;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8374;
	            this.true_false();
	            break;
	        case 581:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8375;
	            this.match(SnowflakeParser.RETURN_FAILED_ONLY);
	            this.state = 8376;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8377;
	            this.true_false();
	            break;
	        case 389:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8378;
	            this.match(SnowflakeParser.MATCH_BY_COLUMN_NAME);
	            this.state = 8379;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8380;
	            this.match(SnowflakeParser.CASE_SENSITIVE);
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8381;
	            this.match(SnowflakeParser.CASE_INSENSITIVE);
	            break;
	        case 425:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 8382;
	            this.match(SnowflakeParser.NONE);
	            break;
	        case 220:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 8383;
	            this.match(SnowflakeParser.ENFORCE_LENGTH);
	            this.state = 8384;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8385;
	            this.true_false();
	            break;
	        case 761:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 8386;
	            this.match(SnowflakeParser.TRUNCATECOLUMNS);
	            this.state = 8387;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8388;
	            this.true_false();
	            break;
	        case 270:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 8389;
	            this.match(SnowflakeParser.FORCE);
	            this.state = 8390;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8391;
	            this.true_false();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stage_encryption_opts_internal() {
	    let localctx = new Stage_encryption_opts_internalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, SnowflakeParser.RULE_stage_encryption_opts_internal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8394;
	        this.match(SnowflakeParser.ENCRYPTION);
	        this.state = 8395;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8396;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 8397;
	        this.match(SnowflakeParser.TYPE);
	        this.state = 8398;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8399;
	        _la = this._input.LA(1);
	        if(!(_la===659 || _la===660)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 8400;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stage_type() {
	    let localctx = new Stage_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, SnowflakeParser.RULE_stage_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8402;
	        this.match(SnowflakeParser.TYPE);
	        this.state = 8403;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8404;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stage_master_key() {
	    let localctx = new Stage_master_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, SnowflakeParser.RULE_stage_master_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8406;
	        this.match(SnowflakeParser.MASTER_KEY);
	        this.state = 8407;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8408;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stage_kms_key() {
	    let localctx = new Stage_kms_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, SnowflakeParser.RULE_stage_kms_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8410;
	        this.match(SnowflakeParser.KMS_KEY_ID);
	        this.state = 8411;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8412;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stage_encryption_opts_aws() {
	    let localctx = new Stage_encryption_opts_awsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, SnowflakeParser.RULE_stage_encryption_opts_aws);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8414;
	        this.match(SnowflakeParser.ENCRYPTION);
	        this.state = 8415;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8416;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 8425;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1018,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===764) {
	                this.state = 8417;
	                this.stage_type();
	            }

	            this.state = 8420;
	            this.stage_master_key();
	            break;

	        case 2:
	            this.state = 8421;
	            this.stage_type();
	            this.state = 8423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===355) {
	                this.state = 8422;
	                this.stage_kms_key();
	            }

	            break;

	        }
	        this.state = 8427;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aws_token() {
	    let localctx = new Aws_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, SnowflakeParser.RULE_aws_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8429;
	        this.match(SnowflakeParser.AWS_TOKEN);
	        this.state = 8430;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8431;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aws_key_id() {
	    let localctx = new Aws_key_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, SnowflakeParser.RULE_aws_key_id);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8433;
	        this.match(SnowflakeParser.AWS_KEY_ID);
	        this.state = 8434;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8435;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aws_secret_key() {
	    let localctx = new Aws_secret_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, SnowflakeParser.RULE_aws_secret_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8437;
	        this.match(SnowflakeParser.AWS_SECRET_KEY);
	        this.state = 8438;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8439;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aws_role() {
	    let localctx = new Aws_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, SnowflakeParser.RULE_aws_role);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8441;
	        this.match(SnowflakeParser.AWS_ROLE);
	        this.state = 8442;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8443;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	azure_encryption_value() {
	    let localctx = new Azure_encryption_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, SnowflakeParser.RULE_azure_encryption_value);
	    var _la = 0;
	    try {
	        this.state = 8463;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1020,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8448;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===764) {
	                this.state = 8445;
	                this.match(SnowflakeParser.TYPE);
	                this.state = 8446;
	                this.match(SnowflakeParser.EQ);
	                this.state = 8447;
	                this.match(SnowflakeParser.AZURE_CSE_Q);
	            }

	            this.state = 8450;
	            this.match(SnowflakeParser.MASTER_KEY);
	            this.state = 8451;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8452;
	            this.string();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8453;
	            this.match(SnowflakeParser.MASTER_KEY);
	            this.state = 8454;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8455;
	            this.string();
	            this.state = 8456;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 8457;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8458;
	            this.match(SnowflakeParser.AZURE_CSE_Q);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8460;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 8461;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8462;
	            this.match(SnowflakeParser.NONE_Q);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stage_encryption_opts_az() {
	    let localctx = new Stage_encryption_opts_azContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, SnowflakeParser.RULE_stage_encryption_opts_az);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8465;
	        this.match(SnowflakeParser.ENCRYPTION);
	        this.state = 8466;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8467;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 8468;
	        this.azure_encryption_value();
	        this.state = 8469;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storage_integration_eq_id() {
	    let localctx = new Storage_integration_eq_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, SnowflakeParser.RULE_storage_integration_eq_id);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8471;
	        this.match(SnowflakeParser.STORAGE_INTEGRATION);
	        this.state = 8472;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8473;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	az_credential_or_storage_integration() {
	    let localctx = new Az_credential_or_storage_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, SnowflakeParser.RULE_az_credential_or_storage_integration);
	    try {
	        this.state = 8484;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 688:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8475;
	            this.storage_integration_eq_id();
	            break;
	        case 152:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8476;
	            this.match(SnowflakeParser.CREDENTIALS);
	            this.state = 8477;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8478;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 8479;
	            this.match(SnowflakeParser.AZURE_SAS_TOKEN);
	            this.state = 8480;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8481;
	            this.string();
	            this.state = 8482;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gcp_encryption_value() {
	    let localctx = new Gcp_encryption_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, SnowflakeParser.RULE_gcp_encryption_value);
	    var _la = 0;
	    try {
	        this.state = 8504;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1023,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8489;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===764) {
	                this.state = 8486;
	                this.match(SnowflakeParser.TYPE);
	                this.state = 8487;
	                this.match(SnowflakeParser.EQ);
	                this.state = 8488;
	                this.match(SnowflakeParser.GCS_SSE_KMS_Q);
	            }

	            this.state = 8491;
	            this.match(SnowflakeParser.KMS_KEY_ID);
	            this.state = 8492;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8493;
	            this.string();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8494;
	            this.match(SnowflakeParser.KMS_KEY_ID);
	            this.state = 8495;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8496;
	            this.string();
	            this.state = 8497;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 8498;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8499;
	            this.match(SnowflakeParser.GCS_SSE_KMS_Q);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8501;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 8502;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8503;
	            this.match(SnowflakeParser.NONE_Q);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stage_encryption_opts_gcp() {
	    let localctx = new Stage_encryption_opts_gcpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, SnowflakeParser.RULE_stage_encryption_opts_gcp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8506;
	        this.match(SnowflakeParser.ENCRYPTION);
	        this.state = 8507;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8508;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 8509;
	        this.gcp_encryption_value();
	        this.state = 8510;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aws_credential_or_storage_integration() {
	    let localctx = new Aws_credential_or_storage_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, SnowflakeParser.RULE_aws_credential_or_storage_integration);
	    var _la = 0;
	    try {
	        this.state = 8526;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 688:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8512;
	            this.storage_integration_eq_id();
	            break;
	        case 152:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8513;
	            this.match(SnowflakeParser.CREDENTIALS);
	            this.state = 8514;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8515;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 8522;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 63:
	                this.state = 8516;
	                this.aws_key_id();
	                this.state = 8517;
	                this.aws_secret_key();
	                this.state = 8519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===70) {
	                    this.state = 8518;
	                    this.aws_token();
	                }

	                break;
	            case 64:
	                this.state = 8521;
	                this.aws_role();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 8524;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_stage_params() {
	    let localctx = new External_stage_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, SnowflakeParser.RULE_external_stage_params);
	    var _la = 0;
	    try {
	        this.state = 8567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1036,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8528;
	            this.match(SnowflakeParser.URL);
	            this.state = 8529;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8530;
	            localctx.s3_url = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===863 || _la===864)) {
	                localctx.s3_url = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 8539;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1029,this._ctx);
	            if(la_===1) {
	                this.state = 8532;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===152 || _la===688) {
	                    this.state = 8531;
	                    this.aws_credential_or_storage_integration();
	                }

	                this.state = 8534;
	                this.stage_encryption_opts_aws();

	            } else if(la_===2) {
	                this.state = 8536;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===216) {
	                    this.state = 8535;
	                    this.stage_encryption_opts_aws();
	                }

	                this.state = 8538;
	                this.aws_credential_or_storage_integration();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8541;
	            this.match(SnowflakeParser.URL);
	            this.state = 8542;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8543;
	            localctx.gc_url = this.match(SnowflakeParser.GCS_PATH);
	            this.state = 8552;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1032,this._ctx);
	            if(la_===1) {
	                this.state = 8545;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===688) {
	                    this.state = 8544;
	                    this.storage_integration_eq_id();
	                }

	                this.state = 8547;
	                this.stage_encryption_opts_gcp();

	            } else if(la_===2) {
	                this.state = 8549;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===216) {
	                    this.state = 8548;
	                    this.stage_encryption_opts_gcp();
	                }

	                this.state = 8551;
	                this.storage_integration_eq_id();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8554;
	            this.match(SnowflakeParser.URL);
	            this.state = 8555;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8556;
	            localctx.azure_url = this.match(SnowflakeParser.AZURE_PATH);
	            this.state = 8565;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1035,this._ctx);
	            if(la_===1) {
	                this.state = 8558;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===152 || _la===688) {
	                    this.state = 8557;
	                    this.az_credential_or_storage_integration();
	                }

	                this.state = 8560;
	                this.stage_encryption_opts_az();

	            } else if(la_===2) {
	                this.state = 8562;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===216) {
	                    this.state = 8561;
	                    this.stage_encryption_opts_az();
	                }

	                this.state = 8564;
	                this.az_credential_or_storage_integration();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	true_false() {
	    let localctx = new True_falseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, SnowflakeParser.RULE_true_false);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8569;
	        _la = this._input.LA(1);
	        if(!(_la===257 || _la===758)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enable() {
	    let localctx = new EnableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, SnowflakeParser.RULE_enable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8571;
	        this.match(SnowflakeParser.ENABLE);
	        this.state = 8572;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8573;
	        this.true_false();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refresh_on_create() {
	    let localctx = new Refresh_on_createContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, SnowflakeParser.RULE_refresh_on_create);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8575;
	        this.match(SnowflakeParser.REFRESH_ON_CREATE);
	        this.state = 8576;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8577;
	        this.true_false();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	auto_refresh() {
	    let localctx = new Auto_refreshContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, SnowflakeParser.RULE_auto_refresh);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8579;
	        this.match(SnowflakeParser.AUTO_REFRESH);
	        this.state = 8580;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8581;
	        this.true_false();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notification_integration() {
	    let localctx = new Notification_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, SnowflakeParser.RULE_notification_integration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8583;
	        this.match(SnowflakeParser.NOTIFICATION_INTEGRATION);
	        this.state = 8584;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8585;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directory_table_internal_params() {
	    let localctx = new Directory_table_internal_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, SnowflakeParser.RULE_directory_table_internal_params);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8587;
	        this.match(SnowflakeParser.DIRECTORY);
	        this.state = 8588;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8589;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 8600;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1038,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8590;
	            this.enable();
	            this.state = 8592;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===552) {
	                this.state = 8591;
	                this.refresh_on_create();
	            }

	            break;

	        case 2:
	            this.state = 8594;
	            this.match(SnowflakeParser.REFRESH_ON_CREATE);
	            this.state = 8595;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8596;
	            this.match(SnowflakeParser.FALSE);
	            break;

	        case 3:
	            this.state = 8597;
	            this.refresh_on_create();
	            this.state = 8598;
	            this.enable();
	            break;

	        }
	        this.state = 8602;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directory_table_external_params() {
	    let localctx = new Directory_table_external_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, SnowflakeParser.RULE_directory_table_external_params);
	    var _la = 0;
	    try {
	        this.state = 8646;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1047,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8604;
	            this.match(SnowflakeParser.DIRECTORY);
	            this.state = 8605;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8606;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 8607;
	            this.enable();
	            this.state = 8609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===552) {
	                this.state = 8608;
	                this.refresh_on_create();
	            }

	            this.state = 8612;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57) {
	                this.state = 8611;
	                this.auto_refresh();
	            }

	            this.state = 8614;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8616;
	            this.match(SnowflakeParser.DIRECTORY);
	            this.state = 8617;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8618;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 8619;
	            this.enable();
	            this.state = 8621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57) {
	                this.state = 8620;
	                this.auto_refresh();
	            }

	            this.state = 8624;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===552) {
	                this.state = 8623;
	                this.refresh_on_create();
	            }

	            this.state = 8627;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===431) {
	                this.state = 8626;
	                this.notification_integration();
	            }

	            this.state = 8629;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8631;
	            this.match(SnowflakeParser.DIRECTORY);
	            this.state = 8632;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8633;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 8634;
	            this.enable();
	            this.state = 8636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===552) {
	                this.state = 8635;
	                this.refresh_on_create();
	            }

	            this.state = 8639;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57) {
	                this.state = 8638;
	                this.auto_refresh();
	            }

	            this.state = 8642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===431) {
	                this.state = 8641;
	                this.notification_integration();
	            }

	            this.state = 8644;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_stage() {
	    let localctx = new Create_stageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, SnowflakeParser.RULE_create_stage);
	    var _la = 0;
	    try {
	        this.state = 8752;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1069,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8648;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 8650;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 8649;
	                this.or_replace();
	            }

	            this.state = 8653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===720 || _la===721) {
	                this.state = 8652;
	                this.temporary();
	            }

	            this.state = 8655;
	            this.match(SnowflakeParser.STAGE);
	            this.state = 8657;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1050,this._ctx);
	            if(la_===1) {
	                this.state = 8656;
	                this.if_not_exists();

	            }
	            this.state = 8659;
	            this.object_name_or_identifier();
	            this.state = 8661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===216) {
	                this.state = 8660;
	                this.stage_encryption_opts_internal();
	            }

	            this.state = 8664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===191) {
	                this.state = 8663;
	                this.directory_table_internal_params();
	            }

	            this.state = 8685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===264) {
	                this.state = 8666;
	                this.match(SnowflakeParser.FILE_FORMAT);
	                this.state = 8667;
	                this.match(SnowflakeParser.EQ);
	                this.state = 8668;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 8681;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 274:
	                    this.state = 8669;
	                    this.match(SnowflakeParser.FORMAT_NAME);
	                    this.state = 8670;
	                    this.match(SnowflakeParser.EQ);
	                    this.state = 8671;
	                    this.string();
	                    break;
	                case 764:
	                    this.state = 8672;
	                    this.match(SnowflakeParser.TYPE);
	                    this.state = 8673;
	                    this.match(SnowflakeParser.EQ);
	                    this.state = 8674;
	                    this.type_fileformat();
	                    this.state = 8678;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===25 || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4611) !== 0) || _la===136 || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 100679681) !== 0) || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 13107489) !== 0) || ((((_la - 259)) & ~0x1f) === 0 && ((1 << (_la - 259)) & 19) !== 0) || _la===300 || _la===316 || _la===381 || _la===425 || _la===440 || ((((_la - 520)) & ~0x1f) === 0 && ((1 << (_la - 520)) & 142606337) !== 0) || _la===561 || ((((_la - 651)) & ~0x1f) === 0 && ((1 << (_la - 651)) & 211) !== 0) || ((((_la - 694)) & ~0x1f) === 0 && ((1 << (_la - 694)) & 7) !== 0) || ((((_la - 729)) & ~0x1f) === 0 && ((1 << (_la - 729)) & 268443649) !== 0) || _la===819) {
	                        this.state = 8675;
	                        this.format_type_options();
	                        this.state = 8680;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 8683;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 8693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===149) {
	                this.state = 8687;
	                this.match(SnowflakeParser.COPY_OPTIONS_);
	                this.state = 8688;
	                this.match(SnowflakeParser.EQ);
	                this.state = 8689;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 8690;
	                this.copy_options();
	                this.state = 8691;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 8696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===715 || _la===805) {
	                this.state = 8695;
	                this.with_tags();
	            }

	            this.state = 8699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 8698;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8701;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 8703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 8702;
	                this.or_replace();
	            }

	            this.state = 8706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===720 || _la===721) {
	                this.state = 8705;
	                this.temporary();
	            }

	            this.state = 8708;
	            this.match(SnowflakeParser.STAGE);
	            this.state = 8710;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1061,this._ctx);
	            if(la_===1) {
	                this.state = 8709;
	                this.if_not_exists();

	            }
	            this.state = 8712;
	            this.object_name_or_identifier();
	            this.state = 8713;
	            this.external_stage_params();
	            this.state = 8715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===191) {
	                this.state = 8714;
	                this.directory_table_external_params();
	            }

	            this.state = 8736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===264) {
	                this.state = 8717;
	                this.match(SnowflakeParser.FILE_FORMAT);
	                this.state = 8718;
	                this.match(SnowflakeParser.EQ);
	                this.state = 8719;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 8732;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 274:
	                    this.state = 8720;
	                    this.match(SnowflakeParser.FORMAT_NAME);
	                    this.state = 8721;
	                    this.match(SnowflakeParser.EQ);
	                    this.state = 8722;
	                    this.string();
	                    break;
	                case 764:
	                    this.state = 8723;
	                    this.match(SnowflakeParser.TYPE);
	                    this.state = 8724;
	                    this.match(SnowflakeParser.EQ);
	                    this.state = 8725;
	                    this.type_fileformat();
	                    this.state = 8729;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===25 || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4611) !== 0) || _la===136 || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 100679681) !== 0) || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 13107489) !== 0) || ((((_la - 259)) & ~0x1f) === 0 && ((1 << (_la - 259)) & 19) !== 0) || _la===300 || _la===316 || _la===381 || _la===425 || _la===440 || ((((_la - 520)) & ~0x1f) === 0 && ((1 << (_la - 520)) & 142606337) !== 0) || _la===561 || ((((_la - 651)) & ~0x1f) === 0 && ((1 << (_la - 651)) & 211) !== 0) || ((((_la - 694)) & ~0x1f) === 0 && ((1 << (_la - 694)) & 7) !== 0) || ((((_la - 729)) & ~0x1f) === 0 && ((1 << (_la - 729)) & 268443649) !== 0) || _la===819) {
	                        this.state = 8726;
	                        this.format_type_options();
	                        this.state = 8731;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 8734;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 8744;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===149) {
	                this.state = 8738;
	                this.match(SnowflakeParser.COPY_OPTIONS_);
	                this.state = 8739;
	                this.match(SnowflakeParser.EQ);
	                this.state = 8740;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 8741;
	                this.copy_options();
	                this.state = 8742;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 8747;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===715 || _la===805) {
	                this.state = 8746;
	                this.with_tags();
	            }

	            this.state = 8750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 8749;
	                this.comment_clause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_stage() {
	    let localctx = new Alter_stageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, SnowflakeParser.RULE_alter_stage);
	    var _la = 0;
	    try {
	        this.state = 8804;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1078,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8754;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 8755;
	            this.match(SnowflakeParser.STAGE);
	            this.state = 8757;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1070,this._ctx);
	            if(la_===1) {
	                this.state = 8756;
	                this.if_exists();

	            }
	            this.state = 8759;
	            this.object_name_or_identifier();
	            this.state = 8760;
	            this.match(SnowflakeParser.RENAME);
	            this.state = 8761;
	            this.match(SnowflakeParser.TO);
	            this.state = 8762;
	            this.object_name_or_identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8764;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 8765;
	            this.match(SnowflakeParser.STAGE);
	            this.state = 8767;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1071,this._ctx);
	            if(la_===1) {
	                this.state = 8766;
	                this.if_exists();

	            }
	            this.state = 8769;
	            this.object_name_or_identifier();
	            this.state = 8770;
	            this.set_tags();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8772;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 8773;
	            this.match(SnowflakeParser.STAGE);
	            this.state = 8775;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1072,this._ctx);
	            if(la_===1) {
	                this.state = 8774;
	                this.if_exists();

	            }
	            this.state = 8777;
	            this.object_name_or_identifier();
	            this.state = 8778;
	            this.unset_tags();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8780;
	            this.match(SnowflakeParser.ALTER);
	            this.state = 8781;
	            this.match(SnowflakeParser.STAGE);
	            this.state = 8783;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1073,this._ctx);
	            if(la_===1) {
	                this.state = 8782;
	                this.if_exists();

	            }
	            this.state = 8785;
	            this.object_name_or_identifier();
	            this.state = 8786;
	            this.match(SnowflakeParser.SET);
	            this.state = 8788;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===774) {
	                this.state = 8787;
	                this.external_stage_params();
	            }

	            this.state = 8791;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===264) {
	                this.state = 8790;
	                this.file_format();
	            }

	            this.state = 8799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===149) {
	                this.state = 8793;
	                this.match(SnowflakeParser.COPY_OPTIONS_);
	                this.state = 8794;
	                this.match(SnowflakeParser.EQ);
	                this.state = 8795;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 8796;
	                this.copy_options();
	                this.state = 8797;
	                this.match(SnowflakeParser.RR_BRACKET);
	            }

	            this.state = 8802;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 8801;
	                this.comment_clause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_stage() {
	    let localctx = new Drop_stageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, SnowflakeParser.RULE_drop_stage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8806;
	        this.match(SnowflakeParser.DROP);
	        this.state = 8807;
	        this.match(SnowflakeParser.STAGE);
	        this.state = 8809;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1079,this._ctx);
	        if(la_===1) {
	            this.state = 8808;
	            this.if_exists();

	        }
	        this.state = 8811;
	        this.object_name_or_identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_stage() {
	    let localctx = new Describe_stageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, SnowflakeParser.RULE_describe_stage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8813;
	        this.describe();
	        this.state = 8814;
	        this.match(SnowflakeParser.STAGE);
	        this.state = 8815;
	        this.object_name_or_identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_stages() {
	    let localctx = new Show_stagesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, SnowflakeParser.RULE_show_stages);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8817;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 8818;
	        this.match(SnowflakeParser.STAGES);
	        this.state = 8820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 8819;
	            this.like_pattern();
	        }

	        this.state = 8823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 8822;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cloud_provider_params() {
	    let localctx = new Cloud_provider_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, SnowflakeParser.RULE_cloud_provider_params);
	    var _la = 0;
	    try {
	        this.state = 8845;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1083,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8825;
	            this.match(SnowflakeParser.STORAGE_PROVIDER);
	            this.state = 8826;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8827;
	            this.match(SnowflakeParser.S3);
	            this.state = 8828;
	            this.match(SnowflakeParser.STORAGE_AWS_ROLE_ARN);
	            this.state = 8829;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8830;
	            this.string();
	            this.state = 8834;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===685) {
	                this.state = 8831;
	                this.match(SnowflakeParser.STORAGE_AWS_OBJECT_ACL);
	                this.state = 8832;
	                this.match(SnowflakeParser.EQ);
	                this.state = 8833;
	                this.string();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8836;
	            this.match(SnowflakeParser.STORAGE_PROVIDER);
	            this.state = 8837;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8838;
	            this.match(SnowflakeParser.GCS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8839;
	            this.match(SnowflakeParser.STORAGE_PROVIDER);
	            this.state = 8840;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8841;
	            this.match(SnowflakeParser.AZURE);
	            this.state = 8842;
	            this.match(SnowflakeParser.AZURE_TENANT_ID);
	            this.state = 8843;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8844;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cloud_provider_params2() {
	    let localctx = new Cloud_provider_params2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, SnowflakeParser.RULE_cloud_provider_params2);
	    var _la = 0;
	    try {
	        this.state = 8858;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 686:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8847;
	            this.match(SnowflakeParser.STORAGE_AWS_ROLE_ARN);
	            this.state = 8848;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8849;
	            this.string();
	            this.state = 8853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===685) {
	                this.state = 8850;
	                this.match(SnowflakeParser.STORAGE_AWS_OBJECT_ACL);
	                this.state = 8851;
	                this.match(SnowflakeParser.EQ);
	                this.state = 8852;
	                this.string();
	            }

	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8855;
	            this.match(SnowflakeParser.AZURE_TENANT_ID);
	            this.state = 8856;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8857;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cloud_provider_params3() {
	    let localctx = new Cloud_provider_params3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, SnowflakeParser.RULE_cloud_provider_params3);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8860;
	        this.match(SnowflakeParser.INTEGRATION);
	        this.state = 8861;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8862;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_storage_integration() {
	    let localctx = new Create_storage_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, SnowflakeParser.RULE_create_storage_integration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8864;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 8866;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 8865;
	            this.or_replace();
	        }

	        this.state = 8868;
	        this.match(SnowflakeParser.STORAGE);
	        this.state = 8869;
	        this.match(SnowflakeParser.INTEGRATION);
	        this.state = 8871;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1087,this._ctx);
	        if(la_===1) {
	            this.state = 8870;
	            this.if_not_exists();

	        }
	        this.state = 8873;
	        this.id_();
	        this.state = 8874;
	        this.match(SnowflakeParser.TYPE);
	        this.state = 8875;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8876;
	        this.match(SnowflakeParser.EXTERNAL_STAGE);
	        this.state = 8877;
	        this.cloud_provider_params();
	        this.state = 8878;
	        this.match(SnowflakeParser.ENABLED);
	        this.state = 8879;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8880;
	        this.true_false();
	        this.state = 8881;
	        this.match(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS);
	        this.state = 8882;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8883;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 8884;
	        this.string_list();
	        this.state = 8885;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 8892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===687) {
	            this.state = 8886;
	            this.match(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS);
	            this.state = 8887;
	            this.match(SnowflakeParser.EQ);
	            this.state = 8888;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 8889;
	            this.string_list();
	            this.state = 8890;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 8895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 8894;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_grants() {
	    let localctx = new Copy_grantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, SnowflakeParser.RULE_copy_grants);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8897;
	        this.match(SnowflakeParser.COPY);
	        this.state = 8898;
	        this.match(SnowflakeParser.GRANTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	append_only() {
	    let localctx = new Append_onlyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, SnowflakeParser.RULE_append_only);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8900;
	        this.match(SnowflakeParser.APPEND_ONLY);
	        this.state = 8901;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8902;
	        this.true_false();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_only() {
	    let localctx = new Insert_onlyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, SnowflakeParser.RULE_insert_only);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8904;
	        this.match(SnowflakeParser.INSERT_ONLY);
	        this.state = 8905;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8906;
	        this.match(SnowflakeParser.TRUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_initial_rows() {
	    let localctx = new Show_initial_rowsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, SnowflakeParser.RULE_show_initial_rows);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8908;
	        this.match(SnowflakeParser.SHOW_INITIAL_ROWS);
	        this.state = 8909;
	        this.match(SnowflakeParser.EQ);
	        this.state = 8910;
	        this.true_false();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stream_time() {
	    let localctx = new Stream_timeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, SnowflakeParser.RULE_stream_time);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8912;
	        this.at_before1();
	        this.state = 8913;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 8926;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 727:
	            this.state = 8914;
	            this.match(SnowflakeParser.TIMESTAMP);
	            this.state = 8915;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 8916;
	            this.string();
	            break;
	        case 459:
	            this.state = 8917;
	            this.match(SnowflakeParser.OFFSET);
	            this.state = 8918;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 8919;
	            this.string();
	            break;
	        case 679:
	            this.state = 8920;
	            this.match(SnowflakeParser.STATEMENT);
	            this.state = 8921;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 8922;
	            this.id_();
	            break;
	        case 690:
	            this.state = 8923;
	            this.match(SnowflakeParser.STREAM);
	            this.state = 8924;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 8925;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 8928;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_stream() {
	    let localctx = new Create_streamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, SnowflakeParser.RULE_create_stream);
	    var _la = 0;
	    try {
	        this.state = 9027;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8930;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 8932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 8931;
	                this.or_replace();
	            }

	            this.state = 8934;
	            this.match(SnowflakeParser.STREAM);
	            this.state = 8936;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1092,this._ctx);
	            if(la_===1) {
	                this.state = 8935;
	                this.if_not_exists();

	            }
	            this.state = 8938;
	            this.object_name();
	            this.state = 8940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 8939;
	                this.copy_grants();
	            }

	            this.state = 8942;
	            this.match(SnowflakeParser.ON);
	            this.state = 8943;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 8944;
	            this.object_name();
	            this.state = 8946;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===46 || _la===81) {
	                this.state = 8945;
	                this.stream_time();
	            }

	            this.state = 8949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40) {
	                this.state = 8948;
	                this.append_only();
	            }

	            this.state = 8952;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===646) {
	                this.state = 8951;
	                this.show_initial_rows();
	            }

	            this.state = 8955;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 8954;
	                this.comment_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8957;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 8959;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 8958;
	                this.or_replace();
	            }

	            this.state = 8961;
	            this.match(SnowflakeParser.STREAM);
	            this.state = 8963;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1099,this._ctx);
	            if(la_===1) {
	                this.state = 8962;
	                this.if_not_exists();

	            }
	            this.state = 8965;
	            this.object_name();
	            this.state = 8967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 8966;
	                this.copy_grants();
	            }

	            this.state = 8969;
	            this.match(SnowflakeParser.ON);
	            this.state = 8970;
	            this.match(SnowflakeParser.EXTERNAL);
	            this.state = 8971;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 8972;
	            this.object_name();
	            this.state = 8974;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===46 || _la===81) {
	                this.state = 8973;
	                this.stream_time();
	            }

	            this.state = 8977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===335) {
	                this.state = 8976;
	                this.insert_only();
	            }

	            this.state = 8980;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 8979;
	                this.comment_clause();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8982;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 8984;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 8983;
	                this.or_replace();
	            }

	            this.state = 8986;
	            this.match(SnowflakeParser.STREAM);
	            this.state = 8988;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1105,this._ctx);
	            if(la_===1) {
	                this.state = 8987;
	                this.if_not_exists();

	            }
	            this.state = 8990;
	            this.object_name();
	            this.state = 8992;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 8991;
	                this.copy_grants();
	            }

	            this.state = 8994;
	            this.match(SnowflakeParser.ON);
	            this.state = 8995;
	            this.match(SnowflakeParser.STAGE);
	            this.state = 8996;
	            this.object_name();
	            this.state = 8998;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 8997;
	                this.comment_clause();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9000;
	            this.match(SnowflakeParser.CREATE);
	            this.state = 9002;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 9001;
	                this.or_replace();
	            }

	            this.state = 9004;
	            this.match(SnowflakeParser.STREAM);
	            this.state = 9006;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1109,this._ctx);
	            if(la_===1) {
	                this.state = 9005;
	                this.if_not_exists();

	            }
	            this.state = 9008;
	            this.object_name();
	            this.state = 9010;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 9009;
	                this.copy_grants();
	            }

	            this.state = 9012;
	            this.match(SnowflakeParser.ON);
	            this.state = 9013;
	            this.match(SnowflakeParser.VIEW);
	            this.state = 9014;
	            this.object_name();
	            this.state = 9016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===46 || _la===81) {
	                this.state = 9015;
	                this.stream_time();
	            }

	            this.state = 9019;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40) {
	                this.state = 9018;
	                this.append_only();
	            }

	            this.state = 9022;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===646) {
	                this.state = 9021;
	                this.show_initial_rows();
	            }

	            this.state = 9025;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 9024;
	                this.comment_clause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporary() {
	    let localctx = new TemporaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, SnowflakeParser.RULE_temporary);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9029;
	        _la = this._input.LA(1);
	        if(!(_la===720 || _la===721)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_type() {
	    let localctx = new Table_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, SnowflakeParser.RULE_table_type);
	    var _la = 0;
	    try {
	        this.state = 9039;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 293:
	        case 373:
	        case 720:
	        case 721:
	        case 795:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9036;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 293:
	            case 373:
	            case 720:
	            case 721:
	                this.state = 9032;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===293 || _la===373) {
	                    this.state = 9031;
	                    _la = this._input.LA(1);
	                    if(!(_la===293 || _la===373)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 9034;
	                this.temporary();
	                break;
	            case 795:
	                this.state = 9035;
	                this.match(SnowflakeParser.VOLATILE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 754:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9038;
	            this.match(SnowflakeParser.TRANSIENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_tags() {
	    let localctx = new With_tagsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, SnowflakeParser.RULE_with_tags);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9042;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===805) {
	            this.state = 9041;
	            this.match(SnowflakeParser.WITH);
	        }

	        this.state = 9044;
	        this.match(SnowflakeParser.TAG);
	        this.state = 9045;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 9046;
	        this.tag_decl();
	        this.state = 9051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 9047;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 9048;
	            this.tag_decl();
	            this.state = 9053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 9054;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_row_access_policy() {
	    let localctx = new With_row_access_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, SnowflakeParser.RULE_with_row_access_policy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9057;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===805) {
	            this.state = 9056;
	            this.match(SnowflakeParser.WITH);
	        }

	        this.state = 9059;
	        this.match(SnowflakeParser.ROW);
	        this.state = 9060;
	        this.match(SnowflakeParser.ACCESS);
	        this.state = 9061;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 9062;
	        this.id_();
	        this.state = 9063;
	        this.match(SnowflakeParser.ON);
	        this.state = 9064;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 9065;
	        this.column_name();
	        this.state = 9070;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 9066;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 9067;
	            this.column_name();
	            this.state = 9072;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 9073;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cluster_by() {
	    let localctx = new Cluster_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, SnowflakeParser.RULE_cluster_by);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9075;
	        this.match(SnowflakeParser.CLUSTER);
	        this.state = 9076;
	        this.match(SnowflakeParser.BY);
	        this.state = 9078;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===370) {
	            this.state = 9077;
	            this.match(SnowflakeParser.LINEAR);
	        }

	        this.state = 9080;
	        this.expr_list_in_parentheses();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	change_tracking() {
	    let localctx = new Change_trackingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, SnowflakeParser.RULE_change_tracking);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9082;
	        this.match(SnowflakeParser.CHANGE_TRACKING);
	        this.state = 9083;
	        this.match(SnowflakeParser.EQ);
	        this.state = 9084;
	        this.true_false();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_masking_policy() {
	    let localctx = new With_masking_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, SnowflakeParser.RULE_with_masking_policy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9087;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===805) {
	            this.state = 9086;
	            this.match(SnowflakeParser.WITH);
	        }

	        this.state = 9089;
	        this.match(SnowflakeParser.MASKING);
	        this.state = 9090;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 9091;
	        this.id_();
	        this.state = 9094;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===785) {
	            this.state = 9092;
	            this.match(SnowflakeParser.USING);
	            this.state = 9093;
	            this.column_list_in_parentheses();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collate() {
	    let localctx = new CollateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, SnowflakeParser.RULE_collate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9096;
	        this.match(SnowflakeParser.COLLATE);
	        this.state = 9097;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_noorder() {
	    let localctx = new Order_noorderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, SnowflakeParser.RULE_order_noorder);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9099;
	        _la = this._input.LA(1);
	        if(!(_la===427 || _la===475)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_value() {
	    let localctx = new Default_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, SnowflakeParser.RULE_default_value);
	    var _la = 0;
	    try {
	        this.state = 9120;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 174:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9101;
	            this.match(SnowflakeParser.DEFAULT);
	            this.state = 9102;
	            this.expr(0);
	            break;
	        case 53:
	        case 311:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9103;
	            _la = this._input.LA(1);
	            if(!(_la===53 || _la===311)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 9115;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1126,this._ctx);
	            if(la_===1) {
	                this.state = 9104;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 9105;
	                this.num();
	                this.state = 9106;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 9107;
	                this.num();
	                this.state = 9108;
	                this.match(SnowflakeParser.RR_BRACKET);

	            } else if(la_===2) {
	                this.state = 9110;
	                this.start_with();

	            } else if(la_===3) {
	                this.state = 9111;
	                this.increment_by();

	            } else if(la_===4) {
	                this.state = 9112;
	                this.start_with();
	                this.state = 9113;
	                this.increment_by();

	            }
	            this.state = 9118;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===427 || _la===475) {
	                this.state = 9117;
	                this.order_noorder();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreign_key() {
	    let localctx = new Foreign_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, SnowflakeParser.RULE_foreign_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9122;
	        this.match(SnowflakeParser.FOREIGN);
	        this.state = 9123;
	        this.match(SnowflakeParser.KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_key() {
	    let localctx = new Primary_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, SnowflakeParser.RULE_primary_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9125;
	        this.match(SnowflakeParser.PRIMARY);
	        this.state = 9126;
	        this.match(SnowflakeParser.KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	out_of_line_constraint() {
	    let localctx = new Out_of_line_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, SnowflakeParser.RULE_out_of_line_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===144) {
	            this.state = 9128;
	            this.match(SnowflakeParser.CONSTRAINT);
	            this.state = 9129;
	            this.id_();
	        }

	        this.state = 9150;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 524:
	        case 767:
	            this.state = 9134;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 767:
	                this.state = 9132;
	                this.match(SnowflakeParser.UNIQUE);
	                break;
	            case 524:
	                this.state = 9133;
	                this.primary_key();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 9136;
	            this.column_list_in_parentheses();
	            this.state = 9140;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 179)) & ~0x1f) === 0 && ((1 << (_la - 179)) & 536879105) !== 0) || _la===219 || _la===329 || _la===428 || _la===429 || _la===556) {
	                this.state = 9137;
	                this.common_constraint_properties();
	                this.state = 9142;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 271:
	            this.state = 9143;
	            this.foreign_key();
	            this.state = 9144;
	            this.column_list_in_parentheses();
	            this.state = 9145;
	            this.match(SnowflakeParser.REFERENCES);
	            this.state = 9146;
	            this.object_name();
	            this.state = 9147;
	            this.column_list_in_parentheses();
	            this.state = 9148;
	            this.constraint_properties();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	full_col_decl() {
	    let localctx = new Full_col_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, SnowflakeParser.RULE_full_col_decl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9152;
	        this.col_decl();
	        this.state = 9162;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===53 || _la===130 || _la===144 || _la===174 || _la===271 || _la===311 || _la===429 || _la===439 || _la===524 || _la===767) {
	            this.state = 9160;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1134,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 9153;
	                this.collate();
	                break;

	            case 2:
	                this.state = 9154;
	                this.inline_constraint();
	                break;

	            case 3:
	                this.state = 9155;
	                this.null_not_null();
	                break;

	            case 4:
	                this.state = 9158;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 53:
	                case 174:
	                case 311:
	                    this.state = 9156;
	                    this.default_value();
	                    break;
	                case 439:
	                    this.state = 9157;
	                    this.match(SnowflakeParser.NULL_);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            }
	            this.state = 9164;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 9166;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1136,this._ctx);
	        if(la_===1) {
	            this.state = 9165;
	            this.with_masking_policy();

	        }
	        this.state = 9169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===715 || _la===805) {
	            this.state = 9168;
	            this.with_tags();
	        }

	        this.state = 9173;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 9171;
	            this.match(SnowflakeParser.COMMENT);
	            this.state = 9172;
	            this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_decl_item() {
	    let localctx = new Column_decl_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, SnowflakeParser.RULE_column_decl_item);
	    try {
	        this.state = 9177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 7:
	        case 9:
	        case 13:
	        case 15:
	        case 16:
	        case 31:
	        case 42:
	        case 46:
	        case 60:
	        case 105:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 127:
	        case 130:
	        case 131:
	        case 134:
	        case 139:
	        case 140:
	        case 145:
	        case 149:
	        case 150:
	        case 159:
	        case 160:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 172:
	        case 182:
	        case 186:
	        case 190:
	        case 199:
	        case 201:
	        case 203:
	        case 205:
	        case 223:
	        case 231:
	        case 237:
	        case 239:
	        case 266:
	        case 267:
	        case 268:
	        case 278:
	        case 291:
	        case 292:
	        case 293:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 317:
	        case 327:
	        case 333:
	        case 336:
	        case 338:
	        case 340:
	        case 344:
	        case 348:
	        case 353:
	        case 357:
	        case 360:
	        case 361:
	        case 364:
	        case 365:
	        case 367:
	        case 368:
	        case 373:
	        case 379:
	        case 394:
	        case 402:
	        case 408:
	        case 417:
	        case 419:
	        case 427:
	        case 437:
	        case 441:
	        case 442:
	        case 443:
	        case 454:
	        case 459:
	        case 466:
	        case 471:
	        case 475:
	        case 476:
	        case 478:
	        case 479:
	        case 491:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 506:
	        case 507:
	        case 516:
	        case 517:
	        case 518:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 542:
	        case 548:
	        case 553:
	        case 560:
	        case 569:
	        case 570:
	        case 572:
	        case 574:
	        case 576:
	        case 585:
	        case 587:
	        case 588:
	        case 590:
	        case 591:
	        case 592:
	        case 596:
	        case 620:
	        case 624:
	        case 631:
	        case 634:
	        case 636:
	        case 663:
	        case 665:
	        case 666:
	        case 667:
	        case 670:
	        case 671:
	        case 678:
	        case 682:
	        case 691:
	        case 697:
	        case 698:
	        case 699:
	        case 706:
	        case 711:
	        case 715:
	        case 716:
	        case 717:
	        case 719:
	        case 720:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 731:
	        case 733:
	        case 737:
	        case 739:
	        case 740:
	        case 741:
	        case 746:
	        case 747:
	        case 748:
	        case 759:
	        case 760:
	        case 762:
	        case 764:
	        case 773:
	        case 774:
	        case 777:
	        case 778:
	        case 779:
	        case 789:
	        case 790:
	        case 792:
	        case 794:
	        case 796:
	        case 797:
	        case 799:
	        case 820:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 858:
	        case 859:
	        case 861:
	        case 862:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9175;
	            this.full_col_decl();
	            break;
	        case 144:
	        case 271:
	        case 524:
	        case 767:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9176;
	            this.out_of_line_constraint();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_decl_item_list() {
	    let localctx = new Column_decl_item_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, SnowflakeParser.RULE_column_decl_item_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9179;
	        this.column_decl_item();
	        this.state = 9184;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 9180;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 9181;
	            this.column_decl_item();
	            this.state = 9186;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table() {
	    let localctx = new Create_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, SnowflakeParser.RULE_create_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9187;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 9189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 9188;
	            this.or_replace();
	        }

	        this.state = 9192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293 || _la===373 || _la===720 || _la===721 || _la===754 || _la===795) {
	            this.state = 9191;
	            this.table_type();
	        }

	        this.state = 9194;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 9203;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1145,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 9196;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1143,this._ctx);
	            if(la_===1) {
	                this.state = 9195;
	                this.if_not_exists();

	            }
	            this.state = 9198;
	            this.object_name();
	            break;

	        case 2:
	            this.state = 9199;
	            this.object_name();
	            this.state = 9201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===312) {
	                this.state = 9200;
	                this.if_not_exists();
	            }

	            break;

	        }
	        this.state = 9213;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1148,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 9206;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1146,this._ctx);
	            if(la_===1) {
	                this.state = 9205;
	                this.comment_clause();

	            }
	            this.state = 9208;
	            this.create_table_clause();
	            break;

	        case 2:
	            this.state = 9209;
	            this.create_table_clause();
	            this.state = 9211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 9210;
	                this.comment_clause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_decl_item_list_paren() {
	    let localctx = new Column_decl_item_list_parenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, SnowflakeParser.RULE_column_decl_item_list_paren);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9215;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 9216;
	        this.column_decl_item_list();
	        this.state = 9217;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_clause() {
	    let localctx = new Create_table_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, SnowflakeParser.RULE_create_table_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9230;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 9219;
	            this.column_decl_item_list_paren();
	            this.state = 9221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===127) {
	                this.state = 9220;
	                this.cluster_by();
	            }

	            break;

	        case 2:
	            this.state = 9224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===127) {
	                this.state = 9223;
	                this.cluster_by();
	            }

	            this.state = 9227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 9226;
	                this.comment_clause();
	            }

	            this.state = 9229;
	            this.column_decl_item_list_paren();
	            break;

	        }
	        this.state = 9233;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===673 || _la===764) {
	            this.state = 9232;
	            this.stage_file_format();
	        }

	        this.state = 9241;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===672) {
	            this.state = 9235;
	            this.match(SnowflakeParser.STAGE_COPY_OPTIONS);
	            this.state = 9236;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9237;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 9238;
	            this.copy_options();
	            this.state = 9239;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 9246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===166) {
	            this.state = 9243;
	            this.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS);
	            this.state = 9244;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9245;
	            this.num();
	        }

	        this.state = 9251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===395) {
	            this.state = 9248;
	            this.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS);
	            this.state = 9249;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9250;
	            this.num();
	        }

	        this.state = 9254;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108) {
	            this.state = 9253;
	            this.change_tracking();
	        }

	        this.state = 9257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===175) {
	            this.state = 9256;
	            this.default_ddl_collation();
	        }

	        this.state = 9260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 9259;
	            this.copy_grants();
	        }

	        this.state = 9263;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1160,this._ctx);
	        if(la_===1) {
	            this.state = 9262;
	            this.comment_clause();

	        }
	        this.state = 9266;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1161,this._ctx);
	        if(la_===1) {
	            this.state = 9265;
	            this.with_row_access_policy();

	        }
	        this.state = 9269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===715 || _la===805) {
	            this.state = 9268;
	            this.with_tags();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_as_select() {
	    let localctx = new Create_table_as_selectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, SnowflakeParser.RULE_create_table_as_select);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9271;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 9273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 9272;
	            this.or_replace();
	        }

	        this.state = 9276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293 || _la===373 || _la===720 || _la===721 || _la===754 || _la===795) {
	            this.state = 9275;
	            this.table_type();
	        }

	        this.state = 9278;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 9287;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1167,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 9280;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1165,this._ctx);
	            if(la_===1) {
	                this.state = 9279;
	                this.if_not_exists();

	            }
	            this.state = 9282;
	            this.object_name();
	            break;

	        case 2:
	            this.state = 9283;
	            this.object_name();
	            this.state = 9285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===312) {
	                this.state = 9284;
	                this.if_not_exists();
	            }

	            break;

	        }
	        this.state = 9293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===888) {
	            this.state = 9289;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 9290;
	            this.column_decl_item_list();
	            this.state = 9291;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 9296;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 9295;
	            this.cluster_by();
	        }

	        this.state = 9299;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 9298;
	            this.copy_grants();
	        }

	        this.state = 9302;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1171,this._ctx);
	        if(la_===1) {
	            this.state = 9301;
	            this.with_row_access_policy();

	        }
	        this.state = 9305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===715 || _la===805) {
	            this.state = 9304;
	            this.with_tags();
	        }

	        this.state = 9308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 9307;
	            this.comment_clause();
	        }

	        this.state = 9310;
	        this.match(SnowflakeParser.AS);
	        this.state = 9311;
	        this.query_statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_like() {
	    let localctx = new Create_table_likeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, SnowflakeParser.RULE_create_table_like);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9313;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 9315;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 9314;
	            this.or_replace();
	        }

	        this.state = 9318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===754) {
	            this.state = 9317;
	            this.match(SnowflakeParser.TRANSIENT);
	        }

	        this.state = 9320;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 9322;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1176,this._ctx);
	        if(la_===1) {
	            this.state = 9321;
	            this.if_not_exists();

	        }
	        this.state = 9324;
	        this.object_name();
	        this.state = 9325;
	        this.match(SnowflakeParser.LIKE);
	        this.state = 9326;
	        this.object_name();
	        this.state = 9328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 9327;
	            this.cluster_by();
	        }

	        this.state = 9331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 9330;
	            this.copy_grants();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_tag() {
	    let localctx = new Create_tagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, SnowflakeParser.RULE_create_tag);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9333;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 9335;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 9334;
	            this.or_replace();
	        }

	        this.state = 9337;
	        this.match(SnowflakeParser.TAG);
	        this.state = 9339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1180,this._ctx);
	        if(la_===1) {
	            this.state = 9338;
	            this.if_not_exists();

	        }
	        this.state = 9341;
	        this.object_name();
	        this.state = 9343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===23) {
	            this.state = 9342;
	            this.tag_allowed_values();
	        }

	        this.state = 9346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 9345;
	            this.comment_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tag_allowed_values() {
	    let localctx = new Tag_allowed_valuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, SnowflakeParser.RULE_tag_allowed_values);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9348;
	        this.match(SnowflakeParser.ALLOWED_VALUES);
	        this.state = 9349;
	        this.string_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	session_parameter() {
	    let localctx = new Session_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, SnowflakeParser.RULE_session_parameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9351;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 83886088) !== 0) || _la===51 || _la===52 || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 4026531843) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 127) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 561) !== 0) || ((((_la - 211)) & ~0x1f) === 0 && ((1 << (_la - 211)) & 2147681289) !== 0) || _la===289 || _la===290 || ((((_la - 331)) & ~0x1f) === 0 && ((1 << (_la - 331)) & 3260417) !== 0) || ((((_la - 376)) & ~0x1f) === 0 && ((1 << (_la - 376)) & 2148270081) !== 0) || _la===415 || _la===420 || ((((_la - 510)) & ~0x1f) === 0 && ((1 << (_la - 510)) & 2684360721) !== 0) || ((((_la - 566)) & ~0x1f) === 0 && ((1 << (_la - 566)) & 536870915) !== 0) || ((((_la - 617)) & ~0x1f) === 0 && ((1 << (_la - 617)) & 2281701377) !== 0) || ((((_la - 669)) & ~0x1f) === 0 && ((1 << (_la - 669)) & 16783361) !== 0) || ((((_la - 703)) & ~0x1f) === 0 && ((1 << (_la - 703)) & 2852126721) !== 0) || ((((_la - 735)) & ~0x1f) === 0 && ((1 << (_la - 735)) & 268829515) !== 0) || ((((_la - 771)) & ~0x1f) === 0 && ((1 << (_la - 771)) & 3221236737) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	session_parameter_list() {
	    let localctx = new Session_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, SnowflakeParser.RULE_session_parameter_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9353;
	        this.session_parameter();
	        this.state = 9358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 9354;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 9355;
	            this.session_parameter();
	            this.state = 9360;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	session_params_list() {
	    let localctx = new Session_params_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, SnowflakeParser.RULE_session_params_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9361;
	        this.session_params();
	        this.state = 9366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 9362;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 9363;
	            this.session_params();
	            this.state = 9368;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_task() {
	    let localctx = new Create_taskContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, SnowflakeParser.RULE_create_task);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9369;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 9371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 9370;
	            this.or_replace();
	        }

	        this.state = 9373;
	        this.match(SnowflakeParser.TASK);
	        this.state = 9375;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1186,this._ctx);
	        if(la_===1) {
	            this.state = 9374;
	            this.if_not_exists();

	        }
	        this.state = 9377;
	        this.object_name();
	        this.state = 9381;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3 || _la===27 || _la===51 || _la===87 || _la===88 || _la===170 || _la===171 || ((((_la - 225)) & ~0x1f) === 0 && ((1 << (_la - 225)) & 13) !== 0) || _la===351 || _la===376 || _la===539 || _la===595 || _la===622 || _la===648 || ((((_la - 681)) & ~0x1f) === 0 && ((1 << (_la - 681)) & 4198401) !== 0) || ((((_la - 728)) & ~0x1f) === 0 && ((1 << (_la - 728)) & 33662421) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 2883841) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 97) !== 0)) {
	            this.state = 9378;
	            this.task_parameters();
	            this.state = 9383;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 9385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 9384;
	            this.comment_clause();
	        }

	        this.state = 9388;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 9387;
	            this.copy_grants();
	        }

	        this.state = 9399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14) {
	            this.state = 9390;
	            this.match(SnowflakeParser.AFTER);
	            this.state = 9391;
	            this.object_name();
	            this.state = 9396;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 9392;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 9393;
	                this.object_name();
	                this.state = 9398;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 9403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===803) {
	            this.state = 9401;
	            this.match(SnowflakeParser.WHEN);
	            this.state = 9402;
	            this.search_condition(0);
	        }

	        this.state = 9405;
	        this.match(SnowflakeParser.AS);
	        this.state = 9406;
	        this.sql();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_parameters() {
	    let localctx = new Task_parametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, SnowflakeParser.RULE_task_parameters);
	    try {
	        this.state = 9415;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 781:
	        case 796:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9408;
	            this.task_compute();
	            break;
	        case 622:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9409;
	            this.task_schedule();
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9410;
	            this.task_overlap();
	            break;
	        case 3:
	        case 51:
	        case 87:
	        case 88:
	        case 170:
	        case 171:
	        case 227:
	        case 228:
	        case 351:
	        case 376:
	        case 539:
	        case 595:
	        case 648:
	        case 681:
	        case 693:
	        case 728:
	        case 730:
	        case 732:
	        case 734:
	        case 735:
	        case 736:
	        case 738:
	        case 741:
	        case 743:
	        case 744:
	        case 753:
	        case 763:
	        case 771:
	        case 784:
	        case 801:
	        case 802:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9411;
	            this.session_params_list();
	            break;
	        case 782:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9412;
	            this.task_timeout();
	            break;
	        case 703:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9413;
	            this.task_suspend_after_failure_number();
	            break;
	        case 225:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9414;
	            this.task_error_integration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_compute() {
	    let localctx = new Task_computeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, SnowflakeParser.RULE_task_compute);
	    try {
	        this.state = 9426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 796:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9417;
	            this.match(SnowflakeParser.WAREHOUSE);
	            this.state = 9418;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9419;
	            this.id_();
	            break;
	        case 781:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9420;
	            this.match(SnowflakeParser.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE);
	            this.state = 9421;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9424;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 358:
	            case 398:
	            case 656:
	            case 812:
	            case 815:
	            case 816:
	                this.state = 9422;
	                this.wh_common_size();
	                break;
	            case 869:
	                this.state = 9423;
	                this.string();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_schedule() {
	    let localctx = new Task_scheduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, SnowflakeParser.RULE_task_schedule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9428;
	        this.match(SnowflakeParser.SCHEDULE);
	        this.state = 9429;
	        this.match(SnowflakeParser.EQ);
	        this.state = 9430;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_timeout() {
	    let localctx = new Task_timeoutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, SnowflakeParser.RULE_task_timeout);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9432;
	        this.match(SnowflakeParser.USER_TASK_TIMEOUT_MS);
	        this.state = 9433;
	        this.match(SnowflakeParser.EQ);
	        this.state = 9434;
	        this.num();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_suspend_after_failure_number() {
	    let localctx = new Task_suspend_after_failure_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, SnowflakeParser.RULE_task_suspend_after_failure_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9436;
	        this.match(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES);
	        this.state = 9437;
	        this.match(SnowflakeParser.EQ);
	        this.state = 9438;
	        this.num();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_error_integration() {
	    let localctx = new Task_error_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, SnowflakeParser.RULE_task_error_integration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9440;
	        this.match(SnowflakeParser.ERROR_INTEGRATION);
	        this.state = 9441;
	        this.match(SnowflakeParser.EQ);
	        this.state = 9442;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_overlap() {
	    let localctx = new Task_overlapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, SnowflakeParser.RULE_task_overlap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9444;
	        this.match(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION);
	        this.state = 9445;
	        this.match(SnowflakeParser.EQ);
	        this.state = 9446;
	        this.true_false();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql() {
	    let localctx = new SqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, SnowflakeParser.RULE_sql);
	    try {
	        this.state = 9453;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1196,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9448;
	            this.match(SnowflakeParser.EXECUTE);
	            this.state = 9449;
	            this.match(SnowflakeParser.IMMEDIATE);
	            this.state = 9450;
	            this.match(SnowflakeParser.DBL_DOLLAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9451;
	            this.sql_command();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9452;
	            this.call();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call() {
	    let localctx = new CallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, SnowflakeParser.RULE_call);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9455;
	        this.match(SnowflakeParser.CALL);
	        this.state = 9456;
	        this.object_name();
	        this.state = 9457;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 9459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 3027457) !== 0) || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 12860573) !== 0) || ((((_la - 159)) & ~0x1f) === 0 && ((1 << (_la - 159)) & 2558567251) !== 0) || ((((_la - 199)) & ~0x1f) === 0 && ((1 << (_la - 199)) & 16777301) !== 0) || ((((_la - 231)) & ~0x1f) === 0 && ((1 << (_la - 231)) & 67109185) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 234885127) !== 0) || ((((_la - 304)) & ~0x1f) === 0 && ((1 << (_la - 304)) & 545269697) !== 0) || ((((_la - 336)) & ~0x1f) === 0 && ((1 << (_la - 336)) & 4147253525) !== 0) || ((((_la - 368)) & ~0x1f) === 0 && ((1 << (_la - 368)) & 67115041) !== 0) || ((((_la - 402)) & ~0x1f) === 0 && ((1 << (_la - 402)) & 167936065) !== 0) || ((((_la - 436)) & ~0x1f) === 0 && ((1 << (_la - 436)) & 1082917099) !== 0) || ((((_la - 471)) & ~0x1f) === 0 && ((1 << (_la - 471)) & 4291822001) !== 0) || ((((_la - 503)) & ~0x1f) === 0 && ((1 << (_la - 503)) & 1006690331) !== 0) || ((((_la - 542)) & ~0x1f) === 0 && ((1 << (_la - 542)) & 1476659265) !== 0) || ((((_la - 574)) & ~0x1f) === 0 && ((1 << (_la - 574)) & 38234117) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 92177) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 3120793413) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4278190603) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3254779903) !== 0) || ((((_la - 861)) & ~0x1f) === 0 && ((1 << (_la - 861)) & 2860519171) !== 0) || _la===901 || _la===902) {
	            this.state = 9458;
	            this.expr_list();
	        }

	        this.state = 9461;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_user() {
	    let localctx = new Create_userContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, SnowflakeParser.RULE_create_user);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9463;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 9465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 9464;
	            this.or_replace();
	        }

	        this.state = 9467;
	        this.match(SnowflakeParser.USER);
	        this.state = 9469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1199,this._ctx);
	        if(la_===1) {
	            this.state = 9468;
	            this.if_not_exists();

	        }
	        this.state = 9471;
	        this.id_();
	        this.state = 9473;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134 || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 9437241) !== 0) || _la===205 || _la===266 || _la===360 || _la===377 || ((((_la - 401)) & ~0x1f) === 0 && ((1 << (_la - 401)) & 32781) !== 0) || _la===493 || _la===597 || _la===598) {
	            this.state = 9472;
	            this.object_properties();
	        }

	        this.state = 9476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1201,this._ctx);
	        if(la_===1) {
	            this.state = 9475;
	            this.object_params();

	        }
	        this.state = 9479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3 || _la===51 || _la===87 || _la===88 || _la===170 || _la===171 || _la===227 || _la===228 || _la===351 || _la===376 || _la===539 || _la===595 || _la===648 || _la===681 || _la===693 || ((((_la - 728)) & ~0x1f) === 0 && ((1 << (_la - 728)) & 33662421) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 2097409) !== 0) || _la===801 || _la===802) {
	            this.state = 9478;
	            this.session_params();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	view_col() {
	    let localctx = new View_colContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, SnowflakeParser.RULE_view_col);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9481;
	        this.column_name();
	        this.state = 9482;
	        this.with_masking_policy();
	        this.state = 9483;
	        this.with_tags();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_view() {
	    let localctx = new Create_viewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, SnowflakeParser.RULE_create_view);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9485;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 9487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 9486;
	            this.or_replace();
	        }

	        this.state = 9490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===629) {
	            this.state = 9489;
	            this.match(SnowflakeParser.SECURE);
	        }

	        this.state = 9493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===548) {
	            this.state = 9492;
	            this.match(SnowflakeParser.RECURSIVE);
	        }

	        this.state = 9495;
	        this.match(SnowflakeParser.VIEW);
	        this.state = 9497;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1206,this._ctx);
	        if(la_===1) {
	            this.state = 9496;
	            this.if_not_exists();

	        }
	        this.state = 9499;
	        this.object_name();
	        this.state = 9504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===888) {
	            this.state = 9500;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 9501;
	            this.column_list_with_comment();
	            this.state = 9502;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 9509;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1208,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 9506;
	                this.view_col(); 
	            }
	            this.state = 9511;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1208,this._ctx);
	        }

	        this.state = 9513;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1209,this._ctx);
	        if(la_===1) {
	            this.state = 9512;
	            this.with_row_access_policy();

	        }
	        this.state = 9516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===715 || _la===805) {
	            this.state = 9515;
	            this.with_tags();
	        }

	        this.state = 9519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 9518;
	            this.copy_grants();
	        }

	        this.state = 9522;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 9521;
	            this.comment_clause();
	        }

	        this.state = 9524;
	        this.match(SnowflakeParser.AS);
	        this.state = 9525;
	        this.query_statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_warehouse() {
	    let localctx = new Create_warehouseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, SnowflakeParser.RULE_create_warehouse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9527;
	        this.match(SnowflakeParser.CREATE);
	        this.state = 9529;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===472) {
	            this.state = 9528;
	            this.or_replace();
	        }

	        this.state = 9531;
	        this.match(SnowflakeParser.WAREHOUSE);
	        this.state = 9533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1214,this._ctx);
	        if(la_===1) {
	            this.state = 9532;
	            this.if_not_exists();

	        }
	        this.state = 9535;
	        this.id_fn();
	        this.state = 9544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1217,this._ctx);
	        if(la_===1) {
	            this.state = 9537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===805) {
	                this.state = 9536;
	                this.match(SnowflakeParser.WITH);
	            }

	            this.state = 9540; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 9539;
	            		this.wh_properties();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 9542; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,1216, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

	        }
	        this.state = 9549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===394 || _la===680 || _la===681) {
	            this.state = 9546;
	            this.wh_params();
	            this.state = 9551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wh_common_size() {
	    let localctx = new Wh_common_sizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, SnowflakeParser.RULE_wh_common_size);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9552;
	        _la = this._input.LA(1);
	        if(!(_la===358 || _la===398 || _la===656 || ((((_la - 812)) & ~0x1f) === 0 && ((1 << (_la - 812)) & 25) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wh_extra_size() {
	    let localctx = new Wh_extra_sizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, SnowflakeParser.RULE_wh_extra_size);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9554;
	        _la = this._input.LA(1);
	        if(!(((((_la - 809)) & ~0x1f) === 0 && ((1 << (_la - 809)) & 263) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wh_properties() {
	    let localctx = new Wh_propertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, SnowflakeParser.RULE_wh_properties);
	    var _la = 0;
	    try {
	        this.state = 9600;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 798:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9556;
	            this.match(SnowflakeParser.WAREHOUSE_SIZE);
	            this.state = 9557;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9561;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 358:
	            case 398:
	            case 656:
	            case 812:
	            case 815:
	            case 816:
	                this.state = 9558;
	                this.wh_common_size();
	                break;
	            case 809:
	            case 810:
	            case 811:
	            case 817:
	                this.state = 9559;
	                this.wh_extra_size();
	                break;
	            case 862:
	                this.state = 9560;
	                this.match(SnowflakeParser.ID2);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 799:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9563;
	            this.match(SnowflakeParser.WAREHOUSE_TYPE);
	            this.state = 9564;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9565;
	            _la = this._input.LA(1);
	            if(!(_la===661 || _la===674)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 393:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9566;
	            this.match(SnowflakeParser.MAX_CLUSTER_COUNT);
	            this.state = 9567;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9568;
	            this.num();
	            break;
	        case 406:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9569;
	            this.match(SnowflakeParser.MIN_CLUSTER_COUNT);
	            this.state = 9570;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9571;
	            this.num();
	            break;
	        case 621:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9572;
	            this.match(SnowflakeParser.SCALING_POLICY);
	            this.state = 9573;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9574;
	            _la = this._input.LA(1);
	            if(!(_la===202 || _la===674)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9575;
	            this.match(SnowflakeParser.AUTO_SUSPEND);
	            this.state = 9579;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 878:
	                this.state = 9576;
	                this.match(SnowflakeParser.EQ);
	                this.state = 9577;
	                this.num();
	                break;
	            case 439:
	                this.state = 9578;
	                this.match(SnowflakeParser.NULL_);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9581;
	            this.match(SnowflakeParser.AUTO_RESUME);
	            this.state = 9582;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9583;
	            this.true_false();
	            break;
	        case 330:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9584;
	            this.match(SnowflakeParser.INITIALLY_SUSPENDED);
	            this.state = 9585;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9586;
	            this.true_false();
	            break;
	        case 571:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 9587;
	            this.match(SnowflakeParser.RESOURCE_MONITOR);
	            this.state = 9588;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9589;
	            this.id_();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 9590;
	            this.comment_clause();
	            break;
	        case 213:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 9591;
	            this.match(SnowflakeParser.ENABLE_QUERY_ACCELERATION);
	            this.state = 9592;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9593;
	            this.true_false();
	            break;
	        case 538:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 9594;
	            this.match(SnowflakeParser.QUERY_ACCELERATION_MAX_SCALE_FACTOR);
	            this.state = 9595;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9596;
	            this.num();
	            break;
	        case 394:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 9597;
	            this.match(SnowflakeParser.MAX_CONCURRENCY_LEVEL);
	            this.state = 9598;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9599;
	            this.num();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wh_params() {
	    let localctx = new Wh_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, SnowflakeParser.RULE_wh_params);
	    var _la = 0;
	    try {
	        this.state = 9614;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 394:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9602;
	            this.match(SnowflakeParser.MAX_CONCURRENCY_LEVEL);
	            this.state = 9603;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9604;
	            this.num();
	            break;
	        case 680:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9605;
	            this.match(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS);
	            this.state = 9606;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9607;
	            this.num();
	            break;
	        case 681:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9608;
	            this.match(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS);
	            this.state = 9609;
	            this.match(SnowflakeParser.EQ);
	            this.state = 9610;
	            this.num();
	            this.state = 9612;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===715 || _la===805) {
	                this.state = 9611;
	                this.with_tags();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigger_definition() {
	    let localctx = new Trigger_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, SnowflakeParser.RULE_trigger_definition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9616;
	        this.match(SnowflakeParser.ON);
	        this.state = 9617;
	        this.num();
	        this.state = 9618;
	        this.match(SnowflakeParser.PERCENT);
	        this.state = 9619;
	        this.match(SnowflakeParser.DO);
	        this.state = 9620;
	        _la = this._input.LA(1);
	        if(!(_la===433 || _la===700 || _la===702)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type_name() {
	    let localctx = new Object_type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, SnowflakeParser.RULE_object_type_name);
	    try {
	        this.state = 9649;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 587:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9622;
	            this.match(SnowflakeParser.ROLE);
	            break;
	        case 777:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9623;
	            this.match(SnowflakeParser.USER);
	            break;
	        case 796:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9624;
	            this.match(SnowflakeParser.WAREHOUSE);
	            break;
	        case 337:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9625;
	            this.match(SnowflakeParser.INTEGRATION);
	            break;
	        case 419:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9626;
	            this.match(SnowflakeParser.NETWORK);
	            this.state = 9627;
	            this.match(SnowflakeParser.POLICY);
	            break;
	        case 636:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9628;
	            this.match(SnowflakeParser.SESSION);
	            this.state = 9629;
	            this.match(SnowflakeParser.POLICY);
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9630;
	            this.match(SnowflakeParser.DATABASE);
	            break;
	        case 623:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9631;
	            this.match(SnowflakeParser.SCHEMA);
	            break;
	        case 708:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 9632;
	            this.match(SnowflakeParser.TABLE);
	            break;
	        case 793:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 9633;
	            this.match(SnowflakeParser.VIEW);
	            break;
	        case 670:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 9634;
	            this.match(SnowflakeParser.STAGE);
	            break;
	        case 261:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 9635;
	            this.match(SnowflakeParser.FILE);
	            this.state = 9636;
	            this.match(SnowflakeParser.FORMAT);
	            break;
	        case 690:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 9637;
	            this.match(SnowflakeParser.STREAM);
	            break;
	        case 718:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 9638;
	            this.match(SnowflakeParser.TASK);
	            break;
	        case 384:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 9639;
	            this.match(SnowflakeParser.MASKING);
	            this.state = 9640;
	            this.match(SnowflakeParser.POLICY);
	            break;
	        case 593:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 9641;
	            this.match(SnowflakeParser.ROW);
	            this.state = 9642;
	            this.match(SnowflakeParser.ACCESS);
	            this.state = 9643;
	            this.match(SnowflakeParser.POLICY);
	            break;
	        case 715:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 9644;
	            this.match(SnowflakeParser.TAG);
	            break;
	        case 512:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 9645;
	            this.match(SnowflakeParser.PIPE);
	            break;
	        case 278:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 9646;
	            this.match(SnowflakeParser.FUNCTION);
	            break;
	        case 527:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 9647;
	            this.match(SnowflakeParser.PROCEDURE);
	            break;
	        case 634:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 9648;
	            this.match(SnowflakeParser.SEQUENCE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type_plural() {
	    let localctx = new Object_type_pluralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, SnowflakeParser.RULE_object_type_plural);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9651;
	        _la = this._input.LA(1);
	        if(!(_la===16 || _la===165 || _la===338 || _la===516 || _la===588 || _la===624 || _la===671 || _la===691 || ((((_la - 711)) & ~0x1f) === 0 && ((1 << (_la - 711)) & 289) !== 0) || ((((_la - 779)) & ~0x1f) === 0 && ((1 << (_la - 779)) & 294913) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_command() {
	    let localctx = new Drop_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, SnowflakeParser.RULE_drop_command);
	    try {
	        this.state = 9686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1225,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9653;
	            this.drop_object();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9654;
	            this.drop_alert();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9655;
	            this.drop_connection();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9656;
	            this.drop_database();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9657;
	            this.drop_dynamic_table();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 9658;
	            this.drop_external_table();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 9659;
	            this.drop_failover_group();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 9660;
	            this.drop_file_format();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 9661;
	            this.drop_function();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 9662;
	            this.drop_integration();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 9663;
	            this.drop_managed_account();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 9664;
	            this.drop_masking_policy();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 9665;
	            this.drop_materialized_view();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 9666;
	            this.drop_network_policy();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 9667;
	            this.drop_password_policy();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 9668;
	            this.drop_pipe();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 9669;
	            this.drop_procedure();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 9670;
	            this.drop_replication_group();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 9671;
	            this.drop_resource_monitor();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 9672;
	            this.drop_role();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 9673;
	            this.drop_row_access_policy();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 9674;
	            this.drop_schema();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 9675;
	            this.drop_sequence();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 9676;
	            this.drop_session_policy();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 9677;
	            this.drop_share();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 9678;
	            this.drop_stage();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 9679;
	            this.drop_stream();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 9680;
	            this.drop_table();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 9681;
	            this.drop_tag();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 9682;
	            this.drop_task();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 9683;
	            this.drop_user();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 9684;
	            this.drop_view();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 9685;
	            this.drop_warehouse();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_object() {
	    let localctx = new Drop_objectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, SnowflakeParser.RULE_drop_object);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9688;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9689;
	        this.object_type();
	        this.state = 9690;
	        this.if_exists();
	        this.state = 9691;
	        this.id_();
	        this.state = 9693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101 || _la===574) {
	            this.state = 9692;
	            this.cascade_restrict();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_alert() {
	    let localctx = new Drop_alertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, SnowflakeParser.RULE_drop_alert);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9695;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9696;
	        this.match(SnowflakeParser.ALERT);
	        this.state = 9697;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_connection() {
	    let localctx = new Drop_connectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, SnowflakeParser.RULE_drop_connection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9699;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9700;
	        this.match(SnowflakeParser.CONNECTION);
	        this.state = 9702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1227,this._ctx);
	        if(la_===1) {
	            this.state = 9701;
	            this.if_exists();

	        }
	        this.state = 9704;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_database() {
	    let localctx = new Drop_databaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, SnowflakeParser.RULE_drop_database);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9706;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9707;
	        this.match(SnowflakeParser.DATABASE);
	        this.state = 9709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1228,this._ctx);
	        if(la_===1) {
	            this.state = 9708;
	            this.if_exists();

	        }
	        this.state = 9711;
	        this.id_();
	        this.state = 9713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101 || _la===574) {
	            this.state = 9712;
	            this.cascade_restrict();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_dynamic_table() {
	    let localctx = new Drop_dynamic_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, SnowflakeParser.RULE_drop_dynamic_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9715;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9716;
	        this.match(SnowflakeParser.DYNAMIC);
	        this.state = 9717;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 9718;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_external_table() {
	    let localctx = new Drop_external_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, SnowflakeParser.RULE_drop_external_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9720;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9721;
	        this.match(SnowflakeParser.EXTERNAL);
	        this.state = 9722;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 9724;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1230,this._ctx);
	        if(la_===1) {
	            this.state = 9723;
	            this.if_exists();

	        }
	        this.state = 9726;
	        this.object_name();
	        this.state = 9728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101 || _la===574) {
	            this.state = 9727;
	            this.cascade_restrict();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_failover_group() {
	    let localctx = new Drop_failover_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, SnowflakeParser.RULE_drop_failover_group);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9730;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9731;
	        this.match(SnowflakeParser.FAILOVER);
	        this.state = 9732;
	        this.match(SnowflakeParser.GROUP);
	        this.state = 9734;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1232,this._ctx);
	        if(la_===1) {
	            this.state = 9733;
	            this.if_exists();

	        }
	        this.state = 9736;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_file_format() {
	    let localctx = new Drop_file_formatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, SnowflakeParser.RULE_drop_file_format);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9738;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9739;
	        this.match(SnowflakeParser.FILE);
	        this.state = 9740;
	        this.match(SnowflakeParser.FORMAT);
	        this.state = 9742;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1233,this._ctx);
	        if(la_===1) {
	            this.state = 9741;
	            this.if_exists();

	        }
	        this.state = 9744;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_function() {
	    let localctx = new Drop_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, SnowflakeParser.RULE_drop_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9746;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9747;
	        this.match(SnowflakeParser.FUNCTION);
	        this.state = 9749;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1234,this._ctx);
	        if(la_===1) {
	            this.state = 9748;
	            this.if_exists();

	        }
	        this.state = 9751;
	        this.object_name();
	        this.state = 9752;
	        this.arg_types();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_integration() {
	    let localctx = new Drop_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, SnowflakeParser.RULE_drop_integration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9754;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9756;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32 || _la===430 || _la===630 || _la===683) {
	            this.state = 9755;
	            _la = this._input.LA(1);
	            if(!(_la===32 || _la===430 || _la===630 || _la===683)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 9758;
	        this.match(SnowflakeParser.INTEGRATION);
	        this.state = 9760;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1236,this._ctx);
	        if(la_===1) {
	            this.state = 9759;
	            this.if_exists();

	        }
	        this.state = 9762;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_managed_account() {
	    let localctx = new Drop_managed_accountContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, SnowflakeParser.RULE_drop_managed_account);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9764;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9765;
	        this.match(SnowflakeParser.MANAGED);
	        this.state = 9766;
	        this.match(SnowflakeParser.ACCOUNT);
	        this.state = 9767;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_masking_policy() {
	    let localctx = new Drop_masking_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, SnowflakeParser.RULE_drop_masking_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9769;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9770;
	        this.match(SnowflakeParser.MASKING);
	        this.state = 9771;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 9772;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_materialized_view() {
	    let localctx = new Drop_materialized_viewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, SnowflakeParser.RULE_drop_materialized_view);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9774;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9775;
	        this.match(SnowflakeParser.MATERIALIZED);
	        this.state = 9776;
	        this.match(SnowflakeParser.VIEW);
	        this.state = 9778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1237,this._ctx);
	        if(la_===1) {
	            this.state = 9777;
	            this.if_exists();

	        }
	        this.state = 9780;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_network_policy() {
	    let localctx = new Drop_network_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, SnowflakeParser.RULE_drop_network_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9782;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9783;
	        this.match(SnowflakeParser.NETWORK);
	        this.state = 9784;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 9786;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1238,this._ctx);
	        if(la_===1) {
	            this.state = 9785;
	            this.if_exists();

	        }
	        this.state = 9788;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_pipe() {
	    let localctx = new Drop_pipeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, SnowflakeParser.RULE_drop_pipe);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9790;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9791;
	        this.match(SnowflakeParser.PIPE);
	        this.state = 9793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1239,this._ctx);
	        if(la_===1) {
	            this.state = 9792;
	            this.if_exists();

	        }
	        this.state = 9795;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_procedure() {
	    let localctx = new Drop_procedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, SnowflakeParser.RULE_drop_procedure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9797;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9798;
	        this.match(SnowflakeParser.PROCEDURE);
	        this.state = 9800;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1240,this._ctx);
	        if(la_===1) {
	            this.state = 9799;
	            this.if_exists();

	        }
	        this.state = 9802;
	        this.object_name();
	        this.state = 9803;
	        this.arg_types();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_replication_group() {
	    let localctx = new Drop_replication_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, SnowflakeParser.RULE_drop_replication_group);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9805;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9806;
	        this.match(SnowflakeParser.REPLICATION);
	        this.state = 9807;
	        this.match(SnowflakeParser.GROUP);
	        this.state = 9809;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1241,this._ctx);
	        if(la_===1) {
	            this.state = 9808;
	            this.if_exists();

	        }
	        this.state = 9811;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_resource_monitor() {
	    let localctx = new Drop_resource_monitorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, SnowflakeParser.RULE_drop_resource_monitor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9813;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9814;
	        this.match(SnowflakeParser.RESOURCE);
	        this.state = 9815;
	        this.match(SnowflakeParser.MONITOR);
	        this.state = 9816;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_role() {
	    let localctx = new Drop_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, SnowflakeParser.RULE_drop_role);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9818;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9819;
	        this.match(SnowflakeParser.ROLE);
	        this.state = 9821;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1242,this._ctx);
	        if(la_===1) {
	            this.state = 9820;
	            this.if_exists();

	        }
	        this.state = 9823;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_row_access_policy() {
	    let localctx = new Drop_row_access_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, SnowflakeParser.RULE_drop_row_access_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9825;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9826;
	        this.match(SnowflakeParser.ROW);
	        this.state = 9827;
	        this.match(SnowflakeParser.ACCESS);
	        this.state = 9828;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 9830;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1243,this._ctx);
	        if(la_===1) {
	            this.state = 9829;
	            this.if_exists();

	        }
	        this.state = 9832;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_schema() {
	    let localctx = new Drop_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, SnowflakeParser.RULE_drop_schema);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9834;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9835;
	        this.match(SnowflakeParser.SCHEMA);
	        this.state = 9837;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1244,this._ctx);
	        if(la_===1) {
	            this.state = 9836;
	            this.if_exists();

	        }
	        this.state = 9839;
	        this.schema_name();
	        this.state = 9841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101 || _la===574) {
	            this.state = 9840;
	            this.cascade_restrict();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_sequence() {
	    let localctx = new Drop_sequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, SnowflakeParser.RULE_drop_sequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9843;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9844;
	        this.match(SnowflakeParser.SEQUENCE);
	        this.state = 9846;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1246,this._ctx);
	        if(la_===1) {
	            this.state = 9845;
	            this.if_exists();

	        }
	        this.state = 9848;
	        this.object_name();
	        this.state = 9850;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101 || _la===574) {
	            this.state = 9849;
	            this.cascade_restrict();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_session_policy() {
	    let localctx = new Drop_session_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, SnowflakeParser.RULE_drop_session_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9852;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9853;
	        this.match(SnowflakeParser.SESSION);
	        this.state = 9854;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 9856;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1248,this._ctx);
	        if(la_===1) {
	            this.state = 9855;
	            this.if_exists();

	        }
	        this.state = 9858;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_password_policy() {
	    let localctx = new Drop_password_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, SnowflakeParser.RULE_drop_password_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9860;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9861;
	        this.match(SnowflakeParser.PASSWORD);
	        this.state = 9862;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 9864;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1249,this._ctx);
	        if(la_===1) {
	            this.state = 9863;
	            this.if_exists();

	        }
	        this.state = 9866;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_share() {
	    let localctx = new Drop_shareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, SnowflakeParser.RULE_drop_share);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9868;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9869;
	        this.match(SnowflakeParser.SHARE);
	        this.state = 9870;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_stream() {
	    let localctx = new Drop_streamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, SnowflakeParser.RULE_drop_stream);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9872;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9873;
	        this.match(SnowflakeParser.STREAM);
	        this.state = 9875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1250,this._ctx);
	        if(la_===1) {
	            this.state = 9874;
	            this.if_exists();

	        }
	        this.state = 9877;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_table() {
	    let localctx = new Drop_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, SnowflakeParser.RULE_drop_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9879;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9880;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 9882;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1251,this._ctx);
	        if(la_===1) {
	            this.state = 9881;
	            this.if_exists();

	        }
	        this.state = 9884;
	        this.object_name();
	        this.state = 9886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101 || _la===574) {
	            this.state = 9885;
	            this.cascade_restrict();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_tag() {
	    let localctx = new Drop_tagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, SnowflakeParser.RULE_drop_tag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9888;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9889;
	        this.match(SnowflakeParser.TAG);
	        this.state = 9891;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1253,this._ctx);
	        if(la_===1) {
	            this.state = 9890;
	            this.if_exists();

	        }
	        this.state = 9893;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_task() {
	    let localctx = new Drop_taskContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, SnowflakeParser.RULE_drop_task);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9895;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9896;
	        this.match(SnowflakeParser.TASK);
	        this.state = 9898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1254,this._ctx);
	        if(la_===1) {
	            this.state = 9897;
	            this.if_exists();

	        }
	        this.state = 9900;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_user() {
	    let localctx = new Drop_userContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, SnowflakeParser.RULE_drop_user);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9902;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9903;
	        this.match(SnowflakeParser.USER);
	        this.state = 9905;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1255,this._ctx);
	        if(la_===1) {
	            this.state = 9904;
	            this.if_exists();

	        }
	        this.state = 9907;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_view() {
	    let localctx = new Drop_viewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, SnowflakeParser.RULE_drop_view);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9909;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9910;
	        this.match(SnowflakeParser.VIEW);
	        this.state = 9912;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1256,this._ctx);
	        if(la_===1) {
	            this.state = 9911;
	            this.if_exists();

	        }
	        this.state = 9914;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_warehouse() {
	    let localctx = new Drop_warehouseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, SnowflakeParser.RULE_drop_warehouse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9916;
	        this.match(SnowflakeParser.DROP);
	        this.state = 9917;
	        this.match(SnowflakeParser.WAREHOUSE);
	        this.state = 9919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1257,this._ctx);
	        if(la_===1) {
	            this.state = 9918;
	            this.if_exists();

	        }
	        this.state = 9921;
	        this.id_fn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cascade_restrict() {
	    let localctx = new Cascade_restrictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, SnowflakeParser.RULE_cascade_restrict);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9923;
	        _la = this._input.LA(1);
	        if(!(_la===101 || _la===574)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_types() {
	    let localctx = new Arg_typesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, SnowflakeParser.RULE_arg_types);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9925;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 9927;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110 || _la===111 || _la===336 || _la===441 || _la===454 || ((((_la - 724)) & ~0x1f) === 0 && ((1 << (_la - 724)) & 8841) !== 0) || ((((_la - 820)) & ~0x1f) === 0 && ((1 << (_la - 820)) & 4294934525) !== 0)) {
	            this.state = 9926;
	            this.data_type_list();
	        }

	        this.state = 9929;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	undrop_command() {
	    let localctx = new Undrop_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, SnowflakeParser.RULE_undrop_command);
	    try {
	        this.state = 9935;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1259,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9931;
	            this.undrop_database();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9932;
	            this.undrop_schema();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9933;
	            this.undrop_table();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9934;
	            this.undrop_tag();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	undrop_database() {
	    let localctx = new Undrop_databaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, SnowflakeParser.RULE_undrop_database);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9937;
	        this.match(SnowflakeParser.UNDROP);
	        this.state = 9938;
	        this.match(SnowflakeParser.DATABASE);
	        this.state = 9939;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	undrop_schema() {
	    let localctx = new Undrop_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, SnowflakeParser.RULE_undrop_schema);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9941;
	        this.match(SnowflakeParser.UNDROP);
	        this.state = 9942;
	        this.match(SnowflakeParser.SCHEMA);
	        this.state = 9943;
	        this.schema_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	undrop_table() {
	    let localctx = new Undrop_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, SnowflakeParser.RULE_undrop_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9945;
	        this.match(SnowflakeParser.UNDROP);
	        this.state = 9946;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 9947;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	undrop_tag() {
	    let localctx = new Undrop_tagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, SnowflakeParser.RULE_undrop_tag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9949;
	        this.match(SnowflakeParser.UNDROP);
	        this.state = 9950;
	        this.match(SnowflakeParser.TAG);
	        this.state = 9951;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_command() {
	    let localctx = new Use_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, SnowflakeParser.RULE_use_command);
	    try {
	        this.state = 9958;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1260,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 9953;
	            this.use_database();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 9954;
	            this.use_role();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 9955;
	            this.use_schema();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 9956;
	            this.use_secondary_roles();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 9957;
	            this.use_warehouse();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_database() {
	    let localctx = new Use_databaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, SnowflakeParser.RULE_use_database);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9960;
	        this.match(SnowflakeParser.USE);
	        this.state = 9961;
	        this.match(SnowflakeParser.DATABASE);
	        this.state = 9962;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_role() {
	    let localctx = new Use_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, SnowflakeParser.RULE_use_role);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9964;
	        this.match(SnowflakeParser.USE);
	        this.state = 9965;
	        this.match(SnowflakeParser.ROLE);
	        this.state = 9966;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_schema() {
	    let localctx = new Use_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, SnowflakeParser.RULE_use_schema);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9968;
	        this.match(SnowflakeParser.USE);
	        this.state = 9970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===623) {
	            this.state = 9969;
	            this.match(SnowflakeParser.SCHEMA);
	        }

	        this.state = 9975;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1262,this._ctx);
	        if(la_===1) {
	            this.state = 9972;
	            this.id_();
	            this.state = 9973;
	            this.match(SnowflakeParser.DOT);

	        }
	        this.state = 9977;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_secondary_roles() {
	    let localctx = new Use_secondary_rolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, SnowflakeParser.RULE_use_secondary_roles);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9979;
	        this.match(SnowflakeParser.USE);
	        this.state = 9980;
	        this.match(SnowflakeParser.SECONDARY);
	        this.state = 9981;
	        this.match(SnowflakeParser.ROLES);
	        this.state = 9982;
	        _la = this._input.LA(1);
	        if(!(_la===17 || _la===425)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_warehouse() {
	    let localctx = new Use_warehouseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, SnowflakeParser.RULE_use_warehouse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9984;
	        this.match(SnowflakeParser.USE);
	        this.state = 9985;
	        this.match(SnowflakeParser.WAREHOUSE);
	        this.state = 9986;
	        this.id_fn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment_clause() {
	    let localctx = new Comment_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, SnowflakeParser.RULE_comment_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9988;
	        this.match(SnowflakeParser.COMMENT);
	        this.state = 9989;
	        this.match(SnowflakeParser.EQ);
	        this.state = 9990;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_suspended() {
	    let localctx = new If_suspendedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, SnowflakeParser.RULE_if_suspended);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9992;
	        this.match(SnowflakeParser.IF);
	        this.state = 9993;
	        this.match(SnowflakeParser.SUSPENDED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_exists() {
	    let localctx = new If_existsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, SnowflakeParser.RULE_if_exists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9995;
	        this.match(SnowflakeParser.IF);
	        this.state = 9996;
	        this.match(SnowflakeParser.EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_not_exists() {
	    let localctx = new If_not_existsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, SnowflakeParser.RULE_if_not_exists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 9998;
	        this.match(SnowflakeParser.IF);
	        this.state = 9999;
	        this.match(SnowflakeParser.NOT);
	        this.state = 10000;
	        this.match(SnowflakeParser.EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_replace() {
	    let localctx = new Or_replaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, SnowflakeParser.RULE_or_replace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10002;
	        this.match(SnowflakeParser.OR);
	        this.state = 10003;
	        this.match(SnowflakeParser.REPLACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe() {
	    let localctx = new DescribeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, SnowflakeParser.RULE_describe);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10005;
	        _la = this._input.LA(1);
	        if(!(_la===188 || _la===189)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_command() {
	    let localctx = new Describe_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, SnowflakeParser.RULE_describe_command);
	    try {
	        this.state = 10036;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1263,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10007;
	            this.describe_alert();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10008;
	            this.describe_database();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10009;
	            this.describe_dynamic_table();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10010;
	            this.describe_event_table();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10011;
	            this.describe_external_table();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 10012;
	            this.describe_file_format();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 10013;
	            this.describe_function();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 10014;
	            this.describe_integration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 10015;
	            this.describe_masking_policy();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 10016;
	            this.describe_materialized_view();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 10017;
	            this.describe_network_policy();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 10018;
	            this.describe_password_policy();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 10019;
	            this.describe_pipe();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 10020;
	            this.describe_procedure();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 10021;
	            this.describe_result();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 10022;
	            this.describe_row_access_policy();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 10023;
	            this.describe_schema();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 10024;
	            this.describe_search_optimization();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 10025;
	            this.describe_sequence();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 10026;
	            this.describe_session_policy();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 10027;
	            this.describe_share();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 10028;
	            this.describe_stage();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 10029;
	            this.describe_stream();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 10030;
	            this.describe_table();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 10031;
	            this.describe_task();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 10032;
	            this.describe_transaction();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 10033;
	            this.describe_user();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 10034;
	            this.describe_view();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 10035;
	            this.describe_warehouse();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_alert() {
	    let localctx = new Describe_alertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, SnowflakeParser.RULE_describe_alert);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10038;
	        this.describe();
	        this.state = 10039;
	        this.match(SnowflakeParser.ALERT);
	        this.state = 10040;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_database() {
	    let localctx = new Describe_databaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, SnowflakeParser.RULE_describe_database);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10042;
	        this.describe();
	        this.state = 10043;
	        this.match(SnowflakeParser.DATABASE);
	        this.state = 10044;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_dynamic_table() {
	    let localctx = new Describe_dynamic_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, SnowflakeParser.RULE_describe_dynamic_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10046;
	        this.describe();
	        this.state = 10047;
	        this.match(SnowflakeParser.DYNAMIC);
	        this.state = 10048;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 10049;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_event_table() {
	    let localctx = new Describe_event_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, SnowflakeParser.RULE_describe_event_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10051;
	        this.describe();
	        this.state = 10052;
	        this.match(SnowflakeParser.EVENT);
	        this.state = 10053;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 10054;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_external_table() {
	    let localctx = new Describe_external_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, SnowflakeParser.RULE_describe_external_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10056;
	        this.describe();
	        this.state = 10058;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===240) {
	            this.state = 10057;
	            this.match(SnowflakeParser.EXTERNAL);
	        }

	        this.state = 10060;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 10061;
	        this.object_name();
	        this.state = 10065;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===764) {
	            this.state = 10062;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 10063;
	            this.match(SnowflakeParser.EQ);
	            this.state = 10064;
	            _la = this._input.LA(1);
	            if(!(_la===133 || _la===670)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_file_format() {
	    let localctx = new Describe_file_formatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, SnowflakeParser.RULE_describe_file_format);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10067;
	        this.describe();
	        this.state = 10068;
	        this.match(SnowflakeParser.FILE);
	        this.state = 10069;
	        this.match(SnowflakeParser.FORMAT);
	        this.state = 10070;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_function() {
	    let localctx = new Describe_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, SnowflakeParser.RULE_describe_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10072;
	        this.describe();
	        this.state = 10073;
	        this.match(SnowflakeParser.FUNCTION);
	        this.state = 10074;
	        this.object_name();
	        this.state = 10075;
	        this.arg_types();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_integration() {
	    let localctx = new Describe_integrationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, SnowflakeParser.RULE_describe_integration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10077;
	        this.describe();
	        this.state = 10079;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32 || _la===430 || _la===630 || _la===683) {
	            this.state = 10078;
	            _la = this._input.LA(1);
	            if(!(_la===32 || _la===430 || _la===630 || _la===683)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 10081;
	        this.match(SnowflakeParser.INTEGRATION);
	        this.state = 10082;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_masking_policy() {
	    let localctx = new Describe_masking_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, SnowflakeParser.RULE_describe_masking_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10084;
	        this.describe();
	        this.state = 10085;
	        this.match(SnowflakeParser.MASKING);
	        this.state = 10086;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 10087;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_materialized_view() {
	    let localctx = new Describe_materialized_viewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, SnowflakeParser.RULE_describe_materialized_view);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10089;
	        this.describe();
	        this.state = 10090;
	        this.match(SnowflakeParser.MATERIALIZED);
	        this.state = 10091;
	        this.match(SnowflakeParser.VIEW);
	        this.state = 10092;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_network_policy() {
	    let localctx = new Describe_network_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, SnowflakeParser.RULE_describe_network_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10094;
	        this.describe();
	        this.state = 10095;
	        this.match(SnowflakeParser.NETWORK);
	        this.state = 10096;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 10097;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_pipe() {
	    let localctx = new Describe_pipeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, SnowflakeParser.RULE_describe_pipe);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10099;
	        this.describe();
	        this.state = 10100;
	        this.match(SnowflakeParser.PIPE);
	        this.state = 10101;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_procedure() {
	    let localctx = new Describe_procedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, SnowflakeParser.RULE_describe_procedure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10103;
	        this.describe();
	        this.state = 10104;
	        this.match(SnowflakeParser.PROCEDURE);
	        this.state = 10105;
	        this.object_name();
	        this.state = 10106;
	        this.arg_types();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_result() {
	    let localctx = new Describe_resultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, SnowflakeParser.RULE_describe_result);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10108;
	        this.describe();
	        this.state = 10109;
	        this.match(SnowflakeParser.RESULT);
	        this.state = 10114;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 869:
	            this.state = 10110;
	            this.match(SnowflakeParser.STRING);
	            break;
	        case 361:
	            this.state = 10111;
	            this.match(SnowflakeParser.LAST_QUERY_ID);
	            this.state = 10112;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 10113;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_row_access_policy() {
	    let localctx = new Describe_row_access_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, SnowflakeParser.RULE_describe_row_access_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10116;
	        this.describe();
	        this.state = 10117;
	        this.match(SnowflakeParser.ROW);
	        this.state = 10118;
	        this.match(SnowflakeParser.ACCESS);
	        this.state = 10119;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 10120;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_schema() {
	    let localctx = new Describe_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, SnowflakeParser.RULE_describe_schema);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10122;
	        this.describe();
	        this.state = 10123;
	        this.match(SnowflakeParser.SCHEMA);
	        this.state = 10124;
	        this.schema_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_search_optimization() {
	    let localctx = new Describe_search_optimizationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, SnowflakeParser.RULE_describe_search_optimization);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10126;
	        this.describe();
	        this.state = 10127;
	        this.match(SnowflakeParser.SEARCH);
	        this.state = 10128;
	        this.match(SnowflakeParser.OPTIMIZATION);
	        this.state = 10129;
	        this.match(SnowflakeParser.ON);
	        this.state = 10130;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_sequence() {
	    let localctx = new Describe_sequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, SnowflakeParser.RULE_describe_sequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10132;
	        this.describe();
	        this.state = 10133;
	        this.match(SnowflakeParser.SEQUENCE);
	        this.state = 10134;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_session_policy() {
	    let localctx = new Describe_session_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, SnowflakeParser.RULE_describe_session_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10136;
	        this.describe();
	        this.state = 10137;
	        this.match(SnowflakeParser.SESSION);
	        this.state = 10138;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 10139;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_password_policy() {
	    let localctx = new Describe_password_policyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, SnowflakeParser.RULE_describe_password_policy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10141;
	        this.describe();
	        this.state = 10142;
	        this.match(SnowflakeParser.PASSWORD);
	        this.state = 10143;
	        this.match(SnowflakeParser.POLICY);
	        this.state = 10144;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_share() {
	    let localctx = new Describe_shareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, SnowflakeParser.RULE_describe_share);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10146;
	        this.describe();
	        this.state = 10147;
	        this.match(SnowflakeParser.SHARE);
	        this.state = 10148;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_stream() {
	    let localctx = new Describe_streamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, SnowflakeParser.RULE_describe_stream);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10150;
	        this.describe();
	        this.state = 10151;
	        this.match(SnowflakeParser.STREAM);
	        this.state = 10152;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_table() {
	    let localctx = new Describe_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, SnowflakeParser.RULE_describe_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10154;
	        this.describe();
	        this.state = 10155;
	        this.match(SnowflakeParser.TABLE);
	        this.state = 10156;
	        this.object_name();
	        this.state = 10160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===764) {
	            this.state = 10157;
	            this.match(SnowflakeParser.TYPE);
	            this.state = 10158;
	            this.match(SnowflakeParser.EQ);
	            this.state = 10159;
	            _la = this._input.LA(1);
	            if(!(_la===133 || _la===670)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_task() {
	    let localctx = new Describe_taskContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, SnowflakeParser.RULE_describe_task);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10162;
	        this.describe();
	        this.state = 10163;
	        this.match(SnowflakeParser.TASK);
	        this.state = 10164;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_transaction() {
	    let localctx = new Describe_transactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, SnowflakeParser.RULE_describe_transaction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10166;
	        this.describe();
	        this.state = 10167;
	        this.match(SnowflakeParser.TRANSACTION);
	        this.state = 10168;
	        this.num();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_user() {
	    let localctx = new Describe_userContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, SnowflakeParser.RULE_describe_user);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10170;
	        this.describe();
	        this.state = 10171;
	        this.match(SnowflakeParser.USER);
	        this.state = 10172;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_view() {
	    let localctx = new Describe_viewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, SnowflakeParser.RULE_describe_view);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10174;
	        this.describe();
	        this.state = 10175;
	        this.match(SnowflakeParser.VIEW);
	        this.state = 10176;
	        this.object_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describe_warehouse() {
	    let localctx = new Describe_warehouseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, SnowflakeParser.RULE_describe_warehouse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10178;
	        this.describe();
	        this.state = 10179;
	        this.match(SnowflakeParser.WAREHOUSE);
	        this.state = 10180;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_command() {
	    let localctx = new Show_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, SnowflakeParser.RULE_show_command);
	    try {
	        this.state = 10236;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1269,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10182;
	            this.show_alerts();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10183;
	            this.show_channels();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10184;
	            this.show_columns();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10185;
	            this.show_connections();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10186;
	            this.show_databases();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 10187;
	            this.show_databases_in_failover_group();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 10188;
	            this.show_databases_in_replication_group();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 10189;
	            this.show_delegated_authorizations();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 10190;
	            this.show_dynamic_tables();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 10191;
	            this.show_event_tables();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 10192;
	            this.show_external_functions();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 10193;
	            this.show_external_tables();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 10194;
	            this.show_failover_groups();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 10195;
	            this.show_file_formats();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 10196;
	            this.show_functions();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 10197;
	            this.show_global_accounts();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 10198;
	            this.show_grants();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 10199;
	            this.show_integrations();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 10200;
	            this.show_locks();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 10201;
	            this.show_managed_accounts();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 10202;
	            this.show_masking_policies();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 10203;
	            this.show_materialized_views();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 10204;
	            this.show_network_policies();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 10205;
	            this.show_objects();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 10206;
	            this.show_organization_accounts();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 10207;
	            this.show_parameters();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 10208;
	            this.show_password_policies();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 10209;
	            this.show_pipes();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 10210;
	            this.show_primary_keys();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 10211;
	            this.show_procedures();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 10212;
	            this.show_regions();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 10213;
	            this.show_replication_accounts();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 10214;
	            this.show_replication_databases();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 10215;
	            this.show_replication_groups();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 10216;
	            this.show_resource_monitors();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 10217;
	            this.show_roles();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 10218;
	            this.show_row_access_policies();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 10219;
	            this.show_schemas();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 10220;
	            this.show_sequences();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 10221;
	            this.show_session_policies();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 10222;
	            this.show_shares();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 10223;
	            this.show_shares_in_failover_group();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 10224;
	            this.show_shares_in_replication_group();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 10225;
	            this.show_stages();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 10226;
	            this.show_streams();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 10227;
	            this.show_tables();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 10228;
	            this.show_tags();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 10229;
	            this.show_tasks();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 10230;
	            this.show_transactions();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 10231;
	            this.show_user_functions();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 10232;
	            this.show_users();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 10233;
	            this.show_variables();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 10234;
	            this.show_views();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 10235;
	            this.show_warehouses();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_alerts() {
	    let localctx = new Show_alertsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, SnowflakeParser.RULE_show_alerts);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10238;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===722) {
	            this.state = 10239;
	            this.match(SnowflakeParser.TERSE);
	        }

	        this.state = 10242;
	        this.match(SnowflakeParser.ALERTS);
	        this.state = 10244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10243;
	            this.like_pattern();
	        }

	        this.state = 10258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10246;
	            this.match(SnowflakeParser.IN);
	            this.state = 10256;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 6:
	                this.state = 10247;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;
	            case 164:
	                this.state = 10248;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10250;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10249;
	                    this.id_();
	                }

	                break;
	            case 623:
	                this.state = 10252;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 10254;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10253;
	                    this.schema_name();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 10261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 10260;
	            this.starts_with();
	        }

	        this.state = 10264;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 10263;
	            this.limit_rows();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_channels() {
	    let localctx = new Show_channelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, SnowflakeParser.RULE_show_channels);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10266;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10267;
	        this.match(SnowflakeParser.CHANNELS);
	        this.state = 10269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10268;
	            this.like_pattern();
	        }

	        this.state = 10288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10271;
	            this.match(SnowflakeParser.IN);
	            this.state = 10286;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1282,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10272;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;

	            case 2:
	                this.state = 10273;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10275;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10274;
	                    this.id_();
	                }

	                break;

	            case 3:
	                this.state = 10277;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 10279;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10278;
	                    this.schema_name();
	                }

	                break;

	            case 4:
	                this.state = 10281;
	                this.match(SnowflakeParser.TABLE);
	                break;

	            case 5:
	                this.state = 10283;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===708) {
	                    this.state = 10282;
	                    this.match(SnowflakeParser.TABLE);
	                }

	                this.state = 10285;
	                this.object_name();
	                break;

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_columns() {
	    let localctx = new Show_columnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, SnowflakeParser.RULE_show_columns);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10290;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10291;
	        this.match(SnowflakeParser.COLUMNS);
	        this.state = 10293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10292;
	            this.like_pattern();
	        }

	        this.state = 10317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10295;
	            this.match(SnowflakeParser.IN);
	            this.state = 10315;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1289,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10296;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;

	            case 2:
	                this.state = 10297;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10299;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10298;
	                    this.id_();
	                }

	                break;

	            case 3:
	                this.state = 10301;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 10303;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10302;
	                    this.schema_name();
	                }

	                break;

	            case 4:
	                this.state = 10305;
	                this.match(SnowflakeParser.TABLE);
	                break;

	            case 5:
	                this.state = 10307;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===708) {
	                    this.state = 10306;
	                    this.match(SnowflakeParser.TABLE);
	                }

	                this.state = 10309;
	                this.object_name();
	                break;

	            case 6:
	                this.state = 10310;
	                this.match(SnowflakeParser.VIEW);
	                break;

	            case 7:
	                this.state = 10312;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===793) {
	                    this.state = 10311;
	                    this.match(SnowflakeParser.VIEW);
	                }

	                this.state = 10314;
	                this.object_name();
	                break;

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_connections() {
	    let localctx = new Show_connectionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, SnowflakeParser.RULE_show_connections);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10319;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10320;
	        this.match(SnowflakeParser.CONNECTIONS);
	        this.state = 10322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10321;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	starts_with() {
	    let localctx = new Starts_withContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, SnowflakeParser.RULE_starts_with);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10324;
	        this.match(SnowflakeParser.STARTS);
	        this.state = 10325;
	        this.match(SnowflakeParser.WITH);
	        this.state = 10326;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limit_rows() {
	    let localctx = new Limit_rowsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, SnowflakeParser.RULE_limit_rows);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10328;
	        this.match(SnowflakeParser.LIMIT);
	        this.state = 10329;
	        this.num();
	        this.state = 10332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===276) {
	            this.state = 10330;
	            this.match(SnowflakeParser.FROM);
	            this.state = 10331;
	            this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_databases() {
	    let localctx = new Show_databasesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, SnowflakeParser.RULE_show_databases);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10334;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===722) {
	            this.state = 10335;
	            this.match(SnowflakeParser.TERSE);
	        }

	        this.state = 10338;
	        this.match(SnowflakeParser.DATABASES);
	        this.state = 10340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===309) {
	            this.state = 10339;
	            this.match(SnowflakeParser.HISTORY);
	        }

	        this.state = 10343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10342;
	            this.like_pattern();
	        }

	        this.state = 10346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 10345;
	            this.starts_with();
	        }

	        this.state = 10349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 10348;
	            this.limit_rows();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_databases_in_failover_group() {
	    let localctx = new Show_databases_in_failover_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, SnowflakeParser.RULE_show_databases_in_failover_group);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10351;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10352;
	        this.match(SnowflakeParser.DATABASES);
	        this.state = 10353;
	        this.match(SnowflakeParser.IN);
	        this.state = 10354;
	        this.match(SnowflakeParser.FAILOVER);
	        this.state = 10355;
	        this.match(SnowflakeParser.GROUP);
	        this.state = 10356;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_databases_in_replication_group() {
	    let localctx = new Show_databases_in_replication_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, SnowflakeParser.RULE_show_databases_in_replication_group);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10358;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10359;
	        this.match(SnowflakeParser.DATABASES);
	        this.state = 10360;
	        this.match(SnowflakeParser.IN);
	        this.state = 10361;
	        this.match(SnowflakeParser.REPLICATION);
	        this.state = 10362;
	        this.match(SnowflakeParser.GROUP);
	        this.state = 10363;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_delegated_authorizations() {
	    let localctx = new Show_delegated_authorizationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, SnowflakeParser.RULE_show_delegated_authorizations);
	    try {
	        this.state = 10381;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1298,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10365;
	            this.match(SnowflakeParser.SHOW);
	            this.state = 10366;
	            this.match(SnowflakeParser.DELEGATED);
	            this.state = 10367;
	            this.match(SnowflakeParser.AUTHORIZATIONS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10368;
	            this.match(SnowflakeParser.SHOW);
	            this.state = 10369;
	            this.match(SnowflakeParser.DELEGATED);
	            this.state = 10370;
	            this.match(SnowflakeParser.AUTHORIZATIONS);
	            this.state = 10371;
	            this.match(SnowflakeParser.BY);
	            this.state = 10372;
	            this.match(SnowflakeParser.USER);
	            this.state = 10373;
	            this.id_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10374;
	            this.match(SnowflakeParser.SHOW);
	            this.state = 10375;
	            this.match(SnowflakeParser.DELEGATED);
	            this.state = 10376;
	            this.match(SnowflakeParser.AUTHORIZATIONS);
	            this.state = 10377;
	            this.match(SnowflakeParser.TO);
	            this.state = 10378;
	            this.match(SnowflakeParser.SECURITY);
	            this.state = 10379;
	            this.match(SnowflakeParser.INTEGRATION);
	            this.state = 10380;
	            this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_dynamic_tables() {
	    let localctx = new Show_dynamic_tablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, SnowflakeParser.RULE_show_dynamic_tables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10383;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10384;
	        this.match(SnowflakeParser.DYNAMIC);
	        this.state = 10385;
	        this.match(SnowflakeParser.TABLES);
	        this.state = 10387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10386;
	            this.like_pattern();
	        }

	        this.state = 10403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10389;
	            this.match(SnowflakeParser.IN);
	            this.state = 10401;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1303,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10390;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;

	            case 2:
	                this.state = 10391;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10393;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10392;
	                    this.id_();
	                }

	                break;

	            case 3:
	                this.state = 10396;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===623) {
	                    this.state = 10395;
	                    this.match(SnowflakeParser.SCHEMA);
	                }

	                this.state = 10399;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10398;
	                    this.schema_name();
	                }

	                break;

	            }
	        }

	        this.state = 10406;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 10405;
	            this.starts_with();
	        }

	        this.state = 10409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 10408;
	            this.limit_rows();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_event_tables() {
	    let localctx = new Show_event_tablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, SnowflakeParser.RULE_show_event_tables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10411;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===722) {
	            this.state = 10412;
	            this.match(SnowflakeParser.TERSE);
	        }

	        this.state = 10415;
	        this.match(SnowflakeParser.EVENT);
	        this.state = 10416;
	        this.match(SnowflakeParser.TABLES);
	        this.state = 10418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10417;
	            this.like_pattern();
	        }

	        this.state = 10434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10420;
	            this.match(SnowflakeParser.IN);
	            this.state = 10432;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1312,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10421;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;

	            case 2:
	                this.state = 10422;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10424;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10423;
	                    this.id_();
	                }

	                break;

	            case 3:
	                this.state = 10427;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===623) {
	                    this.state = 10426;
	                    this.match(SnowflakeParser.SCHEMA);
	                }

	                this.state = 10430;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10429;
	                    this.schema_name();
	                }

	                break;

	            }
	        }

	        this.state = 10437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 10436;
	            this.starts_with();
	        }

	        this.state = 10440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 10439;
	            this.limit_rows();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_external_functions() {
	    let localctx = new Show_external_functionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, SnowflakeParser.RULE_show_external_functions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10442;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10443;
	        this.match(SnowflakeParser.EXTERNAL);
	        this.state = 10444;
	        this.match(SnowflakeParser.FUNCTIONS);
	        this.state = 10446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10445;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_external_tables() {
	    let localctx = new Show_external_tablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, SnowflakeParser.RULE_show_external_tables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10448;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===722) {
	            this.state = 10449;
	            this.match(SnowflakeParser.TERSE);
	        }

	        this.state = 10452;
	        this.match(SnowflakeParser.EXTERNAL);
	        this.state = 10453;
	        this.match(SnowflakeParser.TABLES);
	        this.state = 10455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10454;
	            this.like_pattern();
	        }

	        this.state = 10471;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10457;
	            this.match(SnowflakeParser.IN);
	            this.state = 10469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1322,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10458;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;

	            case 2:
	                this.state = 10459;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10461;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10460;
	                    this.id_();
	                }

	                break;

	            case 3:
	                this.state = 10464;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===623) {
	                    this.state = 10463;
	                    this.match(SnowflakeParser.SCHEMA);
	                }

	                this.state = 10467;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10466;
	                    this.schema_name();
	                }

	                break;

	            }
	        }

	        this.state = 10474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 10473;
	            this.starts_with();
	        }

	        this.state = 10477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 10476;
	            this.limit_rows();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_failover_groups() {
	    let localctx = new Show_failover_groupsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, SnowflakeParser.RULE_show_failover_groups);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10479;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10480;
	        this.match(SnowflakeParser.FAILOVER);
	        this.state = 10481;
	        this.match(SnowflakeParser.GROUPS);
	        this.state = 10485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10482;
	            this.match(SnowflakeParser.IN);
	            this.state = 10483;
	            this.match(SnowflakeParser.ACCOUNT);
	            this.state = 10484;
	            this.id_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_file_formats() {
	    let localctx = new Show_file_formatsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, SnowflakeParser.RULE_show_file_formats);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10487;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10488;
	        this.match(SnowflakeParser.FILE);
	        this.state = 10489;
	        this.match(SnowflakeParser.FORMATS);
	        this.state = 10491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10490;
	            this.like_pattern();
	        }

	        this.state = 10504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10493;
	            this.match(SnowflakeParser.IN);
	            this.state = 10502;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1328,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10494;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;

	            case 2:
	                this.state = 10495;
	                this.match(SnowflakeParser.DATABASE);
	                break;

	            case 3:
	                this.state = 10496;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10497;
	                this.id_();
	                break;

	            case 4:
	                this.state = 10498;
	                this.match(SnowflakeParser.SCHEMA);
	                break;

	            case 5:
	                this.state = 10499;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 10500;
	                this.schema_name();
	                break;

	            case 6:
	                this.state = 10501;
	                this.schema_name();
	                break;

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_functions() {
	    let localctx = new Show_functionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, SnowflakeParser.RULE_show_functions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10506;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10507;
	        this.match(SnowflakeParser.FUNCTIONS);
	        this.state = 10509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10508;
	            this.like_pattern();
	        }

	        this.state = 10522;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10511;
	            this.match(SnowflakeParser.IN);
	            this.state = 10520;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1331,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10512;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;

	            case 2:
	                this.state = 10513;
	                this.match(SnowflakeParser.DATABASE);
	                break;

	            case 3:
	                this.state = 10514;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10515;
	                this.id_();
	                break;

	            case 4:
	                this.state = 10516;
	                this.match(SnowflakeParser.SCHEMA);
	                break;

	            case 5:
	                this.state = 10517;
	                this.match(SnowflakeParser.SCHEMA);
	                this.state = 10518;
	                this.id_();
	                break;

	            case 6:
	                this.state = 10519;
	                this.id_();
	                break;

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_global_accounts() {
	    let localctx = new Show_global_accountsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, SnowflakeParser.RULE_show_global_accounts);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10524;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10525;
	        this.match(SnowflakeParser.GLOBAL);
	        this.state = 10526;
	        this.match(SnowflakeParser.ACCOUNTS);
	        this.state = 10528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10527;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_grants() {
	    let localctx = new Show_grantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, SnowflakeParser.RULE_show_grants);
	    var _la = 0;
	    try {
	        this.state = 10547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1335,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10530;
	            this.match(SnowflakeParser.SHOW);
	            this.state = 10531;
	            this.match(SnowflakeParser.GRANTS);
	            this.state = 10533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===458 || _la===465 || _la===745) {
	                this.state = 10532;
	                this.show_grants_opts();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10535;
	            this.match(SnowflakeParser.SHOW);
	            this.state = 10536;
	            this.match(SnowflakeParser.FUTURE);
	            this.state = 10537;
	            this.match(SnowflakeParser.GRANTS);
	            this.state = 10538;
	            this.match(SnowflakeParser.IN);
	            this.state = 10539;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 10540;
	            this.schema_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10541;
	            this.match(SnowflakeParser.SHOW);
	            this.state = 10542;
	            this.match(SnowflakeParser.FUTURE);
	            this.state = 10543;
	            this.match(SnowflakeParser.GRANTS);
	            this.state = 10544;
	            this.match(SnowflakeParser.IN);
	            this.state = 10545;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 10546;
	            this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_grants_opts() {
	    let localctx = new Show_grants_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, SnowflakeParser.RULE_show_grants_opts);
	    try {
	        this.state = 10570;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1337,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10549;
	            this.match(SnowflakeParser.ON);
	            this.state = 10550;
	            this.match(SnowflakeParser.ACCOUNT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10551;
	            this.match(SnowflakeParser.ON);
	            this.state = 10552;
	            this.object_type();
	            this.state = 10553;
	            this.object_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10555;
	            this.match(SnowflakeParser.TO);
	            this.state = 10562;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 587:
	                this.state = 10556;
	                this.match(SnowflakeParser.ROLE);
	                this.state = 10557;
	                this.id_();
	                break;
	            case 777:
	                this.state = 10558;
	                this.match(SnowflakeParser.USER);
	                this.state = 10559;
	                this.id_();
	                break;
	            case 642:
	                this.state = 10560;
	                this.match(SnowflakeParser.SHARE);
	                this.state = 10561;
	                this.id_();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10564;
	            this.match(SnowflakeParser.OF);
	            this.state = 10565;
	            this.match(SnowflakeParser.ROLE);
	            this.state = 10566;
	            this.id_();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10567;
	            this.match(SnowflakeParser.OF);
	            this.state = 10568;
	            this.match(SnowflakeParser.SHARE);
	            this.state = 10569;
	            this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_integrations() {
	    let localctx = new Show_integrationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, SnowflakeParser.RULE_show_integrations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10572;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32 || _la===430 || _la===630 || _la===683) {
	            this.state = 10573;
	            _la = this._input.LA(1);
	            if(!(_la===32 || _la===430 || _la===630 || _la===683)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 10576;
	        this.match(SnowflakeParser.INTEGRATIONS);
	        this.state = 10578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10577;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_locks() {
	    let localctx = new Show_locksContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, SnowflakeParser.RULE_show_locks);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10580;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10581;
	        this.match(SnowflakeParser.LOCKS);
	        this.state = 10584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10582;
	            this.match(SnowflakeParser.IN);
	            this.state = 10583;
	            this.match(SnowflakeParser.ACCOUNT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_managed_accounts() {
	    let localctx = new Show_managed_accountsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, SnowflakeParser.RULE_show_managed_accounts);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10586;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10587;
	        this.match(SnowflakeParser.MANAGED);
	        this.state = 10588;
	        this.match(SnowflakeParser.ACCOUNTS);
	        this.state = 10590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10589;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_masking_policies() {
	    let localctx = new Show_masking_policiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, SnowflakeParser.RULE_show_masking_policies);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10592;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10593;
	        this.match(SnowflakeParser.MASKING);
	        this.state = 10594;
	        this.match(SnowflakeParser.POLICIES);
	        this.state = 10596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10595;
	            this.like_pattern();
	        }

	        this.state = 10599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10598;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_obj() {
	    let localctx = new In_objContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, SnowflakeParser.RULE_in_obj);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10601;
	        this.match(SnowflakeParser.IN);
	        this.state = 10610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1344,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 10602;
	            this.match(SnowflakeParser.ACCOUNT);
	            break;

	        case 2:
	            this.state = 10603;
	            this.match(SnowflakeParser.DATABASE);
	            break;

	        case 3:
	            this.state = 10604;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 10605;
	            this.id_();
	            break;

	        case 4:
	            this.state = 10606;
	            this.match(SnowflakeParser.SCHEMA);
	            break;

	        case 5:
	            this.state = 10607;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 10608;
	            this.schema_name();
	            break;

	        case 6:
	            this.state = 10609;
	            this.schema_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_obj_2() {
	    let localctx = new In_obj_2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, SnowflakeParser.RULE_in_obj_2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10612;
	        this.match(SnowflakeParser.IN);
	        this.state = 10625;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1347,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 10613;
	            this.match(SnowflakeParser.ACCOUNT);
	            break;

	        case 2:
	            this.state = 10614;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 10616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 10615;
	                this.id_();
	            }

	            break;

	        case 3:
	            this.state = 10618;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 10620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 10619;
	                this.schema_name();
	            }

	            break;

	        case 4:
	            this.state = 10622;
	            this.match(SnowflakeParser.TABLE);
	            break;

	        case 5:
	            this.state = 10623;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 10624;
	            this.object_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_materialized_views() {
	    let localctx = new Show_materialized_viewsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, SnowflakeParser.RULE_show_materialized_views);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10627;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10628;
	        this.match(SnowflakeParser.MATERIALIZED);
	        this.state = 10629;
	        this.match(SnowflakeParser.VIEWS);
	        this.state = 10631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10630;
	            this.like_pattern();
	        }

	        this.state = 10634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10633;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_network_policies() {
	    let localctx = new Show_network_policiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, SnowflakeParser.RULE_show_network_policies);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10636;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10637;
	        this.match(SnowflakeParser.NETWORK);
	        this.state = 10638;
	        this.match(SnowflakeParser.POLICIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_objects() {
	    let localctx = new Show_objectsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, SnowflakeParser.RULE_show_objects);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10640;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10641;
	        this.match(SnowflakeParser.OBJECTS);
	        this.state = 10643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10642;
	            this.like_pattern();
	        }

	        this.state = 10646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10645;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_organization_accounts() {
	    let localctx = new Show_organization_accountsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, SnowflakeParser.RULE_show_organization_accounts);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10648;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10649;
	        this.match(SnowflakeParser.ORGANIZATION);
	        this.state = 10650;
	        this.match(SnowflakeParser.ACCOUNTS);
	        this.state = 10652;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10651;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_for() {
	    let localctx = new In_forContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, SnowflakeParser.RULE_in_for);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10654;
	        _la = this._input.LA(1);
	        if(!(_la===269 || _la===325)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_parameters() {
	    let localctx = new Show_parametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, SnowflakeParser.RULE_show_parameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10656;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10657;
	        this.match(SnowflakeParser.PARAMETERS);
	        this.state = 10659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10658;
	            this.like_pattern();
	        }

	        this.state = 10676;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===269 || _la===325) {
	            this.state = 10661;
	            this.in_for();
	            this.state = 10674;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 636:
	                this.state = 10662;
	                this.match(SnowflakeParser.SESSION);
	                break;
	            case 6:
	                this.state = 10663;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;
	            case 777:
	                this.state = 10664;
	                this.match(SnowflakeParser.USER);
	                this.state = 10666;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10665;
	                    this.id_();
	                }

	                break;
	            case 164:
	            case 623:
	            case 718:
	            case 796:
	                this.state = 10668;
	                _la = this._input.LA(1);
	                if(!(_la===164 || _la===623 || _la===718 || _la===796)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 10670;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10669;
	                    this.id_();
	                }

	                break;
	            case 708:
	                this.state = 10672;
	                this.match(SnowflakeParser.TABLE);
	                this.state = 10673;
	                this.object_name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_pipes() {
	    let localctx = new Show_pipesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, SnowflakeParser.RULE_show_pipes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10678;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10679;
	        this.match(SnowflakeParser.PIPES);
	        this.state = 10681;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10680;
	            this.like_pattern();
	        }

	        this.state = 10684;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10683;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_primary_keys() {
	    let localctx = new Show_primary_keysContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, SnowflakeParser.RULE_show_primary_keys);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10686;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===722) {
	            this.state = 10687;
	            this.match(SnowflakeParser.TERSE);
	        }

	        this.state = 10690;
	        this.match(SnowflakeParser.PRIMARY);
	        this.state = 10691;
	        this.match(SnowflakeParser.KEYS);
	        this.state = 10693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10692;
	            this.in_obj_2();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_procedures() {
	    let localctx = new Show_proceduresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, SnowflakeParser.RULE_show_procedures);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10695;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10696;
	        this.match(SnowflakeParser.PROCEDURES);
	        this.state = 10698;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10697;
	            this.like_pattern();
	        }

	        this.state = 10701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10700;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_regions() {
	    let localctx = new Show_regionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, SnowflakeParser.RULE_show_regions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10703;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10704;
	        this.match(SnowflakeParser.REGIONS);
	        this.state = 10706;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10705;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_replication_accounts() {
	    let localctx = new Show_replication_accountsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, SnowflakeParser.RULE_show_replication_accounts);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10708;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10709;
	        this.match(SnowflakeParser.REPLICATION);
	        this.state = 10710;
	        this.match(SnowflakeParser.ACCOUNTS);
	        this.state = 10712;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10711;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_replication_databases() {
	    let localctx = new Show_replication_databasesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, SnowflakeParser.RULE_show_replication_databases);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10714;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10715;
	        this.match(SnowflakeParser.REPLICATION);
	        this.state = 10716;
	        this.match(SnowflakeParser.DATABASES);
	        this.state = 10718;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10717;
	            this.like_pattern();
	        }

	        this.state = 10726;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===805) {
	            this.state = 10720;
	            this.match(SnowflakeParser.WITH);
	            this.state = 10721;
	            this.match(SnowflakeParser.PRIMARY);
	            this.state = 10722;
	            this.account_identifier();
	            this.state = 10723;
	            this.match(SnowflakeParser.DOT);
	            this.state = 10724;
	            this.id_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_replication_groups() {
	    let localctx = new Show_replication_groupsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, SnowflakeParser.RULE_show_replication_groups);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10728;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10729;
	        this.match(SnowflakeParser.REPLICATION);
	        this.state = 10730;
	        this.match(SnowflakeParser.GROUPS);
	        this.state = 10734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10731;
	            this.match(SnowflakeParser.IN);
	            this.state = 10732;
	            this.match(SnowflakeParser.ACCOUNT);
	            this.state = 10733;
	            this.id_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_resource_monitors() {
	    let localctx = new Show_resource_monitorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, SnowflakeParser.RULE_show_resource_monitors);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10736;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10737;
	        this.match(SnowflakeParser.RESOURCE);
	        this.state = 10738;
	        this.match(SnowflakeParser.MONITORS);
	        this.state = 10740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10739;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_roles() {
	    let localctx = new Show_rolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, SnowflakeParser.RULE_show_roles);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10742;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10743;
	        this.match(SnowflakeParser.ROLES);
	        this.state = 10745;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10744;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_row_access_policies() {
	    let localctx = new Show_row_access_policiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, SnowflakeParser.RULE_show_row_access_policies);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10747;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10748;
	        this.match(SnowflakeParser.ROW);
	        this.state = 10749;
	        this.match(SnowflakeParser.ACCESS);
	        this.state = 10750;
	        this.match(SnowflakeParser.POLICIES);
	        this.state = 10752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10751;
	            this.like_pattern();
	        }

	        this.state = 10755;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10754;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_schemas() {
	    let localctx = new Show_schemasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, SnowflakeParser.RULE_show_schemas);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10757;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===722) {
	            this.state = 10758;
	            this.match(SnowflakeParser.TERSE);
	        }

	        this.state = 10761;
	        this.match(SnowflakeParser.SCHEMAS);
	        this.state = 10763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===309) {
	            this.state = 10762;
	            this.match(SnowflakeParser.HISTORY);
	        }

	        this.state = 10766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10765;
	            this.like_pattern();
	        }

	        this.state = 10776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10768;
	            this.match(SnowflakeParser.IN);
	            this.state = 10774;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 6:
	                this.state = 10769;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;
	            case 164:
	                this.state = 10770;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10772;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10771;
	                    this.id_();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 10779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 10778;
	            this.starts_with();
	        }

	        this.state = 10782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 10781;
	            this.limit_rows();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_sequences() {
	    let localctx = new Show_sequencesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, SnowflakeParser.RULE_show_sequences);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10784;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10785;
	        this.match(SnowflakeParser.SEQUENCES);
	        this.state = 10787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10786;
	            this.like_pattern();
	        }

	        this.state = 10790;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10789;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_session_policies() {
	    let localctx = new Show_session_policiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, SnowflakeParser.RULE_show_session_policies);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10792;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10793;
	        this.match(SnowflakeParser.SESSION);
	        this.state = 10794;
	        this.match(SnowflakeParser.POLICIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_password_policies() {
	    let localctx = new Show_password_policiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, SnowflakeParser.RULE_show_password_policies);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10796;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10797;
	        this.match(SnowflakeParser.PASSWORD);
	        this.state = 10798;
	        this.match(SnowflakeParser.POLICIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_shares() {
	    let localctx = new Show_sharesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, SnowflakeParser.RULE_show_shares);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10800;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10801;
	        this.match(SnowflakeParser.SHARES);
	        this.state = 10803;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10802;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_shares_in_failover_group() {
	    let localctx = new Show_shares_in_failover_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, SnowflakeParser.RULE_show_shares_in_failover_group);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10805;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10806;
	        this.match(SnowflakeParser.SHARES);
	        this.state = 10807;
	        this.match(SnowflakeParser.IN);
	        this.state = 10808;
	        this.match(SnowflakeParser.FAILOVER);
	        this.state = 10809;
	        this.match(SnowflakeParser.GROUP);
	        this.state = 10810;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_shares_in_replication_group() {
	    let localctx = new Show_shares_in_replication_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, SnowflakeParser.RULE_show_shares_in_replication_group);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10812;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10813;
	        this.match(SnowflakeParser.SHARES);
	        this.state = 10814;
	        this.match(SnowflakeParser.IN);
	        this.state = 10815;
	        this.match(SnowflakeParser.REPLICATION);
	        this.state = 10816;
	        this.match(SnowflakeParser.GROUP);
	        this.state = 10817;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_streams() {
	    let localctx = new Show_streamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, SnowflakeParser.RULE_show_streams);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10819;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10820;
	        this.match(SnowflakeParser.STREAMS);
	        this.state = 10822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10821;
	            this.like_pattern();
	        }

	        this.state = 10825;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10824;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_tables() {
	    let localctx = new Show_tablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, SnowflakeParser.RULE_show_tables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10827;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10828;
	        this.match(SnowflakeParser.TABLES);
	        this.state = 10830;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10829;
	            this.like_pattern();
	        }

	        this.state = 10833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10832;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_tags() {
	    let localctx = new Show_tagsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, SnowflakeParser.RULE_show_tags);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10835;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10836;
	        this.match(SnowflakeParser.TAGS);
	        this.state = 10838;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1388,this._ctx);
	        if(la_===1) {
	            this.state = 10837;
	            this.like_pattern();

	        }
	        this.state = 10849;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1389,this._ctx);
	        if(la_===1) {
	            this.state = 10840;
	            this.match(SnowflakeParser.IN);
	            this.state = 10841;
	            this.match(SnowflakeParser.ACCOUNT);

	        } else if(la_===2) {
	            this.state = 10842;
	            this.match(SnowflakeParser.DATABASE);

	        } else if(la_===3) {
	            this.state = 10843;
	            this.match(SnowflakeParser.DATABASE);
	            this.state = 10844;
	            this.id_();

	        } else if(la_===4) {
	            this.state = 10845;
	            this.match(SnowflakeParser.SCHEMA);

	        } else if(la_===5) {
	            this.state = 10846;
	            this.match(SnowflakeParser.SCHEMA);
	            this.state = 10847;
	            this.schema_name();

	        } else if(la_===6) {
	            this.state = 10848;
	            this.schema_name();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_tasks() {
	    let localctx = new Show_tasksContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, SnowflakeParser.RULE_show_tasks);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10851;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10853;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===722) {
	            this.state = 10852;
	            this.match(SnowflakeParser.TERSE);
	        }

	        this.state = 10855;
	        this.match(SnowflakeParser.TASKS);
	        this.state = 10857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10856;
	            this.like_pattern();
	        }

	        this.state = 10873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10859;
	            this.match(SnowflakeParser.IN);
	            this.state = 10871;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1395,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10860;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;

	            case 2:
	                this.state = 10861;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10863;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10862;
	                    this.id_();
	                }

	                break;

	            case 3:
	                this.state = 10866;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===623) {
	                    this.state = 10865;
	                    this.match(SnowflakeParser.SCHEMA);
	                }

	                this.state = 10869;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10868;
	                    this.schema_name();
	                }

	                break;

	            }
	        }

	        this.state = 10876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 10875;
	            this.starts_with();
	        }

	        this.state = 10879;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 10878;
	            this.limit_rows();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_transactions() {
	    let localctx = new Show_transactionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, SnowflakeParser.RULE_show_transactions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10881;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10882;
	        this.match(SnowflakeParser.TRANSACTIONS);
	        this.state = 10885;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10883;
	            this.match(SnowflakeParser.IN);
	            this.state = 10884;
	            this.match(SnowflakeParser.ACCOUNT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_user_functions() {
	    let localctx = new Show_user_functionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, SnowflakeParser.RULE_show_user_functions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10887;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10888;
	        this.match(SnowflakeParser.USER);
	        this.state = 10889;
	        this.match(SnowflakeParser.FUNCTIONS);
	        this.state = 10891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10890;
	            this.like_pattern();
	        }

	        this.state = 10894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10893;
	            this.in_obj();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_users() {
	    let localctx = new Show_usersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, SnowflakeParser.RULE_show_users);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10896;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10898;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===722) {
	            this.state = 10897;
	            this.match(SnowflakeParser.TERSE);
	        }

	        this.state = 10900;
	        this.match(SnowflakeParser.USERS);
	        this.state = 10902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10901;
	            this.like_pattern();
	        }

	        this.state = 10907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 10904;
	            this.match(SnowflakeParser.STARTS);
	            this.state = 10905;
	            this.match(SnowflakeParser.WITH);
	            this.state = 10906;
	            this.string();
	        }

	        this.state = 10911;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 10909;
	            this.match(SnowflakeParser.LIMIT);
	            this.state = 10910;
	            this.num();
	        }

	        this.state = 10915;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===276) {
	            this.state = 10913;
	            this.match(SnowflakeParser.FROM);
	            this.state = 10914;
	            this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_variables() {
	    let localctx = new Show_variablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, SnowflakeParser.RULE_show_variables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10917;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10918;
	        this.match(SnowflakeParser.VARIABLES);
	        this.state = 10920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10919;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_views() {
	    let localctx = new Show_viewsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, SnowflakeParser.RULE_show_views);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10922;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===722) {
	            this.state = 10923;
	            this.match(SnowflakeParser.TERSE);
	        }

	        this.state = 10926;
	        this.match(SnowflakeParser.VIEWS);
	        this.state = 10928;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10927;
	            this.like_pattern();
	        }

	        this.state = 10944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===325) {
	            this.state = 10930;
	            this.match(SnowflakeParser.IN);
	            this.state = 10942;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1413,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 10931;
	                this.match(SnowflakeParser.ACCOUNT);
	                break;

	            case 2:
	                this.state = 10932;
	                this.match(SnowflakeParser.DATABASE);
	                this.state = 10934;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10933;
	                    this.id_();
	                }

	                break;

	            case 3:
	                this.state = 10937;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===623) {
	                    this.state = 10936;
	                    this.match(SnowflakeParser.SCHEMA);
	                }

	                this.state = 10940;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                    this.state = 10939;
	                    this.schema_name();
	                }

	                break;

	            }
	        }

	        this.state = 10947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 10946;
	            this.starts_with();
	        }

	        this.state = 10950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 10949;
	            this.limit_rows();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_warehouses() {
	    let localctx = new Show_warehousesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, SnowflakeParser.RULE_show_warehouses);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10952;
	        this.match(SnowflakeParser.SHOW);
	        this.state = 10953;
	        this.match(SnowflakeParser.WAREHOUSES);
	        this.state = 10955;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 10954;
	            this.like_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	like_pattern() {
	    let localctx = new Like_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, SnowflakeParser.RULE_like_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10957;
	        this.match(SnowflakeParser.LIKE);
	        this.state = 10958;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	account_identifier() {
	    let localctx = new Account_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, SnowflakeParser.RULE_account_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10960;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schema_name() {
	    let localctx = new Schema_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, SnowflakeParser.RULE_schema_name);
	    try {
	        this.state = 10967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1418,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10962;
	            localctx.d = this.id_();
	            this.state = 10963;
	            this.match(SnowflakeParser.DOT);
	            this.state = 10964;
	            localctx.s = this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10966;
	            localctx.s = this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type() {
	    let localctx = new Object_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, SnowflakeParser.RULE_object_type);
	    try {
	        this.state = 10981;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 10969;
	            this.match(SnowflakeParser.ACCOUNT);
	            this.state = 10970;
	            this.match(SnowflakeParser.PARAMETERS);
	            break;
	        case 165:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 10971;
	            this.match(SnowflakeParser.DATABASES);
	            break;
	        case 338:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 10972;
	            this.match(SnowflakeParser.INTEGRATIONS);
	            break;
	        case 419:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 10973;
	            this.match(SnowflakeParser.NETWORK);
	            this.state = 10974;
	            this.match(SnowflakeParser.POLICIES);
	            break;
	        case 569:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 10975;
	            this.match(SnowflakeParser.RESOURCE);
	            this.state = 10976;
	            this.match(SnowflakeParser.MONITORS);
	            break;
	        case 588:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 10977;
	            this.match(SnowflakeParser.ROLES);
	            break;
	        case 643:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 10978;
	            this.match(SnowflakeParser.SHARES);
	            break;
	        case 779:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 10979;
	            this.match(SnowflakeParser.USERS);
	            break;
	        case 797:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 10980;
	            this.match(SnowflakeParser.WAREHOUSES);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type_list() {
	    let localctx = new Object_type_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, SnowflakeParser.RULE_object_type_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10983;
	        this.object_type();
	        this.state = 10988;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 10984;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 10985;
	            this.object_type();
	            this.state = 10990;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tag_value() {
	    let localctx = new Tag_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, SnowflakeParser.RULE_tag_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10991;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_data_type() {
	    let localctx = new Arg_data_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, SnowflakeParser.RULE_arg_data_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10993;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_name() {
	    let localctx = new Arg_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, SnowflakeParser.RULE_arg_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10995;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_name() {
	    let localctx = new Param_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, SnowflakeParser.RULE_param_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10997;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	region_group_id() {
	    let localctx = new Region_group_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, SnowflakeParser.RULE_region_group_id);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 10999;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	snowflake_region_id() {
	    let localctx = new Snowflake_region_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, SnowflakeParser.RULE_snowflake_region_id);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11001;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, SnowflakeParser.RULE_string);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11003;
	        this.match(SnowflakeParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_list() {
	    let localctx = new String_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, SnowflakeParser.RULE_string_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11005;
	        this.string();
	        this.state = 11010;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 11006;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11007;
	            this.string();
	            this.state = 11012;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_fn() {
	    let localctx = new Id_fnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, SnowflakeParser.RULE_id_fn);
	    try {
	        this.state = 11019;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1422,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11013;
	            this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11014;
	            this.match(SnowflakeParser.IDENTIFIER);
	            this.state = 11015;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11016;
	            this.id_();
	            this.state = 11017;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_() {
	    let localctx = new Id_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, SnowflakeParser.RULE_id_);
	    try {
	        this.state = 11034;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1423,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11021;
	            this.match(SnowflakeParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11022;
	            this.match(SnowflakeParser.ID2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11023;
	            this.match(SnowflakeParser.DOUBLE_QUOTE_ID);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11024;
	            this.match(SnowflakeParser.DOUBLE_QUOTE_BLANK);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 11025;
	            this.keyword();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 11026;
	            this.non_reserved_words();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 11027;
	            this.object_type_plural();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 11028;
	            this.data_type();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 11029;
	            this.builtin_function();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 11030;
	            this.unary_or_binary_builtin_function();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 11031;
	            this.binary_builtin_function();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 11032;
	            this.binary_or_ternary_builtin_function();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 11033;
	            this.ternary_builtin_function();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, SnowflakeParser.RULE_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11036;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 33344) !== 0) || _la===46 || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 4198529) !== 0) || _la===190 || _la===205 || ((((_la - 267)) & ~0x1f) === 0 && ((1 << (_la - 267)) & 2051) !== 0) || _la===312 || ((((_la - 348)) & ~0x1f) === 0 && ((1 << (_la - 348)) & 524833) !== 0) || _la===394 || _la===408 || _la===427 || _la===475 || _la===479 || _la===517 || _la===548 || _la===553 || ((((_la - 587)) & ~0x1f) === 0 && ((1 << (_la - 587)) & 521) !== 0) || _la===634 || _la===636 || _la===670 || ((((_la - 715)) & ~0x1f) === 0 && ((1 << (_la - 715)) & 37) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 100671489) !== 0) || _la===796 || _la===799)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	non_reserved_words() {
	    let localctx = new Non_reserved_wordsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, SnowflakeParser.RULE_non_reserved_words);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11038;
	        _la = this._input.LA(1);
	        if(!(_la===7 || _la===13 || _la===42 || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 67239937) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 8912897) !== 0) || ((((_la - 199)) & ~0x1f) === 0 && ((1 << (_la - 199)) & 85) !== 0) || ((((_la - 231)) & ~0x1f) === 0 && ((1 << (_la - 231)) & 321) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 134217731) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1082261507) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 538116097) !== 0) || _la===417 || _la===419 || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 659585) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 134332413) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 8207) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 8388779) !== 0) || _la===620 || _la===631 || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 557057) !== 0) || _la===706 || _la===741 || ((((_la - 774)) & ~0x1f) === 0 && ((1 << (_la - 774)) & 33914897) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtin_function() {
	    let localctx = new Builtin_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, SnowflakeParser.RULE_builtin_function);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11040;
	        _la = this._input.LA(1);
	        if(!(_la===31 || _la===60 || _la===105 || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 1537) !== 0) || _la===268 || _la===292 || _la===310 || _la===379 || _la===402 || _la===667 || _la===699 || ((((_la - 746)) & ~0x1f) === 0 && ((1 << (_la - 746)) & 134283265) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_or_binary_builtin_function() {
	    let localctx = new Unary_or_binary_builtin_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, SnowflakeParser.RULE_unary_or_binary_builtin_function);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11042;
	        _la = this._input.LA(1);
	        if(!(_la===106 || _la===591 || _la===759 || _la===760 || _la===835)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binary_builtin_function() {
	    let localctx = new Binary_builtin_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, SnowflakeParser.RULE_binary_builtin_function);
	    var _la = 0;
	    try {
	        this.state = 11056;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 314:
	        case 442:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11044;
	            localctx.ifnull = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===314 || _la===442)) {
	                localctx.ifnull = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 291:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11045;
	            this.match(SnowflakeParser.GET);
	            break;
	        case 365:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11046;
	            this.match(SnowflakeParser.LEFT);
	            break;
	        case 585:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11047;
	            this.match(SnowflakeParser.RIGHT);
	            break;
	        case 172:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 11048;
	            this.match(SnowflakeParser.DATE_PART);
	            break;
	        case 747:
	        case 827:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 11049;
	            localctx.to_date = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===747 || _la===827)) {
	                localctx.to_date = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 665:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 11050;
	            this.match(SnowflakeParser.SPLIT);
	            break;
	        case 437:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 11051;
	            this.match(SnowflakeParser.NULLIF);
	            break;
	        case 223:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 11052;
	            this.match(SnowflakeParser.EQUAL_NULL);
	            break;
	        case 145:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 11053;
	            this.match(SnowflakeParser.CONTAINS);
	            break;
	        case 130:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 11054;
	            this.match(SnowflakeParser.COLLATE);
	            break;
	        case 748:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 11055;
	            this.match(SnowflakeParser.TO_TIMESTAMP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binary_or_ternary_builtin_function() {
	    let localctx = new Binary_or_ternary_builtin_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, SnowflakeParser.RULE_binary_or_ternary_builtin_function);
	    var _la = 0;
	    try {
	        this.state = 11063;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11058;
	            this.match(SnowflakeParser.CHARINDEX);
	            break;
	        case 560:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11059;
	            this.match(SnowflakeParser.REPLACE);
	            break;
	        case 697:
	        case 698:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11060;
	            localctx.substring = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===697 || _la===698)) {
	                localctx.substring = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 368:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11061;
	            this.match(SnowflakeParser.LIKE);
	            break;
	        case 317:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 11062;
	            this.match(SnowflakeParser.ILIKE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ternary_builtin_function() {
	    let localctx = new Ternary_builtin_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, SnowflakeParser.RULE_ternary_builtin_function);
	    var _la = 0;
	    try {
	        this.state = 11070;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 167:
	        case 725:
	        case 739:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11065;
	            localctx.dateadd = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===167 || _la===725 || _la===739)) {
	                localctx.dateadd = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 168:
	        case 726:
	        case 740:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11066;
	            localctx.datefiff = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===726 || _la===740)) {
	                localctx.datefiff = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 666:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11067;
	            this.match(SnowflakeParser.SPLIT_PART);
	            break;
	        case 443:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11068;
	            this.match(SnowflakeParser.NVL2);
	            break;
	        case 313:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 11069;
	            this.match(SnowflakeParser.IFF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	list_function() {
	    let localctx = new List_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, SnowflakeParser.RULE_list_function);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11072;
	        _la = this._input.LA(1);
	        if(!(((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 769) !== 0) || _la===304)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, SnowflakeParser.RULE_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11074;
	        this.match(SnowflakeParser.PATTERN);
	        this.state = 11075;
	        this.match(SnowflakeParser.EQ);
	        this.state = 11076;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_name() {
	    let localctx = new Column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, SnowflakeParser.RULE_column_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11081;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1427,this._ctx);
	        if(la_===1) {
	            this.state = 11078;
	            this.id_();
	            this.state = 11079;
	            this.match(SnowflakeParser.DOT);

	        }
	        this.state = 11083;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_list() {
	    let localctx = new Column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, SnowflakeParser.RULE_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11085;
	        this.column_name();
	        this.state = 11090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 11086;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11087;
	            this.column_name();
	            this.state = 11092;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_list_with_comment() {
	    let localctx = new Column_list_with_commentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, SnowflakeParser.RULE_column_list_with_comment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11093;
	        this.column_name();
	        this.state = 11096;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 11094;
	            this.match(SnowflakeParser.COMMENT);
	            this.state = 11095;
	            this.string();
	        }

	        this.state = 11106;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 11098;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11099;
	            this.column_name();
	            this.state = 11102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===134) {
	                this.state = 11100;
	                this.match(SnowflakeParser.COMMENT);
	                this.state = 11101;
	                this.string();
	            }

	            this.state = 11108;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_name() {
	    let localctx = new Object_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, SnowflakeParser.RULE_object_name);
	    try {
	        this.state = 11120;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1432,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11109;
	            localctx.d = this.id_();
	            this.state = 11110;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11111;
	            localctx.s = this.id_();
	            this.state = 11112;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11113;
	            localctx.o = this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11115;
	            localctx.s = this.id_();
	            this.state = 11116;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11117;
	            localctx.o = this.id_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11119;
	            localctx.o = this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_name_or_identifier() {
	    let localctx = new Object_name_or_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, SnowflakeParser.RULE_object_name_or_identifier);
	    try {
	        this.state = 11128;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1433,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11122;
	            this.object_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11123;
	            this.match(SnowflakeParser.IDENTIFIER);
	            this.state = 11124;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11125;
	            this.string();
	            this.state = 11126;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	num() {
	    let localctx = new NumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, SnowflakeParser.RULE_num);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11130;
	        this.match(SnowflakeParser.DECIMAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_list() {
	    let localctx = new Expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, SnowflakeParser.RULE_expr_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11132;
	        this.expr(0);
	        this.state = 11137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 11133;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11134;
	            this.expr(0);
	            this.state = 11139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_list_sorted() {
	    let localctx = new Expr_list_sortedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, SnowflakeParser.RULE_expr_list_sorted);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11140;
	        this.expr(0);
	        this.state = 11142;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44 || _la===188) {
	            this.state = 11141;
	            this.asc_desc();
	        }

	        this.state = 11151;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 11144;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11145;
	            this.expr(0);
	            this.state = 11147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===44 || _la===188) {
	                this.state = 11146;
	                this.asc_desc();
	            }

	            this.state = 11153;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 992;
	    this.enterRecursionRule(localctx, 992, SnowflakeParser.RULE_expr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11178;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1439,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 11155;
	            this.object_name();
	            this.state = 11156;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11157;
	            this.match(SnowflakeParser.NEXTVAL);
	            break;

	        case 2:
	            this.state = 11159;
	            this.case_expression();
	            break;

	        case 3:
	            this.state = 11160;
	            this.iff_expr();
	            break;

	        case 4:
	            this.state = 11161;
	            this.bracket_expression();
	            break;

	        case 5:
	            this.state = 11162;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===901 || _la===902)) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11163;
	            this.expr(22);
	            break;

	        case 6:
	            this.state = 11165; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 11164;
	            		localctx.op = this.match(SnowflakeParser.NOT);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 11167; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,1438, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 11169;
	            this.expr(18);
	            break;

	        case 7:
	            this.state = 11170;
	            this.arr_literal();
	            break;

	        case 8:
	            this.state = 11171;
	            this.cast_expr();
	            break;

	        case 9:
	            this.state = 11172;
	            this.try_cast_expr();
	            break;

	        case 10:
	            this.state = 11173;
	            this.json_literal();
	            break;

	        case 11:
	            this.state = 11174;
	            this.trim_expression();
	            break;

	        case 12:
	            this.state = 11175;
	            this.function_call();
	            break;

	        case 13:
	            this.state = 11176;
	            this.subquery();
	            break;

	        case 14:
	            this.state = 11177;
	            this.primitive_expression();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 11271;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1450,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 11269;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1449,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11180;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 11181;
	                    this.match(SnowflakeParser.COLON);
	                    this.state = 11182;
	                    this.expr(29);
	                    break;

	                case 2:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11183;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 11184;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 898)) & ~0x1f) === 0 && ((1 << (_la - 898)) & 7) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 11185;
	                    this.expr(22);
	                    break;

	                case 3:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11186;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 11187;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 883)) & ~0x1f) === 0 && ((1 << (_la - 883)) & 786433) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 11188;
	                    this.expr(21);
	                    break;

	                case 4:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11189;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 11190;
	                    this.comparison_operator();
	                    this.state = 11191;
	                    this.expr(20);
	                    break;

	                case 5:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11193;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 11194;
	                    this.match(SnowflakeParser.AND);
	                    this.state = 11195;
	                    this.expr(18);
	                    break;

	                case 6:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11196;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 11197;
	                    this.match(SnowflakeParser.OR);
	                    this.state = 11198;
	                    this.expr(17);
	                    break;

	                case 7:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11199;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 11201;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===429) {
	                        this.state = 11200;
	                        this.match(SnowflakeParser.NOT);
	                    }

	                    this.state = 11203;
	                    this.match(SnowflakeParser.RLIKE);
	                    this.state = 11204;
	                    this.expr(4);
	                    break;

	                case 8:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11205;
	                    if (!( this.precpred(this._ctx, 29))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
	                    }
	                    this.state = 11206;
	                    this.match(SnowflakeParser.LSB);
	                    this.state = 11207;
	                    this.expr(0);
	                    this.state = 11208;
	                    this.match(SnowflakeParser.RSB);
	                    break;

	                case 9:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11210;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 11211;
	                    this.match(SnowflakeParser.DOT);
	                    this.state = 11214;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1441,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 11212;
	                        this.match(SnowflakeParser.VALUE);
	                        break;

	                    case 2:
	                        this.state = 11213;
	                        this.expr(0);
	                        break;

	                    }
	                    break;

	                case 10:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11216;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 11217;
	                    this.match(SnowflakeParser.COLLATE);
	                    this.state = 11218;
	                    this.string();
	                    break;

	                case 11:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11219;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 11220;
	                    this.over_clause();
	                    break;

	                case 12:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11221;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 11222;
	                    this.match(SnowflakeParser.COLON_COLON);
	                    this.state = 11223;
	                    this.data_type();
	                    break;

	                case 13:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11224;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 11225;
	                    this.match(SnowflakeParser.IS);
	                    this.state = 11226;
	                    this.null_not_null();
	                    break;

	                case 14:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11227;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 11229;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===429) {
	                        this.state = 11228;
	                        this.match(SnowflakeParser.NOT);
	                    }

	                    this.state = 11231;
	                    this.match(SnowflakeParser.IN);
	                    this.state = 11232;
	                    this.match(SnowflakeParser.LR_BRACKET);
	                    this.state = 11235;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1443,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 11233;
	                        this.subquery();
	                        break;

	                    case 2:
	                        this.state = 11234;
	                        this.expr_list();
	                        break;

	                    }
	                    this.state = 11237;
	                    this.match(SnowflakeParser.RR_BRACKET);
	                    break;

	                case 15:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11239;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 11241;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===429) {
	                        this.state = 11240;
	                        this.match(SnowflakeParser.NOT);
	                    }

	                    this.state = 11243;
	                    _la = this._input.LA(1);
	                    if(!(_la===317 || _la===368)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 11244;
	                    this.expr(0);
	                    this.state = 11247;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1445,this._ctx);
	                    if(la_===1) {
	                        this.state = 11245;
	                        this.match(SnowflakeParser.ESCAPE);
	                        this.state = 11246;
	                        this.expr(0);

	                    }
	                    break;

	                case 16:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_expr);
	                    this.state = 11249;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 11251;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===429) {
	                        this.state = 11250;
	                        this.match(SnowflakeParser.NOT);
	                    }

	                    this.state = 11253;
	                    _la = this._input.LA(1);
	                    if(!(_la===317 || _la===368)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 11254;
	                    this.match(SnowflakeParser.ANY);
	                    this.state = 11255;
	                    this.match(SnowflakeParser.LR_BRACKET);
	                    this.state = 11256;
	                    this.expr(0);
	                    this.state = 11261;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===894) {
	                        this.state = 11257;
	                        this.match(SnowflakeParser.COMMA);
	                        this.state = 11258;
	                        this.expr(0);
	                        this.state = 11263;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 11264;
	                    this.match(SnowflakeParser.RR_BRACKET);
	                    this.state = 11267;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1448,this._ctx);
	                    if(la_===1) {
	                        this.state = 11265;
	                        this.match(SnowflakeParser.ESCAPE);
	                        this.state = 11266;
	                        this.expr(0);

	                    }
	                    break;

	                } 
	            }
	            this.state = 11273;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1450,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	iff_expr() {
	    let localctx = new Iff_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, SnowflakeParser.RULE_iff_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11274;
	        this.match(SnowflakeParser.IFF);
	        this.state = 11275;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 11276;
	        this.search_condition(0);
	        this.state = 11277;
	        this.match(SnowflakeParser.COMMA);
	        this.state = 11278;
	        this.expr(0);
	        this.state = 11279;
	        this.match(SnowflakeParser.COMMA);
	        this.state = 11280;
	        this.expr(0);
	        this.state = 11281;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trim_expression() {
	    let localctx = new Trim_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, SnowflakeParser.RULE_trim_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11283;
	        _la = this._input.LA(1);
	        if(!(_la===380 || _la===599 || _la===756)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 11284;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 11285;
	        this.expr(0);
	        this.state = 11290;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 11286;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11287;
	            this.string();
	            this.state = 11292;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 11293;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	try_cast_expr() {
	    let localctx = new Try_cast_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, SnowflakeParser.RULE_try_cast_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11295;
	        this.match(SnowflakeParser.TRY_CAST);
	        this.state = 11296;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 11297;
	        this.expr(0);
	        this.state = 11298;
	        this.match(SnowflakeParser.AS);
	        this.state = 11299;
	        this.data_type();
	        this.state = 11300;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cast_expr() {
	    let localctx = new Cast_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, SnowflakeParser.RULE_cast_expr);
	    var _la = 0;
	    try {
	        this.state = 11311;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11302;
	            this.match(SnowflakeParser.CAST);
	            this.state = 11303;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11304;
	            this.expr(0);
	            this.state = 11305;
	            this.match(SnowflakeParser.AS);
	            this.state = 11306;
	            this.data_type();
	            this.state = 11307;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        case 340:
	        case 724:
	        case 727:
	        case 827:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11309;
	            _la = this._input.LA(1);
	            if(!(_la===340 || _la===724 || _la===727 || _la===827)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11310;
	            this.expr(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_literal() {
	    let localctx = new Json_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, SnowflakeParser.RULE_json_literal);
	    var _la = 0;
	    try {
	        this.state = 11326;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1454,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11313;
	            this.match(SnowflakeParser.LCB);
	            this.state = 11314;
	            this.kv_pair();
	            this.state = 11319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 11315;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11316;
	                this.kv_pair();
	                this.state = 11321;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 11322;
	            this.match(SnowflakeParser.RCB);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11324;
	            this.match(SnowflakeParser.LCB);
	            this.state = 11325;
	            this.match(SnowflakeParser.RCB);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kv_pair() {
	    let localctx = new Kv_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, SnowflakeParser.RULE_kv_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11328;
	        localctx.key = this.match(SnowflakeParser.STRING);
	        this.state = 11329;
	        this.match(SnowflakeParser.COLON);
	        this.state = 11330;
	        this.value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, SnowflakeParser.RULE_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11332;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arr_literal() {
	    let localctx = new Arr_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, SnowflakeParser.RULE_arr_literal);
	    var _la = 0;
	    try {
	        this.state = 11347;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1456,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11334;
	            this.match(SnowflakeParser.LSB);
	            this.state = 11335;
	            this.value();
	            this.state = 11340;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 11336;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11337;
	                this.value();
	                this.state = 11342;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 11343;
	            this.match(SnowflakeParser.RSB);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11345;
	            this.match(SnowflakeParser.LSB);
	            this.state = 11346;
	            this.match(SnowflakeParser.RSB);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	data_type_size() {
	    let localctx = new Data_type_sizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, SnowflakeParser.RULE_data_type_size);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11349;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 11350;
	        this.num();
	        this.state = 11351;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	data_type() {
	    let localctx = new Data_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, SnowflakeParser.RULE_data_type);
	    var _la = 0;
	    try {
	        this.state = 11409;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 336:
	        case 822:
	        case 825:
	        case 838:
	        case 845:
	        case 848:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11353;
	            localctx.int_alias = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===336 || ((((_la - 822)) & ~0x1f) === 0 && ((1 << (_la - 822)) & 75563017) !== 0))) {
	                localctx.int_alias = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 441:
	        case 829:
	        case 841:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11354;
	            localctx.number_alias = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===441 || _la===829 || _la===841)) {
	                localctx.number_alias = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11363;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1458,this._ctx);
	            if(la_===1) {
	                this.state = 11355;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 11356;
	                this.num();
	                this.state = 11359;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===894) {
	                    this.state = 11357;
	                    this.match(SnowflakeParser.COMMA);
	                    this.state = 11358;
	                    this.num();
	                }

	                this.state = 11361;
	                this.match(SnowflakeParser.RR_BRACKET);

	            }
	            break;
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 844:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11365;
	            localctx.float_alias = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 830)) & ~0x1f) === 0 && ((1 << (_la - 830)) & 16415) !== 0))) {
	                localctx.float_alias = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 824:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11366;
	            this.match(SnowflakeParser.BOOLEAN);
	            break;
	        case 827:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 11367;
	            this.match(SnowflakeParser.DATE);
	            break;
	        case 828:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 11368;
	            this.match(SnowflakeParser.DATETIME);
	            this.state = 11370;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1459,this._ctx);
	            if(la_===1) {
	                this.state = 11369;
	                this.data_type_size();

	            }
	            break;
	        case 724:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 11372;
	            this.match(SnowflakeParser.TIME);
	            this.state = 11374;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1460,this._ctx);
	            if(la_===1) {
	                this.state = 11373;
	                this.data_type_size();

	            }
	            break;
	        case 727:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 11376;
	            this.match(SnowflakeParser.TIMESTAMP);
	            this.state = 11378;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1461,this._ctx);
	            if(la_===1) {
	                this.state = 11377;
	                this.data_type_size();

	            }
	            break;
	        case 731:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 11380;
	            this.match(SnowflakeParser.TIMESTAMP_LTZ);
	            this.state = 11382;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1462,this._ctx);
	            if(la_===1) {
	                this.state = 11381;
	                this.data_type_size();

	            }
	            break;
	        case 733:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 11384;
	            this.match(SnowflakeParser.TIMESTAMP_NTZ);
	            this.state = 11386;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1463,this._ctx);
	            if(la_===1) {
	                this.state = 11385;
	                this.data_type_size();

	            }
	            break;
	        case 737:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 11388;
	            this.match(SnowflakeParser.TIMESTAMP_TZ);
	            this.state = 11390;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1464,this._ctx);
	            if(la_===1) {
	                this.state = 11389;
	                this.data_type_size();

	            }
	            break;
	        case 110:
	        case 111:
	        case 839:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 11392;
	            localctx.char_alias = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===110 || _la===111 || _la===839)) {
	                localctx.char_alias = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11394;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1465,this._ctx);
	            if(la_===1) {
	                this.state = 11393;
	                this.data_type_size();

	            }
	            break;
	        case 826:
	        case 840:
	        case 842:
	        case 843:
	        case 846:
	        case 847:
	        case 850:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 11396;
	            localctx.varchar_alias = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 826)) & ~0x1f) === 0 && ((1 << (_la - 826)) & 20135937) !== 0))) {
	                localctx.varchar_alias = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11398;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1466,this._ctx);
	            if(la_===1) {
	                this.state = 11397;
	                this.data_type_size();

	            }
	            break;
	        case 823:
	        case 849:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 11400;
	            localctx.binary_alias = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===823 || _la===849)) {
	                localctx.binary_alias = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11402;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1467,this._ctx);
	            if(la_===1) {
	                this.state = 11401;
	                this.data_type_size();

	            }
	            break;
	        case 851:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 11404;
	            this.match(SnowflakeParser.VARIANT);
	            break;
	        case 454:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 11405;
	            this.match(SnowflakeParser.OBJECT);
	            break;
	        case 820:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 11406;
	            this.match(SnowflakeParser.ARRAY);
	            break;
	        case 836:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 11407;
	            this.match(SnowflakeParser.GEOGRAPHY);
	            break;
	        case 837:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 11408;
	            this.match(SnowflakeParser.GEOMETRY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitive_expression() {
	    let localctx = new Primitive_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, SnowflakeParser.RULE_primitive_expression);
	    try {
	        this.state = 11426;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1470,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11411;
	            this.match(SnowflakeParser.DEFAULT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11412;
	            this.match(SnowflakeParser.NULL_);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11413;
	            this.id_();
	            this.state = 11418;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,1469,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 11414;
	                    this.match(SnowflakeParser.DOT);
	                    this.state = 11415;
	                    this.id_(); 
	                }
	                this.state = 11420;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1469,this._ctx);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11421;
	            this.full_column_name();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 11422;
	            this.literal();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 11423;
	            this.match(SnowflakeParser.BOTH_Q);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 11424;
	            this.match(SnowflakeParser.ARRAY_Q);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 11425;
	            this.match(SnowflakeParser.OBJECT_Q);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by_expr() {
	    let localctx = new Order_by_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, SnowflakeParser.RULE_order_by_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11428;
	        this.match(SnowflakeParser.ORDER);
	        this.state = 11429;
	        this.match(SnowflakeParser.BY);
	        this.state = 11430;
	        this.expr_list_sorted();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asc_desc() {
	    let localctx = new Asc_descContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, SnowflakeParser.RULE_asc_desc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11432;
	        _la = this._input.LA(1);
	        if(!(_la===44 || _la===188)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	over_clause() {
	    let localctx = new Over_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, SnowflakeParser.RULE_over_clause);
	    var _la = 0;
	    try {
	        this.state = 11447;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1472,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11434;
	            this.match(SnowflakeParser.OVER);
	            this.state = 11435;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11436;
	            this.partition_by();
	            this.state = 11438;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===475) {
	                this.state = 11437;
	                this.order_by_expr();
	            }

	            this.state = 11440;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11442;
	            this.match(SnowflakeParser.OVER);
	            this.state = 11443;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11444;
	            this.order_by_expr();
	            this.state = 11445;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call() {
	    let localctx = new Function_callContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, SnowflakeParser.RULE_function_call);
	    var _la = 0;
	    try {
	        this.state = 11526;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1476,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11449;
	            this.round_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11450;
	            this.unary_or_binary_builtin_function();
	            this.state = 11451;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11452;
	            this.expr(0);
	            this.state = 11457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 11453;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11454;
	                this.expr(0);
	                this.state = 11459;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 11460;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11462;
	            this.binary_builtin_function();
	            this.state = 11463;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11464;
	            this.expr(0);
	            this.state = 11465;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11466;
	            this.expr(0);
	            this.state = 11467;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11469;
	            this.binary_or_ternary_builtin_function();
	            this.state = 11470;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11471;
	            this.expr(0);
	            this.state = 11472;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11473;
	            this.expr(0);
	            this.state = 11478;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 11474;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11475;
	                this.expr(0);
	                this.state = 11480;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 11481;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 11483;
	            this.ternary_builtin_function();
	            this.state = 11484;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11485;
	            this.expr(0);
	            this.state = 11486;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11487;
	            this.expr(0);
	            this.state = 11488;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11489;
	            this.expr(0);
	            this.state = 11490;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 11492;
	            this.ranking_windowed_function();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 11493;
	            this.aggregate_function();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 11494;
	            this.object_name();
	            this.state = 11495;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11497;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 3027457) !== 0) || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 12860573) !== 0) || ((((_la - 159)) & ~0x1f) === 0 && ((1 << (_la - 159)) & 2558567251) !== 0) || ((((_la - 199)) & ~0x1f) === 0 && ((1 << (_la - 199)) & 16777301) !== 0) || ((((_la - 231)) & ~0x1f) === 0 && ((1 << (_la - 231)) & 67109185) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 234885127) !== 0) || ((((_la - 304)) & ~0x1f) === 0 && ((1 << (_la - 304)) & 545269697) !== 0) || ((((_la - 336)) & ~0x1f) === 0 && ((1 << (_la - 336)) & 4147253525) !== 0) || ((((_la - 368)) & ~0x1f) === 0 && ((1 << (_la - 368)) & 67115041) !== 0) || ((((_la - 402)) & ~0x1f) === 0 && ((1 << (_la - 402)) & 167936065) !== 0) || ((((_la - 436)) & ~0x1f) === 0 && ((1 << (_la - 436)) & 1082917099) !== 0) || ((((_la - 471)) & ~0x1f) === 0 && ((1 << (_la - 471)) & 4291822001) !== 0) || ((((_la - 503)) & ~0x1f) === 0 && ((1 << (_la - 503)) & 1006690331) !== 0) || ((((_la - 542)) & ~0x1f) === 0 && ((1 << (_la - 542)) & 1476659265) !== 0) || ((((_la - 574)) & ~0x1f) === 0 && ((1 << (_la - 574)) & 38234117) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 92177) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 3120793413) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4278190603) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3254779903) !== 0) || ((((_la - 861)) & ~0x1f) === 0 && ((1 << (_la - 861)) & 2860519171) !== 0) || _la===901 || _la===902) {
	                this.state = 11496;
	                this.expr_list();
	            }

	            this.state = 11499;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 11501;
	            this.object_name();
	            this.state = 11502;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11503;
	            this.param_assoc_list();
	            this.state = 11504;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 11506;
	            this.list_function();
	            this.state = 11507;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11508;
	            this.expr_list();
	            this.state = 11509;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 11511;
	            localctx.to_date = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===747 || _la===827)) {
	                localctx.to_date = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11512;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11513;
	            this.expr(0);
	            this.state = 11514;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 11516;
	            localctx.length = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===366 || _la===367)) {
	                localctx.length = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11517;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11518;
	            this.expr(0);
	            this.state = 11519;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 11521;
	            this.match(SnowflakeParser.TO_BOOLEAN);
	            this.state = 11522;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11523;
	            this.expr(0);
	            this.state = 11524;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_assoc_list() {
	    let localctx = new Param_assoc_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, SnowflakeParser.RULE_param_assoc_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11528;
	        this.param_assoc();
	        this.state = 11533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 11529;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11530;
	            this.param_assoc();
	            this.state = 11535;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_assoc() {
	    let localctx = new Param_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, SnowflakeParser.RULE_param_assoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11536;
	        this.id_();
	        this.state = 11537;
	        this.match(SnowflakeParser.ASSOC);
	        this.state = 11538;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ignore_or_repect_nulls() {
	    let localctx = new Ignore_or_repect_nullsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, SnowflakeParser.RULE_ignore_or_repect_nulls);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11540;
	        _la = this._input.LA(1);
	        if(!(_la===315 || _la===572)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 11541;
	        this.match(SnowflakeParser.NULLS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ranking_windowed_function() {
	    let localctx = new Ranking_windowed_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, SnowflakeParser.RULE_ranking_windowed_function);
	    var _la = 0;
	    try {
	        this.state = 11578;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 187:
	        case 542:
	        case 596:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11543;
	            _la = this._input.LA(1);
	            if(!(_la===187 || _la===542 || _la===596)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11544;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11545;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 11546;
	            this.over_clause();
	            break;
	        case 436:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11547;
	            this.match(SnowflakeParser.NTILE);
	            this.state = 11548;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11549;
	            this.expr(0);
	            this.state = 11550;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 11551;
	            this.over_clause();
	            break;
	        case 356:
	        case 364:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11553;
	            _la = this._input.LA(1);
	            if(!(_la===356 || _la===364)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11554;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11555;
	            this.expr(0);
	            this.state = 11561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===894) {
	                this.state = 11556;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11557;
	                this.expr(0);
	                this.state = 11558;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11559;
	                this.expr(0);
	            }

	            this.state = 11563;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 11565;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===315 || _la===572) {
	                this.state = 11564;
	                this.ignore_or_repect_nulls();
	            }

	            this.state = 11567;
	            this.over_clause();
	            break;
	        case 267:
	        case 362:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11569;
	            _la = this._input.LA(1);
	            if(!(_la===267 || _la===362)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11570;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11571;
	            this.expr(0);
	            this.state = 11572;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 11574;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===315 || _la===572) {
	                this.state = 11573;
	                this.ignore_or_repect_nulls();
	            }

	            this.state = 11576;
	            this.over_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate_function() {
	    let localctx = new Aggregate_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, SnowflakeParser.RULE_aggregate_function);
	    var _la = 0;
	    try {
	        this.state = 11612;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1486,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11580;
	            this.id_();
	            this.state = 11581;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11583;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===197) {
	                this.state = 11582;
	                this.match(SnowflakeParser.DISTINCT);
	            }

	            this.state = 11585;
	            this.expr_list();
	            this.state = 11586;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11588;
	            this.id_();
	            this.state = 11589;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11590;
	            this.match(SnowflakeParser.STAR);
	            this.state = 11591;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11593;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===852)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 11594;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11596;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===197) {
	                this.state = 11595;
	                this.match(SnowflakeParser.DISTINCT);
	            }

	            this.state = 11598;
	            this.expr(0);
	            this.state = 11601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===894) {
	                this.state = 11599;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11600;
	                this.string();
	            }

	            this.state = 11603;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 11610;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1485,this._ctx);
	            if(la_===1) {
	                this.state = 11604;
	                this.match(SnowflakeParser.WITHIN);
	                this.state = 11605;
	                this.match(SnowflakeParser.GROUP);
	                this.state = 11606;
	                this.match(SnowflakeParser.LR_BRACKET);
	                this.state = 11607;
	                this.order_by_clause();
	                this.state = 11608;
	                this.match(SnowflakeParser.RR_BRACKET);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, SnowflakeParser.RULE_literal);
	    var _la = 0;
	    try {
	        this.state = 11626;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1489,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11614;
	            this.match(SnowflakeParser.STRING);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===901 || _la===902) {
	                this.state = 11615;
	                this.sign();
	            }

	            this.state = 11618;
	            this.match(SnowflakeParser.DECIMAL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===901 || _la===902) {
	                this.state = 11619;
	                this.sign();
	            }

	            this.state = 11622;
	            _la = this._input.LA(1);
	            if(!(_la===871 || _la===872)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11623;
	            this.true_false();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 11624;
	            this.match(SnowflakeParser.NULL_);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 11625;
	            this.match(SnowflakeParser.AT_Q);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sign() {
	    let localctx = new SignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, SnowflakeParser.RULE_sign);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11628;
	        _la = this._input.LA(1);
	        if(!(_la===901 || _la===902)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	full_column_name() {
	    let localctx = new Full_column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, SnowflakeParser.RULE_full_column_name);
	    var _la = 0;
	    try {
	        this.state = 11658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1496,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11631;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 11630;
	                localctx.db_name = this.id_();
	            }

	            this.state = 11633;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 11634;
	                localctx.schema = this.id_();
	            }

	            this.state = 11637;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11639;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 11638;
	                localctx.tab_name = this.id_();
	            }

	            this.state = 11641;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11642;
	            localctx.col_name = this.id_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 11643;
	                localctx.schema = this.id_();
	            }

	            this.state = 11646;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11648;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 11647;
	                localctx.tab_name = this.id_();
	            }

	            this.state = 11650;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11651;
	            localctx.col_name = this.id_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 11652;
	                localctx.tab_name = this.id_();
	            }

	            this.state = 11655;
	            this.match(SnowflakeParser.DOT);
	            this.state = 11656;
	            localctx.col_name = this.id_();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11657;
	            localctx.col_name = this.id_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracket_expression() {
	    let localctx = new Bracket_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1040, SnowflakeParser.RULE_bracket_expression);
	    try {
	        this.state = 11668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1497,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11660;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11661;
	            this.expr_list();
	            this.state = 11662;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11664;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11665;
	            this.subquery();
	            this.state = 11666;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_expression() {
	    let localctx = new Case_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1042, SnowflakeParser.RULE_case_expression);
	    var _la = 0;
	    try {
	        this.state = 11695;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1502,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11670;
	            this.match(SnowflakeParser.CASE);
	            this.state = 11671;
	            this.expr(0);
	            this.state = 11673; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 11672;
	                this.switch_section();
	                this.state = 11675; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===803);
	            this.state = 11679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===204) {
	                this.state = 11677;
	                this.match(SnowflakeParser.ELSE);
	                this.state = 11678;
	                this.expr(0);
	            }

	            this.state = 11681;
	            this.match(SnowflakeParser.END);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11683;
	            this.match(SnowflakeParser.CASE);
	            this.state = 11685; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 11684;
	                this.switch_search_condition_section();
	                this.state = 11687; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===803);
	            this.state = 11691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===204) {
	                this.state = 11689;
	                this.match(SnowflakeParser.ELSE);
	                this.state = 11690;
	                this.expr(0);
	            }

	            this.state = 11693;
	            this.match(SnowflakeParser.END);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_search_condition_section() {
	    let localctx = new Switch_search_condition_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, SnowflakeParser.RULE_switch_search_condition_section);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11697;
	        this.match(SnowflakeParser.WHEN);
	        this.state = 11698;
	        this.search_condition(0);
	        this.state = 11699;
	        this.match(SnowflakeParser.THEN);
	        this.state = 11700;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_section() {
	    let localctx = new Switch_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, SnowflakeParser.RULE_switch_section);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11702;
	        this.match(SnowflakeParser.WHEN);
	        this.state = 11703;
	        this.expr(0);
	        this.state = 11704;
	        this.match(SnowflakeParser.THEN);
	        this.state = 11705;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query_statement() {
	    let localctx = new Query_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1048, SnowflakeParser.RULE_query_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===805) {
	            this.state = 11707;
	            this.with_expression();
	        }

	        this.state = 11710;
	        this.select_statement();
	        this.state = 11714;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1504,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 11711;
	                this.set_operators(); 
	            }
	            this.state = 11716;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1504,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_expression() {
	    let localctx = new With_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, SnowflakeParser.RULE_with_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11717;
	        this.match(SnowflakeParser.WITH);
	        this.state = 11718;
	        this.common_table_expression();
	        this.state = 11723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 11719;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 11720;
	            this.common_table_expression();
	            this.state = 11725;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_table_expression() {
	    let localctx = new Common_table_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, SnowflakeParser.RULE_common_table_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11726;
	        this.id_();
	        this.state = 11731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===888) {
	            this.state = 11727;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11728;
	            localctx.columns = this.column_list();
	            this.state = 11729;
	            this.match(SnowflakeParser.RR_BRACKET);
	        }

	        this.state = 11733;
	        this.match(SnowflakeParser.AS);
	        this.state = 11734;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 11735;
	        this.select_statement();
	        this.state = 11739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===232 || _la===339 || _la===405 || _la===766 || _la===888) {
	            this.state = 11736;
	            this.set_operators();
	            this.state = 11741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 11742;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_statement() {
	    let localctx = new Select_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, SnowflakeParser.RULE_select_statement);
	    try {
	        this.state = 11752;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1509,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11744;
	            this.select_clause();
	            this.state = 11745;
	            this.select_optional_clauses();
	            this.state = 11747;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1508,this._ctx);
	            if(la_===1) {
	                this.state = 11746;
	                this.limit_clause();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11749;
	            this.select_top_clause();
	            this.state = 11750;
	            this.select_optional_clauses();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_operators() {
	    let localctx = new Set_operatorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, SnowflakeParser.RULE_set_operators);
	    var _la = 0;
	    try {
	        this.state = 11768;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 232:
	        case 339:
	        case 405:
	        case 766:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11761;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 766:
	                this.state = 11754;
	                this.match(SnowflakeParser.UNION);
	                this.state = 11756;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===17) {
	                    this.state = 11755;
	                    this.match(SnowflakeParser.ALL);
	                }

	                break;
	            case 232:
	                this.state = 11758;
	                this.match(SnowflakeParser.EXCEPT);
	                break;
	            case 405:
	                this.state = 11759;
	                this.match(SnowflakeParser.MINUS_);
	                break;
	            case 339:
	                this.state = 11760;
	                this.match(SnowflakeParser.INTERSECT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 11763;
	            this.select_statement();
	            break;
	        case 888:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11764;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11765;
	            this.select_statement();
	            this.state = 11766;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_optional_clauses() {
	    let localctx = new Select_optional_clausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, SnowflakeParser.RULE_select_optional_clauses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11771;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1513,this._ctx);
	        if(la_===1) {
	            this.state = 11770;
	            this.into_clause();

	        }
	        this.state = 11774;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1514,this._ctx);
	        if(la_===1) {
	            this.state = 11773;
	            this.from_clause();

	        }
	        this.state = 11777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1515,this._ctx);
	        if(la_===1) {
	            this.state = 11776;
	            this.where_clause();

	        }
	        this.state = 11781;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1516,this._ctx);
	        if(la_===1) {
	            this.state = 11779;
	            this.group_by_clause();

	        } else if(la_===2) {
	            this.state = 11780;
	            this.having_clause();

	        }
	        this.state = 11784;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1517,this._ctx);
	        if(la_===1) {
	            this.state = 11783;
	            this.qualify_clause();

	        }
	        this.state = 11787;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1518,this._ctx);
	        if(la_===1) {
	            this.state = 11786;
	            this.order_by_clause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_clause() {
	    let localctx = new Select_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, SnowflakeParser.RULE_select_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11789;
	        this.match(SnowflakeParser.SELECT);
	        this.state = 11790;
	        this.select_list_no_top();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_top_clause() {
	    let localctx = new Select_top_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, SnowflakeParser.RULE_select_top_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11792;
	        this.match(SnowflakeParser.SELECT);
	        this.state = 11793;
	        this.select_list_top();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_list_no_top() {
	    let localctx = new Select_list_no_topContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1064, SnowflakeParser.RULE_select_list_no_top);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===197) {
	            this.state = 11795;
	            this.all_distinct();
	        }

	        this.state = 11798;
	        this.select_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_list_top() {
	    let localctx = new Select_list_topContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, SnowflakeParser.RULE_select_list_top);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===197) {
	            this.state = 11800;
	            this.all_distinct();
	        }

	        this.state = 11804;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===749) {
	            this.state = 11803;
	            this.top_clause();
	        }

	        this.state = 11806;
	        this.select_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_list() {
	    let localctx = new Select_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, SnowflakeParser.RULE_select_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11808;
	        this.select_list_elem();
	        this.state = 11813;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1522,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 11809;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11810;
	                this.select_list_elem(); 
	            }
	            this.state = 11815;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1522,this._ctx);
	        }

	        this.state = 11817;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1523,this._ctx);
	        if(la_===1) {
	            this.state = 11816;
	            this.match(SnowflakeParser.COMMA);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_list_elem() {
	    let localctx = new Select_list_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, SnowflakeParser.RULE_select_list_elem);
	    try {
	        this.state = 11828;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1526,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11819;
	            this.column_elem();
	            this.state = 11821;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1524,this._ctx);
	            if(la_===1) {
	                this.state = 11820;
	                this.as_alias();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11823;
	            this.column_elem_star();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11824;
	            this.expression_elem();
	            this.state = 11826;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1525,this._ctx);
	            if(la_===1) {
	                this.state = 11825;
	                this.as_alias();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_elem_star() {
	    let localctx = new Column_elem_starContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, SnowflakeParser.RULE_column_elem_star);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11831;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	            this.state = 11830;
	            this.object_name_or_alias();
	        }

	        this.state = 11833;
	        this.match(SnowflakeParser.STAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_elem() {
	    let localctx = new Column_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1074, SnowflakeParser.RULE_column_elem);
	    var _la = 0;
	    try {
	        this.state = 11844;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1530,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11836;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1528,this._ctx);
	            if(la_===1) {
	                this.state = 11835;
	                this.object_name_or_alias();

	            }
	            this.state = 11838;
	            this.column_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2147590848) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 262161) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 641729251) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 892341315) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 2818851841) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 67371009) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 3758096389) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 57345) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 1417805983) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 565387793) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 545292289) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 118490117) !== 0) || ((((_la - 454)) & ~0x1f) === 0 && ((1 << (_la - 454)) & 56758305) !== 0) || ((((_la - 491)) & ~0x1f) === 0 && ((1 << (_la - 491)) & 234995709) !== 0) || ((((_la - 529)) & ~0x1f) === 0 && ((1 << (_la - 529)) & 2164793359) !== 0) || ((((_la - 569)) & ~0x1f) === 0 && ((1 << (_la - 569)) & 149749931) !== 0) || ((((_la - 620)) & ~0x1f) === 0 && ((1 << (_la - 620)) & 83985) !== 0) || ((((_la - 663)) & ~0x1f) === 0 && ((1 << (_la - 663)) & 268992925) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 2027700743) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 2953021253) !== 0) || ((((_la - 764)) & ~0x1f) === 0 && ((1 << (_la - 764)) & 1442899457) !== 0) || ((((_la - 796)) & ~0x1f) === 0 && ((1 << (_la - 796)) & 4244635659) !== 0) || ((((_la - 828)) & ~0x1f) === 0 && ((1 << (_la - 828)) & 3238002687) !== 0) || _la===861 || _la===862) {
	                this.state = 11839;
	                this.object_name_or_alias();
	            }

	            this.state = 11842;
	            this.match(SnowflakeParser.DOLLAR);
	            this.state = 11843;
	            this.column_position();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_name_or_alias() {
	    let localctx = new Object_name_or_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, SnowflakeParser.RULE_object_name_or_alias);
	    try {
	        this.state = 11850;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1531,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11846;
	            this.object_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11847;
	            this.alias();
	            this.state = 11848;
	            this.match(SnowflakeParser.DOT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	as_alias() {
	    let localctx = new As_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, SnowflakeParser.RULE_as_alias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11853;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43) {
	            this.state = 11852;
	            this.match(SnowflakeParser.AS);
	        }

	        this.state = 11855;
	        this.alias();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_elem() {
	    let localctx = new Expression_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1080, SnowflakeParser.RULE_expression_elem);
	    try {
	        this.state = 11859;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1533,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11857;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11858;
	            this.predicate();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_position() {
	    let localctx = new Column_positionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, SnowflakeParser.RULE_column_position);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11861;
	        this.num();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_distinct() {
	    let localctx = new All_distinctContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, SnowflakeParser.RULE_all_distinct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11863;
	        _la = this._input.LA(1);
	        if(!(_la===17 || _la===197)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	top_clause() {
	    let localctx = new Top_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, SnowflakeParser.RULE_top_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11865;
	        this.match(SnowflakeParser.TOP);
	        this.state = 11866;
	        this.num();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_clause() {
	    let localctx = new Into_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, SnowflakeParser.RULE_into_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11868;
	        this.match(SnowflakeParser.INTO);
	        this.state = 11869;
	        this.var_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_list() {
	    let localctx = new Var_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1090, SnowflakeParser.RULE_var_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11871;
	        this.var_();
	        this.state = 11876;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1534,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 11872;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11873;
	                this.var_(); 
	            }
	            this.state = 11878;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1534,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new VarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, SnowflakeParser.RULE_var);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11879;
	        this.match(SnowflakeParser.COLON);
	        this.state = 11880;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from_clause() {
	    let localctx = new From_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, SnowflakeParser.RULE_from_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11882;
	        this.match(SnowflakeParser.FROM);
	        this.state = 11883;
	        this.table_sources();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_sources() {
	    let localctx = new Table_sourcesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1096, SnowflakeParser.RULE_table_sources);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11885;
	        this.table_source();
	        this.state = 11890;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1535,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 11886;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 11887;
	                this.table_source(); 
	            }
	            this.state = 11892;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1535,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_source() {
	    let localctx = new Table_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, SnowflakeParser.RULE_table_source);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 11893;
	        this.table_source_item_joined();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_source_item_joined() {
	    let localctx = new Table_source_item_joinedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, SnowflakeParser.RULE_table_source_item_joined);
	    try {
	        this.state = 11911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1538,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11895;
	            this.object_ref();
	            this.state = 11899;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,1536,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 11896;
	                    this.join_clause(); 
	                }
	                this.state = 11901;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1536,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11902;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11903;
	            this.table_source_item_joined();
	            this.state = 11904;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 11908;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,1537,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 11905;
	                    this.join_clause(); 
	                }
	                this.state = 11910;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1537,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_ref() {
	    let localctx = new Object_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, SnowflakeParser.RULE_object_ref);
	    var _la = 0;
	    try {
	        this.state = 11984;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1557,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11913;
	            this.object_name();
	            this.state = 11915;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1539,this._ctx);
	            if(la_===1) {
	                this.state = 11914;
	                this.at_before();

	            }
	            this.state = 11918;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1540,this._ctx);
	            if(la_===1) {
	                this.state = 11917;
	                this.changes();

	            }
	            this.state = 11921;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1541,this._ctx);
	            if(la_===1) {
	                this.state = 11920;
	                this.match_recognize();

	            }
	            this.state = 11924;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1542,this._ctx);
	            if(la_===1) {
	                this.state = 11923;
	                this.pivot_unpivot();

	            }
	            this.state = 11927;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1543,this._ctx);
	            if(la_===1) {
	                this.state = 11926;
	                this.as_alias();

	            }
	            this.state = 11930;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1544,this._ctx);
	            if(la_===1) {
	                this.state = 11929;
	                this.column_list_in_parentheses();

	            }
	            this.state = 11933;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1545,this._ctx);
	            if(la_===1) {
	                this.state = 11932;
	                this.sample();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11935;
	            this.object_name();
	            this.state = 11936;
	            this.match(SnowflakeParser.START);
	            this.state = 11937;
	            this.match(SnowflakeParser.WITH);
	            this.state = 11938;
	            this.predicate();
	            this.state = 11939;
	            this.match(SnowflakeParser.CONNECT);
	            this.state = 11940;
	            this.match(SnowflakeParser.BY);
	            this.state = 11942;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1546,this._ctx);
	            if(la_===1) {
	                this.state = 11941;
	                this.prior_list();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11944;
	            this.match(SnowflakeParser.TABLE);
	            this.state = 11945;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11946;
	            this.function_call();
	            this.state = 11947;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 11949;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1547,this._ctx);
	            if(la_===1) {
	                this.state = 11948;
	                this.pivot_unpivot();

	            }
	            this.state = 11952;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1548,this._ctx);
	            if(la_===1) {
	                this.state = 11951;
	                this.as_alias();

	            }
	            this.state = 11955;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1549,this._ctx);
	            if(la_===1) {
	                this.state = 11954;
	                this.sample();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11957;
	            this.values_table();
	            this.state = 11959;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1550,this._ctx);
	            if(la_===1) {
	                this.state = 11958;
	                this.sample();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 11962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===363) {
	                this.state = 11961;
	                this.match(SnowflakeParser.LATERAL);
	            }

	            this.state = 11964;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 11965;
	            this.subquery();
	            this.state = 11966;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 11968;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1552,this._ctx);
	            if(la_===1) {
	                this.state = 11967;
	                this.pivot_unpivot();

	            }
	            this.state = 11971;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1553,this._ctx);
	            if(la_===1) {
	                this.state = 11970;
	                this.as_alias();

	            }
	            this.state = 11974;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1554,this._ctx);
	            if(la_===1) {
	                this.state = 11973;
	                this.column_list_in_parentheses();

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 11976;
	            this.match(SnowflakeParser.LATERAL);
	            this.state = 11979;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 268:
	                this.state = 11977;
	                this.flatten_table();
	                break;
	            case 667:
	                this.state = 11978;
	                this.splited_table();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 11982;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1556,this._ctx);
	            if(la_===1) {
	                this.state = 11981;
	                this.as_alias();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flatten_table_option() {
	    let localctx = new Flatten_table_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, SnowflakeParser.RULE_flatten_table_option);
	    var _la = 0;
	    try {
	        this.state = 11998;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 506:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 11986;
	            this.match(SnowflakeParser.PATH_);
	            this.state = 11987;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 11988;
	            this.string();
	            break;
	        case 479:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 11989;
	            this.match(SnowflakeParser.OUTER);
	            this.state = 11990;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 11991;
	            this.true_false();
	            break;
	        case 548:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 11992;
	            this.match(SnowflakeParser.RECURSIVE);
	            this.state = 11993;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 11994;
	            this.true_false();
	            break;
	        case 408:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 11995;
	            this.match(SnowflakeParser.MODE);
	            this.state = 11996;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 11997;
	            _la = this._input.LA(1);
	            if(!(_la===93 || _la===455 || _la===821)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flatten_table() {
	    let localctx = new Flatten_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, SnowflakeParser.RULE_flatten_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12000;
	        this.match(SnowflakeParser.FLATTEN);
	        this.state = 12001;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 12004;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1559,this._ctx);
	        if(la_===1) {
	            this.state = 12002;
	            this.match(SnowflakeParser.INPUT);
	            this.state = 12003;
	            this.match(SnowflakeParser.ASSOC);

	        }
	        this.state = 12006;
	        this.expr(0);
	        this.state = 12011;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 12007;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 12008;
	            this.flatten_table_option();
	            this.state = 12013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 12014;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	splited_table() {
	    let localctx = new Splited_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, SnowflakeParser.RULE_splited_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12016;
	        this.match(SnowflakeParser.SPLIT_TO_TABLE);
	        this.state = 12017;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 12018;
	        this.expr(0);
	        this.state = 12019;
	        this.match(SnowflakeParser.COMMA);
	        this.state = 12020;
	        this.expr(0);
	        this.state = 12021;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prior_list() {
	    let localctx = new Prior_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, SnowflakeParser.RULE_prior_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12023;
	        this.prior_item();
	        this.state = 12028;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1561,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 12024;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 12025;
	                this.prior_item(); 
	            }
	            this.state = 12030;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1561,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prior_item() {
	    let localctx = new Prior_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, SnowflakeParser.RULE_prior_item);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12032;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===525) {
	            this.state = 12031;
	            this.match(SnowflakeParser.PRIOR);
	        }

	        this.state = 12034;
	        this.id_();
	        this.state = 12035;
	        this.match(SnowflakeParser.EQ);
	        this.state = 12037;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===525) {
	            this.state = 12036;
	            this.match(SnowflakeParser.PRIOR);
	        }

	        this.state = 12039;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outer_join() {
	    let localctx = new Outer_joinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, SnowflakeParser.RULE_outer_join);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12041;
	        _la = this._input.LA(1);
	        if(!(_la===277 || _la===365 || _la===585)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 12043;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===479) {
	            this.state = 12042;
	            this.match(SnowflakeParser.OUTER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_type() {
	    let localctx = new Join_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, SnowflakeParser.RULE_join_type);
	    try {
	        this.state = 12047;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 332:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12045;
	            this.match(SnowflakeParser.INNER);
	            break;
	        case 277:
	        case 365:
	        case 585:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12046;
	            this.outer_join();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_clause() {
	    let localctx = new Join_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, SnowflakeParser.RULE_join_clause);
	    var _la = 0;
	    try {
	        this.state = 12076;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	        case 332:
	        case 348:
	        case 365:
	        case 585:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12050;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===277 || _la===332 || _la===365 || _la===585) {
	                this.state = 12049;
	                this.join_type();
	            }

	            this.state = 12052;
	            this.match(SnowflakeParser.JOIN);
	            this.state = 12053;
	            this.object_ref();
	            this.state = 12065;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1569,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 12056;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1567,this._ctx);
	                if(la_===1) {
	                    this.state = 12054;
	                    this.match(SnowflakeParser.ON);
	                    this.state = 12055;
	                    this.search_condition(0);

	                }
	                break;

	            case 2:
	                this.state = 12063;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1568,this._ctx);
	                if(la_===1) {
	                    this.state = 12058;
	                    this.match(SnowflakeParser.USING);
	                    this.state = 12059;
	                    this.match(SnowflakeParser.LR_BRACKET);
	                    this.state = 12060;
	                    this.column_list();
	                    this.state = 12061;
	                    this.match(SnowflakeParser.RR_BRACKET);

	                }
	                break;

	            }
	            break;
	        case 418:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12067;
	            this.match(SnowflakeParser.NATURAL);
	            this.state = 12069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===277 || _la===365 || _la===585) {
	                this.state = 12068;
	                this.outer_join();
	            }

	            this.state = 12071;
	            this.match(SnowflakeParser.JOIN);
	            this.state = 12072;
	            this.object_ref();
	            break;
	        case 154:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 12073;
	            this.match(SnowflakeParser.CROSS);
	            this.state = 12074;
	            this.match(SnowflakeParser.JOIN);
	            this.state = 12075;
	            this.object_ref();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	at_before() {
	    let localctx = new At_beforeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, SnowflakeParser.RULE_at_before);
	    try {
	        this.state = 12103;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12078;
	            this.match(SnowflakeParser.AT_KEYWORD);
	            this.state = 12079;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12092;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 727:
	                this.state = 12080;
	                this.match(SnowflakeParser.TIMESTAMP);
	                this.state = 12081;
	                this.match(SnowflakeParser.ASSOC);
	                this.state = 12082;
	                this.expr(0);
	                break;
	            case 459:
	                this.state = 12083;
	                this.match(SnowflakeParser.OFFSET);
	                this.state = 12084;
	                this.match(SnowflakeParser.ASSOC);
	                this.state = 12085;
	                this.expr(0);
	                break;
	            case 679:
	                this.state = 12086;
	                this.match(SnowflakeParser.STATEMENT);
	                this.state = 12087;
	                this.match(SnowflakeParser.ASSOC);
	                this.state = 12088;
	                this.string();
	                break;
	            case 690:
	                this.state = 12089;
	                this.match(SnowflakeParser.STREAM);
	                this.state = 12090;
	                this.match(SnowflakeParser.ASSOC);
	                this.state = 12091;
	                this.string();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 12094;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12096;
	            this.match(SnowflakeParser.BEFORE);
	            this.state = 12097;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12098;
	            this.match(SnowflakeParser.STATEMENT);
	            this.state = 12099;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 12100;
	            this.string();
	            this.state = 12101;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	end() {
	    let localctx = new EndContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, SnowflakeParser.RULE_end);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12105;
	        this.match(SnowflakeParser.END);
	        this.state = 12106;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 12116;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 727:
	            this.state = 12107;
	            this.match(SnowflakeParser.TIMESTAMP);
	            this.state = 12108;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 12109;
	            this.expr(0);
	            break;
	        case 459:
	            this.state = 12110;
	            this.match(SnowflakeParser.OFFSET);
	            this.state = 12111;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 12112;
	            this.expr(0);
	            break;
	        case 679:
	            this.state = 12113;
	            this.match(SnowflakeParser.STATEMENT);
	            this.state = 12114;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 12115;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 12118;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changes() {
	    let localctx = new ChangesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, SnowflakeParser.RULE_changes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12120;
	        this.match(SnowflakeParser.CHANGES);
	        this.state = 12121;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 12122;
	        this.match(SnowflakeParser.INFORMATION);
	        this.state = 12123;
	        this.match(SnowflakeParser.ASSOC);
	        this.state = 12124;
	        this.default_append_only();
	        this.state = 12125;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 12126;
	        this.at_before();
	        this.state = 12128;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1575,this._ctx);
	        if(la_===1) {
	            this.state = 12127;
	            this.end();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_append_only() {
	    let localctx = new Default_append_onlyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, SnowflakeParser.RULE_default_append_only);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12130;
	        _la = this._input.LA(1);
	        if(!(_la===40 || _la===174)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partition_by() {
	    let localctx = new Partition_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, SnowflakeParser.RULE_partition_by);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12132;
	        this.match(SnowflakeParser.PARTITION);
	        this.state = 12133;
	        this.match(SnowflakeParser.BY);
	        this.state = 12134;
	        this.expr_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias() {
	    let localctx = new AliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, SnowflakeParser.RULE_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12136;
	        this.id_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_alias_list() {
	    let localctx = new Expr_alias_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, SnowflakeParser.RULE_expr_alias_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12138;
	        this.expr(0);
	        this.state = 12140;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43) {
	            this.state = 12139;
	            this.match(SnowflakeParser.AS);
	        }

	        this.state = 12142;
	        this.alias();
	        this.state = 12152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 12143;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 12144;
	            this.expr(0);
	            this.state = 12146;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===43) {
	                this.state = 12145;
	                this.match(SnowflakeParser.AS);
	            }

	            this.state = 12148;
	            this.alias();
	            this.state = 12154;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	measures() {
	    let localctx = new MeasuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, SnowflakeParser.RULE_measures);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12155;
	        this.match(SnowflakeParser.MEASURES);
	        this.state = 12156;
	        this.expr_alias_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	match_opts() {
	    let localctx = new Match_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, SnowflakeParser.RULE_match_opts);
	    try {
	        this.state = 12167;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 645:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12158;
	            this.match(SnowflakeParser.SHOW);
	            this.state = 12159;
	            this.match(SnowflakeParser.EMPTY_);
	            this.state = 12160;
	            this.match(SnowflakeParser.MATCHES);
	            break;
	        case 464:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12161;
	            this.match(SnowflakeParser.OMIT);
	            this.state = 12162;
	            this.match(SnowflakeParser.EMPTY_);
	            this.state = 12163;
	            this.match(SnowflakeParser.MATCHES);
	            break;
	        case 805:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 12164;
	            this.match(SnowflakeParser.WITH);
	            this.state = 12165;
	            this.match(SnowflakeParser.UNMATCHED);
	            this.state = 12166;
	            this.match(SnowflakeParser.ROWS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_match() {
	    let localctx = new Row_matchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, SnowflakeParser.RULE_row_match);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 466:
	            this.state = 12169;
	            this.match(SnowflakeParser.ONE);
	            this.state = 12170;
	            this.match(SnowflakeParser.ROW);
	            this.state = 12171;
	            this.match(SnowflakeParser.PER);
	            this.state = 12172;
	            this.match(SnowflakeParser.MATCH);
	            break;
	        case 17:
	            this.state = 12173;
	            this.match(SnowflakeParser.ALL);
	            this.state = 12174;
	            this.match(SnowflakeParser.ROWS);
	            this.state = 12175;
	            this.match(SnowflakeParser.PER);
	            this.state = 12176;
	            this.match(SnowflakeParser.MATCH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 12180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===464 || _la===645 || _la===805) {
	            this.state = 12179;
	            this.match_opts();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	first_last() {
	    let localctx = new First_lastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, SnowflakeParser.RULE_first_last);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12182;
	        _la = this._input.LA(1);
	        if(!(_la===265 || _la===359)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol() {
	    let localctx = new SymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, SnowflakeParser.RULE_symbol);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12184;
	        this.match(SnowflakeParser.DUMMY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	after_match() {
	    let localctx = new After_matchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, SnowflakeParser.RULE_after_match);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12186;
	        this.match(SnowflakeParser.AFTER);
	        this.state = 12187;
	        this.match(SnowflakeParser.MATCH);
	        this.state = 12188;
	        this.match(SnowflakeParser.SKIP_);
	        this.state = 12200;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1583,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 12189;
	            this.match(SnowflakeParser.PAST);
	            this.state = 12190;
	            this.match(SnowflakeParser.LAST);
	            this.state = 12191;
	            this.match(SnowflakeParser.ROW);
	            break;

	        case 2:
	            this.state = 12192;
	            this.match(SnowflakeParser.TO);
	            this.state = 12193;
	            this.match(SnowflakeParser.NEXT);
	            this.state = 12194;
	            this.match(SnowflakeParser.ROW);
	            break;

	        case 3:
	            this.state = 12195;
	            this.match(SnowflakeParser.TO);
	            this.state = 12197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===265 || _la===359) {
	                this.state = 12196;
	                this.first_last();
	            }

	            this.state = 12199;
	            this.symbol();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol_list() {
	    let localctx = new Symbol_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, SnowflakeParser.RULE_symbol_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12202;
	        this.symbol();
	        this.state = 12203;
	        this.match(SnowflakeParser.AS);
	        this.state = 12204;
	        this.expr(0);
	        this.state = 12212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 12205;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 12206;
	            this.symbol();
	            this.state = 12207;
	            this.match(SnowflakeParser.AS);
	            this.state = 12208;
	            this.expr(0);
	            this.state = 12214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	define() {
	    let localctx = new DefineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, SnowflakeParser.RULE_define);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12215;
	        this.match(SnowflakeParser.DEFINE);
	        this.state = 12216;
	        this.symbol_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	match_recognize() {
	    let localctx = new Match_recognizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1150, SnowflakeParser.RULE_match_recognize);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12218;
	        this.match(SnowflakeParser.MATCH_RECOGNIZE);
	        this.state = 12219;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 12221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===491) {
	            this.state = 12220;
	            this.partition_by();
	        }

	        this.state = 12224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===475) {
	            this.state = 12223;
	            this.order_by_clause();
	        }

	        this.state = 12227;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===397) {
	            this.state = 12226;
	            this.measures();
	        }

	        this.state = 12230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===466) {
	            this.state = 12229;
	            this.row_match();
	        }

	        this.state = 12233;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14) {
	            this.state = 12232;
	            this.after_match();
	        }

	        this.state = 12236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===507) {
	            this.state = 12235;
	            this.pattern();
	        }

	        this.state = 12239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===181) {
	            this.state = 12238;
	            this.define();
	        }

	        this.state = 12241;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pivot_unpivot() {
	    let localctx = new Pivot_unpivotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1152, SnowflakeParser.RULE_pivot_unpivot);
	    var _la = 0;
	    try {
	        this.state = 12280;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 515:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12243;
	            this.match(SnowflakeParser.PIVOT);
	            this.state = 12244;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12245;
	            this.id_();
	            this.state = 12246;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12247;
	            this.id_();
	            this.state = 12248;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 12249;
	            this.match(SnowflakeParser.FOR);
	            this.state = 12250;
	            this.id_();
	            this.state = 12251;
	            this.match(SnowflakeParser.IN);
	            this.state = 12252;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12253;
	            this.literal();
	            this.state = 12258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 12254;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 12255;
	                this.literal();
	                this.state = 12260;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 12261;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 12262;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 12267;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1594,this._ctx);
	            if(la_===1) {
	                this.state = 12263;
	                this.as_alias();
	                this.state = 12265;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1593,this._ctx);
	                if(la_===1) {
	                    this.state = 12264;
	                    this.column_alias_list_in_brackets();

	                }

	            }
	            break;
	        case 769:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12269;
	            this.match(SnowflakeParser.UNPIVOT);
	            this.state = 12270;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12271;
	            this.id_();
	            this.state = 12272;
	            this.match(SnowflakeParser.FOR);
	            this.state = 12273;
	            this.column_name();
	            this.state = 12274;
	            this.match(SnowflakeParser.IN);
	            this.state = 12275;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12276;
	            this.column_list();
	            this.state = 12277;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 12278;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_alias_list_in_brackets() {
	    let localctx = new Column_alias_list_in_bracketsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1154, SnowflakeParser.RULE_column_alias_list_in_brackets);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12282;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 12283;
	        this.id_();
	        this.state = 12288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===894) {
	            this.state = 12284;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 12285;
	            this.id_();
	            this.state = 12290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 12291;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_list_in_parentheses() {
	    let localctx = new Expr_list_in_parenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1156, SnowflakeParser.RULE_expr_list_in_parentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12293;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 12294;
	        this.expr_list();
	        this.state = 12295;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_table() {
	    let localctx = new Values_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1158, SnowflakeParser.RULE_values_table);
	    try {
	        this.state = 12313;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 888:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12297;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12298;
	            this.values_table_body();
	            this.state = 12299;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 12304;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1598,this._ctx);
	            if(la_===1) {
	                this.state = 12300;
	                this.as_alias();
	                this.state = 12302;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1597,this._ctx);
	                if(la_===1) {
	                    this.state = 12301;
	                    this.column_alias_list_in_brackets();

	                }

	            }
	            break;
	        case 790:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12306;
	            this.values_table_body();
	            this.state = 12311;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1600,this._ctx);
	            if(la_===1) {
	                this.state = 12307;
	                this.as_alias();
	                this.state = 12309;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1599,this._ctx);
	                if(la_===1) {
	                    this.state = 12308;
	                    this.column_alias_list_in_brackets();

	                }

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_table_body() {
	    let localctx = new Values_table_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1160, SnowflakeParser.RULE_values_table_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12315;
	        this.match(SnowflakeParser.VALUES);
	        this.state = 12316;
	        this.expr_list_in_parentheses();
	        this.state = 12321;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1602,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 12317;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 12318;
	                this.expr_list_in_parentheses(); 
	            }
	            this.state = 12323;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1602,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sample_method() {
	    let localctx = new Sample_methodContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1162, SnowflakeParser.RULE_sample_method);
	    var _la = 0;
	    try {
	        this.state = 12326;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 83:
	        case 593:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12324;
	            localctx.row_sampling = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===83 || _la===593)) {
	                localctx.row_sampling = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 89:
	        case 707:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12325;
	            localctx.block_sampling = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===89 || _la===707)) {
	                localctx.block_sampling = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatable_seed() {
	    let localctx = new Repeatable_seedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1164, SnowflakeParser.RULE_repeatable_seed);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12328;
	        _la = this._input.LA(1);
	        if(!(_la===559 || _la===632)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 12329;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 12330;
	        this.num();
	        this.state = 12331;
	        this.match(SnowflakeParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sample_opts() {
	    let localctx = new Sample_optsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1166, SnowflakeParser.RULE_sample_opts);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12333;
	        this.match(SnowflakeParser.LR_BRACKET);
	        this.state = 12334;
	        this.num();
	        this.state = 12336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===594) {
	            this.state = 12335;
	            this.match(SnowflakeParser.ROWS);
	        }

	        this.state = 12338;
	        this.match(SnowflakeParser.RR_BRACKET);
	        this.state = 12340;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1605,this._ctx);
	        if(la_===1) {
	            this.state = 12339;
	            this.repeatable_seed();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sample() {
	    let localctx = new SampleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1168, SnowflakeParser.RULE_sample);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12342;
	        _la = this._input.LA(1);
	        if(!(_la===618 || _la===712)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 12344;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83 || _la===89 || _la===593 || _la===707) {
	            this.state = 12343;
	            this.sample_method();
	        }

	        this.state = 12346;
	        this.sample_opts();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	search_condition(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Search_conditionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1170;
	    this.enterRecursionRule(localctx, 1170, SnowflakeParser.RULE_search_condition, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12352;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1607,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 12349;
	                this.match(SnowflakeParser.NOT); 
	            }
	            this.state = 12354;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1607,this._ctx);
	        }

	        this.state = 12360;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1608,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 12355;
	            this.predicate();
	            break;

	        case 2:
	            this.state = 12356;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12357;
	            this.search_condition(0);
	            this.state = 12358;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 12370;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1610,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 12368;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1609,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Search_conditionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_search_condition);
	                    this.state = 12362;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 12363;
	                    this.match(SnowflakeParser.AND);
	                    this.state = 12364;
	                    this.search_condition(3);
	                    break;

	                case 2:
	                    localctx = new Search_conditionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SnowflakeParser.RULE_search_condition);
	                    this.state = 12365;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 12366;
	                    this.match(SnowflakeParser.OR);
	                    this.state = 12367;
	                    this.search_condition(2);
	                    break;

	                } 
	            }
	            this.state = 12372;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1610,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	comparison_operator() {
	    let localctx = new Comparison_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1172, SnowflakeParser.RULE_comparison_operator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12373;
	        _la = this._input.LA(1);
	        if(!(((((_la - 876)) & ~0x1f) === 0 && ((1 << (_la - 876)) & 127) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_not_null() {
	    let localctx = new Null_not_nullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1174, SnowflakeParser.RULE_null_not_null);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===429) {
	            this.state = 12375;
	            this.match(SnowflakeParser.NOT);
	        }

	        this.state = 12378;
	        this.match(SnowflakeParser.NULL_);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subquery() {
	    let localctx = new SubqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1176, SnowflakeParser.RULE_subquery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12380;
	        this.query_statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1178, SnowflakeParser.RULE_predicate);
	    var _la = 0;
	    try {
	        this.state = 12457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1621,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12382;
	            this.match(SnowflakeParser.EXISTS);
	            this.state = 12383;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12384;
	            this.subquery();
	            this.state = 12385;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12387;
	            this.expr(0);
	            this.state = 12388;
	            this.comparison_operator();
	            this.state = 12389;
	            _la = this._input.LA(1);
	            if(!(_la===17 || _la===30 || _la===662)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 12390;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12391;
	            this.subquery();
	            this.state = 12392;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 12394;
	            this.expr(0);
	            this.state = 12396;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===429) {
	                this.state = 12395;
	                this.match(SnowflakeParser.NOT);
	            }

	            this.state = 12398;
	            this.match(SnowflakeParser.BETWEEN);
	            this.state = 12399;
	            this.expr(0);
	            this.state = 12400;
	            this.match(SnowflakeParser.AND);
	            this.state = 12401;
	            this.expr(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 12403;
	            this.expr(0);
	            this.state = 12405;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===429) {
	                this.state = 12404;
	                this.match(SnowflakeParser.NOT);
	            }

	            this.state = 12407;
	            this.match(SnowflakeParser.IN);
	            this.state = 12408;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12411;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1614,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 12409;
	                this.subquery();
	                break;

	            case 2:
	                this.state = 12410;
	                this.expr_list();
	                break;

	            }
	            this.state = 12413;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 12415;
	            this.expr(0);
	            this.state = 12417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===429) {
	                this.state = 12416;
	                this.match(SnowflakeParser.NOT);
	            }

	            this.state = 12419;
	            _la = this._input.LA(1);
	            if(!(_la===317 || _la===368)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 12420;
	            this.expr(0);
	            this.state = 12423;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1616,this._ctx);
	            if(la_===1) {
	                this.state = 12421;
	                this.match(SnowflakeParser.ESCAPE);
	                this.state = 12422;
	                this.expr(0);

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 12425;
	            this.expr(0);
	            this.state = 12427;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===429) {
	                this.state = 12426;
	                this.match(SnowflakeParser.NOT);
	            }

	            this.state = 12429;
	            this.match(SnowflakeParser.RLIKE);
	            this.state = 12430;
	            this.expr(0);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 12432;
	            this.expr(0);
	            this.state = 12434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===429) {
	                this.state = 12433;
	                this.match(SnowflakeParser.NOT);
	            }

	            this.state = 12436;
	            _la = this._input.LA(1);
	            if(!(_la===317 || _la===368)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 12437;
	            this.match(SnowflakeParser.ANY);
	            this.state = 12438;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12439;
	            this.expr(0);
	            this.state = 12444;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 12440;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 12441;
	                this.expr(0);
	                this.state = 12446;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 12447;
	            this.match(SnowflakeParser.RR_BRACKET);
	            this.state = 12450;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1620,this._ctx);
	            if(la_===1) {
	                this.state = 12448;
	                this.match(SnowflakeParser.ESCAPE);
	                this.state = 12449;
	                this.expr(0);

	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 12452;
	            this.expr(0);
	            this.state = 12453;
	            this.match(SnowflakeParser.IS);
	            this.state = 12454;
	            this.null_not_null();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 12456;
	            this.expr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where_clause() {
	    let localctx = new Where_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1180, SnowflakeParser.RULE_where_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12459;
	        this.match(SnowflakeParser.WHERE);
	        this.state = 12460;
	        this.search_condition(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_by_elem() {
	    let localctx = new Group_by_elemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1182, SnowflakeParser.RULE_group_by_elem);
	    try {
	        this.state = 12465;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1622,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12462;
	            this.column_elem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12463;
	            this.num();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 12464;
	            this.expression_elem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_by_list() {
	    let localctx = new Group_by_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1184, SnowflakeParser.RULE_group_by_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12467;
	        this.group_by_elem();
	        this.state = 12472;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1623,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 12468;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 12469;
	                this.group_by_elem(); 
	            }
	            this.state = 12474;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1623,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_by_clause() {
	    let localctx = new Group_by_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1186, SnowflakeParser.RULE_group_by_clause);
	    try {
	        this.state = 12496;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1626,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12475;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 12476;
	            this.match(SnowflakeParser.BY);
	            this.state = 12477;
	            this.group_by_list();
	            this.state = 12479;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1624,this._ctx);
	            if(la_===1) {
	                this.state = 12478;
	                this.having_clause();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12481;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 12482;
	            this.match(SnowflakeParser.BY);
	            this.state = 12487;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 157:
	                this.state = 12483;
	                this.match(SnowflakeParser.CUBE);
	                break;
	            case 298:
	                this.state = 12484;
	                this.match(SnowflakeParser.GROUPING);
	                this.state = 12485;
	                this.match(SnowflakeParser.SETS);
	                break;
	            case 590:
	                this.state = 12486;
	                this.match(SnowflakeParser.ROLLUP);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 12489;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12490;
	            this.group_by_list();
	            this.state = 12491;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 12493;
	            this.match(SnowflakeParser.GROUP);
	            this.state = 12494;
	            this.match(SnowflakeParser.BY);
	            this.state = 12495;
	            this.match(SnowflakeParser.ALL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	having_clause() {
	    let localctx = new Having_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1188, SnowflakeParser.RULE_having_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12498;
	        this.match(SnowflakeParser.HAVING);
	        this.state = 12499;
	        this.search_condition(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualify_clause() {
	    let localctx = new Qualify_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1190, SnowflakeParser.RULE_qualify_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12501;
	        this.match(SnowflakeParser.QUALIFY);
	        this.state = 12502;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_item() {
	    let localctx = new Order_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1192, SnowflakeParser.RULE_order_item);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1627,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 12504;
	            this.id_();
	            break;

	        case 2:
	            this.state = 12505;
	            this.num();
	            break;

	        case 3:
	            this.state = 12506;
	            this.expr(0);
	            break;

	        }
	        this.state = 12510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1628,this._ctx);
	        if(la_===1) {
	            this.state = 12509;
	            _la = this._input.LA(1);
	            if(!(_la===44 || _la===188)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 12514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1629,this._ctx);
	        if(la_===1) {
	            this.state = 12512;
	            this.match(SnowflakeParser.NULLS);
	            this.state = 12513;
	            _la = this._input.LA(1);
	            if(!(_la===265 || _la===359)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by_clause() {
	    let localctx = new Order_by_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1194, SnowflakeParser.RULE_order_by_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12516;
	        this.match(SnowflakeParser.ORDER);
	        this.state = 12517;
	        this.match(SnowflakeParser.BY);
	        this.state = 12518;
	        this.order_item();
	        this.state = 12523;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1630,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 12519;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 12520;
	                this.order_item(); 
	            }
	            this.state = 12525;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1630,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_rows() {
	    let localctx = new Row_rowsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1196, SnowflakeParser.RULE_row_rows);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12526;
	        _la = this._input.LA(1);
	        if(!(_la===593 || _la===594)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	first_next() {
	    let localctx = new First_nextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1198, SnowflakeParser.RULE_first_next);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12528;
	        _la = this._input.LA(1);
	        if(!(_la===265 || _la===422)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limit_clause() {
	    let localctx = new Limit_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1200, SnowflakeParser.RULE_limit_clause);
	    var _la = 0;
	    try {
	        this.state = 12554;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 369:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12530;
	            this.match(SnowflakeParser.LIMIT);
	            this.state = 12531;
	            this.num();
	            this.state = 12534;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1631,this._ctx);
	            if(la_===1) {
	                this.state = 12532;
	                this.match(SnowflakeParser.OFFSET);
	                this.state = 12533;
	                this.num();

	            }
	            break;
	        case 258:
	        case 459:
	        case 593:
	        case 594:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===459) {
	                this.state = 12536;
	                this.match(SnowflakeParser.OFFSET);
	                this.state = 12537;
	                this.num();
	            }

	            this.state = 12541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===593 || _la===594) {
	                this.state = 12540;
	                this.row_rows();
	            }

	            this.state = 12543;
	            this.match(SnowflakeParser.FETCH);
	            this.state = 12545;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===265 || _la===422) {
	                this.state = 12544;
	                this.first_next();
	            }

	            this.state = 12547;
	            this.num();
	            this.state = 12549;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1635,this._ctx);
	            if(la_===1) {
	                this.state = 12548;
	                this.row_rows();

	            }
	            this.state = 12552;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1636,this._ctx);
	            if(la_===1) {
	                this.state = 12551;
	                this.match(SnowflakeParser.ONLY);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	round_mode() {
	    let localctx = new Round_modeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1202, SnowflakeParser.RULE_round_mode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 12556;
	        _la = this._input.LA(1);
	        if(!(_la===301 || _la===302)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	round_expr() {
	    let localctx = new Round_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1204, SnowflakeParser.RULE_round_expr);
	    var _la = 0;
	    try {
	        this.state = 12592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1640,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 12558;
	            this.match(SnowflakeParser.ROUND);
	            this.state = 12559;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12560;
	            this.match(SnowflakeParser.EXPR);
	            this.state = 12561;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 12562;
	            this.expr(0);
	            this.state = 12563;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 12564;
	            this.match(SnowflakeParser.SCALE);
	            this.state = 12565;
	            this.match(SnowflakeParser.ASSOC);
	            this.state = 12566;
	            this.expr(0);
	            this.state = 12573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 12567;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 12568;
	                this.match(SnowflakeParser.ROUNDING_MODE);
	                this.state = 12569;
	                this.match(SnowflakeParser.ASSOC);
	                this.state = 12570;
	                this.round_mode();
	                this.state = 12575;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 12576;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 12578;
	            this.match(SnowflakeParser.ROUND);
	            this.state = 12579;
	            this.match(SnowflakeParser.LR_BRACKET);
	            this.state = 12580;
	            this.expr(0);
	            this.state = 12581;
	            this.match(SnowflakeParser.COMMA);
	            this.state = 12582;
	            this.expr(0);
	            this.state = 12587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===894) {
	                this.state = 12583;
	                this.match(SnowflakeParser.COMMA);
	                this.state = 12584;
	                this.round_mode();
	                this.state = 12589;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 12590;
	            this.match(SnowflakeParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SnowflakeParser.EOF = antlr4.Token.EOF;
SnowflakeParser.AAD_PROVISIONER_Q = 1;
SnowflakeParser.ABORT = 2;
SnowflakeParser.ABORT_DETACHED_QUERY = 3;
SnowflakeParser.ABORT_STATEMENT = 4;
SnowflakeParser.ACCESS = 5;
SnowflakeParser.ACCOUNT = 6;
SnowflakeParser.ACCOUNTADMIN = 7;
SnowflakeParser.ACCOUNTS = 8;
SnowflakeParser.ACTION = 9;
SnowflakeParser.ADD = 10;
SnowflakeParser.ADMIN_NAME = 11;
SnowflakeParser.ADMIN_PASSWORD = 12;
SnowflakeParser.AES = 13;
SnowflakeParser.AFTER = 14;
SnowflakeParser.ALERT = 15;
SnowflakeParser.ALERTS = 16;
SnowflakeParser.ALL = 17;
SnowflakeParser.ALLOWED_ACCOUNTS = 18;
SnowflakeParser.ALLOWED_DATABASES = 19;
SnowflakeParser.ALLOWED_INTEGRATION_TYPES = 20;
SnowflakeParser.ALLOWED_IP_LIST = 21;
SnowflakeParser.ALLOWED_SHARES = 22;
SnowflakeParser.ALLOWED_VALUES = 23;
SnowflakeParser.ALLOW_CLIENT_MFA_CACHING = 24;
SnowflakeParser.ALLOW_DUPLICATE = 25;
SnowflakeParser.ALLOW_ID_TOKEN = 26;
SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION = 27;
SnowflakeParser.ALTER = 28;
SnowflakeParser.AND = 29;
SnowflakeParser.ANY = 30;
SnowflakeParser.ANY_VALUE = 31;
SnowflakeParser.API = 32;
SnowflakeParser.API_ALLOWED_PREFIXES = 33;
SnowflakeParser.API_AWS_ROLE_ARN = 34;
SnowflakeParser.API_BLOCKED_PREFIXES = 35;
SnowflakeParser.API_INTEGRATION = 36;
SnowflakeParser.API_KEY = 37;
SnowflakeParser.API_PROVIDER = 38;
SnowflakeParser.APPEND = 39;
SnowflakeParser.APPEND_ONLY = 40;
SnowflakeParser.APPLY = 41;
SnowflakeParser.ARRAY_AGG = 42;
SnowflakeParser.AS = 43;
SnowflakeParser.ASC = 44;
SnowflakeParser.ATTACH = 45;
SnowflakeParser.AT_KEYWORD = 46;
SnowflakeParser.AUTHORIZATION = 47;
SnowflakeParser.AUTHORIZATIONS = 48;
SnowflakeParser.AUTO = 49;
SnowflakeParser.AUTO_Q = 50;
SnowflakeParser.AUTOCOMMIT = 51;
SnowflakeParser.AUTOCOMMIT_API_SUPPORTED = 52;
SnowflakeParser.AUTOINCREMENT = 53;
SnowflakeParser.AUTO_COMPRESS = 54;
SnowflakeParser.AUTO_DETECT = 55;
SnowflakeParser.AUTO_INGEST = 56;
SnowflakeParser.AUTO_REFRESH = 57;
SnowflakeParser.AUTO_RESUME = 58;
SnowflakeParser.AUTO_SUSPEND = 59;
SnowflakeParser.AVG = 60;
SnowflakeParser.AVRO = 61;
SnowflakeParser.AVRO_Q = 62;
SnowflakeParser.AWS_KEY_ID = 63;
SnowflakeParser.AWS_ROLE = 64;
SnowflakeParser.AWS_SECRET_KEY = 65;
SnowflakeParser.AWS_SNS = 66;
SnowflakeParser.AWS_SNS_ROLE_ARN = 67;
SnowflakeParser.AWS_SNS_TOPIC = 68;
SnowflakeParser.AWS_SNS_TOPIC_ARN = 69;
SnowflakeParser.AWS_TOKEN = 70;
SnowflakeParser.AZURE = 71;
SnowflakeParser.AZURE_AD_APPLICATION_ID = 72;
SnowflakeParser.AZURE_CSE_Q = 73;
SnowflakeParser.AZURE_EVENT_GRID = 74;
SnowflakeParser.AZURE_EVENT_GRID_TOPIC_ENDPOINT = 75;
SnowflakeParser.AZURE_Q = 76;
SnowflakeParser.AZURE_SAS_TOKEN = 77;
SnowflakeParser.AZURE_STORAGE_QUEUE_PRIMARY_URI = 78;
SnowflakeParser.AZURE_TENANT_ID = 79;
SnowflakeParser.BASE64 = 80;
SnowflakeParser.BEFORE = 81;
SnowflakeParser.BEGIN = 82;
SnowflakeParser.BERNOULLI = 83;
SnowflakeParser.BETWEEN = 84;
SnowflakeParser.BINARY_AS_TEXT = 85;
SnowflakeParser.BINARY_FORMAT = 86;
SnowflakeParser.BINARY_INPUT_FORMAT = 87;
SnowflakeParser.BINARY_OUTPUT_FORMAT = 88;
SnowflakeParser.BLOCK = 89;
SnowflakeParser.BLOCKED_IP_LIST = 90;
SnowflakeParser.BLOCKED_ROLES_LIST = 91;
SnowflakeParser.BODY = 92;
SnowflakeParser.BOTH_Q = 93;
SnowflakeParser.BROTLI = 94;
SnowflakeParser.BUSINESS_CRITICAL = 95;
SnowflakeParser.BY = 96;
SnowflakeParser.BZ2 = 97;
SnowflakeParser.CALL = 98;
SnowflakeParser.CALLED = 99;
SnowflakeParser.CALLER = 100;
SnowflakeParser.CASCADE = 101;
SnowflakeParser.CASE = 102;
SnowflakeParser.CASE_INSENSITIVE = 103;
SnowflakeParser.CASE_SENSITIVE = 104;
SnowflakeParser.CAST = 105;
SnowflakeParser.CEIL = 106;
SnowflakeParser.CHANGES = 107;
SnowflakeParser.CHANGE_TRACKING = 108;
SnowflakeParser.CHANNELS = 109;
SnowflakeParser.CHAR = 110;
SnowflakeParser.CHARACTER = 111;
SnowflakeParser.CHARINDEX = 112;
SnowflakeParser.CHECK = 113;
SnowflakeParser.CHECKSUM = 114;
SnowflakeParser.CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS = 115;
SnowflakeParser.CLIENT_ENCRYPTION_KEY_SIZE = 116;
SnowflakeParser.CLIENT_MEMORY_LIMIT = 117;
SnowflakeParser.CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX = 118;
SnowflakeParser.CLIENT_METADATA_USE_SESSION_DATABASE = 119;
SnowflakeParser.CLIENT_PREFETCH_THREADS = 120;
SnowflakeParser.CLIENT_RESULT_CHUNK_SIZE = 121;
SnowflakeParser.CLIENT_RESULT_COLUMN_CASE_INSENSITIVE = 122;
SnowflakeParser.CLIENT_SESSION_KEEP_ALIVE = 123;
SnowflakeParser.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY = 124;
SnowflakeParser.CLIENT_TIMESTAMP_TYPE_MAPPING = 125;
SnowflakeParser.CLONE = 126;
SnowflakeParser.CLUSTER = 127;
SnowflakeParser.CLUSTERING = 128;
SnowflakeParser.COALESCE = 129;
SnowflakeParser.COLLATE = 130;
SnowflakeParser.COLLECTION = 131;
SnowflakeParser.COLUMN = 132;
SnowflakeParser.COLUMNS = 133;
SnowflakeParser.COMMENT = 134;
SnowflakeParser.COMMIT = 135;
SnowflakeParser.COMPRESSION = 136;
SnowflakeParser.CONCAT = 137;
SnowflakeParser.CONCAT_WS = 138;
SnowflakeParser.CONDITION = 139;
SnowflakeParser.CONFIGURATION = 140;
SnowflakeParser.CONNECT = 141;
SnowflakeParser.CONNECTION = 142;
SnowflakeParser.CONNECTIONS = 143;
SnowflakeParser.CONSTRAINT = 144;
SnowflakeParser.CONTAINS = 145;
SnowflakeParser.CONTEXT_HEADERS = 146;
SnowflakeParser.CONTINUE = 147;
SnowflakeParser.COPY = 148;
SnowflakeParser.COPY_OPTIONS_ = 149;
SnowflakeParser.COUNT = 150;
SnowflakeParser.CREATE = 151;
SnowflakeParser.CREDENTIALS = 152;
SnowflakeParser.CREDIT_QUOTA = 153;
SnowflakeParser.CROSS = 154;
SnowflakeParser.CSV = 155;
SnowflakeParser.CSV_Q = 156;
SnowflakeParser.CUBE = 157;
SnowflakeParser.CURRENT = 158;
SnowflakeParser.CURRENT_DATE = 159;
SnowflakeParser.CURRENT_TIMESTAMP = 160;
SnowflakeParser.CUSTOM = 161;
SnowflakeParser.DAILY = 162;
SnowflakeParser.DATA = 163;
SnowflakeParser.DATABASE = 164;
SnowflakeParser.DATABASES = 165;
SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS = 166;
SnowflakeParser.DATEADD = 167;
SnowflakeParser.DATEDIFF = 168;
SnowflakeParser.DATE_FORMAT = 169;
SnowflakeParser.DATE_INPUT_FORMAT = 170;
SnowflakeParser.DATE_OUTPUT_FORMAT = 171;
SnowflakeParser.DATE_PART = 172;
SnowflakeParser.DAYS_TO_EXPIRY = 173;
SnowflakeParser.DEFAULT = 174;
SnowflakeParser.DEFAULT_DDL_COLLATION_ = 175;
SnowflakeParser.DEFAULT_NAMESPACE = 176;
SnowflakeParser.DEFAULT_ROLE = 177;
SnowflakeParser.DEFAULT_WAREHOUSE = 178;
SnowflakeParser.DEFERRABLE = 179;
SnowflakeParser.DEFERRED = 180;
SnowflakeParser.DEFINE = 181;
SnowflakeParser.DEFINITION = 182;
SnowflakeParser.DEFLATE = 183;
SnowflakeParser.DELEGATED = 184;
SnowflakeParser.DELETE = 185;
SnowflakeParser.DELTA = 186;
SnowflakeParser.DENSE_RANK = 187;
SnowflakeParser.DESC = 188;
SnowflakeParser.DESCRIBE = 189;
SnowflakeParser.DIRECTION = 190;
SnowflakeParser.DIRECTORY = 191;
SnowflakeParser.DISABLE = 192;
SnowflakeParser.DISABLED = 193;
SnowflakeParser.DISABLE_AUTO_CONVERT = 194;
SnowflakeParser.DISABLE_SNOWFLAKE_DATA = 195;
SnowflakeParser.DISPLAY_NAME = 196;
SnowflakeParser.DISTINCT = 197;
SnowflakeParser.DO = 198;
SnowflakeParser.DOWNSTREAM = 199;
SnowflakeParser.DROP = 200;
SnowflakeParser.DYNAMIC = 201;
SnowflakeParser.ECONOMY = 202;
SnowflakeParser.EDITION = 203;
SnowflakeParser.ELSE = 204;
SnowflakeParser.EMAIL = 205;
SnowflakeParser.EMPTY_ = 206;
SnowflakeParser.EMPTY_FIELD_AS_NULL = 207;
SnowflakeParser.ENABLE = 208;
SnowflakeParser.ENABLED = 209;
SnowflakeParser.ENABLE_FOR_PRIVILEGE = 210;
SnowflakeParser.ENABLE_INTERNAL_STAGES_PRIVATELINK = 211;
SnowflakeParser.ENABLE_OCTAL = 212;
SnowflakeParser.ENABLE_QUERY_ACCELERATION = 213;
SnowflakeParser.ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION = 214;
SnowflakeParser.ENCODING = 215;
SnowflakeParser.ENCRYPTION = 216;
SnowflakeParser.END = 217;
SnowflakeParser.END_TIMESTAMP = 218;
SnowflakeParser.ENFORCED = 219;
SnowflakeParser.ENFORCE_LENGTH = 220;
SnowflakeParser.ENFORCE_SESSION_POLICY = 221;
SnowflakeParser.ENTERPRISE = 222;
SnowflakeParser.EQUAL_NULL = 223;
SnowflakeParser.EQUALITY = 224;
SnowflakeParser.ERROR_INTEGRATION = 225;
SnowflakeParser.ERROR_ON_COLUMN_COUNT_MISMATCH = 226;
SnowflakeParser.ERROR_ON_NONDETERMINISTIC_MERGE = 227;
SnowflakeParser.ERROR_ON_NONDETERMINISTIC_UPDATE = 228;
SnowflakeParser.ESCAPE = 229;
SnowflakeParser.ESCAPE_UNENCLOSED_FIELD = 230;
SnowflakeParser.EVENT = 231;
SnowflakeParser.EXCEPT = 232;
SnowflakeParser.EXCHANGE = 233;
SnowflakeParser.EXECUTE = 234;
SnowflakeParser.EXECUTION = 235;
SnowflakeParser.EXISTS = 236;
SnowflakeParser.EXPIRY_DATE = 237;
SnowflakeParser.EXPLAIN = 238;
SnowflakeParser.EXPR = 239;
SnowflakeParser.EXTERNAL = 240;
SnowflakeParser.EXTERNAL_OAUTH = 241;
SnowflakeParser.EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST = 242;
SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST = 243;
SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE = 244;
SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST = 245;
SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST = 246;
SnowflakeParser.EXTERNAL_OAUTH_ISSUER = 247;
SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL = 248;
SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY = 249;
SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2 = 250;
SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER = 251;
SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE = 252;
SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM = 253;
SnowflakeParser.EXTERNAL_OAUTH_TYPE = 254;
SnowflakeParser.EXTERNAL_STAGE = 255;
SnowflakeParser.FAILOVER = 256;
SnowflakeParser.FALSE = 257;
SnowflakeParser.FETCH = 258;
SnowflakeParser.FIELD_DELIMITER = 259;
SnowflakeParser.FIELD_OPTIONALLY_ENCLOSED_BY = 260;
SnowflakeParser.FILE = 261;
SnowflakeParser.FILES = 262;
SnowflakeParser.FILE_EXTENSION = 263;
SnowflakeParser.FILE_FORMAT = 264;
SnowflakeParser.FIRST = 265;
SnowflakeParser.FIRST_NAME = 266;
SnowflakeParser.FIRST_VALUE = 267;
SnowflakeParser.FLATTEN = 268;
SnowflakeParser.FOR = 269;
SnowflakeParser.FORCE = 270;
SnowflakeParser.FOREIGN = 271;
SnowflakeParser.FORMAT = 272;
SnowflakeParser.FORMATS = 273;
SnowflakeParser.FORMAT_NAME = 274;
SnowflakeParser.FREQUENCY = 275;
SnowflakeParser.FROM = 276;
SnowflakeParser.FULL = 277;
SnowflakeParser.FUNCTION = 278;
SnowflakeParser.FUNCTIONS = 279;
SnowflakeParser.FUTURE = 280;
SnowflakeParser.GCP_PUBSUB = 281;
SnowflakeParser.GCP_PUBSUB_SUBSCRIPTION_NAME = 282;
SnowflakeParser.GCP_PUBSUB_TOPIC_NAME = 283;
SnowflakeParser.GCS = 284;
SnowflakeParser.GCS_SSE_KMS_Q = 285;
SnowflakeParser.GENERIC_Q = 286;
SnowflakeParser.GENERIC_SCIM_PROVISIONER_Q = 287;
SnowflakeParser.GEO = 288;
SnowflakeParser.GEOGRAPHY_OUTPUT_FORMAT = 289;
SnowflakeParser.GEOMETRY_OUTPUT_FORMAT = 290;
SnowflakeParser.GET = 291;
SnowflakeParser.GETDATE = 292;
SnowflakeParser.GLOBAL = 293;
SnowflakeParser.GOOGLE_AUDIENCE = 294;
SnowflakeParser.GRANT = 295;
SnowflakeParser.GRANTS = 296;
SnowflakeParser.GROUP = 297;
SnowflakeParser.GROUPING = 298;
SnowflakeParser.GROUPS = 299;
SnowflakeParser.GZIP = 300;
SnowflakeParser.HALF_AWAY_FROM_ZERO_Q = 301;
SnowflakeParser.HALF_TO_EVEN_Q = 302;
SnowflakeParser.HANDLER = 303;
SnowflakeParser.HASH = 304;
SnowflakeParser.HAVING = 305;
SnowflakeParser.HEADER = 306;
SnowflakeParser.HEADERS = 307;
SnowflakeParser.HEX = 308;
SnowflakeParser.HISTORY = 309;
SnowflakeParser.IDENTIFIER = 310;
SnowflakeParser.IDENTITY = 311;
SnowflakeParser.IF = 312;
SnowflakeParser.IFF = 313;
SnowflakeParser.IFNULL = 314;
SnowflakeParser.IGNORE = 315;
SnowflakeParser.IGNORE_UTF8_ERRORS = 316;
SnowflakeParser.ILIKE = 317;
SnowflakeParser.IMMEDIATE = 318;
SnowflakeParser.IMMEDIATELY = 319;
SnowflakeParser.IMMUTABLE = 320;
SnowflakeParser.IMPLICIT = 321;
SnowflakeParser.IMPORT = 322;
SnowflakeParser.IMPORTS = 323;
SnowflakeParser.IMPORTED = 324;
SnowflakeParser.IN = 325;
SnowflakeParser.INCREMENT = 326;
SnowflakeParser.INDEX = 327;
SnowflakeParser.INFORMATION = 328;
SnowflakeParser.INITIALLY = 329;
SnowflakeParser.INITIALLY_SUSPENDED = 330;
SnowflakeParser.INITIAL_REPLICATION_SIZE_LIMIT_IN_TB = 331;
SnowflakeParser.INNER = 332;
SnowflakeParser.INPUT = 333;
SnowflakeParser.INSERT = 334;
SnowflakeParser.INSERT_ONLY = 335;
SnowflakeParser.INT = 336;
SnowflakeParser.INTEGRATION = 337;
SnowflakeParser.INTEGRATIONS = 338;
SnowflakeParser.INTERSECT = 339;
SnowflakeParser.INTERVAL = 340;
SnowflakeParser.INTO = 341;
SnowflakeParser.IS = 342;
SnowflakeParser.JAVA = 343;
SnowflakeParser.JAVASCRIPT = 344;
SnowflakeParser.JDBC_TREAT_DECIMAL_AS_INT = 345;
SnowflakeParser.JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC = 346;
SnowflakeParser.JDBC_USE_SESSION_TIMEZONE = 347;
SnowflakeParser.JOIN = 348;
SnowflakeParser.JSON = 349;
SnowflakeParser.JSON_Q = 350;
SnowflakeParser.JSON_INDENT = 351;
SnowflakeParser.JS_TREAT_INTEGER_AS_BIGINT = 352;
SnowflakeParser.KEY = 353;
SnowflakeParser.KEYS = 354;
SnowflakeParser.KMS_KEY_ID = 355;
SnowflakeParser.LAG = 356;
SnowflakeParser.LANGUAGE = 357;
SnowflakeParser.LARGE = 358;
SnowflakeParser.LAST = 359;
SnowflakeParser.LAST_NAME = 360;
SnowflakeParser.LAST_QUERY_ID = 361;
SnowflakeParser.LAST_VALUE = 362;
SnowflakeParser.LATERAL = 363;
SnowflakeParser.LEAD = 364;
SnowflakeParser.LEFT = 365;
SnowflakeParser.LEN = 366;
SnowflakeParser.LENGTH = 367;
SnowflakeParser.LIKE = 368;
SnowflakeParser.LIMIT = 369;
SnowflakeParser.LINEAR = 370;
SnowflakeParser.LIST = 371;
SnowflakeParser.LISTING = 372;
SnowflakeParser.LOCAL = 373;
SnowflakeParser.LOCATION = 374;
SnowflakeParser.LOCKS = 375;
SnowflakeParser.LOCK_TIMEOUT = 376;
SnowflakeParser.LOGIN_NAME = 377;
SnowflakeParser.LOOKER = 378;
SnowflakeParser.LOWER = 379;
SnowflakeParser.LTRIM = 380;
SnowflakeParser.LZO = 381;
SnowflakeParser.MANAGE = 382;
SnowflakeParser.MANAGED = 383;
SnowflakeParser.MASKING = 384;
SnowflakeParser.MASTER_KEY = 385;
SnowflakeParser.MATCH = 386;
SnowflakeParser.MATCHED = 387;
SnowflakeParser.MATCHES = 388;
SnowflakeParser.MATCH_BY_COLUMN_NAME = 389;
SnowflakeParser.MATCH_RECOGNIZE = 390;
SnowflakeParser.MATERIALIZED = 391;
SnowflakeParser.MAX_BATCH_ROWS = 392;
SnowflakeParser.MAX_CLUSTER_COUNT = 393;
SnowflakeParser.MAX_CONCURRENCY_LEVEL = 394;
SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS = 395;
SnowflakeParser.MAX_SIZE = 396;
SnowflakeParser.MEASURES = 397;
SnowflakeParser.MEDIUM = 398;
SnowflakeParser.MEMOIZABLE = 399;
SnowflakeParser.MERGE = 400;
SnowflakeParser.MIDDLE_NAME = 401;
SnowflakeParser.MIN = 402;
SnowflakeParser.MINS_TO_BYPASS_MFA = 403;
SnowflakeParser.MINS_TO_UNLOCK = 404;
SnowflakeParser.MINUS_ = 405;
SnowflakeParser.MIN_CLUSTER_COUNT = 406;
SnowflakeParser.MIN_DATA_RETENTION_TIME_IN_DAYS = 407;
SnowflakeParser.MODE = 408;
SnowflakeParser.MODIFIED_AFTER = 409;
SnowflakeParser.MODIFY = 410;
SnowflakeParser.MONITOR = 411;
SnowflakeParser.MONITORS = 412;
SnowflakeParser.MONTHLY = 413;
SnowflakeParser.MOVE = 414;
SnowflakeParser.MULTI_STATEMENT_COUNT = 415;
SnowflakeParser.MUST_CHANGE_PASSWORD = 416;
SnowflakeParser.NAME = 417;
SnowflakeParser.NATURAL = 418;
SnowflakeParser.NETWORK = 419;
SnowflakeParser.NETWORK_POLICY = 420;
SnowflakeParser.NEVER = 421;
SnowflakeParser.NEXT = 422;
SnowflakeParser.NEXTVAL = 423;
SnowflakeParser.NO = 424;
SnowflakeParser.NONE = 425;
SnowflakeParser.NONE_Q = 426;
SnowflakeParser.NOORDER = 427;
SnowflakeParser.NORELY = 428;
SnowflakeParser.NOT = 429;
SnowflakeParser.NOTIFICATION = 430;
SnowflakeParser.NOTIFICATION_INTEGRATION = 431;
SnowflakeParser.NOTIFICATION_PROVIDER = 432;
SnowflakeParser.NOTIFY = 433;
SnowflakeParser.NOTIFY_USERS = 434;
SnowflakeParser.NOVALIDATE = 435;
SnowflakeParser.NTILE = 436;
SnowflakeParser.NULLIF = 437;
SnowflakeParser.NULLS = 438;
SnowflakeParser.NULL_ = 439;
SnowflakeParser.NULL_IF = 440;
SnowflakeParser.NUMBER = 441;
SnowflakeParser.NVL = 442;
SnowflakeParser.NVL2 = 443;
SnowflakeParser.OAUTH = 444;
SnowflakeParser.OAUTH_ALLOW_NON_TLS_REDIRECT_URI = 445;
SnowflakeParser.OAUTH_CLIENT = 446;
SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY = 447;
SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2 = 448;
SnowflakeParser.OAUTH_ENFORCE_PKCE = 449;
SnowflakeParser.OAUTH_ISSUE_REFRESH_TOKENS = 450;
SnowflakeParser.OAUTH_REDIRECT_URI = 451;
SnowflakeParser.OAUTH_REFRESH_TOKEN_VALIDITY = 452;
SnowflakeParser.OAUTH_USE_SECONDARY_ROLES = 453;
SnowflakeParser.OBJECT = 454;
SnowflakeParser.OBJECT_Q = 455;
SnowflakeParser.OBJECTS = 456;
SnowflakeParser.OBJECT_TYPES = 457;
SnowflakeParser.OF = 458;
SnowflakeParser.OFFSET = 459;
SnowflakeParser.OKTA = 460;
SnowflakeParser.OKTA_PROVISIONER_Q = 461;
SnowflakeParser.OKTA_Q = 462;
SnowflakeParser.OLD = 463;
SnowflakeParser.OMIT = 464;
SnowflakeParser.ON = 465;
SnowflakeParser.ONE = 466;
SnowflakeParser.ONLY = 467;
SnowflakeParser.ON_ERROR = 468;
SnowflakeParser.OPERATE = 469;
SnowflakeParser.OPTIMIZATION = 470;
SnowflakeParser.OPTION = 471;
SnowflakeParser.OR = 472;
SnowflakeParser.ORC = 473;
SnowflakeParser.ORC_Q = 474;
SnowflakeParser.ORDER = 475;
SnowflakeParser.ORGADMIN = 476;
SnowflakeParser.ORGANIZATION = 477;
SnowflakeParser.OUTBOUND = 478;
SnowflakeParser.OUTER = 479;
SnowflakeParser.OVER = 480;
SnowflakeParser.OVERRIDE = 481;
SnowflakeParser.OVERWRITE = 482;
SnowflakeParser.OWNER = 483;
SnowflakeParser.OWNERSHIP = 484;
SnowflakeParser.PACKAGES = 485;
SnowflakeParser.PARALLEL = 486;
SnowflakeParser.PARAMETERS = 487;
SnowflakeParser.PARQUET = 488;
SnowflakeParser.PARQUET_Q = 489;
SnowflakeParser.PARTIAL = 490;
SnowflakeParser.PARTITION = 491;
SnowflakeParser.PARTITION_TYPE = 492;
SnowflakeParser.PASSWORD = 493;
SnowflakeParser.PASSWORD_HISTORY = 494;
SnowflakeParser.PASSWORD_LOCKOUT_TIME_MINS = 495;
SnowflakeParser.PASSWORD_MAX_AGE_DAYS = 496;
SnowflakeParser.PASSWORD_MAX_LENGTH = 497;
SnowflakeParser.PASSWORD_MAX_RETRIES = 498;
SnowflakeParser.PASSWORD_MIN_AGE_DAYS = 499;
SnowflakeParser.PASSWORD_MIN_LENGTH = 500;
SnowflakeParser.PASSWORD_MIN_LOWER_CASE_CHARS = 501;
SnowflakeParser.PASSWORD_MIN_NUMERIC_CHARS = 502;
SnowflakeParser.PASSWORD_MIN_SPECIAL_CHARS = 503;
SnowflakeParser.PASSWORD_MIN_UPPER_CASE_CHARS = 504;
SnowflakeParser.PAST = 505;
SnowflakeParser.PATH_ = 506;
SnowflakeParser.PATTERN = 507;
SnowflakeParser.PER = 508;
SnowflakeParser.PERCENT = 509;
SnowflakeParser.PERIODIC_DATA_REKEYING = 510;
SnowflakeParser.PING_FEDERATE = 511;
SnowflakeParser.PIPE = 512;
SnowflakeParser.PIPES = 513;
SnowflakeParser.PIPE_EXECUTION_PAUSED = 514;
SnowflakeParser.PIVOT = 515;
SnowflakeParser.POLICIES = 516;
SnowflakeParser.POLICY = 517;
SnowflakeParser.PORT = 518;
SnowflakeParser.PREFIX = 519;
SnowflakeParser.PRESERVE_SPACE = 520;
SnowflakeParser.PREVENT_UNLOAD_TO_INLINE_URL = 521;
SnowflakeParser.PREVENT_UNLOAD_TO_INTERNAL_STAGES = 522;
SnowflakeParser.PRE_AUTHORIZED_ROLES_LIST = 523;
SnowflakeParser.PRIMARY = 524;
SnowflakeParser.PRIOR = 525;
SnowflakeParser.PRIVILEGES = 526;
SnowflakeParser.PROCEDURE = 527;
SnowflakeParser.PROCEDURES = 528;
SnowflakeParser.PROCEDURE_NAME = 529;
SnowflakeParser.PROPERTY = 530;
SnowflakeParser.PROVIDER = 531;
SnowflakeParser.PUBLIC = 532;
SnowflakeParser.PURGE = 533;
SnowflakeParser.PUT = 534;
SnowflakeParser.PYTHON = 535;
SnowflakeParser.QUALIFY = 536;
SnowflakeParser.QUERIES = 537;
SnowflakeParser.QUERY_ACCELERATION_MAX_SCALE_FACTOR = 538;
SnowflakeParser.QUERY_TAG = 539;
SnowflakeParser.QUEUE = 540;
SnowflakeParser.QUOTED_IDENTIFIERS_IGNORE_CASE = 541;
SnowflakeParser.RANK = 542;
SnowflakeParser.RAW_DEFLATE = 543;
SnowflakeParser.READ = 544;
SnowflakeParser.READER = 545;
SnowflakeParser.RECLUSTER = 546;
SnowflakeParser.RECORD_DELIMITER = 547;
SnowflakeParser.RECURSIVE = 548;
SnowflakeParser.REFERENCES = 549;
SnowflakeParser.REFERENCE_USAGE = 550;
SnowflakeParser.REFRESH = 551;
SnowflakeParser.REFRESH_ON_CREATE = 552;
SnowflakeParser.REGION = 553;
SnowflakeParser.REGIONS = 554;
SnowflakeParser.REGION_GROUP = 555;
SnowflakeParser.RELY = 556;
SnowflakeParser.REMOVE = 557;
SnowflakeParser.RENAME = 558;
SnowflakeParser.REPEATABLE = 559;
SnowflakeParser.REPLACE = 560;
SnowflakeParser.REPLACE_INVALID_CHARACTERS = 561;
SnowflakeParser.REPLICA = 562;
SnowflakeParser.REPLICATION = 563;
SnowflakeParser.REPLICATION_SCHEDULE = 564;
SnowflakeParser.REQUEST_TRANSLATOR = 565;
SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION = 566;
SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION = 567;
SnowflakeParser.RESET = 568;
SnowflakeParser.RESOURCE = 569;
SnowflakeParser.RESOURCES = 570;
SnowflakeParser.RESOURCE_MONITOR = 571;
SnowflakeParser.RESPECT = 572;
SnowflakeParser.RESPONSE_TRANSLATOR = 573;
SnowflakeParser.RESTRICT = 574;
SnowflakeParser.RESTRICTIONS = 575;
SnowflakeParser.RESULT = 576;
SnowflakeParser.RESUME = 577;
SnowflakeParser.RETURNS = 578;
SnowflakeParser.RETURN_ALL_ERRORS = 579;
SnowflakeParser.RETURN_ERRORS = 580;
SnowflakeParser.RETURN_FAILED_ONLY = 581;
SnowflakeParser.RETURN_N_ROWS = 582;
SnowflakeParser.RETURN_ROWS = 583;
SnowflakeParser.REVOKE = 584;
SnowflakeParser.RIGHT = 585;
SnowflakeParser.RLIKE = 586;
SnowflakeParser.ROLE = 587;
SnowflakeParser.ROLES = 588;
SnowflakeParser.ROLLBACK = 589;
SnowflakeParser.ROLLUP = 590;
SnowflakeParser.ROUND = 591;
SnowflakeParser.ROUNDING_MODE = 592;
SnowflakeParser.ROW = 593;
SnowflakeParser.ROWS = 594;
SnowflakeParser.ROWS_PER_RESULTSET = 595;
SnowflakeParser.ROW_NUMBER = 596;
SnowflakeParser.RSA_PUBLIC_KEY = 597;
SnowflakeParser.RSA_PUBLIC_KEY_2 = 598;
SnowflakeParser.RTRIM = 599;
SnowflakeParser.RUN_AS_ROLE = 600;
SnowflakeParser.RUNTIME_VERSION = 601;
SnowflakeParser.S3 = 602;
SnowflakeParser.SAML2 = 603;
SnowflakeParser.SAML2_ENABLE_SP_INITIATED = 604;
SnowflakeParser.SAML2_FORCE_AUTHN = 605;
SnowflakeParser.SAML2_ISSUER = 606;
SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL = 607;
SnowflakeParser.SAML2_PROVIDER = 608;
SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT = 609;
SnowflakeParser.SAML2_SIGN_REQUEST = 610;
SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL = 611;
SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL = 612;
SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT = 613;
SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL = 614;
SnowflakeParser.SAML2_SSO_URL = 615;
SnowflakeParser.SAML2_X509_CERT = 616;
SnowflakeParser.SAML_IDENTITY_PROVIDER = 617;
SnowflakeParser.SAMPLE = 618;
SnowflakeParser.SAVE_OLD_URL = 619;
SnowflakeParser.SCALE = 620;
SnowflakeParser.SCALING_POLICY = 621;
SnowflakeParser.SCHEDULE = 622;
SnowflakeParser.SCHEMA = 623;
SnowflakeParser.SCHEMAS = 624;
SnowflakeParser.SCIM = 625;
SnowflakeParser.SCIM_CLIENT = 626;
SnowflakeParser.SEARCH = 627;
SnowflakeParser.SECONDARY = 628;
SnowflakeParser.SECURE = 629;
SnowflakeParser.SECURITY = 630;
SnowflakeParser.SECURITYADMIN = 631;
SnowflakeParser.SEED = 632;
SnowflakeParser.SELECT = 633;
SnowflakeParser.SEQUENCE = 634;
SnowflakeParser.SEQUENCES = 635;
SnowflakeParser.SESSION = 636;
SnowflakeParser.SESSION_IDLE_TIMEOUT_MINS = 637;
SnowflakeParser.SESSION_POLICY = 638;
SnowflakeParser.SESSION_UI_IDLE_TIMEOUT_MINS = 639;
SnowflakeParser.SET = 640;
SnowflakeParser.SETS = 641;
SnowflakeParser.SHARE = 642;
SnowflakeParser.SHARES = 643;
SnowflakeParser.SHARE_RESTRICTIONS = 644;
SnowflakeParser.SHOW = 645;
SnowflakeParser.SHOW_INITIAL_ROWS = 646;
SnowflakeParser.SIMPLE = 647;
SnowflakeParser.SIMULATED_DATA_SHARING_CONSUMER = 648;
SnowflakeParser.SIZE_LIMIT = 649;
SnowflakeParser.SKIP_ = 650;
SnowflakeParser.SKIP_BLANK_LINES = 651;
SnowflakeParser.SKIP_BYTE_ORDER_MARK = 652;
SnowflakeParser.SKIP_FILE = 653;
SnowflakeParser.SKIP_FILE_N = 654;
SnowflakeParser.SKIP_HEADER = 655;
SnowflakeParser.SMALL = 656;
SnowflakeParser.SNAPPY = 657;
SnowflakeParser.SNAPPY_COMPRESSION = 658;
SnowflakeParser.SNOWFLAKE_FULL = 659;
SnowflakeParser.SNOWFLAKE_SSE = 660;
SnowflakeParser.SNOWPARK_OPTIMIZED = 661;
SnowflakeParser.SOME = 662;
SnowflakeParser.SOURCE = 663;
SnowflakeParser.SOURCE_COMPRESSION = 664;
SnowflakeParser.SPLIT = 665;
SnowflakeParser.SPLIT_PART = 666;
SnowflakeParser.SPLIT_TO_TABLE = 667;
SnowflakeParser.SQL = 668;
SnowflakeParser.SSO_LOGIN_PAGE = 669;
SnowflakeParser.STAGE = 670;
SnowflakeParser.STAGES = 671;
SnowflakeParser.STAGE_COPY_OPTIONS = 672;
SnowflakeParser.STAGE_FILE_FORMAT = 673;
SnowflakeParser.STANDARD = 674;
SnowflakeParser.START = 675;
SnowflakeParser.STARTS = 676;
SnowflakeParser.START_TIMESTAMP = 677;
SnowflakeParser.STATE = 678;
SnowflakeParser.STATEMENT = 679;
SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS = 680;
SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS = 681;
SnowflakeParser.STATS = 682;
SnowflakeParser.STORAGE = 683;
SnowflakeParser.STORAGE_ALLOWED_LOCATIONS = 684;
SnowflakeParser.STORAGE_AWS_OBJECT_ACL = 685;
SnowflakeParser.STORAGE_AWS_ROLE_ARN = 686;
SnowflakeParser.STORAGE_BLOCKED_LOCATIONS = 687;
SnowflakeParser.STORAGE_INTEGRATION = 688;
SnowflakeParser.STORAGE_PROVIDER = 689;
SnowflakeParser.STREAM = 690;
SnowflakeParser.STREAMS = 691;
SnowflakeParser.STRICT = 692;
SnowflakeParser.STRICT_JSON_OUTPUT = 693;
SnowflakeParser.STRIP_NULL_VALUES = 694;
SnowflakeParser.STRIP_OUTER_ARRAY = 695;
SnowflakeParser.STRIP_OUTER_ELEMENT = 696;
SnowflakeParser.SUBSTR = 697;
SnowflakeParser.SUBSTRING = 698;
SnowflakeParser.SUM = 699;
SnowflakeParser.SUSPEND = 700;
SnowflakeParser.SUSPENDED = 701;
SnowflakeParser.SUSPEND_IMMEDIATE = 702;
SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES = 703;
SnowflakeParser.SWAP = 704;
SnowflakeParser.SYNC_PASSWORD = 705;
SnowflakeParser.SYSADMIN = 706;
SnowflakeParser.SYSTEM = 707;
SnowflakeParser.TABLE = 708;
SnowflakeParser.TABLEAU_DESKTOP = 709;
SnowflakeParser.TABLEAU_SERVER = 710;
SnowflakeParser.TABLES = 711;
SnowflakeParser.TABLESAMPLE = 712;
SnowflakeParser.TABLE_FORMAT = 713;
SnowflakeParser.TABULAR = 714;
SnowflakeParser.TAG = 715;
SnowflakeParser.TAGS = 716;
SnowflakeParser.TARGET_LAG = 717;
SnowflakeParser.TASK = 718;
SnowflakeParser.TASKS = 719;
SnowflakeParser.TEMP = 720;
SnowflakeParser.TEMPORARY = 721;
SnowflakeParser.TERSE = 722;
SnowflakeParser.THEN = 723;
SnowflakeParser.TIME = 724;
SnowflakeParser.TIMEADD = 725;
SnowflakeParser.TIMEDIFF = 726;
SnowflakeParser.TIMESTAMP = 727;
SnowflakeParser.TIMESTAMP_DAY_IS_ALWAYS_24H = 728;
SnowflakeParser.TIMESTAMP_FORMAT = 729;
SnowflakeParser.TIMESTAMP_INPUT_FORMAT = 730;
SnowflakeParser.TIMESTAMP_LTZ = 731;
SnowflakeParser.TIMESTAMP_LTZ_OUTPUT_FORMAT = 732;
SnowflakeParser.TIMESTAMP_NTZ = 733;
SnowflakeParser.TIMESTAMP_NTZ_OUTPUT_FORMAT = 734;
SnowflakeParser.TIMESTAMP_OUTPUT_FORMAT = 735;
SnowflakeParser.TIMESTAMP_TYPE_MAPPING = 736;
SnowflakeParser.TIMESTAMP_TZ = 737;
SnowflakeParser.TIMESTAMP_TZ_OUTPUT_FORMAT = 738;
SnowflakeParser.TIMESTAMPADD = 739;
SnowflakeParser.TIMESTAMPDIFF = 740;
SnowflakeParser.TIMEZONE = 741;
SnowflakeParser.TIME_FORMAT = 742;
SnowflakeParser.TIME_INPUT_FORMAT = 743;
SnowflakeParser.TIME_OUTPUT_FORMAT = 744;
SnowflakeParser.TO = 745;
SnowflakeParser.TO_BOOLEAN = 746;
SnowflakeParser.TO_DATE = 747;
SnowflakeParser.TO_TIMESTAMP = 748;
SnowflakeParser.TOP = 749;
SnowflakeParser.TRANSACTION = 750;
SnowflakeParser.TRANSACTIONS = 751;
SnowflakeParser.TRANSACTION_ABORT_ON_ERROR = 752;
SnowflakeParser.TRANSACTION_DEFAULT_ISOLATION_LEVEL = 753;
SnowflakeParser.TRANSIENT = 754;
SnowflakeParser.TRIGGERS = 755;
SnowflakeParser.TRIM = 756;
SnowflakeParser.TRIM_SPACE = 757;
SnowflakeParser.TRUE = 758;
SnowflakeParser.TRUNC = 759;
SnowflakeParser.TRUNCATE = 760;
SnowflakeParser.TRUNCATECOLUMNS = 761;
SnowflakeParser.TRY_CAST = 762;
SnowflakeParser.TWO_DIGIT_CENTURY_START = 763;
SnowflakeParser.TYPE = 764;
SnowflakeParser.UNDROP = 765;
SnowflakeParser.UNION = 766;
SnowflakeParser.UNIQUE = 767;
SnowflakeParser.UNMATCHED = 768;
SnowflakeParser.UNPIVOT = 769;
SnowflakeParser.UNSET = 770;
SnowflakeParser.UNSUPPORTED_DDL_ACTION = 771;
SnowflakeParser.UPDATE = 772;
SnowflakeParser.UPPER = 773;
SnowflakeParser.URL = 774;
SnowflakeParser.USAGE = 775;
SnowflakeParser.USE = 776;
SnowflakeParser.USER = 777;
SnowflakeParser.USERADMIN = 778;
SnowflakeParser.USERS = 779;
SnowflakeParser.USER_SPECIFIED = 780;
SnowflakeParser.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = 781;
SnowflakeParser.USER_TASK_TIMEOUT_MS = 782;
SnowflakeParser.USE_ANY_ROLE = 783;
SnowflakeParser.USE_CACHED_RESULT = 784;
SnowflakeParser.USING = 785;
SnowflakeParser.UTF8 = 786;
SnowflakeParser.VALIDATE = 787;
SnowflakeParser.VALIDATION_MODE = 788;
SnowflakeParser.VALUE = 789;
SnowflakeParser.VALUES = 790;
SnowflakeParser.VARIABLES = 791;
SnowflakeParser.VERSION = 792;
SnowflakeParser.VIEW = 793;
SnowflakeParser.VIEWS = 794;
SnowflakeParser.VOLATILE = 795;
SnowflakeParser.WAREHOUSE = 796;
SnowflakeParser.WAREHOUSES = 797;
SnowflakeParser.WAREHOUSE_SIZE = 798;
SnowflakeParser.WAREHOUSE_TYPE = 799;
SnowflakeParser.WEEKLY = 800;
SnowflakeParser.WEEK_OF_YEAR_POLICY = 801;
SnowflakeParser.WEEK_START = 802;
SnowflakeParser.WHEN = 803;
SnowflakeParser.WHERE = 804;
SnowflakeParser.WITH = 805;
SnowflakeParser.WITHIN = 806;
SnowflakeParser.WORK = 807;
SnowflakeParser.WRITE = 808;
SnowflakeParser.X4LARGE = 809;
SnowflakeParser.X5LARGE = 810;
SnowflakeParser.X6LARGE = 811;
SnowflakeParser.XLARGE = 812;
SnowflakeParser.XML = 813;
SnowflakeParser.XML_Q = 814;
SnowflakeParser.XSMALL = 815;
SnowflakeParser.XXLARGE = 816;
SnowflakeParser.XXXLARGE = 817;
SnowflakeParser.YEARLY = 818;
SnowflakeParser.ZSTD = 819;
SnowflakeParser.ARRAY = 820;
SnowflakeParser.ARRAY_Q = 821;
SnowflakeParser.BIGINT = 822;
SnowflakeParser.BINARY = 823;
SnowflakeParser.BOOLEAN = 824;
SnowflakeParser.BYTEINT = 825;
SnowflakeParser.CHAR_VARYING = 826;
SnowflakeParser.DATE = 827;
SnowflakeParser.DATETIME = 828;
SnowflakeParser.DECIMAL_ = 829;
SnowflakeParser.DOUBLE = 830;
SnowflakeParser.DOUBLE_PRECISION = 831;
SnowflakeParser.FLOAT4 = 832;
SnowflakeParser.FLOAT8 = 833;
SnowflakeParser.FLOAT_ = 834;
SnowflakeParser.FLOOR = 835;
SnowflakeParser.GEOGRAPHY = 836;
SnowflakeParser.GEOMETRY = 837;
SnowflakeParser.INTEGER = 838;
SnowflakeParser.NCHAR = 839;
SnowflakeParser.NCHAR_VARYING = 840;
SnowflakeParser.NUMERIC = 841;
SnowflakeParser.NVARCHAR2 = 842;
SnowflakeParser.NVARCHAR = 843;
SnowflakeParser.REAL_ = 844;
SnowflakeParser.SMALLINT = 845;
SnowflakeParser.STRING_ = 846;
SnowflakeParser.TEXT = 847;
SnowflakeParser.TINYINT = 848;
SnowflakeParser.VARBINARY = 849;
SnowflakeParser.VARCHAR = 850;
SnowflakeParser.VARIANT = 851;
SnowflakeParser.LISTAGG = 852;
SnowflakeParser.DUMMY = 853;
SnowflakeParser.SPACE = 854;
SnowflakeParser.SQL_COMMENT = 855;
SnowflakeParser.LINE_COMMENT = 856;
SnowflakeParser.LINE_COMMENT_2 = 857;
SnowflakeParser.DOUBLE_QUOTE_ID = 858;
SnowflakeParser.DOUBLE_QUOTE_BLANK = 859;
SnowflakeParser.SINGLE_QUOTE = 860;
SnowflakeParser.ID = 861;
SnowflakeParser.ID2 = 862;
SnowflakeParser.S3_PATH = 863;
SnowflakeParser.S3GOV_PATH = 864;
SnowflakeParser.GCS_PATH = 865;
SnowflakeParser.AZURE_PATH = 866;
SnowflakeParser.FILE_PATH = 867;
SnowflakeParser.DBL_DOLLAR = 868;
SnowflakeParser.STRING = 869;
SnowflakeParser.DECIMAL = 870;
SnowflakeParser.FLOAT = 871;
SnowflakeParser.REAL = 872;
SnowflakeParser.CHAR_LITERAL = 873;
SnowflakeParser.ARROW = 874;
SnowflakeParser.ASSOC = 875;
SnowflakeParser.NE = 876;
SnowflakeParser.LTGT = 877;
SnowflakeParser.EQ = 878;
SnowflakeParser.GT = 879;
SnowflakeParser.GE = 880;
SnowflakeParser.LT = 881;
SnowflakeParser.LE = 882;
SnowflakeParser.PIPE_PIPE = 883;
SnowflakeParser.DOT = 884;
SnowflakeParser.AT = 885;
SnowflakeParser.AT_Q = 886;
SnowflakeParser.DOLLAR = 887;
SnowflakeParser.LR_BRACKET = 888;
SnowflakeParser.RR_BRACKET = 889;
SnowflakeParser.LSB = 890;
SnowflakeParser.RSB = 891;
SnowflakeParser.LCB = 892;
SnowflakeParser.RCB = 893;
SnowflakeParser.COMMA = 894;
SnowflakeParser.SEMI = 895;
SnowflakeParser.COLON = 896;
SnowflakeParser.COLON_COLON = 897;
SnowflakeParser.STAR = 898;
SnowflakeParser.DIVIDE = 899;
SnowflakeParser.MODULE = 900;
SnowflakeParser.PLUS = 901;
SnowflakeParser.MINUS = 902;
SnowflakeParser.TILDA = 903;

SnowflakeParser.RULE_snowflake_file = 0;
SnowflakeParser.RULE_batch = 1;
SnowflakeParser.RULE_sql_command = 2;
SnowflakeParser.RULE_ddl_command = 3;
SnowflakeParser.RULE_dml_command = 4;
SnowflakeParser.RULE_insert_statement = 5;
SnowflakeParser.RULE_insert_multi_table_statement = 6;
SnowflakeParser.RULE_into_clause2 = 7;
SnowflakeParser.RULE_values_list = 8;
SnowflakeParser.RULE_value_item = 9;
SnowflakeParser.RULE_merge_statement = 10;
SnowflakeParser.RULE_merge_matches = 11;
SnowflakeParser.RULE_merge_cond = 12;
SnowflakeParser.RULE_merge_update_delete = 13;
SnowflakeParser.RULE_merge_insert = 14;
SnowflakeParser.RULE_update_statement = 15;
SnowflakeParser.RULE_table_or_query = 16;
SnowflakeParser.RULE_delete_statement = 17;
SnowflakeParser.RULE_values_builder = 18;
SnowflakeParser.RULE_other_command = 19;
SnowflakeParser.RULE_begin_txn = 20;
SnowflakeParser.RULE_copy_into_table = 21;
SnowflakeParser.RULE_external_location = 22;
SnowflakeParser.RULE_files = 23;
SnowflakeParser.RULE_file_format = 24;
SnowflakeParser.RULE_format_name = 25;
SnowflakeParser.RULE_format_type = 26;
SnowflakeParser.RULE_stage_file_format = 27;
SnowflakeParser.RULE_copy_into_location = 28;
SnowflakeParser.RULE_comment = 29;
SnowflakeParser.RULE_function_signature = 30;
SnowflakeParser.RULE_commit = 31;
SnowflakeParser.RULE_execute_immediate = 32;
SnowflakeParser.RULE_execute_task = 33;
SnowflakeParser.RULE_explain = 34;
SnowflakeParser.RULE_parallel = 35;
SnowflakeParser.RULE_get_dml = 36;
SnowflakeParser.RULE_grant_ownership = 37;
SnowflakeParser.RULE_grant_to_role = 38;
SnowflakeParser.RULE_global_privileges = 39;
SnowflakeParser.RULE_global_privilege = 40;
SnowflakeParser.RULE_account_object_privileges = 41;
SnowflakeParser.RULE_account_object_privilege = 42;
SnowflakeParser.RULE_schema_privileges = 43;
SnowflakeParser.RULE_schema_privilege = 44;
SnowflakeParser.RULE_schema_object_privileges = 45;
SnowflakeParser.RULE_schema_object_privilege = 46;
SnowflakeParser.RULE_grant_to_share = 47;
SnowflakeParser.RULE_object_privilege = 48;
SnowflakeParser.RULE_grant_role = 49;
SnowflakeParser.RULE_role_name = 50;
SnowflakeParser.RULE_system_defined_role = 51;
SnowflakeParser.RULE_list = 52;
SnowflakeParser.RULE_user_stage = 53;
SnowflakeParser.RULE_table_stage = 54;
SnowflakeParser.RULE_named_stage = 55;
SnowflakeParser.RULE_stage_path = 56;
SnowflakeParser.RULE_put = 57;
SnowflakeParser.RULE_remove = 58;
SnowflakeParser.RULE_revoke_from_role = 59;
SnowflakeParser.RULE_revoke_from_share = 60;
SnowflakeParser.RULE_revoke_role = 61;
SnowflakeParser.RULE_rollback = 62;
SnowflakeParser.RULE_set = 63;
SnowflakeParser.RULE_truncate_materialized_view = 64;
SnowflakeParser.RULE_truncate_table = 65;
SnowflakeParser.RULE_unset = 66;
SnowflakeParser.RULE_alter_command = 67;
SnowflakeParser.RULE_account_params = 68;
SnowflakeParser.RULE_object_params = 69;
SnowflakeParser.RULE_default_ddl_collation = 70;
SnowflakeParser.RULE_object_properties = 71;
SnowflakeParser.RULE_session_params = 72;
SnowflakeParser.RULE_alter_account = 73;
SnowflakeParser.RULE_enabled_true_false = 74;
SnowflakeParser.RULE_alter_alert = 75;
SnowflakeParser.RULE_resume_suspend = 76;
SnowflakeParser.RULE_alert_set_clause = 77;
SnowflakeParser.RULE_alert_unset_clause = 78;
SnowflakeParser.RULE_alter_api_integration = 79;
SnowflakeParser.RULE_api_integration_property = 80;
SnowflakeParser.RULE_alter_connection = 81;
SnowflakeParser.RULE_alter_database = 82;
SnowflakeParser.RULE_database_property = 83;
SnowflakeParser.RULE_account_id_list = 84;
SnowflakeParser.RULE_alter_dynamic_table = 85;
SnowflakeParser.RULE_alter_external_table = 86;
SnowflakeParser.RULE_ignore_edition_check = 87;
SnowflakeParser.RULE_replication_schedule = 88;
SnowflakeParser.RULE_db_name_list = 89;
SnowflakeParser.RULE_share_name_list = 90;
SnowflakeParser.RULE_full_acct_list = 91;
SnowflakeParser.RULE_alter_failover_group = 92;
SnowflakeParser.RULE_alter_file_format = 93;
SnowflakeParser.RULE_alter_function = 94;
SnowflakeParser.RULE_alter_function_signature = 95;
SnowflakeParser.RULE_data_type_list = 96;
SnowflakeParser.RULE_alter_masking_policy = 97;
SnowflakeParser.RULE_alter_materialized_view = 98;
SnowflakeParser.RULE_alter_network_policy = 99;
SnowflakeParser.RULE_alter_notification_integration = 100;
SnowflakeParser.RULE_alter_pipe = 101;
SnowflakeParser.RULE_alter_procedure = 102;
SnowflakeParser.RULE_alter_replication_group = 103;
SnowflakeParser.RULE_credit_quota = 104;
SnowflakeParser.RULE_frequency = 105;
SnowflakeParser.RULE_notify_users = 106;
SnowflakeParser.RULE_triggerDefinition = 107;
SnowflakeParser.RULE_alter_resource_monitor = 108;
SnowflakeParser.RULE_alter_role = 109;
SnowflakeParser.RULE_alter_row_access_policy = 110;
SnowflakeParser.RULE_alter_schema = 111;
SnowflakeParser.RULE_schema_property = 112;
SnowflakeParser.RULE_alter_sequence = 113;
SnowflakeParser.RULE_alter_security_integration_external_oauth = 114;
SnowflakeParser.RULE_security_integration_external_oauth_property = 115;
SnowflakeParser.RULE_alter_security_integration_snowflake_oauth = 116;
SnowflakeParser.RULE_security_integration_snowflake_oauth_property = 117;
SnowflakeParser.RULE_alter_security_integration_saml2 = 118;
SnowflakeParser.RULE_alter_security_integration_scim = 119;
SnowflakeParser.RULE_security_integration_scim_property = 120;
SnowflakeParser.RULE_alter_session = 121;
SnowflakeParser.RULE_alter_session_policy = 122;
SnowflakeParser.RULE_alter_password_policy = 123;
SnowflakeParser.RULE_alter_share = 124;
SnowflakeParser.RULE_alter_storage_integration = 125;
SnowflakeParser.RULE_alter_stream = 126;
SnowflakeParser.RULE_alter_table = 127;
SnowflakeParser.RULE_clustering_action = 128;
SnowflakeParser.RULE_table_column_action = 129;
SnowflakeParser.RULE_alter_column_clause = 130;
SnowflakeParser.RULE_inline_constraint = 131;
SnowflakeParser.RULE_enforced_not_enforced = 132;
SnowflakeParser.RULE_deferrable_not_deferrable = 133;
SnowflakeParser.RULE_initially_deferred_or_immediate = 134;
SnowflakeParser.RULE_common_constraint_properties = 135;
SnowflakeParser.RULE_on_update = 136;
SnowflakeParser.RULE_on_delete = 137;
SnowflakeParser.RULE_foreign_key_match = 138;
SnowflakeParser.RULE_on_action = 139;
SnowflakeParser.RULE_constraint_properties = 140;
SnowflakeParser.RULE_ext_table_column_action = 141;
SnowflakeParser.RULE_constraint_action = 142;
SnowflakeParser.RULE_search_optimization_action = 143;
SnowflakeParser.RULE_search_method_with_target = 144;
SnowflakeParser.RULE_alter_table_alter_column = 145;
SnowflakeParser.RULE_alter_column_decl_list = 146;
SnowflakeParser.RULE_alter_column_decl = 147;
SnowflakeParser.RULE_alter_column_opts = 148;
SnowflakeParser.RULE_column_set_tags = 149;
SnowflakeParser.RULE_column_unset_tags = 150;
SnowflakeParser.RULE_alter_tag = 151;
SnowflakeParser.RULE_alter_task = 152;
SnowflakeParser.RULE_alter_user = 153;
SnowflakeParser.RULE_alter_view = 154;
SnowflakeParser.RULE_alter_modify = 155;
SnowflakeParser.RULE_alter_warehouse = 156;
SnowflakeParser.RULE_alter_connection_opts = 157;
SnowflakeParser.RULE_alter_user_opts = 158;
SnowflakeParser.RULE_alter_tag_opts = 159;
SnowflakeParser.RULE_alter_network_policy_opts = 160;
SnowflakeParser.RULE_alter_warehouse_opts = 161;
SnowflakeParser.RULE_alter_account_opts = 162;
SnowflakeParser.RULE_set_tags = 163;
SnowflakeParser.RULE_tag_decl_list = 164;
SnowflakeParser.RULE_unset_tags = 165;
SnowflakeParser.RULE_create_command = 166;
SnowflakeParser.RULE_create_account = 167;
SnowflakeParser.RULE_create_alert = 168;
SnowflakeParser.RULE_alert_condition = 169;
SnowflakeParser.RULE_alert_action = 170;
SnowflakeParser.RULE_create_api_integration = 171;
SnowflakeParser.RULE_create_object_clone = 172;
SnowflakeParser.RULE_create_connection = 173;
SnowflakeParser.RULE_create_database = 174;
SnowflakeParser.RULE_clone_at_before = 175;
SnowflakeParser.RULE_at_before1 = 176;
SnowflakeParser.RULE_header_decl = 177;
SnowflakeParser.RULE_compression_type = 178;
SnowflakeParser.RULE_compression = 179;
SnowflakeParser.RULE_create_dynamic_table = 180;
SnowflakeParser.RULE_create_event_table = 181;
SnowflakeParser.RULE_create_external_function = 182;
SnowflakeParser.RULE_create_external_table = 183;
SnowflakeParser.RULE_external_table_column_decl = 184;
SnowflakeParser.RULE_external_table_column_decl_list = 185;
SnowflakeParser.RULE_full_acct = 186;
SnowflakeParser.RULE_integration_type_name = 187;
SnowflakeParser.RULE_create_failover_group = 188;
SnowflakeParser.RULE_type_fileformat = 189;
SnowflakeParser.RULE_create_file_format = 190;
SnowflakeParser.RULE_arg_decl = 191;
SnowflakeParser.RULE_arg_default_value_clause = 192;
SnowflakeParser.RULE_col_decl = 193;
SnowflakeParser.RULE_virtual_column_decl = 194;
SnowflakeParser.RULE_function_definition = 195;
SnowflakeParser.RULE_create_function = 196;
SnowflakeParser.RULE_create_managed_account = 197;
SnowflakeParser.RULE_create_masking_policy = 198;
SnowflakeParser.RULE_tag_decl = 199;
SnowflakeParser.RULE_column_list_in_parentheses = 200;
SnowflakeParser.RULE_create_materialized_view = 201;
SnowflakeParser.RULE_create_network_policy = 202;
SnowflakeParser.RULE_cloud_provider_params_auto = 203;
SnowflakeParser.RULE_cloud_provider_params_push = 204;
SnowflakeParser.RULE_create_notification_integration = 205;
SnowflakeParser.RULE_create_pipe = 206;
SnowflakeParser.RULE_caller_owner = 207;
SnowflakeParser.RULE_executa_as = 208;
SnowflakeParser.RULE_procedure_definition = 209;
SnowflakeParser.RULE_not_null = 210;
SnowflakeParser.RULE_create_procedure = 211;
SnowflakeParser.RULE_create_replication_group = 212;
SnowflakeParser.RULE_create_resource_monitor = 213;
SnowflakeParser.RULE_create_role = 214;
SnowflakeParser.RULE_create_row_access_policy = 215;
SnowflakeParser.RULE_create_schema = 216;
SnowflakeParser.RULE_create_security_integration_external_oauth = 217;
SnowflakeParser.RULE_implicit_none = 218;
SnowflakeParser.RULE_create_security_integration_snowflake_oauth = 219;
SnowflakeParser.RULE_create_security_integration_saml2 = 220;
SnowflakeParser.RULE_create_security_integration_scim = 221;
SnowflakeParser.RULE_network_policy = 222;
SnowflakeParser.RULE_partner_application = 223;
SnowflakeParser.RULE_start_with = 224;
SnowflakeParser.RULE_increment_by = 225;
SnowflakeParser.RULE_create_sequence = 226;
SnowflakeParser.RULE_create_session_policy = 227;
SnowflakeParser.RULE_session_policy_params = 228;
SnowflakeParser.RULE_session_policy_param_name = 229;
SnowflakeParser.RULE_create_password_policy = 230;
SnowflakeParser.RULE_password_policy_params = 231;
SnowflakeParser.RULE_password_policy_param_name = 232;
SnowflakeParser.RULE_create_share = 233;
SnowflakeParser.RULE_character = 234;
SnowflakeParser.RULE_format_type_options = 235;
SnowflakeParser.RULE_copy_options = 236;
SnowflakeParser.RULE_stage_encryption_opts_internal = 237;
SnowflakeParser.RULE_stage_type = 238;
SnowflakeParser.RULE_stage_master_key = 239;
SnowflakeParser.RULE_stage_kms_key = 240;
SnowflakeParser.RULE_stage_encryption_opts_aws = 241;
SnowflakeParser.RULE_aws_token = 242;
SnowflakeParser.RULE_aws_key_id = 243;
SnowflakeParser.RULE_aws_secret_key = 244;
SnowflakeParser.RULE_aws_role = 245;
SnowflakeParser.RULE_azure_encryption_value = 246;
SnowflakeParser.RULE_stage_encryption_opts_az = 247;
SnowflakeParser.RULE_storage_integration_eq_id = 248;
SnowflakeParser.RULE_az_credential_or_storage_integration = 249;
SnowflakeParser.RULE_gcp_encryption_value = 250;
SnowflakeParser.RULE_stage_encryption_opts_gcp = 251;
SnowflakeParser.RULE_aws_credential_or_storage_integration = 252;
SnowflakeParser.RULE_external_stage_params = 253;
SnowflakeParser.RULE_true_false = 254;
SnowflakeParser.RULE_enable = 255;
SnowflakeParser.RULE_refresh_on_create = 256;
SnowflakeParser.RULE_auto_refresh = 257;
SnowflakeParser.RULE_notification_integration = 258;
SnowflakeParser.RULE_directory_table_internal_params = 259;
SnowflakeParser.RULE_directory_table_external_params = 260;
SnowflakeParser.RULE_create_stage = 261;
SnowflakeParser.RULE_alter_stage = 262;
SnowflakeParser.RULE_drop_stage = 263;
SnowflakeParser.RULE_describe_stage = 264;
SnowflakeParser.RULE_show_stages = 265;
SnowflakeParser.RULE_cloud_provider_params = 266;
SnowflakeParser.RULE_cloud_provider_params2 = 267;
SnowflakeParser.RULE_cloud_provider_params3 = 268;
SnowflakeParser.RULE_create_storage_integration = 269;
SnowflakeParser.RULE_copy_grants = 270;
SnowflakeParser.RULE_append_only = 271;
SnowflakeParser.RULE_insert_only = 272;
SnowflakeParser.RULE_show_initial_rows = 273;
SnowflakeParser.RULE_stream_time = 274;
SnowflakeParser.RULE_create_stream = 275;
SnowflakeParser.RULE_temporary = 276;
SnowflakeParser.RULE_table_type = 277;
SnowflakeParser.RULE_with_tags = 278;
SnowflakeParser.RULE_with_row_access_policy = 279;
SnowflakeParser.RULE_cluster_by = 280;
SnowflakeParser.RULE_change_tracking = 281;
SnowflakeParser.RULE_with_masking_policy = 282;
SnowflakeParser.RULE_collate = 283;
SnowflakeParser.RULE_order_noorder = 284;
SnowflakeParser.RULE_default_value = 285;
SnowflakeParser.RULE_foreign_key = 286;
SnowflakeParser.RULE_primary_key = 287;
SnowflakeParser.RULE_out_of_line_constraint = 288;
SnowflakeParser.RULE_full_col_decl = 289;
SnowflakeParser.RULE_column_decl_item = 290;
SnowflakeParser.RULE_column_decl_item_list = 291;
SnowflakeParser.RULE_create_table = 292;
SnowflakeParser.RULE_column_decl_item_list_paren = 293;
SnowflakeParser.RULE_create_table_clause = 294;
SnowflakeParser.RULE_create_table_as_select = 295;
SnowflakeParser.RULE_create_table_like = 296;
SnowflakeParser.RULE_create_tag = 297;
SnowflakeParser.RULE_tag_allowed_values = 298;
SnowflakeParser.RULE_session_parameter = 299;
SnowflakeParser.RULE_session_parameter_list = 300;
SnowflakeParser.RULE_session_params_list = 301;
SnowflakeParser.RULE_create_task = 302;
SnowflakeParser.RULE_task_parameters = 303;
SnowflakeParser.RULE_task_compute = 304;
SnowflakeParser.RULE_task_schedule = 305;
SnowflakeParser.RULE_task_timeout = 306;
SnowflakeParser.RULE_task_suspend_after_failure_number = 307;
SnowflakeParser.RULE_task_error_integration = 308;
SnowflakeParser.RULE_task_overlap = 309;
SnowflakeParser.RULE_sql = 310;
SnowflakeParser.RULE_call = 311;
SnowflakeParser.RULE_create_user = 312;
SnowflakeParser.RULE_view_col = 313;
SnowflakeParser.RULE_create_view = 314;
SnowflakeParser.RULE_create_warehouse = 315;
SnowflakeParser.RULE_wh_common_size = 316;
SnowflakeParser.RULE_wh_extra_size = 317;
SnowflakeParser.RULE_wh_properties = 318;
SnowflakeParser.RULE_wh_params = 319;
SnowflakeParser.RULE_trigger_definition = 320;
SnowflakeParser.RULE_object_type_name = 321;
SnowflakeParser.RULE_object_type_plural = 322;
SnowflakeParser.RULE_drop_command = 323;
SnowflakeParser.RULE_drop_object = 324;
SnowflakeParser.RULE_drop_alert = 325;
SnowflakeParser.RULE_drop_connection = 326;
SnowflakeParser.RULE_drop_database = 327;
SnowflakeParser.RULE_drop_dynamic_table = 328;
SnowflakeParser.RULE_drop_external_table = 329;
SnowflakeParser.RULE_drop_failover_group = 330;
SnowflakeParser.RULE_drop_file_format = 331;
SnowflakeParser.RULE_drop_function = 332;
SnowflakeParser.RULE_drop_integration = 333;
SnowflakeParser.RULE_drop_managed_account = 334;
SnowflakeParser.RULE_drop_masking_policy = 335;
SnowflakeParser.RULE_drop_materialized_view = 336;
SnowflakeParser.RULE_drop_network_policy = 337;
SnowflakeParser.RULE_drop_pipe = 338;
SnowflakeParser.RULE_drop_procedure = 339;
SnowflakeParser.RULE_drop_replication_group = 340;
SnowflakeParser.RULE_drop_resource_monitor = 341;
SnowflakeParser.RULE_drop_role = 342;
SnowflakeParser.RULE_drop_row_access_policy = 343;
SnowflakeParser.RULE_drop_schema = 344;
SnowflakeParser.RULE_drop_sequence = 345;
SnowflakeParser.RULE_drop_session_policy = 346;
SnowflakeParser.RULE_drop_password_policy = 347;
SnowflakeParser.RULE_drop_share = 348;
SnowflakeParser.RULE_drop_stream = 349;
SnowflakeParser.RULE_drop_table = 350;
SnowflakeParser.RULE_drop_tag = 351;
SnowflakeParser.RULE_drop_task = 352;
SnowflakeParser.RULE_drop_user = 353;
SnowflakeParser.RULE_drop_view = 354;
SnowflakeParser.RULE_drop_warehouse = 355;
SnowflakeParser.RULE_cascade_restrict = 356;
SnowflakeParser.RULE_arg_types = 357;
SnowflakeParser.RULE_undrop_command = 358;
SnowflakeParser.RULE_undrop_database = 359;
SnowflakeParser.RULE_undrop_schema = 360;
SnowflakeParser.RULE_undrop_table = 361;
SnowflakeParser.RULE_undrop_tag = 362;
SnowflakeParser.RULE_use_command = 363;
SnowflakeParser.RULE_use_database = 364;
SnowflakeParser.RULE_use_role = 365;
SnowflakeParser.RULE_use_schema = 366;
SnowflakeParser.RULE_use_secondary_roles = 367;
SnowflakeParser.RULE_use_warehouse = 368;
SnowflakeParser.RULE_comment_clause = 369;
SnowflakeParser.RULE_if_suspended = 370;
SnowflakeParser.RULE_if_exists = 371;
SnowflakeParser.RULE_if_not_exists = 372;
SnowflakeParser.RULE_or_replace = 373;
SnowflakeParser.RULE_describe = 374;
SnowflakeParser.RULE_describe_command = 375;
SnowflakeParser.RULE_describe_alert = 376;
SnowflakeParser.RULE_describe_database = 377;
SnowflakeParser.RULE_describe_dynamic_table = 378;
SnowflakeParser.RULE_describe_event_table = 379;
SnowflakeParser.RULE_describe_external_table = 380;
SnowflakeParser.RULE_describe_file_format = 381;
SnowflakeParser.RULE_describe_function = 382;
SnowflakeParser.RULE_describe_integration = 383;
SnowflakeParser.RULE_describe_masking_policy = 384;
SnowflakeParser.RULE_describe_materialized_view = 385;
SnowflakeParser.RULE_describe_network_policy = 386;
SnowflakeParser.RULE_describe_pipe = 387;
SnowflakeParser.RULE_describe_procedure = 388;
SnowflakeParser.RULE_describe_result = 389;
SnowflakeParser.RULE_describe_row_access_policy = 390;
SnowflakeParser.RULE_describe_schema = 391;
SnowflakeParser.RULE_describe_search_optimization = 392;
SnowflakeParser.RULE_describe_sequence = 393;
SnowflakeParser.RULE_describe_session_policy = 394;
SnowflakeParser.RULE_describe_password_policy = 395;
SnowflakeParser.RULE_describe_share = 396;
SnowflakeParser.RULE_describe_stream = 397;
SnowflakeParser.RULE_describe_table = 398;
SnowflakeParser.RULE_describe_task = 399;
SnowflakeParser.RULE_describe_transaction = 400;
SnowflakeParser.RULE_describe_user = 401;
SnowflakeParser.RULE_describe_view = 402;
SnowflakeParser.RULE_describe_warehouse = 403;
SnowflakeParser.RULE_show_command = 404;
SnowflakeParser.RULE_show_alerts = 405;
SnowflakeParser.RULE_show_channels = 406;
SnowflakeParser.RULE_show_columns = 407;
SnowflakeParser.RULE_show_connections = 408;
SnowflakeParser.RULE_starts_with = 409;
SnowflakeParser.RULE_limit_rows = 410;
SnowflakeParser.RULE_show_databases = 411;
SnowflakeParser.RULE_show_databases_in_failover_group = 412;
SnowflakeParser.RULE_show_databases_in_replication_group = 413;
SnowflakeParser.RULE_show_delegated_authorizations = 414;
SnowflakeParser.RULE_show_dynamic_tables = 415;
SnowflakeParser.RULE_show_event_tables = 416;
SnowflakeParser.RULE_show_external_functions = 417;
SnowflakeParser.RULE_show_external_tables = 418;
SnowflakeParser.RULE_show_failover_groups = 419;
SnowflakeParser.RULE_show_file_formats = 420;
SnowflakeParser.RULE_show_functions = 421;
SnowflakeParser.RULE_show_global_accounts = 422;
SnowflakeParser.RULE_show_grants = 423;
SnowflakeParser.RULE_show_grants_opts = 424;
SnowflakeParser.RULE_show_integrations = 425;
SnowflakeParser.RULE_show_locks = 426;
SnowflakeParser.RULE_show_managed_accounts = 427;
SnowflakeParser.RULE_show_masking_policies = 428;
SnowflakeParser.RULE_in_obj = 429;
SnowflakeParser.RULE_in_obj_2 = 430;
SnowflakeParser.RULE_show_materialized_views = 431;
SnowflakeParser.RULE_show_network_policies = 432;
SnowflakeParser.RULE_show_objects = 433;
SnowflakeParser.RULE_show_organization_accounts = 434;
SnowflakeParser.RULE_in_for = 435;
SnowflakeParser.RULE_show_parameters = 436;
SnowflakeParser.RULE_show_pipes = 437;
SnowflakeParser.RULE_show_primary_keys = 438;
SnowflakeParser.RULE_show_procedures = 439;
SnowflakeParser.RULE_show_regions = 440;
SnowflakeParser.RULE_show_replication_accounts = 441;
SnowflakeParser.RULE_show_replication_databases = 442;
SnowflakeParser.RULE_show_replication_groups = 443;
SnowflakeParser.RULE_show_resource_monitors = 444;
SnowflakeParser.RULE_show_roles = 445;
SnowflakeParser.RULE_show_row_access_policies = 446;
SnowflakeParser.RULE_show_schemas = 447;
SnowflakeParser.RULE_show_sequences = 448;
SnowflakeParser.RULE_show_session_policies = 449;
SnowflakeParser.RULE_show_password_policies = 450;
SnowflakeParser.RULE_show_shares = 451;
SnowflakeParser.RULE_show_shares_in_failover_group = 452;
SnowflakeParser.RULE_show_shares_in_replication_group = 453;
SnowflakeParser.RULE_show_streams = 454;
SnowflakeParser.RULE_show_tables = 455;
SnowflakeParser.RULE_show_tags = 456;
SnowflakeParser.RULE_show_tasks = 457;
SnowflakeParser.RULE_show_transactions = 458;
SnowflakeParser.RULE_show_user_functions = 459;
SnowflakeParser.RULE_show_users = 460;
SnowflakeParser.RULE_show_variables = 461;
SnowflakeParser.RULE_show_views = 462;
SnowflakeParser.RULE_show_warehouses = 463;
SnowflakeParser.RULE_like_pattern = 464;
SnowflakeParser.RULE_account_identifier = 465;
SnowflakeParser.RULE_schema_name = 466;
SnowflakeParser.RULE_object_type = 467;
SnowflakeParser.RULE_object_type_list = 468;
SnowflakeParser.RULE_tag_value = 469;
SnowflakeParser.RULE_arg_data_type = 470;
SnowflakeParser.RULE_arg_name = 471;
SnowflakeParser.RULE_param_name = 472;
SnowflakeParser.RULE_region_group_id = 473;
SnowflakeParser.RULE_snowflake_region_id = 474;
SnowflakeParser.RULE_string = 475;
SnowflakeParser.RULE_string_list = 476;
SnowflakeParser.RULE_id_fn = 477;
SnowflakeParser.RULE_id_ = 478;
SnowflakeParser.RULE_keyword = 479;
SnowflakeParser.RULE_non_reserved_words = 480;
SnowflakeParser.RULE_builtin_function = 481;
SnowflakeParser.RULE_unary_or_binary_builtin_function = 482;
SnowflakeParser.RULE_binary_builtin_function = 483;
SnowflakeParser.RULE_binary_or_ternary_builtin_function = 484;
SnowflakeParser.RULE_ternary_builtin_function = 485;
SnowflakeParser.RULE_list_function = 486;
SnowflakeParser.RULE_pattern = 487;
SnowflakeParser.RULE_column_name = 488;
SnowflakeParser.RULE_column_list = 489;
SnowflakeParser.RULE_column_list_with_comment = 490;
SnowflakeParser.RULE_object_name = 491;
SnowflakeParser.RULE_object_name_or_identifier = 492;
SnowflakeParser.RULE_num = 493;
SnowflakeParser.RULE_expr_list = 494;
SnowflakeParser.RULE_expr_list_sorted = 495;
SnowflakeParser.RULE_expr = 496;
SnowflakeParser.RULE_iff_expr = 497;
SnowflakeParser.RULE_trim_expression = 498;
SnowflakeParser.RULE_try_cast_expr = 499;
SnowflakeParser.RULE_cast_expr = 500;
SnowflakeParser.RULE_json_literal = 501;
SnowflakeParser.RULE_kv_pair = 502;
SnowflakeParser.RULE_value = 503;
SnowflakeParser.RULE_arr_literal = 504;
SnowflakeParser.RULE_data_type_size = 505;
SnowflakeParser.RULE_data_type = 506;
SnowflakeParser.RULE_primitive_expression = 507;
SnowflakeParser.RULE_order_by_expr = 508;
SnowflakeParser.RULE_asc_desc = 509;
SnowflakeParser.RULE_over_clause = 510;
SnowflakeParser.RULE_function_call = 511;
SnowflakeParser.RULE_param_assoc_list = 512;
SnowflakeParser.RULE_param_assoc = 513;
SnowflakeParser.RULE_ignore_or_repect_nulls = 514;
SnowflakeParser.RULE_ranking_windowed_function = 515;
SnowflakeParser.RULE_aggregate_function = 516;
SnowflakeParser.RULE_literal = 517;
SnowflakeParser.RULE_sign = 518;
SnowflakeParser.RULE_full_column_name = 519;
SnowflakeParser.RULE_bracket_expression = 520;
SnowflakeParser.RULE_case_expression = 521;
SnowflakeParser.RULE_switch_search_condition_section = 522;
SnowflakeParser.RULE_switch_section = 523;
SnowflakeParser.RULE_query_statement = 524;
SnowflakeParser.RULE_with_expression = 525;
SnowflakeParser.RULE_common_table_expression = 526;
SnowflakeParser.RULE_select_statement = 527;
SnowflakeParser.RULE_set_operators = 528;
SnowflakeParser.RULE_select_optional_clauses = 529;
SnowflakeParser.RULE_select_clause = 530;
SnowflakeParser.RULE_select_top_clause = 531;
SnowflakeParser.RULE_select_list_no_top = 532;
SnowflakeParser.RULE_select_list_top = 533;
SnowflakeParser.RULE_select_list = 534;
SnowflakeParser.RULE_select_list_elem = 535;
SnowflakeParser.RULE_column_elem_star = 536;
SnowflakeParser.RULE_column_elem = 537;
SnowflakeParser.RULE_object_name_or_alias = 538;
SnowflakeParser.RULE_as_alias = 539;
SnowflakeParser.RULE_expression_elem = 540;
SnowflakeParser.RULE_column_position = 541;
SnowflakeParser.RULE_all_distinct = 542;
SnowflakeParser.RULE_top_clause = 543;
SnowflakeParser.RULE_into_clause = 544;
SnowflakeParser.RULE_var_list = 545;
SnowflakeParser.RULE_var = 546;
SnowflakeParser.RULE_from_clause = 547;
SnowflakeParser.RULE_table_sources = 548;
SnowflakeParser.RULE_table_source = 549;
SnowflakeParser.RULE_table_source_item_joined = 550;
SnowflakeParser.RULE_object_ref = 551;
SnowflakeParser.RULE_flatten_table_option = 552;
SnowflakeParser.RULE_flatten_table = 553;
SnowflakeParser.RULE_splited_table = 554;
SnowflakeParser.RULE_prior_list = 555;
SnowflakeParser.RULE_prior_item = 556;
SnowflakeParser.RULE_outer_join = 557;
SnowflakeParser.RULE_join_type = 558;
SnowflakeParser.RULE_join_clause = 559;
SnowflakeParser.RULE_at_before = 560;
SnowflakeParser.RULE_end = 561;
SnowflakeParser.RULE_changes = 562;
SnowflakeParser.RULE_default_append_only = 563;
SnowflakeParser.RULE_partition_by = 564;
SnowflakeParser.RULE_alias = 565;
SnowflakeParser.RULE_expr_alias_list = 566;
SnowflakeParser.RULE_measures = 567;
SnowflakeParser.RULE_match_opts = 568;
SnowflakeParser.RULE_row_match = 569;
SnowflakeParser.RULE_first_last = 570;
SnowflakeParser.RULE_symbol = 571;
SnowflakeParser.RULE_after_match = 572;
SnowflakeParser.RULE_symbol_list = 573;
SnowflakeParser.RULE_define = 574;
SnowflakeParser.RULE_match_recognize = 575;
SnowflakeParser.RULE_pivot_unpivot = 576;
SnowflakeParser.RULE_column_alias_list_in_brackets = 577;
SnowflakeParser.RULE_expr_list_in_parentheses = 578;
SnowflakeParser.RULE_values_table = 579;
SnowflakeParser.RULE_values_table_body = 580;
SnowflakeParser.RULE_sample_method = 581;
SnowflakeParser.RULE_repeatable_seed = 582;
SnowflakeParser.RULE_sample_opts = 583;
SnowflakeParser.RULE_sample = 584;
SnowflakeParser.RULE_search_condition = 585;
SnowflakeParser.RULE_comparison_operator = 586;
SnowflakeParser.RULE_null_not_null = 587;
SnowflakeParser.RULE_subquery = 588;
SnowflakeParser.RULE_predicate = 589;
SnowflakeParser.RULE_where_clause = 590;
SnowflakeParser.RULE_group_by_elem = 591;
SnowflakeParser.RULE_group_by_list = 592;
SnowflakeParser.RULE_group_by_clause = 593;
SnowflakeParser.RULE_having_clause = 594;
SnowflakeParser.RULE_qualify_clause = 595;
SnowflakeParser.RULE_order_item = 596;
SnowflakeParser.RULE_order_by_clause = 597;
SnowflakeParser.RULE_row_rows = 598;
SnowflakeParser.RULE_first_next = 599;
SnowflakeParser.RULE_limit_clause = 600;
SnowflakeParser.RULE_round_mode = 601;
SnowflakeParser.RULE_round_expr = 602;

class Snowflake_fileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_snowflake_file;
    }

	EOF() {
	    return this.getToken(SnowflakeParser.EOF, 0);
	};

	batch() {
	    return this.getTypedRuleContext(BatchContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSnowflake_file(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_batch;
    }

	sql_command = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_commandContext);
	    } else {
	        return this.getTypedRuleContext(Sql_commandContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.SEMI);
	    } else {
	        return this.getToken(SnowflakeParser.SEMI, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitBatch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sql_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_sql_command;
    }

	ddl_command() {
	    return this.getTypedRuleContext(Ddl_commandContext,0);
	};

	dml_command() {
	    return this.getTypedRuleContext(Dml_commandContext,0);
	};

	show_command() {
	    return this.getTypedRuleContext(Show_commandContext,0);
	};

	use_command() {
	    return this.getTypedRuleContext(Use_commandContext,0);
	};

	describe_command() {
	    return this.getTypedRuleContext(Describe_commandContext,0);
	};

	other_command() {
	    return this.getTypedRuleContext(Other_commandContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSql_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ddl_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_ddl_command;
    }

	alter_command() {
	    return this.getTypedRuleContext(Alter_commandContext,0);
	};

	create_command() {
	    return this.getTypedRuleContext(Create_commandContext,0);
	};

	drop_command() {
	    return this.getTypedRuleContext(Drop_commandContext,0);
	};

	undrop_command() {
	    return this.getTypedRuleContext(Undrop_commandContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDdl_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dml_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_dml_command;
    }

	query_statement() {
	    return this.getTypedRuleContext(Query_statementContext,0);
	};

	insert_statement() {
	    return this.getTypedRuleContext(Insert_statementContext,0);
	};

	insert_multi_table_statement() {
	    return this.getTypedRuleContext(Insert_multi_table_statementContext,0);
	};

	update_statement() {
	    return this.getTypedRuleContext(Update_statementContext,0);
	};

	delete_statement() {
	    return this.getTypedRuleContext(Delete_statementContext,0);
	};

	merge_statement() {
	    return this.getTypedRuleContext(Merge_statementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDml_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Insert_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_insert_statement;
    }

	INSERT() {
	    return this.getToken(SnowflakeParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(SnowflakeParser.INTO, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	values_builder() {
	    return this.getTypedRuleContext(Values_builderContext,0);
	};

	query_statement() {
	    return this.getTypedRuleContext(Query_statementContext,0);
	};

	OVERWRITE() {
	    return this.getToken(SnowflakeParser.OVERWRITE, 0);
	};

	column_list_in_parentheses() {
	    return this.getTypedRuleContext(Column_list_in_parenthesesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitInsert_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Insert_multi_table_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_insert_multi_table_statement;
    }

	INSERT() {
	    return this.getToken(SnowflakeParser.INSERT, 0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	into_clause2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Into_clause2Context);
	    } else {
	        return this.getTypedRuleContext(Into_clause2Context,i);
	    }
	};

	OVERWRITE() {
	    return this.getToken(SnowflakeParser.OVERWRITE, 0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	FIRST() {
	    return this.getToken(SnowflakeParser.FIRST, 0);
	};

	WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.WHEN);
	    } else {
	        return this.getToken(SnowflakeParser.WHEN, i);
	    }
	};


	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.THEN);
	    } else {
	        return this.getToken(SnowflakeParser.THEN, i);
	    }
	};


	ELSE() {
	    return this.getToken(SnowflakeParser.ELSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitInsert_multi_table_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Into_clause2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_into_clause2;
    }

	INTO() {
	    return this.getToken(SnowflakeParser.INTO, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	values_list() {
	    return this.getTypedRuleContext(Values_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitInto_clause2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Values_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_values_list;
    }

	VALUES() {
	    return this.getToken(SnowflakeParser.VALUES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	value_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_itemContext);
	    } else {
	        return this.getTypedRuleContext(Value_itemContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitValues_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Value_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_value_item;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	DEFAULT() {
	    return this.getToken(SnowflakeParser.DEFAULT, 0);
	};

	NULL_() {
	    return this.getToken(SnowflakeParser.NULL_, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitValue_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Merge_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_merge_statement;
    }

	MERGE() {
	    return this.getToken(SnowflakeParser.MERGE, 0);
	};

	INTO() {
	    return this.getToken(SnowflakeParser.INTO, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	USING() {
	    return this.getToken(SnowflakeParser.USING, 0);
	};

	table_source() {
	    return this.getTypedRuleContext(Table_sourceContext,0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	merge_matches() {
	    return this.getTypedRuleContext(Merge_matchesContext,0);
	};

	as_alias() {
	    return this.getTypedRuleContext(As_aliasContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitMerge_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Merge_matchesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_merge_matches;
    }

	merge_cond = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Merge_condContext);
	    } else {
	        return this.getTypedRuleContext(Merge_condContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitMerge_matches(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Merge_condContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_merge_cond;
    }

	WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.WHEN);
	    } else {
	        return this.getToken(SnowflakeParser.WHEN, i);
	    }
	};


	MATCHED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.MATCHED);
	    } else {
	        return this.getToken(SnowflakeParser.MATCHED, i);
	    }
	};


	THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.THEN);
	    } else {
	        return this.getToken(SnowflakeParser.THEN, i);
	    }
	};


	merge_update_delete = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Merge_update_deleteContext);
	    } else {
	        return this.getTypedRuleContext(Merge_update_deleteContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.AND);
	    } else {
	        return this.getToken(SnowflakeParser.AND, i);
	    }
	};


	search_condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Search_conditionContext);
	    } else {
	        return this.getTypedRuleContext(Search_conditionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SnowflakeParser.NOT, 0);
	};

	merge_insert() {
	    return this.getTypedRuleContext(Merge_insertContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitMerge_cond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Merge_update_deleteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_merge_update_delete;
    }

	UPDATE() {
	    return this.getToken(SnowflakeParser.UPDATE, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	DELETE() {
	    return this.getToken(SnowflakeParser.DELETE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitMerge_update_delete(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Merge_insertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_merge_insert;
    }

	INSERT() {
	    return this.getToken(SnowflakeParser.INSERT, 0);
	};

	VALUES() {
	    return this.getToken(SnowflakeParser.VALUES, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitMerge_insert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_update_statement;
    }

	UPDATE() {
	    return this.getToken(SnowflakeParser.UPDATE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	as_alias() {
	    return this.getTypedRuleContext(As_aliasContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	table_sources() {
	    return this.getTypedRuleContext(Table_sourcesContext,0);
	};

	WHERE() {
	    return this.getToken(SnowflakeParser.WHERE, 0);
	};

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUpdate_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_or_queryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_table_or_query;
    }

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	as_alias() {
	    return this.getTypedRuleContext(As_aliasContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTable_or_query(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Delete_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_delete_statement;
    }

	DELETE() {
	    return this.getToken(SnowflakeParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	as_alias() {
	    return this.getTypedRuleContext(As_aliasContext,0);
	};

	USING() {
	    return this.getToken(SnowflakeParser.USING, 0);
	};

	table_or_query = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_queryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_queryContext,i);
	    }
	};

	WHERE() {
	    return this.getToken(SnowflakeParser.WHERE, 0);
	};

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDelete_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Values_builderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_values_builder;
    }

	VALUES() {
	    return this.getToken(SnowflakeParser.VALUES, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	expr_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr_listContext);
	    } else {
	        return this.getTypedRuleContext(Expr_listContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitValues_builder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Other_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_other_command;
    }

	copy_into_table() {
	    return this.getTypedRuleContext(Copy_into_tableContext,0);
	};

	copy_into_location() {
	    return this.getTypedRuleContext(Copy_into_locationContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	commit() {
	    return this.getTypedRuleContext(CommitContext,0);
	};

	execute_immediate() {
	    return this.getTypedRuleContext(Execute_immediateContext,0);
	};

	execute_task() {
	    return this.getTypedRuleContext(Execute_taskContext,0);
	};

	explain() {
	    return this.getTypedRuleContext(ExplainContext,0);
	};

	get_dml() {
	    return this.getTypedRuleContext(Get_dmlContext,0);
	};

	grant_ownership() {
	    return this.getTypedRuleContext(Grant_ownershipContext,0);
	};

	grant_to_role() {
	    return this.getTypedRuleContext(Grant_to_roleContext,0);
	};

	grant_to_share() {
	    return this.getTypedRuleContext(Grant_to_shareContext,0);
	};

	grant_role() {
	    return this.getTypedRuleContext(Grant_roleContext,0);
	};

	list() {
	    return this.getTypedRuleContext(ListContext,0);
	};

	put() {
	    return this.getTypedRuleContext(PutContext,0);
	};

	remove() {
	    return this.getTypedRuleContext(RemoveContext,0);
	};

	revoke_from_role() {
	    return this.getTypedRuleContext(Revoke_from_roleContext,0);
	};

	revoke_from_share() {
	    return this.getTypedRuleContext(Revoke_from_shareContext,0);
	};

	revoke_role() {
	    return this.getTypedRuleContext(Revoke_roleContext,0);
	};

	rollback() {
	    return this.getTypedRuleContext(RollbackContext,0);
	};

	set() {
	    return this.getTypedRuleContext(SetContext,0);
	};

	truncate_materialized_view() {
	    return this.getTypedRuleContext(Truncate_materialized_viewContext,0);
	};

	truncate_table() {
	    return this.getTypedRuleContext(Truncate_tableContext,0);
	};

	unset() {
	    return this.getTypedRuleContext(UnsetContext,0);
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	begin_txn() {
	    return this.getTypedRuleContext(Begin_txnContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOther_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Begin_txnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_begin_txn;
    }

	BEGIN() {
	    return this.getToken(SnowflakeParser.BEGIN, 0);
	};

	NAME() {
	    return this.getToken(SnowflakeParser.NAME, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	WORK() {
	    return this.getToken(SnowflakeParser.WORK, 0);
	};

	TRANSACTION() {
	    return this.getToken(SnowflakeParser.TRANSACTION, 0);
	};

	START() {
	    return this.getToken(SnowflakeParser.START, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitBegin_txn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_into_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_copy_into_table;
    }

	COPY() {
	    return this.getToken(SnowflakeParser.COPY, 0);
	};

	INTO() {
	    return this.getToken(SnowflakeParser.INTO, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.FROM);
	    } else {
	        return this.getToken(SnowflakeParser.FROM, i);
	    }
	};


	table_stage() {
	    return this.getTypedRuleContext(Table_stageContext,0);
	};

	user_stage() {
	    return this.getTypedRuleContext(User_stageContext,0);
	};

	named_stage() {
	    return this.getTypedRuleContext(Named_stageContext,0);
	};

	external_location() {
	    return this.getTypedRuleContext(External_locationContext,0);
	};

	files() {
	    return this.getTypedRuleContext(FilesContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	file_format() {
	    return this.getTypedRuleContext(File_formatContext,0);
	};

	copy_options = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Copy_optionsContext);
	    } else {
	        return this.getTypedRuleContext(Copy_optionsContext,i);
	    }
	};

	VALIDATION_MODE() {
	    return this.getToken(SnowflakeParser.VALIDATION_MODE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	RETURN_N_ROWS() {
	    return this.getToken(SnowflakeParser.RETURN_N_ROWS, 0);
	};

	RETURN_ERRORS() {
	    return this.getToken(SnowflakeParser.RETURN_ERRORS, 0);
	};

	RETURN_ALL_ERRORS() {
	    return this.getToken(SnowflakeParser.RETURN_ALL_ERRORS, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	SELECT() {
	    return this.getToken(SnowflakeParser.SELECT, 0);
	};

	select_list() {
	    return this.getTypedRuleContext(Select_listContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCopy_into_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class External_locationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_external_location;
    }

	S3_PATH() {
	    return this.getToken(SnowflakeParser.S3_PATH, 0);
	};

	GCS_PATH() {
	    return this.getToken(SnowflakeParser.GCS_PATH, 0);
	};

	AZURE_PATH() {
	    return this.getToken(SnowflakeParser.AZURE_PATH, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExternal_location(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_files;
    }

	FILES() {
	    return this.getToken(SnowflakeParser.FILES, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFiles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class File_formatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_file_format;
    }

	FILE_FORMAT() {
	    return this.getToken(SnowflakeParser.FILE_FORMAT, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	format_name() {
	    return this.getTypedRuleContext(Format_nameContext,0);
	};

	format_type() {
	    return this.getTypedRuleContext(Format_typeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFile_format(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Format_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_format_name;
    }

	FORMAT_NAME() {
	    return this.getToken(SnowflakeParser.FORMAT_NAME, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFormat_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Format_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_format_type;
    }

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	type_fileformat() {
	    return this.getTypedRuleContext(Type_fileformatContext,0);
	};

	format_type_options = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Format_type_optionsContext);
	    } else {
	        return this.getTypedRuleContext(Format_type_optionsContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFormat_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stage_file_formatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stage_file_format;
    }

	STAGE_FILE_FORMAT() {
	    return this.getToken(SnowflakeParser.STAGE_FILE_FORMAT, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	FORMAT_NAME() {
	    return this.getToken(SnowflakeParser.FORMAT_NAME, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	type_fileformat() {
	    return this.getTypedRuleContext(Type_fileformatContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	format_type_options = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Format_type_optionsContext);
	    } else {
	        return this.getTypedRuleContext(Format_type_optionsContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStage_file_format(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_into_locationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_copy_into_location;
    }

	COPY() {
	    return this.getToken(SnowflakeParser.COPY, 0);
	};

	INTO() {
	    return this.getToken(SnowflakeParser.INTO, 0);
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	table_stage() {
	    return this.getTypedRuleContext(Table_stageContext,0);
	};

	user_stage() {
	    return this.getTypedRuleContext(User_stageContext,0);
	};

	named_stage() {
	    return this.getTypedRuleContext(Named_stageContext,0);
	};

	external_location() {
	    return this.getTypedRuleContext(External_locationContext,0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	query_statement() {
	    return this.getTypedRuleContext(Query_statementContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	partition_by() {
	    return this.getTypedRuleContext(Partition_byContext,0);
	};

	file_format() {
	    return this.getTypedRuleContext(File_formatContext,0);
	};

	copy_options() {
	    return this.getTypedRuleContext(Copy_optionsContext,0);
	};

	VALIDATION_MODE() {
	    return this.getToken(SnowflakeParser.VALIDATION_MODE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	RETURN_ROWS() {
	    return this.getToken(SnowflakeParser.RETURN_ROWS, 0);
	};

	HEADER() {
	    return this.getToken(SnowflakeParser.HEADER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCopy_into_location(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_comment;
    }

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	object_type_name() {
	    return this.getTypedRuleContext(Object_type_nameContext,0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	IS() {
	    return this.getToken(SnowflakeParser.IS, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	function_signature() {
	    return this.getTypedRuleContext(Function_signatureContext,0);
	};

	COLUMN() {
	    return this.getToken(SnowflakeParser.COLUMN, 0);
	};

	full_column_name() {
	    return this.getTypedRuleContext(Full_column_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_signatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_function_signature;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	data_type_list() {
	    return this.getTypedRuleContext(Data_type_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFunction_signature(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_commit;
    }

	COMMIT() {
	    return this.getToken(SnowflakeParser.COMMIT, 0);
	};

	WORK() {
	    return this.getToken(SnowflakeParser.WORK, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCommit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Execute_immediateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_execute_immediate;
    }

	EXECUTE() {
	    return this.getToken(SnowflakeParser.EXECUTE, 0);
	};

	IMMEDIATE() {
	    return this.getToken(SnowflakeParser.IMMEDIATE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ID2() {
	    return this.getToken(SnowflakeParser.ID2, 0);
	};

	USING() {
	    return this.getToken(SnowflakeParser.USING, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	DBL_DOLLAR() {
	    return this.getToken(SnowflakeParser.DBL_DOLLAR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExecute_immediate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Execute_taskContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_execute_task;
    }

	EXECUTE() {
	    return this.getToken(SnowflakeParser.EXECUTE, 0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExecute_task(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_explain;
    }

	EXPLAIN() {
	    return this.getToken(SnowflakeParser.EXPLAIN, 0);
	};

	sql_command() {
	    return this.getTypedRuleContext(Sql_commandContext,0);
	};

	USING() {
	    return this.getToken(SnowflakeParser.USING, 0);
	};

	TABULAR() {
	    return this.getToken(SnowflakeParser.TABULAR, 0);
	};

	JSON() {
	    return this.getToken(SnowflakeParser.JSON, 0);
	};

	TEXT() {
	    return this.getToken(SnowflakeParser.TEXT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExplain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParallelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_parallel;
    }

	PARALLEL() {
	    return this.getToken(SnowflakeParser.PARALLEL, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitParallel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Get_dmlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_get_dml;
    }

	GET() {
	    return this.getToken(SnowflakeParser.GET, 0);
	};

	FILE_PATH() {
	    return this.getToken(SnowflakeParser.FILE_PATH, 0);
	};

	named_stage() {
	    return this.getTypedRuleContext(Named_stageContext,0);
	};

	user_stage() {
	    return this.getTypedRuleContext(User_stageContext,0);
	};

	table_stage() {
	    return this.getTypedRuleContext(Table_stageContext,0);
	};

	parallel() {
	    return this.getTypedRuleContext(ParallelContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGet_dml(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Grant_ownershipContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_grant_ownership;
    }

	GRANT() {
	    return this.getToken(SnowflakeParser.GRANT, 0);
	};

	OWNERSHIP() {
	    return this.getToken(SnowflakeParser.OWNERSHIP, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	FUTURE() {
	    return this.getToken(SnowflakeParser.FUTURE, 0);
	};

	object_type_plural() {
	    return this.getTypedRuleContext(Object_type_pluralContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	CURRENT() {
	    return this.getToken(SnowflakeParser.CURRENT, 0);
	};

	GRANTS() {
	    return this.getToken(SnowflakeParser.GRANTS, 0);
	};

	object_type_name() {
	    return this.getTypedRuleContext(Object_type_nameContext,0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	REVOKE() {
	    return this.getToken(SnowflakeParser.REVOKE, 0);
	};

	COPY() {
	    return this.getToken(SnowflakeParser.COPY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGrant_ownership(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Grant_to_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_grant_to_role;
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.GRANT);
	    } else {
	        return this.getToken(SnowflakeParser.GRANT, i);
	    }
	};


	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	FUTURE() {
	    return this.getToken(SnowflakeParser.FUTURE, 0);
	};

	SCHEMAS() {
	    return this.getToken(SnowflakeParser.SCHEMAS, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	object_type_plural() {
	    return this.getTypedRuleContext(Object_type_pluralContext,0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(SnowflakeParser.OPTION, 0);
	};

	global_privileges() {
	    return this.getTypedRuleContext(Global_privilegesContext,0);
	};

	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ALL);
	    } else {
	        return this.getToken(SnowflakeParser.ALL, i);
	    }
	};


	account_object_privileges() {
	    return this.getTypedRuleContext(Account_object_privilegesContext,0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	RESOURCE() {
	    return this.getToken(SnowflakeParser.RESOURCE, 0);
	};

	MONITOR() {
	    return this.getToken(SnowflakeParser.MONITOR, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	schema_privileges() {
	    return this.getTypedRuleContext(Schema_privilegesContext,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	schema_object_privileges() {
	    return this.getTypedRuleContext(Schema_object_privilegesContext,0);
	};

	object_type() {
	    return this.getTypedRuleContext(Object_typeContext,0);
	};

	PRIVILEGES() {
	    return this.getToken(SnowflakeParser.PRIVILEGES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGrant_to_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Global_privilegesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_global_privileges;
    }

	global_privilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Global_privilegeContext);
	    } else {
	        return this.getTypedRuleContext(Global_privilegeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGlobal_privileges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Global_privilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_global_privilege;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATA() {
	    return this.getToken(SnowflakeParser.DATA, 0);
	};

	EXCHANGE() {
	    return this.getToken(SnowflakeParser.EXCHANGE, 0);
	};

	LISTING() {
	    return this.getToken(SnowflakeParser.LISTING, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	NETWORK() {
	    return this.getToken(SnowflakeParser.NETWORK, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	SHARE() {
	    return this.getToken(SnowflakeParser.SHARE, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	APPLY() {
	    return this.getToken(SnowflakeParser.APPLY, 0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	ATTACH() {
	    return this.getToken(SnowflakeParser.ATTACH, 0);
	};

	EXECUTE() {
	    return this.getToken(SnowflakeParser.EXECUTE, 0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	IMPORT() {
	    return this.getToken(SnowflakeParser.IMPORT, 0);
	};

	MANAGE() {
	    return this.getToken(SnowflakeParser.MANAGE, 0);
	};

	GRANTS() {
	    return this.getToken(SnowflakeParser.GRANTS, 0);
	};

	MONITOR() {
	    return this.getToken(SnowflakeParser.MONITOR, 0);
	};

	OVERRIDE() {
	    return this.getToken(SnowflakeParser.OVERRIDE, 0);
	};

	RESTRICTIONS() {
	    return this.getToken(SnowflakeParser.RESTRICTIONS, 0);
	};

	EXECUTION() {
	    return this.getToken(SnowflakeParser.EXECUTION, 0);
	};

	USAGE() {
	    return this.getToken(SnowflakeParser.USAGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGlobal_privilege(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Account_object_privilegesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_account_object_privileges;
    }

	account_object_privilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Account_object_privilegeContext);
	    } else {
	        return this.getTypedRuleContext(Account_object_privilegeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAccount_object_privileges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Account_object_privilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_account_object_privilege;
    }

	MONITOR() {
	    return this.getToken(SnowflakeParser.MONITOR, 0);
	};

	MODIFY() {
	    return this.getToken(SnowflakeParser.MODIFY, 0);
	};

	USAGE() {
	    return this.getToken(SnowflakeParser.USAGE, 0);
	};

	OPERATE() {
	    return this.getToken(SnowflakeParser.OPERATE, 0);
	};

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	IMPORTED() {
	    return this.getToken(SnowflakeParser.IMPORTED, 0);
	};

	PRIVILEGES() {
	    return this.getToken(SnowflakeParser.PRIVILEGES, 0);
	};

	USE_ANY_ROLE() {
	    return this.getToken(SnowflakeParser.USE_ANY_ROLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAccount_object_privilege(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Schema_privilegesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_schema_privileges;
    }

	schema_privilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Schema_privilegeContext);
	    } else {
	        return this.getTypedRuleContext(Schema_privilegeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSchema_privileges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Schema_privilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_schema_privilege;
    }

	MODIFY() {
	    return this.getToken(SnowflakeParser.MODIFY, 0);
	};

	MONITOR() {
	    return this.getToken(SnowflakeParser.MONITOR, 0);
	};

	USAGE() {
	    return this.getToken(SnowflakeParser.USAGE, 0);
	};

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	EXTERNAL() {
	    return this.getToken(SnowflakeParser.EXTERNAL, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SnowflakeParser.MATERIALIZED, 0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	SEQUENCE() {
	    return this.getToken(SnowflakeParser.SEQUENCE, 0);
	};

	FUNCTION() {
	    return this.getToken(SnowflakeParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(SnowflakeParser.PROCEDURE, 0);
	};

	FILE() {
	    return this.getToken(SnowflakeParser.FILE, 0);
	};

	FORMAT() {
	    return this.getToken(SnowflakeParser.FORMAT, 0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	PIPE() {
	    return this.getToken(SnowflakeParser.PIPE, 0);
	};

	STREAM() {
	    return this.getToken(SnowflakeParser.STREAM, 0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	SEARCH() {
	    return this.getToken(SnowflakeParser.SEARCH, 0);
	};

	OPTIMIZATION() {
	    return this.getToken(SnowflakeParser.OPTIMIZATION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSchema_privilege(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Schema_object_privilegesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_schema_object_privileges;
    }

	schema_object_privilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Schema_object_privilegeContext);
	    } else {
	        return this.getTypedRuleContext(Schema_object_privilegeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSchema_object_privileges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Schema_object_privilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_schema_object_privilege;
    }

	SELECT() {
	    return this.getToken(SnowflakeParser.SELECT, 0);
	};

	INSERT() {
	    return this.getToken(SnowflakeParser.INSERT, 0);
	};

	UPDATE() {
	    return this.getToken(SnowflakeParser.UPDATE, 0);
	};

	DELETE() {
	    return this.getToken(SnowflakeParser.DELETE, 0);
	};

	TRUNCATE() {
	    return this.getToken(SnowflakeParser.TRUNCATE, 0);
	};

	REFERENCES() {
	    return this.getToken(SnowflakeParser.REFERENCES, 0);
	};

	USAGE() {
	    return this.getToken(SnowflakeParser.USAGE, 0);
	};

	READ() {
	    return this.getToken(SnowflakeParser.READ, 0);
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	WRITE() {
	    return this.getToken(SnowflakeParser.WRITE, 0);
	};

	MONITOR() {
	    return this.getToken(SnowflakeParser.MONITOR, 0);
	};

	OPERATE() {
	    return this.getToken(SnowflakeParser.OPERATE, 0);
	};

	APPLY() {
	    return this.getToken(SnowflakeParser.APPLY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSchema_object_privilege(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Grant_to_shareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_grant_to_share;
    }

	GRANT() {
	    return this.getToken(SnowflakeParser.GRANT, 0);
	};

	object_privilege() {
	    return this.getTypedRuleContext(Object_privilegeContext,0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	SHARE() {
	    return this.getToken(SnowflakeParser.SHARE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	FUNCTION() {
	    return this.getToken(SnowflakeParser.FUNCTION, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	TABLES() {
	    return this.getToken(SnowflakeParser.TABLES, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGrant_to_share(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_privilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_privilege;
    }

	USAGE() {
	    return this.getToken(SnowflakeParser.USAGE, 0);
	};

	SELECT() {
	    return this.getToken(SnowflakeParser.SELECT, 0);
	};

	REFERENCE_USAGE() {
	    return this.getToken(SnowflakeParser.REFERENCE_USAGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_privilege(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Grant_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_grant_role;
    }

	GRANT() {
	    return this.getToken(SnowflakeParser.GRANT, 0);
	};

	ROLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ROLE);
	    } else {
	        return this.getToken(SnowflakeParser.ROLE, i);
	    }
	};


	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGrant_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Role_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_role_name;
    }

	system_defined_role() {
	    return this.getTypedRuleContext(System_defined_roleContext,0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRole_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class System_defined_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_system_defined_role;
    }

	ORGADMIN() {
	    return this.getToken(SnowflakeParser.ORGADMIN, 0);
	};

	ACCOUNTADMIN() {
	    return this.getToken(SnowflakeParser.ACCOUNTADMIN, 0);
	};

	SECURITYADMIN() {
	    return this.getToken(SnowflakeParser.SECURITYADMIN, 0);
	};

	USERADMIN() {
	    return this.getToken(SnowflakeParser.USERADMIN, 0);
	};

	SYSADMIN() {
	    return this.getToken(SnowflakeParser.SYSADMIN, 0);
	};

	PUBLIC() {
	    return this.getToken(SnowflakeParser.PUBLIC, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSystem_defined_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_list;
    }

	LIST() {
	    return this.getToken(SnowflakeParser.LIST, 0);
	};

	user_stage() {
	    return this.getTypedRuleContext(User_stageContext,0);
	};

	table_stage() {
	    return this.getTypedRuleContext(Table_stageContext,0);
	};

	named_stage() {
	    return this.getTypedRuleContext(Named_stageContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class User_stageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_user_stage;
    }

	AT() {
	    return this.getToken(SnowflakeParser.AT, 0);
	};

	TILDA() {
	    return this.getToken(SnowflakeParser.TILDA, 0);
	};

	stage_path() {
	    return this.getTypedRuleContext(Stage_pathContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUser_stage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_stageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_table_stage;
    }

	AT() {
	    return this.getToken(SnowflakeParser.AT, 0);
	};

	MODULE() {
	    return this.getToken(SnowflakeParser.MODULE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	stage_path() {
	    return this.getTypedRuleContext(Stage_pathContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTable_stage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Named_stageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_named_stage;
    }

	AT() {
	    return this.getToken(SnowflakeParser.AT, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	stage_path() {
	    return this.getTypedRuleContext(Stage_pathContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitNamed_stage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stage_pathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stage_path;
    }

	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.DIVIDE);
	    } else {
	        return this.getToken(SnowflakeParser.DIVIDE, i);
	    }
	};


	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ID);
	    } else {
	        return this.getToken(SnowflakeParser.ID, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStage_path(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_put;
    }

	PUT() {
	    return this.getToken(SnowflakeParser.PUT, 0);
	};

	FILE_PATH() {
	    return this.getToken(SnowflakeParser.FILE_PATH, 0);
	};

	table_stage() {
	    return this.getTypedRuleContext(Table_stageContext,0);
	};

	user_stage() {
	    return this.getTypedRuleContext(User_stageContext,0);
	};

	named_stage() {
	    return this.getTypedRuleContext(Named_stageContext,0);
	};

	PARALLEL() {
	    return this.getToken(SnowflakeParser.PARALLEL, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	AUTO_COMPRESS() {
	    return this.getToken(SnowflakeParser.AUTO_COMPRESS, 0);
	};

	true_false = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(True_falseContext);
	    } else {
	        return this.getTypedRuleContext(True_falseContext,i);
	    }
	};

	SOURCE_COMPRESSION() {
	    return this.getToken(SnowflakeParser.SOURCE_COMPRESSION, 0);
	};

	OVERWRITE() {
	    return this.getToken(SnowflakeParser.OVERWRITE, 0);
	};

	AUTO_DETECT() {
	    return this.getToken(SnowflakeParser.AUTO_DETECT, 0);
	};

	GZIP() {
	    return this.getToken(SnowflakeParser.GZIP, 0);
	};

	BZ2() {
	    return this.getToken(SnowflakeParser.BZ2, 0);
	};

	BROTLI() {
	    return this.getToken(SnowflakeParser.BROTLI, 0);
	};

	ZSTD() {
	    return this.getToken(SnowflakeParser.ZSTD, 0);
	};

	DEFLATE() {
	    return this.getToken(SnowflakeParser.DEFLATE, 0);
	};

	RAW_DEFLATE() {
	    return this.getToken(SnowflakeParser.RAW_DEFLATE, 0);
	};

	NONE() {
	    return this.getToken(SnowflakeParser.NONE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPut(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemoveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_remove;
    }

	REMOVE() {
	    return this.getToken(SnowflakeParser.REMOVE, 0);
	};

	table_stage() {
	    return this.getTypedRuleContext(Table_stageContext,0);
	};

	user_stage() {
	    return this.getTypedRuleContext(User_stageContext,0);
	};

	named_stage() {
	    return this.getTypedRuleContext(Named_stageContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRemove(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Revoke_from_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_revoke_from_role;
    }

	REVOKE() {
	    return this.getToken(SnowflakeParser.REVOKE, 0);
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	FUTURE() {
	    return this.getToken(SnowflakeParser.FUTURE, 0);
	};

	object_type_plural() {
	    return this.getTypedRuleContext(Object_type_pluralContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	GRANT() {
	    return this.getToken(SnowflakeParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(SnowflakeParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(SnowflakeParser.FOR, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	cascade_restrict() {
	    return this.getTypedRuleContext(Cascade_restrictContext,0);
	};

	global_privilege() {
	    return this.getTypedRuleContext(Global_privilegeContext,0);
	};

	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ALL);
	    } else {
	        return this.getToken(SnowflakeParser.ALL, i);
	    }
	};


	account_object_privileges() {
	    return this.getTypedRuleContext(Account_object_privilegesContext,0);
	};

	RESOURCE() {
	    return this.getToken(SnowflakeParser.RESOURCE, 0);
	};

	MONITOR() {
	    return this.getToken(SnowflakeParser.MONITOR, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	schema_privileges() {
	    return this.getTypedRuleContext(Schema_privilegesContext,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	SCHEMAS() {
	    return this.getToken(SnowflakeParser.SCHEMAS, 0);
	};

	schema_object_privileges() {
	    return this.getTypedRuleContext(Schema_object_privilegesContext,0);
	};

	object_type() {
	    return this.getTypedRuleContext(Object_typeContext,0);
	};

	PRIVILEGES() {
	    return this.getToken(SnowflakeParser.PRIVILEGES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRevoke_from_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Revoke_from_shareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_revoke_from_share;
    }

	REVOKE() {
	    return this.getToken(SnowflakeParser.REVOKE, 0);
	};

	object_privilege() {
	    return this.getTypedRuleContext(Object_privilegeContext,0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	SHARE() {
	    return this.getToken(SnowflakeParser.SHARE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	TABLES() {
	    return this.getToken(SnowflakeParser.TABLES, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	VIEWS() {
	    return this.getToken(SnowflakeParser.VIEWS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRevoke_from_share(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Revoke_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_revoke_role;
    }

	REVOKE() {
	    return this.getToken(SnowflakeParser.REVOKE, 0);
	};

	ROLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ROLE);
	    } else {
	        return this.getToken(SnowflakeParser.ROLE, i);
	    }
	};


	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRevoke_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RollbackContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_rollback;
    }

	ROLLBACK() {
	    return this.getToken(SnowflakeParser.ROLLBACK, 0);
	};

	WORK() {
	    return this.getToken(SnowflakeParser.WORK, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRollback(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_set;
    }

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Truncate_materialized_viewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_truncate_materialized_view;
    }

	TRUNCATE() {
	    return this.getToken(SnowflakeParser.TRUNCATE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SnowflakeParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTruncate_materialized_view(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Truncate_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_truncate_table;
    }

	TRUNCATE() {
	    return this.getToken(SnowflakeParser.TRUNCATE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTruncate_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_unset;
    }

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUnset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_command;
    }

	alter_account() {
	    return this.getTypedRuleContext(Alter_accountContext,0);
	};

	alter_alert() {
	    return this.getTypedRuleContext(Alter_alertContext,0);
	};

	alter_api_integration() {
	    return this.getTypedRuleContext(Alter_api_integrationContext,0);
	};

	alter_connection() {
	    return this.getTypedRuleContext(Alter_connectionContext,0);
	};

	alter_database() {
	    return this.getTypedRuleContext(Alter_databaseContext,0);
	};

	alter_dynamic_table() {
	    return this.getTypedRuleContext(Alter_dynamic_tableContext,0);
	};

	alter_external_table() {
	    return this.getTypedRuleContext(Alter_external_tableContext,0);
	};

	alter_failover_group() {
	    return this.getTypedRuleContext(Alter_failover_groupContext,0);
	};

	alter_file_format() {
	    return this.getTypedRuleContext(Alter_file_formatContext,0);
	};

	alter_function() {
	    return this.getTypedRuleContext(Alter_functionContext,0);
	};

	alter_masking_policy() {
	    return this.getTypedRuleContext(Alter_masking_policyContext,0);
	};

	alter_materialized_view() {
	    return this.getTypedRuleContext(Alter_materialized_viewContext,0);
	};

	alter_network_policy() {
	    return this.getTypedRuleContext(Alter_network_policyContext,0);
	};

	alter_notification_integration() {
	    return this.getTypedRuleContext(Alter_notification_integrationContext,0);
	};

	alter_password_policy() {
	    return this.getTypedRuleContext(Alter_password_policyContext,0);
	};

	alter_pipe() {
	    return this.getTypedRuleContext(Alter_pipeContext,0);
	};

	alter_procedure() {
	    return this.getTypedRuleContext(Alter_procedureContext,0);
	};

	alter_replication_group() {
	    return this.getTypedRuleContext(Alter_replication_groupContext,0);
	};

	alter_resource_monitor() {
	    return this.getTypedRuleContext(Alter_resource_monitorContext,0);
	};

	alter_role() {
	    return this.getTypedRuleContext(Alter_roleContext,0);
	};

	alter_row_access_policy() {
	    return this.getTypedRuleContext(Alter_row_access_policyContext,0);
	};

	alter_schema() {
	    return this.getTypedRuleContext(Alter_schemaContext,0);
	};

	alter_security_integration_external_oauth() {
	    return this.getTypedRuleContext(Alter_security_integration_external_oauthContext,0);
	};

	alter_security_integration_snowflake_oauth() {
	    return this.getTypedRuleContext(Alter_security_integration_snowflake_oauthContext,0);
	};

	alter_security_integration_saml2() {
	    return this.getTypedRuleContext(Alter_security_integration_saml2Context,0);
	};

	alter_security_integration_scim() {
	    return this.getTypedRuleContext(Alter_security_integration_scimContext,0);
	};

	alter_sequence() {
	    return this.getTypedRuleContext(Alter_sequenceContext,0);
	};

	alter_session() {
	    return this.getTypedRuleContext(Alter_sessionContext,0);
	};

	alter_session_policy() {
	    return this.getTypedRuleContext(Alter_session_policyContext,0);
	};

	alter_share() {
	    return this.getTypedRuleContext(Alter_shareContext,0);
	};

	alter_stage() {
	    return this.getTypedRuleContext(Alter_stageContext,0);
	};

	alter_storage_integration() {
	    return this.getTypedRuleContext(Alter_storage_integrationContext,0);
	};

	alter_stream() {
	    return this.getTypedRuleContext(Alter_streamContext,0);
	};

	alter_table() {
	    return this.getTypedRuleContext(Alter_tableContext,0);
	};

	alter_table_alter_column() {
	    return this.getTypedRuleContext(Alter_table_alter_columnContext,0);
	};

	alter_tag() {
	    return this.getTypedRuleContext(Alter_tagContext,0);
	};

	alter_task() {
	    return this.getTypedRuleContext(Alter_taskContext,0);
	};

	alter_user() {
	    return this.getTypedRuleContext(Alter_userContext,0);
	};

	alter_view() {
	    return this.getTypedRuleContext(Alter_viewContext,0);
	};

	alter_warehouse() {
	    return this.getTypedRuleContext(Alter_warehouseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Account_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_account_params;
    }

	ALLOW_ID_TOKEN() {
	    return this.getToken(SnowflakeParser.ALLOW_ID_TOKEN, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	CLIENT_ENCRYPTION_KEY_SIZE() {
	    return this.getToken(SnowflakeParser.CLIENT_ENCRYPTION_KEY_SIZE, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	ENFORCE_SESSION_POLICY() {
	    return this.getToken(SnowflakeParser.ENFORCE_SESSION_POLICY, 0);
	};

	EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST, 0);
	};

	INITIAL_REPLICATION_SIZE_LIMIT_IN_TB() {
	    return this.getToken(SnowflakeParser.INITIAL_REPLICATION_SIZE_LIMIT_IN_TB, 0);
	};

	NETWORK_POLICY() {
	    return this.getToken(SnowflakeParser.NETWORK_POLICY, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	PERIODIC_DATA_REKEYING() {
	    return this.getToken(SnowflakeParser.PERIODIC_DATA_REKEYING, 0);
	};

	PREVENT_UNLOAD_TO_INLINE_URL() {
	    return this.getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INLINE_URL, 0);
	};

	PREVENT_UNLOAD_TO_INTERNAL_STAGES() {
	    return this.getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INTERNAL_STAGES, 0);
	};

	REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION() {
	    return this.getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION, 0);
	};

	REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION() {
	    return this.getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION, 0);
	};

	SAML_IDENTITY_PROVIDER() {
	    return this.getToken(SnowflakeParser.SAML_IDENTITY_PROVIDER, 0);
	};

	json_literal() {
	    return this.getTypedRuleContext(Json_literalContext,0);
	};

	SESSION_POLICY() {
	    return this.getToken(SnowflakeParser.SESSION_POLICY, 0);
	};

	SSO_LOGIN_PAGE() {
	    return this.getToken(SnowflakeParser.SSO_LOGIN_PAGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAccount_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_params;
    }

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	default_ddl_collation() {
	    return this.getTypedRuleContext(Default_ddl_collationContext,0);
	};

	MAX_CONCURRENCY_LEVEL() {
	    return this.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0);
	};

	NETWORK_POLICY() {
	    return this.getToken(SnowflakeParser.NETWORK_POLICY, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	PIPE_EXECUTION_PAUSED() {
	    return this.getToken(SnowflakeParser.PIPE_EXECUTION_PAUSED, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	SESSION_POLICY() {
	    return this.getToken(SnowflakeParser.SESSION_POLICY, 0);
	};

	STATEMENT_QUEUED_TIMEOUT_IN_SECONDS() {
	    return this.getToken(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0);
	};

	STATEMENT_TIMEOUT_IN_SECONDS() {
	    return this.getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Default_ddl_collationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_default_ddl_collation;
    }

	DEFAULT_DDL_COLLATION_() {
	    return this.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDefault_ddl_collation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_propertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_properties;
    }

	PASSWORD() {
	    return this.getToken(SnowflakeParser.PASSWORD, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	LOGIN_NAME() {
	    return this.getToken(SnowflakeParser.LOGIN_NAME, 0);
	};

	DISPLAY_NAME() {
	    return this.getToken(SnowflakeParser.DISPLAY_NAME, 0);
	};

	FIRST_NAME() {
	    return this.getToken(SnowflakeParser.FIRST_NAME, 0);
	};

	MIDDLE_NAME() {
	    return this.getToken(SnowflakeParser.MIDDLE_NAME, 0);
	};

	LAST_NAME() {
	    return this.getToken(SnowflakeParser.LAST_NAME, 0);
	};

	EMAIL() {
	    return this.getToken(SnowflakeParser.EMAIL, 0);
	};

	MUST_CHANGE_PASSWORD() {
	    return this.getToken(SnowflakeParser.MUST_CHANGE_PASSWORD, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	DISABLED() {
	    return this.getToken(SnowflakeParser.DISABLED, 0);
	};

	DAYS_TO_EXPIRY() {
	    return this.getToken(SnowflakeParser.DAYS_TO_EXPIRY, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	MINS_TO_UNLOCK() {
	    return this.getToken(SnowflakeParser.MINS_TO_UNLOCK, 0);
	};

	DEFAULT_WAREHOUSE() {
	    return this.getToken(SnowflakeParser.DEFAULT_WAREHOUSE, 0);
	};

	DEFAULT_NAMESPACE() {
	    return this.getToken(SnowflakeParser.DEFAULT_NAMESPACE, 0);
	};

	DEFAULT_ROLE() {
	    return this.getToken(SnowflakeParser.DEFAULT_ROLE, 0);
	};

	MINS_TO_BYPASS_MFA() {
	    return this.getToken(SnowflakeParser.MINS_TO_BYPASS_MFA, 0);
	};

	RSA_PUBLIC_KEY() {
	    return this.getToken(SnowflakeParser.RSA_PUBLIC_KEY, 0);
	};

	RSA_PUBLIC_KEY_2() {
	    return this.getToken(SnowflakeParser.RSA_PUBLIC_KEY_2, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_properties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Session_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_session_params;
    }

	ABORT_DETACHED_QUERY() {
	    return this.getToken(SnowflakeParser.ABORT_DETACHED_QUERY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	AUTOCOMMIT() {
	    return this.getToken(SnowflakeParser.AUTOCOMMIT, 0);
	};

	BINARY_INPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.BINARY_INPUT_FORMAT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	BINARY_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.BINARY_OUTPUT_FORMAT, 0);
	};

	DATE_INPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.DATE_INPUT_FORMAT, 0);
	};

	DATE_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.DATE_OUTPUT_FORMAT, 0);
	};

	ERROR_ON_NONDETERMINISTIC_MERGE() {
	    return this.getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_MERGE, 0);
	};

	ERROR_ON_NONDETERMINISTIC_UPDATE() {
	    return this.getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_UPDATE, 0);
	};

	JSON_INDENT() {
	    return this.getToken(SnowflakeParser.JSON_INDENT, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	LOCK_TIMEOUT() {
	    return this.getToken(SnowflakeParser.LOCK_TIMEOUT, 0);
	};

	QUERY_TAG() {
	    return this.getToken(SnowflakeParser.QUERY_TAG, 0);
	};

	ROWS_PER_RESULTSET() {
	    return this.getToken(SnowflakeParser.ROWS_PER_RESULTSET, 0);
	};

	SIMULATED_DATA_SHARING_CONSUMER() {
	    return this.getToken(SnowflakeParser.SIMULATED_DATA_SHARING_CONSUMER, 0);
	};

	STATEMENT_TIMEOUT_IN_SECONDS() {
	    return this.getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0);
	};

	STRICT_JSON_OUTPUT() {
	    return this.getToken(SnowflakeParser.STRICT_JSON_OUTPUT, 0);
	};

	TIMESTAMP_DAY_IS_ALWAYS_24H() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_DAY_IS_ALWAYS_24H, 0);
	};

	TIMESTAMP_INPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_INPUT_FORMAT, 0);
	};

	TIMESTAMP_LTZ_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_LTZ_OUTPUT_FORMAT, 0);
	};

	TIMESTAMP_NTZ_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_NTZ_OUTPUT_FORMAT, 0);
	};

	TIMESTAMP_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_OUTPUT_FORMAT, 0);
	};

	TIMESTAMP_TYPE_MAPPING() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_TYPE_MAPPING, 0);
	};

	TIMESTAMP_TZ_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_TZ_OUTPUT_FORMAT, 0);
	};

	TIMEZONE() {
	    return this.getToken(SnowflakeParser.TIMEZONE, 0);
	};

	TIME_INPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIME_INPUT_FORMAT, 0);
	};

	TIME_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIME_OUTPUT_FORMAT, 0);
	};

	TRANSACTION_DEFAULT_ISOLATION_LEVEL() {
	    return this.getToken(SnowflakeParser.TRANSACTION_DEFAULT_ISOLATION_LEVEL, 0);
	};

	TWO_DIGIT_CENTURY_START() {
	    return this.getToken(SnowflakeParser.TWO_DIGIT_CENTURY_START, 0);
	};

	UNSUPPORTED_DDL_ACTION() {
	    return this.getToken(SnowflakeParser.UNSUPPORTED_DDL_ACTION, 0);
	};

	USE_CACHED_RESULT() {
	    return this.getToken(SnowflakeParser.USE_CACHED_RESULT, 0);
	};

	WEEK_OF_YEAR_POLICY() {
	    return this.getToken(SnowflakeParser.WEEK_OF_YEAR_POLICY, 0);
	};

	WEEK_START() {
	    return this.getToken(SnowflakeParser.WEEK_START, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSession_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_accountContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_account;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	alter_account_opts() {
	    return this.getTypedRuleContext(Alter_account_optsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_account(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enabled_true_falseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_enabled_true_false;
    }

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitEnabled_true_false(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_alertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_alert;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	ALERT() {
	    return this.getToken(SnowflakeParser.ALERT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	resume_suspend() {
	    return this.getTypedRuleContext(Resume_suspendContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	MODIFY() {
	    return this.getToken(SnowflakeParser.MODIFY, 0);
	};

	CONDITION() {
	    return this.getToken(SnowflakeParser.CONDITION, 0);
	};

	EXISTS() {
	    return this.getToken(SnowflakeParser.EXISTS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	alert_condition() {
	    return this.getTypedRuleContext(Alert_conditionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	ACTION() {
	    return this.getToken(SnowflakeParser.ACTION, 0);
	};

	alert_action() {
	    return this.getTypedRuleContext(Alert_actionContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	alert_set_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alert_set_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Alert_set_clauseContext,i);
	    }
	};

	alert_unset_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alert_unset_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Alert_unset_clauseContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_alert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Resume_suspendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_resume_suspend;
    }

	RESUME() {
	    return this.getToken(SnowflakeParser.RESUME, 0);
	};

	SUSPEND() {
	    return this.getToken(SnowflakeParser.SUSPEND, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitResume_suspend(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alert_set_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alert_set_clause;
    }

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEDULE() {
	    return this.getToken(SnowflakeParser.SCHEDULE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlert_set_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alert_unset_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alert_unset_clause;
    }

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	SCHEDULE() {
	    return this.getToken(SnowflakeParser.SCHEDULE, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlert_unset_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_api_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_api_integration;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	API() {
	    return this.getToken(SnowflakeParser.API, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	API_AWS_ROLE_ARN() {
	    return this.getToken(SnowflakeParser.API_AWS_ROLE_ARN, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	AZURE_AD_APPLICATION_ID() {
	    return this.getToken(SnowflakeParser.AZURE_AD_APPLICATION_ID, 0);
	};

	API_KEY() {
	    return this.getToken(SnowflakeParser.API_KEY, 0);
	};

	enabled_true_false() {
	    return this.getTypedRuleContext(Enabled_true_falseContext,0);
	};

	API_ALLOWED_PREFIXES() {
	    return this.getToken(SnowflakeParser.API_ALLOWED_PREFIXES, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	API_BLOCKED_PREFIXES() {
	    return this.getToken(SnowflakeParser.API_BLOCKED_PREFIXES, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	api_integration_property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Api_integration_propertyContext);
	    } else {
	        return this.getTypedRuleContext(Api_integration_propertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_api_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Api_integration_propertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_api_integration_property;
    }

	API_KEY() {
	    return this.getToken(SnowflakeParser.API_KEY, 0);
	};

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	API_BLOCKED_PREFIXES() {
	    return this.getToken(SnowflakeParser.API_BLOCKED_PREFIXES, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitApi_integration_property(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_connectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_connection;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	CONNECTION() {
	    return this.getToken(SnowflakeParser.CONNECTION, 0);
	};

	alter_connection_opts() {
	    return this.getTypedRuleContext(Alter_connection_optsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_connection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_databaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_database;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SWAP() {
	    return this.getToken(SnowflakeParser.SWAP, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	default_ddl_collation() {
	    return this.getTypedRuleContext(Default_ddl_collationContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	database_property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Database_propertyContext);
	    } else {
	        return this.getTypedRuleContext(Database_propertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	ENABLE() {
	    return this.getToken(SnowflakeParser.ENABLE, 0);
	};

	REPLICATION() {
	    return this.getToken(SnowflakeParser.REPLICATION, 0);
	};

	ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ACCOUNTS, 0);
	};

	account_id_list() {
	    return this.getTypedRuleContext(Account_id_listContext,0);
	};

	IGNORE() {
	    return this.getToken(SnowflakeParser.IGNORE, 0);
	};

	EDITION() {
	    return this.getToken(SnowflakeParser.EDITION, 0);
	};

	CHECK() {
	    return this.getToken(SnowflakeParser.CHECK, 0);
	};

	DISABLE() {
	    return this.getToken(SnowflakeParser.DISABLE, 0);
	};

	REFRESH() {
	    return this.getToken(SnowflakeParser.REFRESH, 0);
	};

	FAILOVER() {
	    return this.getToken(SnowflakeParser.FAILOVER, 0);
	};

	PRIMARY() {
	    return this.getToken(SnowflakeParser.PRIMARY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_database(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Database_propertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_database_property;
    }

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	DEFAULT_DDL_COLLATION_() {
	    return this.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDatabase_property(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Account_id_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_account_id_list;
    }

	account_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Account_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Account_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAccount_id_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_dynamic_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_dynamic_table;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	DYNAMIC() {
	    return this.getToken(SnowflakeParser.DYNAMIC, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	resume_suspend() {
	    return this.getTypedRuleContext(Resume_suspendContext,0);
	};

	REFRESH() {
	    return this.getToken(SnowflakeParser.REFRESH, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_dynamic_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_external_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_external_table;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	EXTERNAL() {
	    return this.getToken(SnowflakeParser.EXTERNAL, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	REFRESH() {
	    return this.getToken(SnowflakeParser.REFRESH, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	FILES() {
	    return this.getToken(SnowflakeParser.FILES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	string_list() {
	    return this.getTypedRuleContext(String_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	REMOVE() {
	    return this.getToken(SnowflakeParser.REMOVE, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	AUTO_REFRESH() {
	    return this.getToken(SnowflakeParser.AUTO_REFRESH, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	tag_decl_list() {
	    return this.getTypedRuleContext(Tag_decl_listContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	PARTITION() {
	    return this.getToken(SnowflakeParser.PARTITION, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	LOCATION() {
	    return this.getToken(SnowflakeParser.LOCATION, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_external_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ignore_edition_checkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_ignore_edition_check;
    }

	IGNORE() {
	    return this.getToken(SnowflakeParser.IGNORE, 0);
	};

	EDITION() {
	    return this.getToken(SnowflakeParser.EDITION, 0);
	};

	CHECK() {
	    return this.getToken(SnowflakeParser.CHECK, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIgnore_edition_check(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Replication_scheduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_replication_schedule;
    }

	REPLICATION_SCHEDULE() {
	    return this.getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitReplication_schedule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Db_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_db_name_list;
    }

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDb_name_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Share_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_share_name_list;
    }

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShare_name_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Full_acct_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_full_acct_list;
    }

	full_acct = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Full_acctContext);
	    } else {
	        return this.getTypedRuleContext(Full_acctContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFull_acct_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_failover_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_failover_group;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	FAILOVER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.FAILOVER);
	    } else {
	        return this.getToken(SnowflakeParser.FAILOVER, i);
	    }
	};


	GROUP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.GROUP);
	    } else {
	        return this.getToken(SnowflakeParser.GROUP, i);
	    }
	};


	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	OBJECT_TYPES() {
	    return this.getToken(SnowflakeParser.OBJECT_TYPES, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	object_type_list() {
	    return this.getTypedRuleContext(Object_type_listContext,0);
	};

	replication_schedule() {
	    return this.getTypedRuleContext(Replication_scheduleContext,0);
	};

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	db_name_list() {
	    return this.getTypedRuleContext(Db_name_listContext,0);
	};

	ALLOWED_DATABASES() {
	    return this.getToken(SnowflakeParser.ALLOWED_DATABASES, 0);
	};

	MOVE() {
	    return this.getToken(SnowflakeParser.MOVE, 0);
	};

	DATABASES() {
	    return this.getToken(SnowflakeParser.DATABASES, 0);
	};

	REMOVE() {
	    return this.getToken(SnowflakeParser.REMOVE, 0);
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	share_name_list() {
	    return this.getTypedRuleContext(Share_name_listContext,0);
	};

	ALLOWED_SHARES() {
	    return this.getToken(SnowflakeParser.ALLOWED_SHARES, 0);
	};

	SHARES() {
	    return this.getToken(SnowflakeParser.SHARES, 0);
	};

	full_acct_list() {
	    return this.getTypedRuleContext(Full_acct_listContext,0);
	};

	ALLOWED_ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0);
	};

	ignore_edition_check() {
	    return this.getTypedRuleContext(Ignore_edition_checkContext,0);
	};

	REFRESH() {
	    return this.getToken(SnowflakeParser.REFRESH, 0);
	};

	PRIMARY() {
	    return this.getToken(SnowflakeParser.PRIMARY, 0);
	};

	SUSPEND() {
	    return this.getToken(SnowflakeParser.SUSPEND, 0);
	};

	RESUME() {
	    return this.getToken(SnowflakeParser.RESUME, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_failover_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_file_formatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_file_format;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	FILE() {
	    return this.getToken(SnowflakeParser.FILE, 0);
	};

	FORMAT() {
	    return this.getToken(SnowflakeParser.FORMAT, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	format_type_options = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Format_type_optionsContext);
	    } else {
	        return this.getTypedRuleContext(Format_type_optionsContext,i);
	    }
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_file_format(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_function;
    }

	alter_function_signature() {
	    return this.getTypedRuleContext(Alter_function_signatureContext,0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	SECURE() {
	    return this.getToken(SnowflakeParser.SECURE, 0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	API_INTEGRATION() {
	    return this.getToken(SnowflakeParser.API_INTEGRATION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	HEADERS() {
	    return this.getToken(SnowflakeParser.HEADERS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	header_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Header_declContext);
	    } else {
	        return this.getTypedRuleContext(Header_declContext,i);
	    }
	};

	CONTEXT_HEADERS() {
	    return this.getToken(SnowflakeParser.CONTEXT_HEADERS, 0);
	};

	MAX_BATCH_ROWS() {
	    return this.getToken(SnowflakeParser.MAX_BATCH_ROWS, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	COMPRESSION() {
	    return this.getToken(SnowflakeParser.COMPRESSION, 0);
	};

	compression_type() {
	    return this.getTypedRuleContext(Compression_typeContext,0);
	};

	REQUEST_TRANSLATOR() {
	    return this.getToken(SnowflakeParser.REQUEST_TRANSLATOR, 0);
	};

	RESPONSE_TRANSLATOR() {
	    return this.getToken(SnowflakeParser.RESPONSE_TRANSLATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_function_signatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_function_signature;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	FUNCTION() {
	    return this.getToken(SnowflakeParser.FUNCTION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	data_type_list() {
	    return this.getTypedRuleContext(Data_type_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_function_signature(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Data_type_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_data_type_list;
    }

	data_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Data_typeContext);
	    } else {
	        return this.getTypedRuleContext(Data_typeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitData_type_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_masking_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_masking_policy;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	BODY() {
	    return this.getToken(SnowflakeParser.BODY, 0);
	};

	ARROW() {
	    return this.getToken(SnowflakeParser.ARROW, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_masking_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_materialized_viewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_materialized_view;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SnowflakeParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	CLUSTER() {
	    return this.getToken(SnowflakeParser.CLUSTER, 0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	CLUSTERING() {
	    return this.getToken(SnowflakeParser.CLUSTERING, 0);
	};

	KEY() {
	    return this.getToken(SnowflakeParser.KEY, 0);
	};

	resume_suspend() {
	    return this.getTypedRuleContext(Resume_suspendContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	SECURE() {
	    return this.getToken(SnowflakeParser.SECURE, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	RECLUSTER() {
	    return this.getToken(SnowflakeParser.RECLUSTER, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_materialized_view(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_network_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_network_policy;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	NETWORK() {
	    return this.getToken(SnowflakeParser.NETWORK, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	alter_network_policy_opts() {
	    return this.getTypedRuleContext(Alter_network_policy_optsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_network_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_notification_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_notification_integration;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	cloud_provider_params_auto() {
	    return this.getTypedRuleContext(Cloud_provider_params_autoContext,0);
	};

	NOTIFICATION() {
	    return this.getToken(SnowflakeParser.NOTIFICATION, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	enabled_true_false() {
	    return this.getTypedRuleContext(Enabled_true_falseContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	cloud_provider_params_push() {
	    return this.getTypedRuleContext(Cloud_provider_params_pushContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_notification_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_pipeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_pipe;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	PIPE() {
	    return this.getToken(SnowflakeParser.PIPE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	object_properties() {
	    return this.getTypedRuleContext(Object_propertiesContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	PIPE_EXECUTION_PAUSED() {
	    return this.getToken(SnowflakeParser.PIPE_EXECUTION_PAUSED, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	REFRESH() {
	    return this.getToken(SnowflakeParser.REFRESH, 0);
	};

	PREFIX() {
	    return this.getToken(SnowflakeParser.PREFIX, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	MODIFIED_AFTER() {
	    return this.getToken(SnowflakeParser.MODIFIED_AFTER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_pipe(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_procedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_procedure;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	PROCEDURE() {
	    return this.getToken(SnowflakeParser.PROCEDURE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	data_type_list() {
	    return this.getTypedRuleContext(Data_type_listContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	EXECUTE() {
	    return this.getToken(SnowflakeParser.EXECUTE, 0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	caller_owner() {
	    return this.getTypedRuleContext(Caller_ownerContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_procedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_replication_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_replication_group;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	REPLICATION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.REPLICATION);
	    } else {
	        return this.getToken(SnowflakeParser.REPLICATION, i);
	    }
	};


	GROUP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.GROUP);
	    } else {
	        return this.getToken(SnowflakeParser.GROUP, i);
	    }
	};


	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	OBJECT_TYPES() {
	    return this.getToken(SnowflakeParser.OBJECT_TYPES, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	object_type_list() {
	    return this.getTypedRuleContext(Object_type_listContext,0);
	};

	REPLICATION_SCHEDULE() {
	    return this.getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	ALLOWED_INTEGRATION_TYPES() {
	    return this.getToken(SnowflakeParser.ALLOWED_INTEGRATION_TYPES, 0);
	};

	integration_type_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Integration_type_nameContext);
	    } else {
	        return this.getTypedRuleContext(Integration_type_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	db_name_list() {
	    return this.getTypedRuleContext(Db_name_listContext,0);
	};

	ALLOWED_DATABASES() {
	    return this.getToken(SnowflakeParser.ALLOWED_DATABASES, 0);
	};

	MOVE() {
	    return this.getToken(SnowflakeParser.MOVE, 0);
	};

	DATABASES() {
	    return this.getToken(SnowflakeParser.DATABASES, 0);
	};

	REMOVE() {
	    return this.getToken(SnowflakeParser.REMOVE, 0);
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	share_name_list() {
	    return this.getTypedRuleContext(Share_name_listContext,0);
	};

	ALLOWED_SHARES() {
	    return this.getToken(SnowflakeParser.ALLOWED_SHARES, 0);
	};

	SHARES() {
	    return this.getToken(SnowflakeParser.SHARES, 0);
	};

	account_id_list() {
	    return this.getTypedRuleContext(Account_id_listContext,0);
	};

	ALLOWED_ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0);
	};

	ignore_edition_check() {
	    return this.getTypedRuleContext(Ignore_edition_checkContext,0);
	};

	REFRESH() {
	    return this.getToken(SnowflakeParser.REFRESH, 0);
	};

	SUSPEND() {
	    return this.getToken(SnowflakeParser.SUSPEND, 0);
	};

	RESUME() {
	    return this.getToken(SnowflakeParser.RESUME, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_replication_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Credit_quotaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_credit_quota;
    }

	CREDIT_QUOTA() {
	    return this.getToken(SnowflakeParser.CREDIT_QUOTA, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCredit_quota(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FrequencyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_frequency;
    }

	FREQUENCY() {
	    return this.getToken(SnowflakeParser.FREQUENCY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	MONTHLY() {
	    return this.getToken(SnowflakeParser.MONTHLY, 0);
	};

	DAILY() {
	    return this.getToken(SnowflakeParser.DAILY, 0);
	};

	WEEKLY() {
	    return this.getToken(SnowflakeParser.WEEKLY, 0);
	};

	YEARLY() {
	    return this.getToken(SnowflakeParser.YEARLY, 0);
	};

	NEVER() {
	    return this.getToken(SnowflakeParser.NEVER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFrequency(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Notify_usersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_notify_users;
    }

	NOTIFY_USERS() {
	    return this.getToken(SnowflakeParser.NOTIFY_USERS, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitNotify_users(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_triggerDefinition;
    }

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	PERCENT() {
	    return this.getToken(SnowflakeParser.PERCENT, 0);
	};

	DO() {
	    return this.getToken(SnowflakeParser.DO, 0);
	};

	SUSPEND() {
	    return this.getToken(SnowflakeParser.SUSPEND, 0);
	};

	SUSPEND_IMMEDIATE() {
	    return this.getToken(SnowflakeParser.SUSPEND_IMMEDIATE, 0);
	};

	NOTIFY() {
	    return this.getToken(SnowflakeParser.NOTIFY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTriggerDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_resource_monitorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_resource_monitor;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	RESOURCE() {
	    return this.getToken(SnowflakeParser.RESOURCE, 0);
	};

	MONITOR() {
	    return this.getToken(SnowflakeParser.MONITOR, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	notify_users() {
	    return this.getTypedRuleContext(Notify_usersContext,0);
	};

	credit_quota() {
	    return this.getTypedRuleContext(Credit_quotaContext,0);
	};

	frequency() {
	    return this.getTypedRuleContext(FrequencyContext,0);
	};

	START_TIMESTAMP() {
	    return this.getToken(SnowflakeParser.START_TIMESTAMP, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	IMMEDIATELY() {
	    return this.getToken(SnowflakeParser.IMMEDIATELY, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	END_TIMESTAMP() {
	    return this.getToken(SnowflakeParser.END_TIMESTAMP, 0);
	};

	TRIGGERS() {
	    return this.getToken(SnowflakeParser.TRIGGERS, 0);
	};

	triggerDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriggerDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(TriggerDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_resource_monitor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_role;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_row_access_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_row_access_policy;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	BODY() {
	    return this.getToken(SnowflakeParser.BODY, 0);
	};

	ARROW() {
	    return this.getToken(SnowflakeParser.ARROW, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_row_access_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_schema;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Schema_nameContext);
	    } else {
	        return this.getTypedRuleContext(Schema_nameContext,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SWAP() {
	    return this.getToken(SnowflakeParser.SWAP, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	default_ddl_collation() {
	    return this.getTypedRuleContext(Default_ddl_collationContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	schema_property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Schema_propertyContext);
	    } else {
	        return this.getTypedRuleContext(Schema_propertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	MANAGED() {
	    return this.getToken(SnowflakeParser.MANAGED, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	ENABLE() {
	    return this.getToken(SnowflakeParser.ENABLE, 0);
	};

	DISABLE() {
	    return this.getToken(SnowflakeParser.DISABLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_schema(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Schema_propertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_schema_property;
    }

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	DEFAULT_DDL_COLLATION_() {
	    return this.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSchema_property(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_sequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_sequence;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	SEQUENCE() {
	    return this.getToken(SnowflakeParser.SEQUENCE, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	INCREMENT() {
	    return this.getToken(SnowflakeParser.INCREMENT, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	order_noorder() {
	    return this.getTypedRuleContext(Order_noorderContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_sequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_security_integration_external_oauthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_security_integration_external_oauth;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	EXTERNAL_OAUTH() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH, 0);
	};

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	EXTERNAL_OAUTH_TYPE() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_TYPE, 0);
	};

	EXTERNAL_OAUTH_ISSUER() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ISSUER, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0);
	};

	EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0);
	};

	EXTERNAL_OAUTH_JWS_KEYS_URL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL);
	    } else {
	        return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL, i);
	    }
	};


	EXTERNAL_OAUTH_RSA_PUBLIC_KEY() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0);
	};

	EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0);
	};

	EXTERNAL_OAUTH_BLOCKED_ROLES_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	EXTERNAL_OAUTH_ALLOWED_ROLES_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0);
	};

	EXTERNAL_OAUTH_AUDIENCE_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0);
	};

	EXTERNAL_OAUTH_ANY_ROLE_MODE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE);
	    } else {
	        return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE, i);
	    }
	};


	OKTA() {
	    return this.getToken(SnowflakeParser.OKTA, 0);
	};

	AZURE() {
	    return this.getToken(SnowflakeParser.AZURE, 0);
	};

	PING_FEDERATE() {
	    return this.getToken(SnowflakeParser.PING_FEDERATE, 0);
	};

	CUSTOM() {
	    return this.getToken(SnowflakeParser.CUSTOM, 0);
	};

	DISABLE() {
	    return this.getToken(SnowflakeParser.DISABLE, 0);
	};

	ENABLE() {
	    return this.getToken(SnowflakeParser.ENABLE, 0);
	};

	ENABLE_FOR_PRIVILEGE() {
	    return this.getToken(SnowflakeParser.ENABLE_FOR_PRIVILEGE, 0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	security_integration_external_oauth_property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Security_integration_external_oauth_propertyContext);
	    } else {
	        return this.getTypedRuleContext(Security_integration_external_oauth_propertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_security_integration_external_oauth(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Security_integration_external_oauth_propertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_security_integration_external_oauth_property;
    }

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	NETWORK_POLICY() {
	    return this.getToken(SnowflakeParser.NETWORK_POLICY, 0);
	};

	OAUTH_CLIENT_RSA_PUBLIC_KEY() {
	    return this.getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY, 0);
	};

	OAUTH_CLIENT_RSA_PUBLIC_KEY_2() {
	    return this.getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2, 0);
	};

	OAUTH_USE_SECONDARY_ROLES() {
	    return this.getToken(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	IMPLICIT() {
	    return this.getToken(SnowflakeParser.IMPLICIT, 0);
	};

	NONE() {
	    return this.getToken(SnowflakeParser.NONE, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSecurity_integration_external_oauth_property(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_security_integration_snowflake_oauthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_security_integration_snowflake_oauth;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	EXTERNAL_OAUTH_SCOPE_DELIMITER() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EXTERNAL_OAUTH() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH, 0);
	};

	enabled_true_false() {
	    return this.getTypedRuleContext(Enabled_true_falseContext,0);
	};

	EXTERNAL_OAUTH_TYPE() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_TYPE, 0);
	};

	EXTERNAL_OAUTH_ISSUER() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ISSUER, 0);
	};

	EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0);
	};

	EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0);
	};

	EXTERNAL_OAUTH_JWS_KEYS_URL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL);
	    } else {
	        return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL, i);
	    }
	};


	EXTERNAL_OAUTH_RSA_PUBLIC_KEY() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0);
	};

	EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0);
	};

	EXTERNAL_OAUTH_BLOCKED_ROLES_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	EXTERNAL_OAUTH_ALLOWED_ROLES_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0);
	};

	EXTERNAL_OAUTH_AUDIENCE_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0);
	};

	EXTERNAL_OAUTH_ANY_ROLE_MODE() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE, 0);
	};

	DISABLE() {
	    return this.getToken(SnowflakeParser.DISABLE, 0);
	};

	ENABLE() {
	    return this.getToken(SnowflakeParser.ENABLE, 0);
	};

	ENABLE_FOR_PRIVILEGE() {
	    return this.getToken(SnowflakeParser.ENABLE_FOR_PRIVILEGE, 0);
	};

	OKTA() {
	    return this.getToken(SnowflakeParser.OKTA, 0);
	};

	AZURE() {
	    return this.getToken(SnowflakeParser.AZURE, 0);
	};

	PING_FEDERATE() {
	    return this.getToken(SnowflakeParser.PING_FEDERATE, 0);
	};

	CUSTOM() {
	    return this.getToken(SnowflakeParser.CUSTOM, 0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	security_integration_snowflake_oauth_property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Security_integration_snowflake_oauth_propertyContext);
	    } else {
	        return this.getTypedRuleContext(Security_integration_snowflake_oauth_propertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_security_integration_snowflake_oauth(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Security_integration_snowflake_oauth_propertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_security_integration_snowflake_oauth_property;
    }

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	EXTERNAL_OAUTH_AUDIENCE_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSecurity_integration_snowflake_oauth_property(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_security_integration_saml2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_security_integration_saml2;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	SAML2() {
	    return this.getToken(SnowflakeParser.SAML2, 0);
	};

	enabled_true_false() {
	    return this.getTypedRuleContext(Enabled_true_falseContext,0);
	};

	SAML2_ISSUER() {
	    return this.getToken(SnowflakeParser.SAML2_ISSUER, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	SAML2_SSO_URL() {
	    return this.getToken(SnowflakeParser.SAML2_SSO_URL, 0);
	};

	SAML2_PROVIDER() {
	    return this.getToken(SnowflakeParser.SAML2_PROVIDER, 0);
	};

	SAML2_X509_CERT() {
	    return this.getToken(SnowflakeParser.SAML2_X509_CERT, 0);
	};

	SAML2_SP_INITIATED_LOGIN_PAGE_LABEL() {
	    return this.getToken(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL, 0);
	};

	SAML2_ENABLE_SP_INITIATED() {
	    return this.getToken(SnowflakeParser.SAML2_ENABLE_SP_INITIATED, 0);
	};

	true_false = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(True_falseContext);
	    } else {
	        return this.getTypedRuleContext(True_falseContext,i);
	    }
	};

	SAML2_SNOWFLAKE_X509_CERT() {
	    return this.getToken(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT, 0);
	};

	SAML2_SIGN_REQUEST() {
	    return this.getToken(SnowflakeParser.SAML2_SIGN_REQUEST, 0);
	};

	SAML2_REQUESTED_NAMEID_FORMAT() {
	    return this.getToken(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT, 0);
	};

	SAML2_POST_LOGOUT_REDIRECT_URL() {
	    return this.getToken(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL, 0);
	};

	SAML2_FORCE_AUTHN() {
	    return this.getToken(SnowflakeParser.SAML2_FORCE_AUTHN, 0);
	};

	SAML2_SNOWFLAKE_ISSUER_URL() {
	    return this.getToken(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL, 0);
	};

	SAML2_SNOWFLAKE_ACS_URL() {
	    return this.getToken(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL, 0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_security_integration_saml2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_security_integration_scimContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_security_integration_scim;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	NETWORK_POLICY() {
	    return this.getToken(SnowflakeParser.NETWORK_POLICY, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	SYNC_PASSWORD() {
	    return this.getToken(SnowflakeParser.SYNC_PASSWORD, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	security_integration_scim_property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Security_integration_scim_propertyContext);
	    } else {
	        return this.getTypedRuleContext(Security_integration_scim_propertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_security_integration_scim(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Security_integration_scim_propertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_security_integration_scim_property;
    }

	NETWORK_POLICY() {
	    return this.getToken(SnowflakeParser.NETWORK_POLICY, 0);
	};

	SYNC_PASSWORD() {
	    return this.getToken(SnowflakeParser.SYNC_PASSWORD, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSecurity_integration_scim_property(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_sessionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_session;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	session_params() {
	    return this.getTypedRuleContext(Session_paramsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	param_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_nameContext);
	    } else {
	        return this.getTypedRuleContext(Param_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_session(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_session_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_session_policy;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	session_policy_params = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Session_policy_paramsContext);
	    } else {
	        return this.getTypedRuleContext(Session_policy_paramsContext,i);
	    }
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	session_policy_param_name() {
	    return this.getTypedRuleContext(Session_policy_param_nameContext,0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_session_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_password_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_password_policy;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	PASSWORD() {
	    return this.getToken(SnowflakeParser.PASSWORD, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	password_policy_params = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Password_policy_paramsContext);
	    } else {
	        return this.getTypedRuleContext(Password_policy_paramsContext,i);
	    }
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	password_policy_param_name() {
	    return this.getTypedRuleContext(Password_policy_param_nameContext,0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_password_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_shareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_share;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	SHARE() {
	    return this.getToken(SnowflakeParser.SHARE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ACCOUNTS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	REMOVE() {
	    return this.getToken(SnowflakeParser.REMOVE, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	SHARE_RESTRICTIONS() {
	    return this.getToken(SnowflakeParser.SHARE_RESTRICTIONS, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_share(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_storage_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_storage_integration;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	STORAGE() {
	    return this.getToken(SnowflakeParser.STORAGE, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	cloud_provider_params2() {
	    return this.getTypedRuleContext(Cloud_provider_params2Context,0);
	};

	enabled_true_false() {
	    return this.getTypedRuleContext(Enabled_true_falseContext,0);
	};

	STORAGE_ALLOWED_LOCATIONS() {
	    return this.getToken(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	STORAGE_BLOCKED_LOCATIONS() {
	    return this.getToken(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_storage_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_streamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_stream;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	STREAM() {
	    return this.getToken(SnowflakeParser.STREAM, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	tag_decl_list() {
	    return this.getTypedRuleContext(Tag_decl_listContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_stream(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_table;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SWAP() {
	    return this.getToken(SnowflakeParser.SWAP, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	clustering_action() {
	    return this.getTypedRuleContext(Clustering_actionContext,0);
	};

	table_column_action() {
	    return this.getTypedRuleContext(Table_column_actionContext,0);
	};

	constraint_action() {
	    return this.getTypedRuleContext(Constraint_actionContext,0);
	};

	ext_table_column_action() {
	    return this.getTypedRuleContext(Ext_table_column_actionContext,0);
	};

	search_optimization_action() {
	    return this.getTypedRuleContext(Search_optimization_actionContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	stage_file_format() {
	    return this.getTypedRuleContext(Stage_file_formatContext,0);
	};

	STAGE_COPY_OPTIONS() {
	    return this.getToken(SnowflakeParser.STAGE_COPY_OPTIONS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	copy_options() {
	    return this.getTypedRuleContext(Copy_optionsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	CHANGE_TRACKING() {
	    return this.getToken(SnowflakeParser.CHANGE_TRACKING, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	default_ddl_collation() {
	    return this.getTypedRuleContext(Default_ddl_collationContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	DEFAULT_DDL_COLLATION_() {
	    return this.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	ROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ROW);
	    } else {
	        return this.getToken(SnowflakeParser.ROW, i);
	    }
	};


	ACCESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ACCESS);
	    } else {
	        return this.getToken(SnowflakeParser.ACCESS, i);
	    }
	};


	POLICY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.POLICY);
	    } else {
	        return this.getToken(SnowflakeParser.POLICY, i);
	    }
	};


	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	column_list_in_parentheses() {
	    return this.getTypedRuleContext(Column_list_in_parenthesesContext,0);
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	POLICIES() {
	    return this.getToken(SnowflakeParser.POLICIES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Clustering_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_clustering_action;
    }

	CLUSTER() {
	    return this.getToken(SnowflakeParser.CLUSTER, 0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	RECLUSTER() {
	    return this.getToken(SnowflakeParser.RECLUSTER, 0);
	};

	MAX_SIZE() {
	    return this.getToken(SnowflakeParser.MAX_SIZE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	WHERE() {
	    return this.getToken(SnowflakeParser.WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	resume_suspend() {
	    return this.getTypedRuleContext(Resume_suspendContext,0);
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	CLUSTERING() {
	    return this.getToken(SnowflakeParser.CLUSTERING, 0);
	};

	KEY() {
	    return this.getToken(SnowflakeParser.KEY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitClustering_action(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_column_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_table_column_action;
    }

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	full_col_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Full_col_declContext);
	    } else {
	        return this.getTypedRuleContext(Full_col_declContext,i);
	    }
	};

	COLUMN() {
	    return this.getToken(SnowflakeParser.COLUMN, 0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	alter_modify() {
	    return this.getTypedRuleContext(Alter_modifyContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	alter_column_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_column_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Alter_column_clauseContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	USING() {
	    return this.getToken(SnowflakeParser.USING, 0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	FORCE() {
	    return this.getToken(SnowflakeParser.FORCE, 0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	column_set_tags = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_set_tagsContext);
	    } else {
	        return this.getTypedRuleContext(Column_set_tagsContext,i);
	    }
	};

	column_unset_tags = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_unset_tagsContext);
	    } else {
	        return this.getTypedRuleContext(Column_unset_tagsContext,i);
	    }
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTable_column_action(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_column_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_column_clause;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	DEFAULT() {
	    return this.getToken(SnowflakeParser.DEFAULT, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	DOT() {
	    return this.getToken(SnowflakeParser.DOT, 0);
	};

	NEXTVAL() {
	    return this.getToken(SnowflakeParser.NEXTVAL, 0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COLUMN() {
	    return this.getToken(SnowflakeParser.COLUMN, 0);
	};

	NOT() {
	    return this.getToken(SnowflakeParser.NOT, 0);
	};

	NULL_() {
	    return this.getToken(SnowflakeParser.NULL_, 0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	DATA() {
	    return this.getToken(SnowflakeParser.DATA, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_column_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Inline_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_inline_constraint;
    }

	foreign_key() {
	    return this.getTypedRuleContext(Foreign_keyContext,0);
	};

	REFERENCES() {
	    return this.getToken(SnowflakeParser.REFERENCES, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	constraint_properties() {
	    return this.getTypedRuleContext(Constraint_propertiesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(SnowflakeParser.CONSTRAINT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	UNIQUE() {
	    return this.getToken(SnowflakeParser.UNIQUE, 0);
	};

	primary_key() {
	    return this.getTypedRuleContext(Primary_keyContext,0);
	};

	common_constraint_properties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_constraint_propertiesContext);
	    } else {
	        return this.getTypedRuleContext(Common_constraint_propertiesContext,i);
	    }
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitInline_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enforced_not_enforcedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_enforced_not_enforced;
    }

	ENFORCED() {
	    return this.getToken(SnowflakeParser.ENFORCED, 0);
	};

	NOT() {
	    return this.getToken(SnowflakeParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitEnforced_not_enforced(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Deferrable_not_deferrableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_deferrable_not_deferrable;
    }

	DEFERRABLE() {
	    return this.getToken(SnowflakeParser.DEFERRABLE, 0);
	};

	NOT() {
	    return this.getToken(SnowflakeParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDeferrable_not_deferrable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Initially_deferred_or_immediateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_initially_deferred_or_immediate;
    }

	INITIALLY() {
	    return this.getToken(SnowflakeParser.INITIALLY, 0);
	};

	DEFERRED() {
	    return this.getToken(SnowflakeParser.DEFERRED, 0);
	};

	IMMEDIATE() {
	    return this.getToken(SnowflakeParser.IMMEDIATE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitInitially_deferred_or_immediate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Common_constraint_propertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_common_constraint_properties;
    }

	enforced_not_enforced() {
	    return this.getTypedRuleContext(Enforced_not_enforcedContext,0);
	};

	VALIDATE() {
	    return this.getToken(SnowflakeParser.VALIDATE, 0);
	};

	NOVALIDATE() {
	    return this.getToken(SnowflakeParser.NOVALIDATE, 0);
	};

	deferrable_not_deferrable() {
	    return this.getTypedRuleContext(Deferrable_not_deferrableContext,0);
	};

	initially_deferred_or_immediate() {
	    return this.getTypedRuleContext(Initially_deferred_or_immediateContext,0);
	};

	ENABLE() {
	    return this.getToken(SnowflakeParser.ENABLE, 0);
	};

	DISABLE() {
	    return this.getToken(SnowflakeParser.DISABLE, 0);
	};

	RELY() {
	    return this.getToken(SnowflakeParser.RELY, 0);
	};

	NORELY() {
	    return this.getToken(SnowflakeParser.NORELY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCommon_constraint_properties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class On_updateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_on_update;
    }

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	UPDATE() {
	    return this.getToken(SnowflakeParser.UPDATE, 0);
	};

	on_action() {
	    return this.getTypedRuleContext(On_actionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOn_update(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class On_deleteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_on_delete;
    }

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	DELETE() {
	    return this.getToken(SnowflakeParser.DELETE, 0);
	};

	on_action() {
	    return this.getTypedRuleContext(On_actionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOn_delete(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Foreign_key_matchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_foreign_key_match;
        this.match_type = null;
    }

	MATCH() {
	    return this.getToken(SnowflakeParser.MATCH, 0);
	};

	FULL() {
	    return this.getToken(SnowflakeParser.FULL, 0);
	};

	PARTIAL() {
	    return this.getToken(SnowflakeParser.PARTIAL, 0);
	};

	SIMPLE() {
	    return this.getToken(SnowflakeParser.SIMPLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitForeign_key_match(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class On_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_on_action;
    }

	CASCADE() {
	    return this.getToken(SnowflakeParser.CASCADE, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	NULL_() {
	    return this.getToken(SnowflakeParser.NULL_, 0);
	};

	DEFAULT() {
	    return this.getToken(SnowflakeParser.DEFAULT, 0);
	};

	RESTRICT() {
	    return this.getToken(SnowflakeParser.RESTRICT, 0);
	};

	NO() {
	    return this.getToken(SnowflakeParser.NO, 0);
	};

	ACTION() {
	    return this.getToken(SnowflakeParser.ACTION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOn_action(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constraint_propertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_constraint_properties;
    }

	common_constraint_properties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_constraint_propertiesContext);
	    } else {
	        return this.getTypedRuleContext(Common_constraint_propertiesContext,i);
	    }
	};

	foreign_key_match() {
	    return this.getTypedRuleContext(Foreign_key_matchContext,0);
	};

	on_update() {
	    return this.getTypedRuleContext(On_updateContext,0);
	};

	on_delete() {
	    return this.getTypedRuleContext(On_deleteContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitConstraint_properties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ext_table_column_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_ext_table_column_action;
    }

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COLUMN() {
	    return this.getToken(SnowflakeParser.COLUMN, 0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExt_table_column_action(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constraint_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_constraint_action;
    }

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	out_of_line_constraint() {
	    return this.getTypedRuleContext(Out_of_line_constraintContext,0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	CONSTRAINT() {
	    return this.getToken(SnowflakeParser.CONSTRAINT, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	alter_modify() {
	    return this.getTypedRuleContext(Alter_modifyContext,0);
	};

	column_list_in_parentheses() {
	    return this.getTypedRuleContext(Column_list_in_parenthesesContext,0);
	};

	VALIDATE() {
	    return this.getToken(SnowflakeParser.VALIDATE, 0);
	};

	NOVALIDATE() {
	    return this.getToken(SnowflakeParser.NOVALIDATE, 0);
	};

	RELY() {
	    return this.getToken(SnowflakeParser.RELY, 0);
	};

	NORELY() {
	    return this.getToken(SnowflakeParser.NORELY, 0);
	};

	primary_key() {
	    return this.getTypedRuleContext(Primary_keyContext,0);
	};

	UNIQUE() {
	    return this.getToken(SnowflakeParser.UNIQUE, 0);
	};

	foreign_key() {
	    return this.getTypedRuleContext(Foreign_keyContext,0);
	};

	enforced_not_enforced() {
	    return this.getTypedRuleContext(Enforced_not_enforcedContext,0);
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	cascade_restrict() {
	    return this.getTypedRuleContext(Cascade_restrictContext,0);
	};

	PRIMARY() {
	    return this.getToken(SnowflakeParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(SnowflakeParser.KEY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitConstraint_action(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Search_optimization_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_search_optimization_action;
    }

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	SEARCH() {
	    return this.getToken(SnowflakeParser.SEARCH, 0);
	};

	OPTIMIZATION() {
	    return this.getToken(SnowflakeParser.OPTIMIZATION, 0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	search_method_with_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Search_method_with_targetContext);
	    } else {
	        return this.getTypedRuleContext(Search_method_with_targetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSearch_optimization_action(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Search_method_with_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_search_method_with_target;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	EQUALITY() {
	    return this.getToken(SnowflakeParser.EQUALITY, 0);
	};

	SUBSTRING() {
	    return this.getToken(SnowflakeParser.SUBSTRING, 0);
	};

	GEO() {
	    return this.getToken(SnowflakeParser.GEO, 0);
	};

	STAR() {
	    return this.getToken(SnowflakeParser.STAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSearch_method_with_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_table_alter_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_table_alter_column;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	alter_modify() {
	    return this.getTypedRuleContext(Alter_modifyContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	alter_column_decl_list() {
	    return this.getTypedRuleContext(Alter_column_decl_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COLUMN() {
	    return this.getToken(SnowflakeParser.COLUMN, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	USING() {
	    return this.getToken(SnowflakeParser.USING, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	FORCE() {
	    return this.getToken(SnowflakeParser.FORCE, 0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	column_set_tags = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_set_tagsContext);
	    } else {
	        return this.getTypedRuleContext(Column_set_tagsContext,i);
	    }
	};

	column_unset_tags = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_unset_tagsContext);
	    } else {
	        return this.getTypedRuleContext(Column_unset_tagsContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_table_alter_column(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_column_decl_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_column_decl_list;
    }

	alter_column_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_column_declContext);
	    } else {
	        return this.getTypedRuleContext(Alter_column_declContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_column_decl_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_column_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_column_decl;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	alter_column_opts() {
	    return this.getTypedRuleContext(Alter_column_optsContext,0);
	};

	COLUMN() {
	    return this.getToken(SnowflakeParser.COLUMN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_column_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_column_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_column_opts;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	DEFAULT() {
	    return this.getToken(SnowflakeParser.DEFAULT, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	DOT() {
	    return this.getToken(SnowflakeParser.DOT, 0);
	};

	NEXTVAL() {
	    return this.getToken(SnowflakeParser.NEXTVAL, 0);
	};

	NOT() {
	    return this.getToken(SnowflakeParser.NOT, 0);
	};

	NULL_() {
	    return this.getToken(SnowflakeParser.NULL_, 0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	DATA() {
	    return this.getToken(SnowflakeParser.DATA, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_column_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_set_tagsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_set_tags;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	COLUMN() {
	    return this.getToken(SnowflakeParser.COLUMN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_set_tags(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_unset_tagsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_unset_tags;
    }

	COLUMN() {
	    return this.getToken(SnowflakeParser.COLUMN, 0);
	};

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_unset_tags(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_tagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_tag;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	alter_tag_opts() {
	    return this.getTypedRuleContext(Alter_tag_optsContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_tag(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_taskContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_task;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	resume_suspend() {
	    return this.getTypedRuleContext(Resume_suspendContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	AFTER() {
	    return this.getToken(SnowflakeParser.AFTER, 0);
	};

	string_list() {
	    return this.getTypedRuleContext(String_listContext,0);
	};

	REMOVE() {
	    return this.getToken(SnowflakeParser.REMOVE, 0);
	};

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	task_schedule() {
	    return this.getTypedRuleContext(Task_scheduleContext,0);
	};

	task_overlap() {
	    return this.getTypedRuleContext(Task_overlapContext,0);
	};

	task_timeout() {
	    return this.getTypedRuleContext(Task_timeoutContext,0);
	};

	task_suspend_after_failure_number() {
	    return this.getTypedRuleContext(Task_suspend_after_failure_numberContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	session_params_list() {
	    return this.getTypedRuleContext(Session_params_listContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	SCHEDULE() {
	    return this.getToken(SnowflakeParser.SCHEDULE, 0);
	};

	ALLOW_OVERLAPPING_EXECUTION() {
	    return this.getToken(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION, 0);
	};

	USER_TASK_TIMEOUT_MS() {
	    return this.getToken(SnowflakeParser.USER_TASK_TIMEOUT_MS, 0);
	};

	SUSPEND_TASK_AFTER_NUM_FAILURES() {
	    return this.getToken(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	session_parameter_list() {
	    return this.getTypedRuleContext(Session_parameter_listContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	MODIFY() {
	    return this.getToken(SnowflakeParser.MODIFY, 0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	sql() {
	    return this.getTypedRuleContext(SqlContext,0);
	};

	WHEN() {
	    return this.getToken(SnowflakeParser.WHEN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_task(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_userContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_user;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	alter_user_opts() {
	    return this.getTypedRuleContext(Alter_user_optsContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_user(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_viewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_view;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	SECURE() {
	    return this.getToken(SnowflakeParser.SECURE, 0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	ROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ROW);
	    } else {
	        return this.getToken(SnowflakeParser.ROW, i);
	    }
	};


	ACCESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ACCESS);
	    } else {
	        return this.getToken(SnowflakeParser.ACCESS, i);
	    }
	};


	POLICY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.POLICY);
	    } else {
	        return this.getToken(SnowflakeParser.POLICY, i);
	    }
	};


	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	column_list_in_parentheses() {
	    return this.getTypedRuleContext(Column_list_in_parenthesesContext,0);
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	POLICIES() {
	    return this.getToken(SnowflakeParser.POLICIES, 0);
	};

	alter_modify() {
	    return this.getTypedRuleContext(Alter_modifyContext,0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	COLUMN() {
	    return this.getToken(SnowflakeParser.COLUMN, 0);
	};

	USING() {
	    return this.getToken(SnowflakeParser.USING, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	FORCE() {
	    return this.getToken(SnowflakeParser.FORCE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_view(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_modifyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_modify;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	MODIFY() {
	    return this.getToken(SnowflakeParser.MODIFY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_modify(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_warehouseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_warehouse;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	alter_warehouse_opts() {
	    return this.getTypedRuleContext(Alter_warehouse_optsContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_warehouse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_connection_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_connection_opts;
    }

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ENABLE() {
	    return this.getToken(SnowflakeParser.ENABLE, 0);
	};

	FAILOVER() {
	    return this.getToken(SnowflakeParser.FAILOVER, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ACCOUNTS, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.DOT);
	    } else {
	        return this.getToken(SnowflakeParser.DOT, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	ignore_edition_check() {
	    return this.getTypedRuleContext(Ignore_edition_checkContext,0);
	};

	DISABLE() {
	    return this.getToken(SnowflakeParser.DISABLE, 0);
	};

	PRIMARY() {
	    return this.getToken(SnowflakeParser.PRIMARY, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_connection_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_user_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_user_opts;
    }

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RESET() {
	    return this.getToken(SnowflakeParser.RESET, 0);
	};

	PASSWORD() {
	    return this.getToken(SnowflakeParser.PASSWORD, 0);
	};

	ABORT() {
	    return this.getToken(SnowflakeParser.ABORT, 0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	QUERIES() {
	    return this.getToken(SnowflakeParser.QUERIES, 0);
	};

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	DELEGATED() {
	    return this.getToken(SnowflakeParser.DELEGATED, 0);
	};

	AUTHORIZATION() {
	    return this.getToken(SnowflakeParser.AUTHORIZATION, 0);
	};

	OF() {
	    return this.getToken(SnowflakeParser.OF, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	REMOVE() {
	    return this.getToken(SnowflakeParser.REMOVE, 0);
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	AUTHORIZATIONS() {
	    return this.getToken(SnowflakeParser.AUTHORIZATIONS, 0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_user_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_tag_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_tag_opts;
    }

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	tag_allowed_values() {
	    return this.getTypedRuleContext(Tag_allowed_valuesContext,0);
	};

	ADD() {
	    return this.getToken(SnowflakeParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	ALLOWED_VALUES() {
	    return this.getToken(SnowflakeParser.ALLOWED_VALUES, 0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	MASKING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.MASKING);
	    } else {
	        return this.getToken(SnowflakeParser.MASKING, i);
	    }
	};


	POLICY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.POLICY);
	    } else {
	        return this.getToken(SnowflakeParser.POLICY, i);
	    }
	};


	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_tag_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_network_policy_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_network_policy_opts;
    }

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	ALLOWED_IP_LIST() {
	    return this.getToken(SnowflakeParser.ALLOWED_IP_LIST, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	BLOCKED_IP_LIST() {
	    return this.getToken(SnowflakeParser.BLOCKED_IP_LIST, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_network_policy_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_warehouse_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_warehouse_opts;
    }

	SUSPEND() {
	    return this.getToken(SnowflakeParser.SUSPEND, 0);
	};

	RESUME() {
	    return this.getToken(SnowflakeParser.RESUME, 0);
	};

	id_fn() {
	    return this.getTypedRuleContext(Id_fnContext,0);
	};

	if_suspended() {
	    return this.getTypedRuleContext(If_suspendedContext,0);
	};

	ABORT() {
	    return this.getToken(SnowflakeParser.ABORT, 0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	QUERIES() {
	    return this.getToken(SnowflakeParser.QUERIES, 0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	wh_properties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Wh_propertiesContext);
	    } else {
	        return this.getTypedRuleContext(Wh_propertiesContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_warehouse_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_account_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_account_opts;
    }

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	account_params() {
	    return this.getTypedRuleContext(Account_paramsContext,0);
	};

	object_params() {
	    return this.getTypedRuleContext(Object_paramsContext,0);
	};

	session_params() {
	    return this.getTypedRuleContext(Session_paramsContext,0);
	};

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	param_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_nameContext);
	    } else {
	        return this.getTypedRuleContext(Param_nameContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	RESOURCE_MONITOR() {
	    return this.getToken(SnowflakeParser.RESOURCE_MONITOR, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	SAVE_OLD_URL() {
	    return this.getToken(SnowflakeParser.SAVE_OLD_URL, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	OLD() {
	    return this.getToken(SnowflakeParser.OLD, 0);
	};

	URL() {
	    return this.getToken(SnowflakeParser.URL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_account_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_tagsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_set_tags;
    }

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	tag_decl_list() {
	    return this.getTypedRuleContext(Tag_decl_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSet_tags(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Tag_decl_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_tag_decl_list;
    }

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	tag_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tag_valueContext);
	    } else {
	        return this.getTypedRuleContext(Tag_valueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTag_decl_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unset_tagsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_unset_tags;
    }

	UNSET() {
	    return this.getToken(SnowflakeParser.UNSET, 0);
	};

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUnset_tags(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_command;
    }

	create_account() {
	    return this.getTypedRuleContext(Create_accountContext,0);
	};

	create_alert() {
	    return this.getTypedRuleContext(Create_alertContext,0);
	};

	create_api_integration() {
	    return this.getTypedRuleContext(Create_api_integrationContext,0);
	};

	create_object_clone() {
	    return this.getTypedRuleContext(Create_object_cloneContext,0);
	};

	create_connection() {
	    return this.getTypedRuleContext(Create_connectionContext,0);
	};

	create_database() {
	    return this.getTypedRuleContext(Create_databaseContext,0);
	};

	create_dynamic_table() {
	    return this.getTypedRuleContext(Create_dynamic_tableContext,0);
	};

	create_event_table() {
	    return this.getTypedRuleContext(Create_event_tableContext,0);
	};

	create_external_function() {
	    return this.getTypedRuleContext(Create_external_functionContext,0);
	};

	create_external_table() {
	    return this.getTypedRuleContext(Create_external_tableContext,0);
	};

	create_failover_group() {
	    return this.getTypedRuleContext(Create_failover_groupContext,0);
	};

	create_file_format() {
	    return this.getTypedRuleContext(Create_file_formatContext,0);
	};

	create_function() {
	    return this.getTypedRuleContext(Create_functionContext,0);
	};

	create_managed_account() {
	    return this.getTypedRuleContext(Create_managed_accountContext,0);
	};

	create_masking_policy() {
	    return this.getTypedRuleContext(Create_masking_policyContext,0);
	};

	create_materialized_view() {
	    return this.getTypedRuleContext(Create_materialized_viewContext,0);
	};

	create_network_policy() {
	    return this.getTypedRuleContext(Create_network_policyContext,0);
	};

	create_notification_integration() {
	    return this.getTypedRuleContext(Create_notification_integrationContext,0);
	};

	create_password_policy() {
	    return this.getTypedRuleContext(Create_password_policyContext,0);
	};

	create_pipe() {
	    return this.getTypedRuleContext(Create_pipeContext,0);
	};

	create_procedure() {
	    return this.getTypedRuleContext(Create_procedureContext,0);
	};

	create_replication_group() {
	    return this.getTypedRuleContext(Create_replication_groupContext,0);
	};

	create_resource_monitor() {
	    return this.getTypedRuleContext(Create_resource_monitorContext,0);
	};

	create_role() {
	    return this.getTypedRuleContext(Create_roleContext,0);
	};

	create_row_access_policy() {
	    return this.getTypedRuleContext(Create_row_access_policyContext,0);
	};

	create_schema() {
	    return this.getTypedRuleContext(Create_schemaContext,0);
	};

	create_security_integration_external_oauth() {
	    return this.getTypedRuleContext(Create_security_integration_external_oauthContext,0);
	};

	create_security_integration_snowflake_oauth() {
	    return this.getTypedRuleContext(Create_security_integration_snowflake_oauthContext,0);
	};

	create_security_integration_saml2() {
	    return this.getTypedRuleContext(Create_security_integration_saml2Context,0);
	};

	create_security_integration_scim() {
	    return this.getTypedRuleContext(Create_security_integration_scimContext,0);
	};

	create_sequence() {
	    return this.getTypedRuleContext(Create_sequenceContext,0);
	};

	create_session_policy() {
	    return this.getTypedRuleContext(Create_session_policyContext,0);
	};

	create_share() {
	    return this.getTypedRuleContext(Create_shareContext,0);
	};

	create_stage() {
	    return this.getTypedRuleContext(Create_stageContext,0);
	};

	create_storage_integration() {
	    return this.getTypedRuleContext(Create_storage_integrationContext,0);
	};

	create_stream() {
	    return this.getTypedRuleContext(Create_streamContext,0);
	};

	create_table() {
	    return this.getTypedRuleContext(Create_tableContext,0);
	};

	create_table_as_select() {
	    return this.getTypedRuleContext(Create_table_as_selectContext,0);
	};

	create_table_like() {
	    return this.getTypedRuleContext(Create_table_likeContext,0);
	};

	create_tag() {
	    return this.getTypedRuleContext(Create_tagContext,0);
	};

	create_task() {
	    return this.getTypedRuleContext(Create_taskContext,0);
	};

	create_user() {
	    return this.getTypedRuleContext(Create_userContext,0);
	};

	create_view() {
	    return this.getTypedRuleContext(Create_viewContext,0);
	};

	create_warehouse() {
	    return this.getTypedRuleContext(Create_warehouseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_accountContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_account;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ADMIN_NAME() {
	    return this.getToken(SnowflakeParser.ADMIN_NAME, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	ADMIN_PASSWORD() {
	    return this.getToken(SnowflakeParser.ADMIN_PASSWORD, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	EMAIL() {
	    return this.getToken(SnowflakeParser.EMAIL, 0);
	};

	EDITION() {
	    return this.getToken(SnowflakeParser.EDITION, 0);
	};

	STANDARD() {
	    return this.getToken(SnowflakeParser.STANDARD, 0);
	};

	ENTERPRISE() {
	    return this.getToken(SnowflakeParser.ENTERPRISE, 0);
	};

	BUSINESS_CRITICAL() {
	    return this.getToken(SnowflakeParser.BUSINESS_CRITICAL, 0);
	};

	FIRST_NAME() {
	    return this.getToken(SnowflakeParser.FIRST_NAME, 0);
	};

	LAST_NAME() {
	    return this.getToken(SnowflakeParser.LAST_NAME, 0);
	};

	MUST_CHANGE_PASSWORD() {
	    return this.getToken(SnowflakeParser.MUST_CHANGE_PASSWORD, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	REGION_GROUP() {
	    return this.getToken(SnowflakeParser.REGION_GROUP, 0);
	};

	region_group_id() {
	    return this.getTypedRuleContext(Region_group_idContext,0);
	};

	REGION() {
	    return this.getToken(SnowflakeParser.REGION, 0);
	};

	snowflake_region_id() {
	    return this.getTypedRuleContext(Snowflake_region_idContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_account(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_alertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_alert;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	ALERT() {
	    return this.getToken(SnowflakeParser.ALERT, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	SCHEDULE() {
	    return this.getToken(SnowflakeParser.SCHEDULE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	IF() {
	    return this.getToken(SnowflakeParser.IF, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	EXISTS() {
	    return this.getToken(SnowflakeParser.EXISTS, 0);
	};

	alert_condition() {
	    return this.getTypedRuleContext(Alert_conditionContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	THEN() {
	    return this.getToken(SnowflakeParser.THEN, 0);
	};

	alert_action() {
	    return this.getTypedRuleContext(Alert_actionContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_alert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alert_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alert_condition;
    }

	select_statement() {
	    return this.getTypedRuleContext(Select_statementContext,0);
	};

	show_command() {
	    return this.getTypedRuleContext(Show_commandContext,0);
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlert_condition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alert_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alert_action;
    }

	sql_command() {
	    return this.getTypedRuleContext(Sql_commandContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlert_action(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_api_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_api_integration;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	API() {
	    return this.getToken(SnowflakeParser.API, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	API_PROVIDER() {
	    return this.getToken(SnowflakeParser.API_PROVIDER, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	API_AWS_ROLE_ARN() {
	    return this.getToken(SnowflakeParser.API_AWS_ROLE_ARN, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	API_ALLOWED_PREFIXES() {
	    return this.getToken(SnowflakeParser.API_ALLOWED_PREFIXES, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	API_KEY() {
	    return this.getToken(SnowflakeParser.API_KEY, 0);
	};

	API_BLOCKED_PREFIXES() {
	    return this.getToken(SnowflakeParser.API_BLOCKED_PREFIXES, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	AZURE_TENANT_ID() {
	    return this.getToken(SnowflakeParser.AZURE_TENANT_ID, 0);
	};

	AZURE_AD_APPLICATION_ID() {
	    return this.getToken(SnowflakeParser.AZURE_AD_APPLICATION_ID, 0);
	};

	GOOGLE_AUDIENCE() {
	    return this.getToken(SnowflakeParser.GOOGLE_AUDIENCE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_api_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_object_cloneContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_object_clone;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	CLONE() {
	    return this.getToken(SnowflakeParser.CLONE, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	at_before1() {
	    return this.getTypedRuleContext(At_before1Context,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SnowflakeParser.TIMESTAMP, 0);
	};

	ASSOC() {
	    return this.getToken(SnowflakeParser.ASSOC, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	OFFSET() {
	    return this.getToken(SnowflakeParser.OFFSET, 0);
	};

	STATEMENT() {
	    return this.getToken(SnowflakeParser.STATEMENT, 0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	FILE() {
	    return this.getToken(SnowflakeParser.FILE, 0);
	};

	FORMAT() {
	    return this.getToken(SnowflakeParser.FORMAT, 0);
	};

	SEQUENCE() {
	    return this.getToken(SnowflakeParser.SEQUENCE, 0);
	};

	STREAM() {
	    return this.getToken(SnowflakeParser.STREAM, 0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_object_clone(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_connectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_connection;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	CONNECTION() {
	    return this.getToken(SnowflakeParser.CONNECTION, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	REPLICA() {
	    return this.getToken(SnowflakeParser.REPLICA, 0);
	};

	OF() {
	    return this.getToken(SnowflakeParser.OF, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.DOT);
	    } else {
	        return this.getToken(SnowflakeParser.DOT, i);
	    }
	};


	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_connection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_databaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_database;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	TRANSIENT() {
	    return this.getToken(SnowflakeParser.TRANSIENT, 0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	clone_at_before() {
	    return this.getTypedRuleContext(Clone_at_beforeContext,0);
	};

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	default_ddl_collation() {
	    return this.getTypedRuleContext(Default_ddl_collationContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_database(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Clone_at_beforeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_clone_at_before;
    }

	CLONE() {
	    return this.getToken(SnowflakeParser.CLONE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	at_before1() {
	    return this.getTypedRuleContext(At_before1Context,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SnowflakeParser.TIMESTAMP, 0);
	};

	ASSOC() {
	    return this.getToken(SnowflakeParser.ASSOC, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	OFFSET() {
	    return this.getToken(SnowflakeParser.OFFSET, 0);
	};

	STATEMENT() {
	    return this.getToken(SnowflakeParser.STATEMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitClone_at_before(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class At_before1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_at_before1;
    }

	AT_KEYWORD() {
	    return this.getToken(SnowflakeParser.AT_KEYWORD, 0);
	};

	BEFORE() {
	    return this.getToken(SnowflakeParser.BEFORE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAt_before1(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Header_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_header_decl;
    }

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitHeader_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Compression_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_compression_type;
    }

	NONE() {
	    return this.getToken(SnowflakeParser.NONE, 0);
	};

	GZIP() {
	    return this.getToken(SnowflakeParser.GZIP, 0);
	};

	DEFLATE() {
	    return this.getToken(SnowflakeParser.DEFLATE, 0);
	};

	AUTO() {
	    return this.getToken(SnowflakeParser.AUTO, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCompression_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_compression;
    }

	COMPRESSION() {
	    return this.getToken(SnowflakeParser.COMPRESSION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	compression_type() {
	    return this.getTypedRuleContext(Compression_typeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCompression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_dynamic_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_dynamic_table;
        this.wh = null;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	DYNAMIC() {
	    return this.getToken(SnowflakeParser.DYNAMIC, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	TARGET_LAG() {
	    return this.getToken(SnowflakeParser.TARGET_LAG, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	query_statement() {
	    return this.getTypedRuleContext(Query_statementContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	DOWNSTREAM() {
	    return this.getToken(SnowflakeParser.DOWNSTREAM, 0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_dynamic_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_event_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_event_table;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	EVENT() {
	    return this.getToken(SnowflakeParser.EVENT, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	cluster_by() {
	    return this.getTypedRuleContext(Cluster_byContext,0);
	};

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	change_tracking() {
	    return this.getTypedRuleContext(Change_trackingContext,0);
	};

	DEFAULT_DDL_COLLATION_() {
	    return this.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	copy_grants() {
	    return this.getTypedRuleContext(Copy_grantsContext,0);
	};

	with_row_access_policy() {
	    return this.getTypedRuleContext(With_row_access_policyContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_event_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_external_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_external_function;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	EXTERNAL() {
	    return this.getToken(SnowflakeParser.EXTERNAL, 0);
	};

	FUNCTION() {
	    return this.getToken(SnowflakeParser.FUNCTION, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	RETURNS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RETURNS);
	    } else {
	        return this.getToken(SnowflakeParser.RETURNS, i);
	    }
	};


	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	API_INTEGRATION() {
	    return this.getToken(SnowflakeParser.API_INTEGRATION, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	SECURE() {
	    return this.getToken(SnowflakeParser.SECURE, 0);
	};

	arg_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_nameContext);
	    } else {
	        return this.getTypedRuleContext(Arg_nameContext,i);
	    }
	};

	arg_data_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_data_typeContext);
	    } else {
	        return this.getTypedRuleContext(Arg_data_typeContext,i);
	    }
	};

	null_not_null() {
	    return this.getTypedRuleContext(Null_not_nullContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	HEADERS() {
	    return this.getToken(SnowflakeParser.HEADERS, 0);
	};

	header_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Header_declContext);
	    } else {
	        return this.getTypedRuleContext(Header_declContext,i);
	    }
	};

	CONTEXT_HEADERS() {
	    return this.getToken(SnowflakeParser.CONTEXT_HEADERS, 0);
	};

	MAX_BATCH_ROWS() {
	    return this.getToken(SnowflakeParser.MAX_BATCH_ROWS, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	compression() {
	    return this.getTypedRuleContext(CompressionContext,0);
	};

	REQUEST_TRANSLATOR() {
	    return this.getToken(SnowflakeParser.REQUEST_TRANSLATOR, 0);
	};

	RESPONSE_TRANSLATOR() {
	    return this.getToken(SnowflakeParser.RESPONSE_TRANSLATOR, 0);
	};

	VOLATILE() {
	    return this.getToken(SnowflakeParser.VOLATILE, 0);
	};

	IMMUTABLE() {
	    return this.getToken(SnowflakeParser.IMMUTABLE, 0);
	};

	CALLED() {
	    return this.getToken(SnowflakeParser.CALLED, 0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	NULL_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.NULL_);
	    } else {
	        return this.getToken(SnowflakeParser.NULL_, i);
	    }
	};


	INPUT() {
	    return this.getToken(SnowflakeParser.INPUT, 0);
	};

	STRICT() {
	    return this.getToken(SnowflakeParser.STRICT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_external_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_external_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_external_table;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	EXTERNAL() {
	    return this.getToken(SnowflakeParser.EXTERNAL, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	external_table_column_decl_list() {
	    return this.getTypedRuleContext(External_table_column_decl_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	LOCATION() {
	    return this.getToken(SnowflakeParser.LOCATION, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	named_stage() {
	    return this.getTypedRuleContext(Named_stageContext,0);
	};

	file_format() {
	    return this.getTypedRuleContext(File_formatContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	cloud_provider_params3() {
	    return this.getTypedRuleContext(Cloud_provider_params3Context,0);
	};

	partition_by() {
	    return this.getTypedRuleContext(Partition_byContext,0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	REFRESH_ON_CREATE() {
	    return this.getToken(SnowflakeParser.REFRESH_ON_CREATE, 0);
	};

	true_false = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(True_falseContext);
	    } else {
	        return this.getTypedRuleContext(True_falseContext,i);
	    }
	};

	AUTO_REFRESH() {
	    return this.getToken(SnowflakeParser.AUTO_REFRESH, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	AWS_SNS_TOPIC() {
	    return this.getToken(SnowflakeParser.AWS_SNS_TOPIC, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	copy_grants() {
	    return this.getTypedRuleContext(Copy_grantsContext,0);
	};

	with_row_access_policy() {
	    return this.getTypedRuleContext(With_row_access_policyContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	PARTITION_TYPE() {
	    return this.getToken(SnowflakeParser.PARTITION_TYPE, 0);
	};

	USER_SPECIFIED() {
	    return this.getToken(SnowflakeParser.USER_SPECIFIED, 0);
	};

	TABLE_FORMAT() {
	    return this.getToken(SnowflakeParser.TABLE_FORMAT, 0);
	};

	DELTA() {
	    return this.getToken(SnowflakeParser.DELTA, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_external_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class External_table_column_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_external_table_column_decl;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	inline_constraint() {
	    return this.getTypedRuleContext(Inline_constraintContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExternal_table_column_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class External_table_column_decl_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_external_table_column_decl_list;
    }

	external_table_column_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(External_table_column_declContext);
	    } else {
	        return this.getTypedRuleContext(External_table_column_declContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExternal_table_column_decl_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Full_acctContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_full_acct;
    }

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	DOT() {
	    return this.getToken(SnowflakeParser.DOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFull_acct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Integration_type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_integration_type_name;
    }

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	INTEGRATIONS() {
	    return this.getToken(SnowflakeParser.INTEGRATIONS, 0);
	};

	API() {
	    return this.getToken(SnowflakeParser.API, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIntegration_type_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_failover_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_failover_group;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	FAILOVER() {
	    return this.getToken(SnowflakeParser.FAILOVER, 0);
	};

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	OBJECT_TYPES() {
	    return this.getToken(SnowflakeParser.OBJECT_TYPES, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	object_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_typeContext);
	    } else {
	        return this.getTypedRuleContext(Object_typeContext,i);
	    }
	};

	ALLOWED_ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0);
	};

	full_acct = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Full_acctContext);
	    } else {
	        return this.getTypedRuleContext(Full_acctContext,i);
	    }
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	ALLOWED_DATABASES() {
	    return this.getToken(SnowflakeParser.ALLOWED_DATABASES, 0);
	};

	ALLOWED_SHARES() {
	    return this.getToken(SnowflakeParser.ALLOWED_SHARES, 0);
	};

	ALLOWED_INTEGRATION_TYPES() {
	    return this.getToken(SnowflakeParser.ALLOWED_INTEGRATION_TYPES, 0);
	};

	integration_type_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Integration_type_nameContext);
	    } else {
	        return this.getTypedRuleContext(Integration_type_nameContext,i);
	    }
	};

	IGNORE() {
	    return this.getToken(SnowflakeParser.IGNORE, 0);
	};

	EDITION() {
	    return this.getToken(SnowflakeParser.EDITION, 0);
	};

	CHECK() {
	    return this.getToken(SnowflakeParser.CHECK, 0);
	};

	REPLICATION_SCHEDULE() {
	    return this.getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	REPLICA() {
	    return this.getToken(SnowflakeParser.REPLICA, 0);
	};

	OF() {
	    return this.getToken(SnowflakeParser.OF, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.DOT);
	    } else {
	        return this.getToken(SnowflakeParser.DOT, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_failover_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_fileformatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_type_fileformat;
    }

	CSV() {
	    return this.getToken(SnowflakeParser.CSV, 0);
	};

	JSON() {
	    return this.getToken(SnowflakeParser.JSON, 0);
	};

	AVRO() {
	    return this.getToken(SnowflakeParser.AVRO, 0);
	};

	ORC() {
	    return this.getToken(SnowflakeParser.ORC, 0);
	};

	PARQUET() {
	    return this.getToken(SnowflakeParser.PARQUET, 0);
	};

	XML() {
	    return this.getToken(SnowflakeParser.XML, 0);
	};

	CSV_Q() {
	    return this.getToken(SnowflakeParser.CSV_Q, 0);
	};

	JSON_Q() {
	    return this.getToken(SnowflakeParser.JSON_Q, 0);
	};

	AVRO_Q() {
	    return this.getToken(SnowflakeParser.AVRO_Q, 0);
	};

	ORC_Q() {
	    return this.getToken(SnowflakeParser.ORC_Q, 0);
	};

	PARQUET_Q() {
	    return this.getToken(SnowflakeParser.PARQUET_Q, 0);
	};

	XML_Q() {
	    return this.getToken(SnowflakeParser.XML_Q, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitType_fileformat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_file_formatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_file_format;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	FILE() {
	    return this.getToken(SnowflakeParser.FILE, 0);
	};

	FORMAT() {
	    return this.getToken(SnowflakeParser.FORMAT, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	type_fileformat() {
	    return this.getTypedRuleContext(Type_fileformatContext,0);
	};

	format_type_options = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Format_type_optionsContext);
	    } else {
	        return this.getTypedRuleContext(Format_type_optionsContext,i);
	    }
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_file_format(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arg_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_arg_decl;
    }

	arg_name() {
	    return this.getTypedRuleContext(Arg_nameContext,0);
	};

	arg_data_type() {
	    return this.getTypedRuleContext(Arg_data_typeContext,0);
	};

	arg_default_value_clause() {
	    return this.getTypedRuleContext(Arg_default_value_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitArg_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arg_default_value_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_arg_default_value_clause;
    }

	DEFAULT() {
	    return this.getToken(SnowflakeParser.DEFAULT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitArg_default_value_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Col_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_col_decl;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	virtual_column_decl() {
	    return this.getTypedRuleContext(Virtual_column_declContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCol_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Virtual_column_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_virtual_column_decl;
    }

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	function_call() {
	    return this.getTypedRuleContext(Function_callContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitVirtual_column_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_function_definition;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	DBL_DOLLAR() {
	    return this.getToken(SnowflakeParser.DBL_DOLLAR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFunction_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_function;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(SnowflakeParser.FUNCTION, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	RETURNS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RETURNS);
	    } else {
	        return this.getToken(SnowflakeParser.RETURNS, i);
	    }
	};


	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	function_definition() {
	    return this.getTypedRuleContext(Function_definitionContext,0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	SECURE() {
	    return this.getToken(SnowflakeParser.SECURE, 0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	arg_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_declContext);
	    } else {
	        return this.getTypedRuleContext(Arg_declContext,i);
	    }
	};

	null_not_null() {
	    return this.getTypedRuleContext(Null_not_nullContext,0);
	};

	LANGUAGE() {
	    return this.getToken(SnowflakeParser.LANGUAGE, 0);
	};

	CALLED() {
	    return this.getToken(SnowflakeParser.CALLED, 0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	NULL_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.NULL_);
	    } else {
	        return this.getToken(SnowflakeParser.NULL_, i);
	    }
	};


	INPUT() {
	    return this.getToken(SnowflakeParser.INPUT, 0);
	};

	STRICT() {
	    return this.getToken(SnowflakeParser.STRICT, 0);
	};

	PACKAGES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.PACKAGES);
	    } else {
	        return this.getToken(SnowflakeParser.PACKAGES, i);
	    }
	};


	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	RUNTIME_VERSION() {
	    return this.getToken(SnowflakeParser.RUNTIME_VERSION, 0);
	};

	IMPORTS() {
	    return this.getToken(SnowflakeParser.IMPORTS, 0);
	};

	HANDLER() {
	    return this.getToken(SnowflakeParser.HANDLER, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	JAVA() {
	    return this.getToken(SnowflakeParser.JAVA, 0);
	};

	PYTHON() {
	    return this.getToken(SnowflakeParser.PYTHON, 0);
	};

	JAVASCRIPT() {
	    return this.getToken(SnowflakeParser.JAVASCRIPT, 0);
	};

	SQL() {
	    return this.getToken(SnowflakeParser.SQL, 0);
	};

	VOLATILE() {
	    return this.getToken(SnowflakeParser.VOLATILE, 0);
	};

	IMMUTABLE() {
	    return this.getToken(SnowflakeParser.IMMUTABLE, 0);
	};

	col_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Col_declContext);
	    } else {
	        return this.getTypedRuleContext(Col_declContext,i);
	    }
	};

	FLOAT() {
	    return this.getToken(SnowflakeParser.FLOAT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	MEMOIZABLE() {
	    return this.getToken(SnowflakeParser.MEMOIZABLE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_managed_accountContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_managed_account;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	MANAGED() {
	    return this.getToken(SnowflakeParser.MANAGED, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	ADMIN_NAME() {
	    return this.getToken(SnowflakeParser.ADMIN_NAME, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	ADMIN_PASSWORD() {
	    return this.getToken(SnowflakeParser.ADMIN_PASSWORD, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	READER() {
	    return this.getToken(SnowflakeParser.READER, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_managed_account(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_masking_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_masking_policy;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	arg_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_nameContext);
	    } else {
	        return this.getTypedRuleContext(Arg_nameContext,i);
	    }
	};

	arg_data_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_data_typeContext);
	    } else {
	        return this.getTypedRuleContext(Arg_data_typeContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	RETURNS() {
	    return this.getToken(SnowflakeParser.RETURNS, 0);
	};

	ARROW() {
	    return this.getToken(SnowflakeParser.ARROW, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_masking_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Tag_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_tag_decl;
    }

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTag_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_list_in_parenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_list_in_parentheses;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_list_in_parentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_materialized_viewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_materialized_view;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SnowflakeParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	select_statement() {
	    return this.getTypedRuleContext(Select_statementContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	SECURE() {
	    return this.getToken(SnowflakeParser.SECURE, 0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_list_with_comment() {
	    return this.getTypedRuleContext(Column_list_with_commentContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	view_col = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(View_colContext);
	    } else {
	        return this.getTypedRuleContext(View_colContext,i);
	    }
	};

	with_row_access_policy() {
	    return this.getTypedRuleContext(With_row_access_policyContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	copy_grants() {
	    return this.getTypedRuleContext(Copy_grantsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	cluster_by() {
	    return this.getTypedRuleContext(Cluster_byContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_materialized_view(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_network_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_network_policy;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	NETWORK() {
	    return this.getToken(SnowflakeParser.NETWORK, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	ALLOWED_IP_LIST() {
	    return this.getToken(SnowflakeParser.ALLOWED_IP_LIST, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	BLOCKED_IP_LIST() {
	    return this.getToken(SnowflakeParser.BLOCKED_IP_LIST, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_network_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cloud_provider_params_autoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_cloud_provider_params_auto;
    }

	NOTIFICATION_PROVIDER() {
	    return this.getToken(SnowflakeParser.NOTIFICATION_PROVIDER, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	GCP_PUBSUB() {
	    return this.getToken(SnowflakeParser.GCP_PUBSUB, 0);
	};

	GCP_PUBSUB_SUBSCRIPTION_NAME() {
	    return this.getToken(SnowflakeParser.GCP_PUBSUB_SUBSCRIPTION_NAME, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	AZURE_EVENT_GRID() {
	    return this.getToken(SnowflakeParser.AZURE_EVENT_GRID, 0);
	};

	AZURE_STORAGE_QUEUE_PRIMARY_URI() {
	    return this.getToken(SnowflakeParser.AZURE_STORAGE_QUEUE_PRIMARY_URI, 0);
	};

	AZURE_TENANT_ID() {
	    return this.getToken(SnowflakeParser.AZURE_TENANT_ID, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCloud_provider_params_auto(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cloud_provider_params_pushContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_cloud_provider_params_push;
    }

	NOTIFICATION_PROVIDER() {
	    return this.getToken(SnowflakeParser.NOTIFICATION_PROVIDER, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	AWS_SNS() {
	    return this.getToken(SnowflakeParser.AWS_SNS, 0);
	};

	AWS_SNS_TOPIC_ARN() {
	    return this.getToken(SnowflakeParser.AWS_SNS_TOPIC_ARN, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	AWS_SNS_ROLE_ARN() {
	    return this.getToken(SnowflakeParser.AWS_SNS_ROLE_ARN, 0);
	};

	GCP_PUBSUB() {
	    return this.getToken(SnowflakeParser.GCP_PUBSUB, 0);
	};

	GCP_PUBSUB_TOPIC_NAME() {
	    return this.getToken(SnowflakeParser.GCP_PUBSUB_TOPIC_NAME, 0);
	};

	AZURE_EVENT_GRID() {
	    return this.getToken(SnowflakeParser.AZURE_EVENT_GRID, 0);
	};

	AZURE_EVENT_GRID_TOPIC_ENDPOINT() {
	    return this.getToken(SnowflakeParser.AZURE_EVENT_GRID_TOPIC_ENDPOINT, 0);
	};

	AZURE_TENANT_ID() {
	    return this.getToken(SnowflakeParser.AZURE_TENANT_ID, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCloud_provider_params_push(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_notification_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_notification_integration;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	NOTIFICATION() {
	    return this.getToken(SnowflakeParser.NOTIFICATION, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	QUEUE() {
	    return this.getToken(SnowflakeParser.QUEUE, 0);
	};

	cloud_provider_params_auto() {
	    return this.getTypedRuleContext(Cloud_provider_params_autoContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	DIRECTION() {
	    return this.getToken(SnowflakeParser.DIRECTION, 0);
	};

	OUTBOUND() {
	    return this.getToken(SnowflakeParser.OUTBOUND, 0);
	};

	cloud_provider_params_push() {
	    return this.getTypedRuleContext(Cloud_provider_params_pushContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_notification_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_pipeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_pipe;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	PIPE() {
	    return this.getToken(SnowflakeParser.PIPE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	copy_into_table() {
	    return this.getTypedRuleContext(Copy_into_tableContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	AUTO_INGEST() {
	    return this.getToken(SnowflakeParser.AUTO_INGEST, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	ERROR_INTEGRATION() {
	    return this.getToken(SnowflakeParser.ERROR_INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	AWS_SNS_TOPIC() {
	    return this.getToken(SnowflakeParser.AWS_SNS_TOPIC, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_pipe(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Caller_ownerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_caller_owner;
    }

	CALLER() {
	    return this.getToken(SnowflakeParser.CALLER, 0);
	};

	OWNER() {
	    return this.getToken(SnowflakeParser.OWNER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCaller_owner(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Executa_asContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_executa_as;
    }

	EXECUTE() {
	    return this.getToken(SnowflakeParser.EXECUTE, 0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	caller_owner() {
	    return this.getTypedRuleContext(Caller_ownerContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExecuta_as(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Procedure_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_procedure_definition;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	DBL_DOLLAR() {
	    return this.getToken(SnowflakeParser.DBL_DOLLAR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitProcedure_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Not_nullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_not_null;
    }

	NOT() {
	    return this.getToken(SnowflakeParser.NOT, 0);
	};

	NULL_() {
	    return this.getToken(SnowflakeParser.NULL_, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitNot_null(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_procedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_procedure;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	PROCEDURE() {
	    return this.getToken(SnowflakeParser.PROCEDURE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	RETURNS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RETURNS);
	    } else {
	        return this.getToken(SnowflakeParser.RETURNS, i);
	    }
	};


	LANGUAGE() {
	    return this.getToken(SnowflakeParser.LANGUAGE, 0);
	};

	SQL() {
	    return this.getToken(SnowflakeParser.SQL, 0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	procedure_definition() {
	    return this.getTypedRuleContext(Procedure_definitionContext,0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	arg_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_declContext);
	    } else {
	        return this.getTypedRuleContext(Arg_declContext,i);
	    }
	};

	not_null() {
	    return this.getTypedRuleContext(Not_nullContext,0);
	};

	CALLED() {
	    return this.getToken(SnowflakeParser.CALLED, 0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	NULL_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.NULL_);
	    } else {
	        return this.getToken(SnowflakeParser.NULL_, i);
	    }
	};


	INPUT() {
	    return this.getToken(SnowflakeParser.INPUT, 0);
	};

	STRICT() {
	    return this.getToken(SnowflakeParser.STRICT, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	executa_as() {
	    return this.getTypedRuleContext(Executa_asContext,0);
	};

	VOLATILE() {
	    return this.getToken(SnowflakeParser.VOLATILE, 0);
	};

	IMMUTABLE() {
	    return this.getToken(SnowflakeParser.IMMUTABLE, 0);
	};

	col_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Col_declContext);
	    } else {
	        return this.getTypedRuleContext(Col_declContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	JAVASCRIPT() {
	    return this.getToken(SnowflakeParser.JAVASCRIPT, 0);
	};

	SECURE() {
	    return this.getToken(SnowflakeParser.SECURE, 0);
	};

	PYTHON() {
	    return this.getToken(SnowflakeParser.PYTHON, 0);
	};

	RUNTIME_VERSION() {
	    return this.getToken(SnowflakeParser.RUNTIME_VERSION, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	PACKAGES() {
	    return this.getToken(SnowflakeParser.PACKAGES, 0);
	};

	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	HANDLER() {
	    return this.getToken(SnowflakeParser.HANDLER, 0);
	};

	IMPORTS() {
	    return this.getToken(SnowflakeParser.IMPORTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_procedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_replication_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_replication_group;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	REPLICATION() {
	    return this.getToken(SnowflakeParser.REPLICATION, 0);
	};

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	OBJECT_TYPES() {
	    return this.getToken(SnowflakeParser.OBJECT_TYPES, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	object_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_typeContext);
	    } else {
	        return this.getTypedRuleContext(Object_typeContext,i);
	    }
	};

	ALLOWED_ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0);
	};

	full_acct = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Full_acctContext);
	    } else {
	        return this.getTypedRuleContext(Full_acctContext,i);
	    }
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	ALLOWED_DATABASES() {
	    return this.getToken(SnowflakeParser.ALLOWED_DATABASES, 0);
	};

	ALLOWED_SHARES() {
	    return this.getToken(SnowflakeParser.ALLOWED_SHARES, 0);
	};

	ALLOWED_INTEGRATION_TYPES() {
	    return this.getToken(SnowflakeParser.ALLOWED_INTEGRATION_TYPES, 0);
	};

	integration_type_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Integration_type_nameContext);
	    } else {
	        return this.getTypedRuleContext(Integration_type_nameContext,i);
	    }
	};

	IGNORE() {
	    return this.getToken(SnowflakeParser.IGNORE, 0);
	};

	EDITION() {
	    return this.getToken(SnowflakeParser.EDITION, 0);
	};

	CHECK() {
	    return this.getToken(SnowflakeParser.CHECK, 0);
	};

	REPLICATION_SCHEDULE() {
	    return this.getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	REPLICA() {
	    return this.getToken(SnowflakeParser.REPLICA, 0);
	};

	OF() {
	    return this.getToken(SnowflakeParser.OF, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.DOT);
	    } else {
	        return this.getToken(SnowflakeParser.DOT, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_replication_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_resource_monitorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_resource_monitor;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	RESOURCE() {
	    return this.getToken(SnowflakeParser.RESOURCE, 0);
	};

	MONITOR() {
	    return this.getToken(SnowflakeParser.MONITOR, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	credit_quota() {
	    return this.getTypedRuleContext(Credit_quotaContext,0);
	};

	frequency() {
	    return this.getTypedRuleContext(FrequencyContext,0);
	};

	START_TIMESTAMP() {
	    return this.getToken(SnowflakeParser.START_TIMESTAMP, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	END_TIMESTAMP() {
	    return this.getToken(SnowflakeParser.END_TIMESTAMP, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	notify_users() {
	    return this.getTypedRuleContext(Notify_usersContext,0);
	};

	TRIGGERS() {
	    return this.getToken(SnowflakeParser.TRIGGERS, 0);
	};

	IMMEDIATELY() {
	    return this.getToken(SnowflakeParser.IMMEDIATELY, 0);
	};

	trigger_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Trigger_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Trigger_definitionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_resource_monitor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_role;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_row_access_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_row_access_policy;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	arg_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_declContext);
	    } else {
	        return this.getTypedRuleContext(Arg_declContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	RETURNS() {
	    return this.getToken(SnowflakeParser.RETURNS, 0);
	};

	BOOLEAN() {
	    return this.getToken(SnowflakeParser.BOOLEAN, 0);
	};

	ARROW() {
	    return this.getToken(SnowflakeParser.ARROW, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_row_access_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_schema;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	TRANSIENT() {
	    return this.getToken(SnowflakeParser.TRANSIENT, 0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	clone_at_before() {
	    return this.getTypedRuleContext(Clone_at_beforeContext,0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	MANAGED() {
	    return this.getToken(SnowflakeParser.MANAGED, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	default_ddl_collation() {
	    return this.getTypedRuleContext(Default_ddl_collationContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_schema(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_security_integration_external_oauthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_security_integration_external_oauth;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	EXTERNAL_OAUTH() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH, 0);
	};

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	EXTERNAL_OAUTH_TYPE() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_TYPE, 0);
	};

	EXTERNAL_OAUTH_ISSUER() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ISSUER, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0);
	};

	EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0);
	};

	OKTA() {
	    return this.getToken(SnowflakeParser.OKTA, 0);
	};

	AZURE() {
	    return this.getToken(SnowflakeParser.AZURE, 0);
	};

	PING_FEDERATE() {
	    return this.getToken(SnowflakeParser.PING_FEDERATE, 0);
	};

	CUSTOM() {
	    return this.getToken(SnowflakeParser.CUSTOM, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	EXTERNAL_OAUTH_JWS_KEYS_URL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL);
	    } else {
	        return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL, i);
	    }
	};


	EXTERNAL_OAUTH_BLOCKED_ROLES_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0);
	};

	EXTERNAL_OAUTH_ALLOWED_ROLES_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0);
	};

	EXTERNAL_OAUTH_RSA_PUBLIC_KEY() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0);
	};

	EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0);
	};

	EXTERNAL_OAUTH_AUDIENCE_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0);
	};

	EXTERNAL_OAUTH_ANY_ROLE_MODE() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE, 0);
	};

	EXTERNAL_OAUTH_SCOPE_DELIMITER() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER, 0);
	};

	DISABLE() {
	    return this.getToken(SnowflakeParser.DISABLE, 0);
	};

	ENABLE() {
	    return this.getToken(SnowflakeParser.ENABLE, 0);
	};

	ENABLE_FOR_PRIVILEGE() {
	    return this.getToken(SnowflakeParser.ENABLE_FOR_PRIVILEGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_security_integration_external_oauth(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Implicit_noneContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_implicit_none;
    }

	IMPLICIT() {
	    return this.getToken(SnowflakeParser.IMPLICIT, 0);
	};

	NONE() {
	    return this.getToken(SnowflakeParser.NONE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitImplicit_none(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_security_integration_snowflake_oauthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_security_integration_snowflake_oauth;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	OAUTH() {
	    return this.getToken(SnowflakeParser.OAUTH, 0);
	};

	OAUTH_CLIENT() {
	    return this.getToken(SnowflakeParser.OAUTH_CLIENT, 0);
	};

	partner_application() {
	    return this.getTypedRuleContext(Partner_applicationContext,0);
	};

	OAUTH_REDIRECT_URI() {
	    return this.getToken(SnowflakeParser.OAUTH_REDIRECT_URI, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	enabled_true_false() {
	    return this.getTypedRuleContext(Enabled_true_falseContext,0);
	};

	OAUTH_ISSUE_REFRESH_TOKENS() {
	    return this.getToken(SnowflakeParser.OAUTH_ISSUE_REFRESH_TOKENS, 0);
	};

	true_false = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(True_falseContext);
	    } else {
	        return this.getTypedRuleContext(True_falseContext,i);
	    }
	};

	OAUTH_REFRESH_TOKEN_VALIDITY() {
	    return this.getToken(SnowflakeParser.OAUTH_REFRESH_TOKEN_VALIDITY, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	OAUTH_USE_SECONDARY_ROLES() {
	    return this.getToken(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES, 0);
	};

	implicit_none() {
	    return this.getTypedRuleContext(Implicit_noneContext,0);
	};

	BLOCKED_ROLES_LIST() {
	    return this.getToken(SnowflakeParser.BLOCKED_ROLES_LIST, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	CUSTOM() {
	    return this.getToken(SnowflakeParser.CUSTOM, 0);
	};

	OAUTH_ALLOW_NON_TLS_REDIRECT_URI() {
	    return this.getToken(SnowflakeParser.OAUTH_ALLOW_NON_TLS_REDIRECT_URI, 0);
	};

	OAUTH_ENFORCE_PKCE() {
	    return this.getToken(SnowflakeParser.OAUTH_ENFORCE_PKCE, 0);
	};

	PRE_AUTHORIZED_ROLES_LIST() {
	    return this.getToken(SnowflakeParser.PRE_AUTHORIZED_ROLES_LIST, 0);
	};

	network_policy() {
	    return this.getTypedRuleContext(Network_policyContext,0);
	};

	OAUTH_CLIENT_RSA_PUBLIC_KEY() {
	    return this.getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY, 0);
	};

	OAUTH_CLIENT_RSA_PUBLIC_KEY_2() {
	    return this.getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_security_integration_snowflake_oauth(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_security_integration_saml2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_security_integration_saml2;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	SAML2() {
	    return this.getToken(SnowflakeParser.SAML2, 0);
	};

	enabled_true_false() {
	    return this.getTypedRuleContext(Enabled_true_falseContext,0);
	};

	SAML2_ISSUER() {
	    return this.getToken(SnowflakeParser.SAML2_ISSUER, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	SAML2_SSO_URL() {
	    return this.getToken(SnowflakeParser.SAML2_SSO_URL, 0);
	};

	SAML2_PROVIDER() {
	    return this.getToken(SnowflakeParser.SAML2_PROVIDER, 0);
	};

	SAML2_X509_CERT() {
	    return this.getToken(SnowflakeParser.SAML2_X509_CERT, 0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	SAML2_SP_INITIATED_LOGIN_PAGE_LABEL() {
	    return this.getToken(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL, 0);
	};

	SAML2_ENABLE_SP_INITIATED() {
	    return this.getToken(SnowflakeParser.SAML2_ENABLE_SP_INITIATED, 0);
	};

	true_false = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(True_falseContext);
	    } else {
	        return this.getTypedRuleContext(True_falseContext,i);
	    }
	};

	SAML2_SNOWFLAKE_X509_CERT() {
	    return this.getToken(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT, 0);
	};

	SAML2_SIGN_REQUEST() {
	    return this.getToken(SnowflakeParser.SAML2_SIGN_REQUEST, 0);
	};

	SAML2_REQUESTED_NAMEID_FORMAT() {
	    return this.getToken(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT, 0);
	};

	SAML2_POST_LOGOUT_REDIRECT_URL() {
	    return this.getToken(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL, 0);
	};

	SAML2_FORCE_AUTHN() {
	    return this.getToken(SnowflakeParser.SAML2_FORCE_AUTHN, 0);
	};

	SAML2_SNOWFLAKE_ISSUER_URL() {
	    return this.getToken(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL, 0);
	};

	SAML2_SNOWFLAKE_ACS_URL() {
	    return this.getToken(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_security_integration_saml2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_security_integration_scimContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_security_integration_scim;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	SCIM() {
	    return this.getToken(SnowflakeParser.SCIM, 0);
	};

	SCIM_CLIENT() {
	    return this.getToken(SnowflakeParser.SCIM_CLIENT, 0);
	};

	RUN_AS_ROLE() {
	    return this.getToken(SnowflakeParser.RUN_AS_ROLE, 0);
	};

	OKTA_Q() {
	    return this.getToken(SnowflakeParser.OKTA_Q, 0);
	};

	AZURE_Q() {
	    return this.getToken(SnowflakeParser.AZURE_Q, 0);
	};

	GENERIC_Q() {
	    return this.getToken(SnowflakeParser.GENERIC_Q, 0);
	};

	OKTA_PROVISIONER_Q() {
	    return this.getToken(SnowflakeParser.OKTA_PROVISIONER_Q, 0);
	};

	AAD_PROVISIONER_Q() {
	    return this.getToken(SnowflakeParser.AAD_PROVISIONER_Q, 0);
	};

	GENERIC_SCIM_PROVISIONER_Q() {
	    return this.getToken(SnowflakeParser.GENERIC_SCIM_PROVISIONER_Q, 0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	network_policy() {
	    return this.getTypedRuleContext(Network_policyContext,0);
	};

	SYNC_PASSWORD() {
	    return this.getToken(SnowflakeParser.SYNC_PASSWORD, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_security_integration_scim(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Network_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_network_policy;
    }

	NETWORK_POLICY() {
	    return this.getToken(SnowflakeParser.NETWORK_POLICY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitNetwork_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Partner_applicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_partner_application;
    }

	TABLEAU_DESKTOP() {
	    return this.getToken(SnowflakeParser.TABLEAU_DESKTOP, 0);
	};

	TABLEAU_SERVER() {
	    return this.getToken(SnowflakeParser.TABLEAU_SERVER, 0);
	};

	LOOKER() {
	    return this.getToken(SnowflakeParser.LOOKER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPartner_application(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Start_withContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_start_with;
    }

	START() {
	    return this.getToken(SnowflakeParser.START, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStart_with(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Increment_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_increment_by;
    }

	INCREMENT() {
	    return this.getToken(SnowflakeParser.INCREMENT, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIncrement_by(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_sequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_sequence;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	SEQUENCE() {
	    return this.getToken(SnowflakeParser.SEQUENCE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	start_with() {
	    return this.getTypedRuleContext(Start_withContext,0);
	};

	increment_by() {
	    return this.getTypedRuleContext(Increment_byContext,0);
	};

	order_noorder() {
	    return this.getTypedRuleContext(Order_noorderContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_sequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_session_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_session_policy;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	session_policy_params = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Session_policy_paramsContext);
	    } else {
	        return this.getTypedRuleContext(Session_policy_paramsContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_session_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Session_policy_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_session_policy_params;
    }

	session_policy_param_name() {
	    return this.getTypedRuleContext(Session_policy_param_nameContext,0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSession_policy_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Session_policy_param_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_session_policy_param_name;
    }

	SESSION_IDLE_TIMEOUT_MINS() {
	    return this.getToken(SnowflakeParser.SESSION_IDLE_TIMEOUT_MINS, 0);
	};

	SESSION_UI_IDLE_TIMEOUT_MINS() {
	    return this.getToken(SnowflakeParser.SESSION_UI_IDLE_TIMEOUT_MINS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSession_policy_param_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_password_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_password_policy;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	PASSWORD() {
	    return this.getToken(SnowflakeParser.PASSWORD, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	password_policy_params = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Password_policy_paramsContext);
	    } else {
	        return this.getTypedRuleContext(Password_policy_paramsContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_password_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Password_policy_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_password_policy_params;
    }

	password_policy_param_name() {
	    return this.getTypedRuleContext(Password_policy_param_nameContext,0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPassword_policy_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Password_policy_param_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_password_policy_param_name;
    }

	PASSWORD_HISTORY() {
	    return this.getToken(SnowflakeParser.PASSWORD_HISTORY, 0);
	};

	PASSWORD_LOCKOUT_TIME_MINS() {
	    return this.getToken(SnowflakeParser.PASSWORD_LOCKOUT_TIME_MINS, 0);
	};

	PASSWORD_MAX_AGE_DAYS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MAX_AGE_DAYS, 0);
	};

	PASSWORD_MAX_LENGTH() {
	    return this.getToken(SnowflakeParser.PASSWORD_MAX_LENGTH, 0);
	};

	PASSWORD_MAX_RETRIES() {
	    return this.getToken(SnowflakeParser.PASSWORD_MAX_RETRIES, 0);
	};

	PASSWORD_MIN_AGE_DAYS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_AGE_DAYS, 0);
	};

	PASSWORD_MIN_LENGTH() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_LENGTH, 0);
	};

	PASSWORD_MIN_LOWER_CASE_CHARS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_LOWER_CASE_CHARS, 0);
	};

	PASSWORD_MIN_NUMERIC_CHARS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_NUMERIC_CHARS, 0);
	};

	PASSWORD_MIN_SPECIAL_CHARS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_SPECIAL_CHARS, 0);
	};

	PASSWORD_MIN_UPPER_CASE_CHARS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_UPPER_CASE_CHARS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPassword_policy_param_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_shareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_share;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	SHARE() {
	    return this.getToken(SnowflakeParser.SHARE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_share(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharacterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_character;
    }

	CHAR_LITERAL() {
	    return this.getToken(SnowflakeParser.CHAR_LITERAL, 0);
	};

	AAD_PROVISIONER_Q() {
	    return this.getToken(SnowflakeParser.AAD_PROVISIONER_Q, 0);
	};

	ARRAY_Q() {
	    return this.getToken(SnowflakeParser.ARRAY_Q, 0);
	};

	AUTO_Q() {
	    return this.getToken(SnowflakeParser.AUTO_Q, 0);
	};

	AVRO_Q() {
	    return this.getToken(SnowflakeParser.AVRO_Q, 0);
	};

	AZURE_CSE_Q() {
	    return this.getToken(SnowflakeParser.AZURE_CSE_Q, 0);
	};

	AZURE_Q() {
	    return this.getToken(SnowflakeParser.AZURE_Q, 0);
	};

	BOTH_Q() {
	    return this.getToken(SnowflakeParser.BOTH_Q, 0);
	};

	CSV_Q() {
	    return this.getToken(SnowflakeParser.CSV_Q, 0);
	};

	GCS_SSE_KMS_Q() {
	    return this.getToken(SnowflakeParser.GCS_SSE_KMS_Q, 0);
	};

	GENERIC_Q() {
	    return this.getToken(SnowflakeParser.GENERIC_Q, 0);
	};

	GENERIC_SCIM_PROVISIONER_Q() {
	    return this.getToken(SnowflakeParser.GENERIC_SCIM_PROVISIONER_Q, 0);
	};

	JSON_Q() {
	    return this.getToken(SnowflakeParser.JSON_Q, 0);
	};

	NONE_Q() {
	    return this.getToken(SnowflakeParser.NONE_Q, 0);
	};

	OBJECT_Q() {
	    return this.getToken(SnowflakeParser.OBJECT_Q, 0);
	};

	OKTA_PROVISIONER_Q() {
	    return this.getToken(SnowflakeParser.OKTA_PROVISIONER_Q, 0);
	};

	OKTA_Q() {
	    return this.getToken(SnowflakeParser.OKTA_Q, 0);
	};

	ORC_Q() {
	    return this.getToken(SnowflakeParser.ORC_Q, 0);
	};

	PARQUET_Q() {
	    return this.getToken(SnowflakeParser.PARQUET_Q, 0);
	};

	S3() {
	    return this.getToken(SnowflakeParser.S3, 0);
	};

	SNOWPARK_OPTIMIZED() {
	    return this.getToken(SnowflakeParser.SNOWPARK_OPTIMIZED, 0);
	};

	XML_Q() {
	    return this.getToken(SnowflakeParser.XML_Q, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCharacter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Format_type_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_format_type_options;
    }

	COMPRESSION() {
	    return this.getToken(SnowflakeParser.COMPRESSION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	AUTO() {
	    return this.getToken(SnowflakeParser.AUTO, 0);
	};

	GZIP() {
	    return this.getToken(SnowflakeParser.GZIP, 0);
	};

	BZ2() {
	    return this.getToken(SnowflakeParser.BZ2, 0);
	};

	BROTLI() {
	    return this.getToken(SnowflakeParser.BROTLI, 0);
	};

	ZSTD() {
	    return this.getToken(SnowflakeParser.ZSTD, 0);
	};

	DEFLATE() {
	    return this.getToken(SnowflakeParser.DEFLATE, 0);
	};

	RAW_DEFLATE() {
	    return this.getToken(SnowflakeParser.RAW_DEFLATE, 0);
	};

	NONE() {
	    return this.getToken(SnowflakeParser.NONE, 0);
	};

	AUTO_Q() {
	    return this.getToken(SnowflakeParser.AUTO_Q, 0);
	};

	RECORD_DELIMITER() {
	    return this.getToken(SnowflakeParser.RECORD_DELIMITER, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	FIELD_DELIMITER() {
	    return this.getToken(SnowflakeParser.FIELD_DELIMITER, 0);
	};

	FILE_EXTENSION() {
	    return this.getToken(SnowflakeParser.FILE_EXTENSION, 0);
	};

	SKIP_HEADER() {
	    return this.getToken(SnowflakeParser.SKIP_HEADER, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	SKIP_BLANK_LINES() {
	    return this.getToken(SnowflakeParser.SKIP_BLANK_LINES, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	DATE_FORMAT() {
	    return this.getToken(SnowflakeParser.DATE_FORMAT, 0);
	};

	TIME_FORMAT() {
	    return this.getToken(SnowflakeParser.TIME_FORMAT, 0);
	};

	TIMESTAMP_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_FORMAT, 0);
	};

	BINARY_FORMAT() {
	    return this.getToken(SnowflakeParser.BINARY_FORMAT, 0);
	};

	HEX() {
	    return this.getToken(SnowflakeParser.HEX, 0);
	};

	BASE64() {
	    return this.getToken(SnowflakeParser.BASE64, 0);
	};

	UTF8() {
	    return this.getToken(SnowflakeParser.UTF8, 0);
	};

	ESCAPE() {
	    return this.getToken(SnowflakeParser.ESCAPE, 0);
	};

	character() {
	    return this.getTypedRuleContext(CharacterContext,0);
	};

	NONE_Q() {
	    return this.getToken(SnowflakeParser.NONE_Q, 0);
	};

	ESCAPE_UNENCLOSED_FIELD() {
	    return this.getToken(SnowflakeParser.ESCAPE_UNENCLOSED_FIELD, 0);
	};

	TRIM_SPACE() {
	    return this.getToken(SnowflakeParser.TRIM_SPACE, 0);
	};

	FIELD_OPTIONALLY_ENCLOSED_BY() {
	    return this.getToken(SnowflakeParser.FIELD_OPTIONALLY_ENCLOSED_BY, 0);
	};

	SINGLE_QUOTE() {
	    return this.getToken(SnowflakeParser.SINGLE_QUOTE, 0);
	};

	NULL_IF() {
	    return this.getToken(SnowflakeParser.NULL_IF, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	string_list() {
	    return this.getTypedRuleContext(String_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	ERROR_ON_COLUMN_COUNT_MISMATCH() {
	    return this.getToken(SnowflakeParser.ERROR_ON_COLUMN_COUNT_MISMATCH, 0);
	};

	REPLACE_INVALID_CHARACTERS() {
	    return this.getToken(SnowflakeParser.REPLACE_INVALID_CHARACTERS, 0);
	};

	EMPTY_FIELD_AS_NULL() {
	    return this.getToken(SnowflakeParser.EMPTY_FIELD_AS_NULL, 0);
	};

	SKIP_BYTE_ORDER_MARK() {
	    return this.getToken(SnowflakeParser.SKIP_BYTE_ORDER_MARK, 0);
	};

	ENCODING() {
	    return this.getToken(SnowflakeParser.ENCODING, 0);
	};

	ENABLE_OCTAL() {
	    return this.getToken(SnowflakeParser.ENABLE_OCTAL, 0);
	};

	ALLOW_DUPLICATE() {
	    return this.getToken(SnowflakeParser.ALLOW_DUPLICATE, 0);
	};

	STRIP_OUTER_ARRAY() {
	    return this.getToken(SnowflakeParser.STRIP_OUTER_ARRAY, 0);
	};

	STRIP_NULL_VALUES() {
	    return this.getToken(SnowflakeParser.STRIP_NULL_VALUES, 0);
	};

	IGNORE_UTF8_ERRORS() {
	    return this.getToken(SnowflakeParser.IGNORE_UTF8_ERRORS, 0);
	};

	LZO() {
	    return this.getToken(SnowflakeParser.LZO, 0);
	};

	SNAPPY() {
	    return this.getToken(SnowflakeParser.SNAPPY, 0);
	};

	SNAPPY_COMPRESSION() {
	    return this.getToken(SnowflakeParser.SNAPPY_COMPRESSION, 0);
	};

	BINARY_AS_TEXT() {
	    return this.getToken(SnowflakeParser.BINARY_AS_TEXT, 0);
	};

	PRESERVE_SPACE() {
	    return this.getToken(SnowflakeParser.PRESERVE_SPACE, 0);
	};

	STRIP_OUTER_ELEMENT() {
	    return this.getToken(SnowflakeParser.STRIP_OUTER_ELEMENT, 0);
	};

	DISABLE_SNOWFLAKE_DATA() {
	    return this.getToken(SnowflakeParser.DISABLE_SNOWFLAKE_DATA, 0);
	};

	DISABLE_AUTO_CONVERT() {
	    return this.getToken(SnowflakeParser.DISABLE_AUTO_CONVERT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFormat_type_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_copy_options;
    }

	ON_ERROR() {
	    return this.getToken(SnowflakeParser.ON_ERROR, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	CONTINUE() {
	    return this.getToken(SnowflakeParser.CONTINUE, 0);
	};

	SKIP_FILE() {
	    return this.getToken(SnowflakeParser.SKIP_FILE, 0);
	};

	SKIP_FILE_N() {
	    return this.getToken(SnowflakeParser.SKIP_FILE_N, 0);
	};

	ABORT_STATEMENT() {
	    return this.getToken(SnowflakeParser.ABORT_STATEMENT, 0);
	};

	SIZE_LIMIT() {
	    return this.getToken(SnowflakeParser.SIZE_LIMIT, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	PURGE() {
	    return this.getToken(SnowflakeParser.PURGE, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	RETURN_FAILED_ONLY() {
	    return this.getToken(SnowflakeParser.RETURN_FAILED_ONLY, 0);
	};

	MATCH_BY_COLUMN_NAME() {
	    return this.getToken(SnowflakeParser.MATCH_BY_COLUMN_NAME, 0);
	};

	CASE_SENSITIVE() {
	    return this.getToken(SnowflakeParser.CASE_SENSITIVE, 0);
	};

	CASE_INSENSITIVE() {
	    return this.getToken(SnowflakeParser.CASE_INSENSITIVE, 0);
	};

	NONE() {
	    return this.getToken(SnowflakeParser.NONE, 0);
	};

	ENFORCE_LENGTH() {
	    return this.getToken(SnowflakeParser.ENFORCE_LENGTH, 0);
	};

	TRUNCATECOLUMNS() {
	    return this.getToken(SnowflakeParser.TRUNCATECOLUMNS, 0);
	};

	FORCE() {
	    return this.getToken(SnowflakeParser.FORCE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCopy_options(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stage_encryption_opts_internalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stage_encryption_opts_internal;
    }

	ENCRYPTION() {
	    return this.getToken(SnowflakeParser.ENCRYPTION, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	SNOWFLAKE_FULL() {
	    return this.getToken(SnowflakeParser.SNOWFLAKE_FULL, 0);
	};

	SNOWFLAKE_SSE() {
	    return this.getToken(SnowflakeParser.SNOWFLAKE_SSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStage_encryption_opts_internal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stage_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stage_type;
    }

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStage_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stage_master_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stage_master_key;
    }

	MASTER_KEY() {
	    return this.getToken(SnowflakeParser.MASTER_KEY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStage_master_key(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stage_kms_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stage_kms_key;
    }

	KMS_KEY_ID() {
	    return this.getToken(SnowflakeParser.KMS_KEY_ID, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStage_kms_key(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stage_encryption_opts_awsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stage_encryption_opts_aws;
    }

	ENCRYPTION() {
	    return this.getToken(SnowflakeParser.ENCRYPTION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	stage_master_key() {
	    return this.getTypedRuleContext(Stage_master_keyContext,0);
	};

	stage_type() {
	    return this.getTypedRuleContext(Stage_typeContext,0);
	};

	stage_kms_key() {
	    return this.getTypedRuleContext(Stage_kms_keyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStage_encryption_opts_aws(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aws_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_aws_token;
    }

	AWS_TOKEN() {
	    return this.getToken(SnowflakeParser.AWS_TOKEN, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAws_token(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aws_key_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_aws_key_id;
    }

	AWS_KEY_ID() {
	    return this.getToken(SnowflakeParser.AWS_KEY_ID, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAws_key_id(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aws_secret_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_aws_secret_key;
    }

	AWS_SECRET_KEY() {
	    return this.getToken(SnowflakeParser.AWS_SECRET_KEY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAws_secret_key(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aws_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_aws_role;
    }

	AWS_ROLE() {
	    return this.getToken(SnowflakeParser.AWS_ROLE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAws_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Azure_encryption_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_azure_encryption_value;
    }

	MASTER_KEY() {
	    return this.getToken(SnowflakeParser.MASTER_KEY, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	AZURE_CSE_Q() {
	    return this.getToken(SnowflakeParser.AZURE_CSE_Q, 0);
	};

	NONE_Q() {
	    return this.getToken(SnowflakeParser.NONE_Q, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAzure_encryption_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stage_encryption_opts_azContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stage_encryption_opts_az;
    }

	ENCRYPTION() {
	    return this.getToken(SnowflakeParser.ENCRYPTION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	azure_encryption_value() {
	    return this.getTypedRuleContext(Azure_encryption_valueContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStage_encryption_opts_az(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Storage_integration_eq_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_storage_integration_eq_id;
    }

	STORAGE_INTEGRATION() {
	    return this.getToken(SnowflakeParser.STORAGE_INTEGRATION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStorage_integration_eq_id(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Az_credential_or_storage_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_az_credential_or_storage_integration;
    }

	storage_integration_eq_id() {
	    return this.getTypedRuleContext(Storage_integration_eq_idContext,0);
	};

	CREDENTIALS() {
	    return this.getToken(SnowflakeParser.CREDENTIALS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	AZURE_SAS_TOKEN() {
	    return this.getToken(SnowflakeParser.AZURE_SAS_TOKEN, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAz_credential_or_storage_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Gcp_encryption_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_gcp_encryption_value;
    }

	KMS_KEY_ID() {
	    return this.getToken(SnowflakeParser.KMS_KEY_ID, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	GCS_SSE_KMS_Q() {
	    return this.getToken(SnowflakeParser.GCS_SSE_KMS_Q, 0);
	};

	NONE_Q() {
	    return this.getToken(SnowflakeParser.NONE_Q, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGcp_encryption_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stage_encryption_opts_gcpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stage_encryption_opts_gcp;
    }

	ENCRYPTION() {
	    return this.getToken(SnowflakeParser.ENCRYPTION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	gcp_encryption_value() {
	    return this.getTypedRuleContext(Gcp_encryption_valueContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStage_encryption_opts_gcp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aws_credential_or_storage_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_aws_credential_or_storage_integration;
    }

	storage_integration_eq_id() {
	    return this.getTypedRuleContext(Storage_integration_eq_idContext,0);
	};

	CREDENTIALS() {
	    return this.getToken(SnowflakeParser.CREDENTIALS, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	aws_key_id() {
	    return this.getTypedRuleContext(Aws_key_idContext,0);
	};

	aws_secret_key() {
	    return this.getTypedRuleContext(Aws_secret_keyContext,0);
	};

	aws_role() {
	    return this.getTypedRuleContext(Aws_roleContext,0);
	};

	aws_token() {
	    return this.getTypedRuleContext(Aws_tokenContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAws_credential_or_storage_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class External_stage_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_external_stage_params;
        this.s3_url = null;
        this.gc_url = null;
        this.azure_url = null;
    }

	URL() {
	    return this.getToken(SnowflakeParser.URL, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	S3_PATH() {
	    return this.getToken(SnowflakeParser.S3_PATH, 0);
	};

	S3GOV_PATH() {
	    return this.getToken(SnowflakeParser.S3GOV_PATH, 0);
	};

	stage_encryption_opts_aws() {
	    return this.getTypedRuleContext(Stage_encryption_opts_awsContext,0);
	};

	aws_credential_or_storage_integration() {
	    return this.getTypedRuleContext(Aws_credential_or_storage_integrationContext,0);
	};

	GCS_PATH() {
	    return this.getToken(SnowflakeParser.GCS_PATH, 0);
	};

	stage_encryption_opts_gcp() {
	    return this.getTypedRuleContext(Stage_encryption_opts_gcpContext,0);
	};

	storage_integration_eq_id() {
	    return this.getTypedRuleContext(Storage_integration_eq_idContext,0);
	};

	AZURE_PATH() {
	    return this.getToken(SnowflakeParser.AZURE_PATH, 0);
	};

	stage_encryption_opts_az() {
	    return this.getTypedRuleContext(Stage_encryption_opts_azContext,0);
	};

	az_credential_or_storage_integration() {
	    return this.getTypedRuleContext(Az_credential_or_storage_integrationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExternal_stage_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class True_falseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_true_false;
    }

	TRUE() {
	    return this.getToken(SnowflakeParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(SnowflakeParser.FALSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTrue_false(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_enable;
    }

	ENABLE() {
	    return this.getToken(SnowflakeParser.ENABLE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitEnable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Refresh_on_createContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_refresh_on_create;
    }

	REFRESH_ON_CREATE() {
	    return this.getToken(SnowflakeParser.REFRESH_ON_CREATE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRefresh_on_create(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Auto_refreshContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_auto_refresh;
    }

	AUTO_REFRESH() {
	    return this.getToken(SnowflakeParser.AUTO_REFRESH, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAuto_refresh(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Notification_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_notification_integration;
    }

	NOTIFICATION_INTEGRATION() {
	    return this.getToken(SnowflakeParser.NOTIFICATION_INTEGRATION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitNotification_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Directory_table_internal_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_directory_table_internal_params;
    }

	DIRECTORY() {
	    return this.getToken(SnowflakeParser.DIRECTORY, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	enable() {
	    return this.getTypedRuleContext(EnableContext,0);
	};

	REFRESH_ON_CREATE() {
	    return this.getToken(SnowflakeParser.REFRESH_ON_CREATE, 0);
	};

	FALSE() {
	    return this.getToken(SnowflakeParser.FALSE, 0);
	};

	refresh_on_create() {
	    return this.getTypedRuleContext(Refresh_on_createContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDirectory_table_internal_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Directory_table_external_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_directory_table_external_params;
    }

	DIRECTORY() {
	    return this.getToken(SnowflakeParser.DIRECTORY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	enable() {
	    return this.getTypedRuleContext(EnableContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	refresh_on_create() {
	    return this.getTypedRuleContext(Refresh_on_createContext,0);
	};

	auto_refresh() {
	    return this.getTypedRuleContext(Auto_refreshContext,0);
	};

	notification_integration() {
	    return this.getTypedRuleContext(Notification_integrationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDirectory_table_external_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_stageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_stage;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	object_name_or_identifier() {
	    return this.getTypedRuleContext(Object_name_or_identifierContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	temporary() {
	    return this.getTypedRuleContext(TemporaryContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	stage_encryption_opts_internal() {
	    return this.getTypedRuleContext(Stage_encryption_opts_internalContext,0);
	};

	directory_table_internal_params() {
	    return this.getTypedRuleContext(Directory_table_internal_paramsContext,0);
	};

	FILE_FORMAT() {
	    return this.getToken(SnowflakeParser.FILE_FORMAT, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	COPY_OPTIONS_() {
	    return this.getToken(SnowflakeParser.COPY_OPTIONS_, 0);
	};

	copy_options() {
	    return this.getTypedRuleContext(Copy_optionsContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	FORMAT_NAME() {
	    return this.getToken(SnowflakeParser.FORMAT_NAME, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	type_fileformat() {
	    return this.getTypedRuleContext(Type_fileformatContext,0);
	};

	format_type_options = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Format_type_optionsContext);
	    } else {
	        return this.getTypedRuleContext(Format_type_optionsContext,i);
	    }
	};

	external_stage_params() {
	    return this.getTypedRuleContext(External_stage_paramsContext,0);
	};

	directory_table_external_params() {
	    return this.getTypedRuleContext(Directory_table_external_paramsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_stage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Alter_stageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alter_stage;
    }

	ALTER() {
	    return this.getToken(SnowflakeParser.ALTER, 0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	object_name_or_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_name_or_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Object_name_or_identifierContext,i);
	    }
	};

	RENAME() {
	    return this.getToken(SnowflakeParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	set_tags() {
	    return this.getTypedRuleContext(Set_tagsContext,0);
	};

	unset_tags() {
	    return this.getTypedRuleContext(Unset_tagsContext,0);
	};

	SET() {
	    return this.getToken(SnowflakeParser.SET, 0);
	};

	external_stage_params() {
	    return this.getTypedRuleContext(External_stage_paramsContext,0);
	};

	file_format() {
	    return this.getTypedRuleContext(File_formatContext,0);
	};

	COPY_OPTIONS_() {
	    return this.getToken(SnowflakeParser.COPY_OPTIONS_, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	copy_options() {
	    return this.getTypedRuleContext(Copy_optionsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlter_stage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_stageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_stage;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	object_name_or_identifier() {
	    return this.getTypedRuleContext(Object_name_or_identifierContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_stage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_stageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_stage;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	object_name_or_identifier() {
	    return this.getTypedRuleContext(Object_name_or_identifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_stage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_stagesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_stages;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	STAGES() {
	    return this.getToken(SnowflakeParser.STAGES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_stages(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cloud_provider_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_cloud_provider_params;
    }

	STORAGE_PROVIDER() {
	    return this.getToken(SnowflakeParser.STORAGE_PROVIDER, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	S3() {
	    return this.getToken(SnowflakeParser.S3, 0);
	};

	STORAGE_AWS_ROLE_ARN() {
	    return this.getToken(SnowflakeParser.STORAGE_AWS_ROLE_ARN, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	STORAGE_AWS_OBJECT_ACL() {
	    return this.getToken(SnowflakeParser.STORAGE_AWS_OBJECT_ACL, 0);
	};

	GCS() {
	    return this.getToken(SnowflakeParser.GCS, 0);
	};

	AZURE() {
	    return this.getToken(SnowflakeParser.AZURE, 0);
	};

	AZURE_TENANT_ID() {
	    return this.getToken(SnowflakeParser.AZURE_TENANT_ID, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCloud_provider_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cloud_provider_params2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_cloud_provider_params2;
    }

	STORAGE_AWS_ROLE_ARN() {
	    return this.getToken(SnowflakeParser.STORAGE_AWS_ROLE_ARN, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	STORAGE_AWS_OBJECT_ACL() {
	    return this.getToken(SnowflakeParser.STORAGE_AWS_OBJECT_ACL, 0);
	};

	AZURE_TENANT_ID() {
	    return this.getToken(SnowflakeParser.AZURE_TENANT_ID, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCloud_provider_params2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cloud_provider_params3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_cloud_provider_params3;
    }

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCloud_provider_params3(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_storage_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_storage_integration;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	STORAGE() {
	    return this.getToken(SnowflakeParser.STORAGE, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	EXTERNAL_STAGE() {
	    return this.getToken(SnowflakeParser.EXTERNAL_STAGE, 0);
	};

	cloud_provider_params() {
	    return this.getTypedRuleContext(Cloud_provider_paramsContext,0);
	};

	ENABLED() {
	    return this.getToken(SnowflakeParser.ENABLED, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	STORAGE_ALLOWED_LOCATIONS() {
	    return this.getToken(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	string_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_listContext);
	    } else {
	        return this.getTypedRuleContext(String_listContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	STORAGE_BLOCKED_LOCATIONS() {
	    return this.getToken(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS, 0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_storage_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Copy_grantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_copy_grants;
    }

	COPY() {
	    return this.getToken(SnowflakeParser.COPY, 0);
	};

	GRANTS() {
	    return this.getToken(SnowflakeParser.GRANTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCopy_grants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Append_onlyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_append_only;
    }

	APPEND_ONLY() {
	    return this.getToken(SnowflakeParser.APPEND_ONLY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAppend_only(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Insert_onlyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_insert_only;
    }

	INSERT_ONLY() {
	    return this.getToken(SnowflakeParser.INSERT_ONLY, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	TRUE() {
	    return this.getToken(SnowflakeParser.TRUE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitInsert_only(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_initial_rowsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_initial_rows;
    }

	SHOW_INITIAL_ROWS() {
	    return this.getToken(SnowflakeParser.SHOW_INITIAL_ROWS, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_initial_rows(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stream_timeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_stream_time;
    }

	at_before1() {
	    return this.getTypedRuleContext(At_before1Context,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SnowflakeParser.TIMESTAMP, 0);
	};

	ASSOC() {
	    return this.getToken(SnowflakeParser.ASSOC, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	OFFSET() {
	    return this.getToken(SnowflakeParser.OFFSET, 0);
	};

	STATEMENT() {
	    return this.getToken(SnowflakeParser.STATEMENT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	STREAM() {
	    return this.getToken(SnowflakeParser.STREAM, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStream_time(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_streamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_stream;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	STREAM() {
	    return this.getToken(SnowflakeParser.STREAM, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	copy_grants() {
	    return this.getTypedRuleContext(Copy_grantsContext,0);
	};

	stream_time() {
	    return this.getTypedRuleContext(Stream_timeContext,0);
	};

	append_only() {
	    return this.getTypedRuleContext(Append_onlyContext,0);
	};

	show_initial_rows() {
	    return this.getTypedRuleContext(Show_initial_rowsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	EXTERNAL() {
	    return this.getToken(SnowflakeParser.EXTERNAL, 0);
	};

	insert_only() {
	    return this.getTypedRuleContext(Insert_onlyContext,0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_stream(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemporaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_temporary;
    }

	TEMP() {
	    return this.getToken(SnowflakeParser.TEMP, 0);
	};

	TEMPORARY() {
	    return this.getToken(SnowflakeParser.TEMPORARY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTemporary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_table_type;
    }

	temporary() {
	    return this.getTypedRuleContext(TemporaryContext,0);
	};

	VOLATILE() {
	    return this.getToken(SnowflakeParser.VOLATILE, 0);
	};

	LOCAL() {
	    return this.getToken(SnowflakeParser.LOCAL, 0);
	};

	GLOBAL() {
	    return this.getToken(SnowflakeParser.GLOBAL, 0);
	};

	TRANSIENT() {
	    return this.getToken(SnowflakeParser.TRANSIENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTable_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_tagsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_with_tags;
    }

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	tag_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tag_declContext);
	    } else {
	        return this.getTypedRuleContext(Tag_declContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitWith_tags(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_row_access_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_with_row_access_policy;
    }

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitWith_row_access_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cluster_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_cluster_by;
    }

	CLUSTER() {
	    return this.getToken(SnowflakeParser.CLUSTER, 0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	expr_list_in_parentheses() {
	    return this.getTypedRuleContext(Expr_list_in_parenthesesContext,0);
	};

	LINEAR() {
	    return this.getToken(SnowflakeParser.LINEAR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCluster_by(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Change_trackingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_change_tracking;
    }

	CHANGE_TRACKING() {
	    return this.getToken(SnowflakeParser.CHANGE_TRACKING, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitChange_tracking(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_masking_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_with_masking_policy;
    }

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	USING() {
	    return this.getToken(SnowflakeParser.USING, 0);
	};

	column_list_in_parentheses() {
	    return this.getTypedRuleContext(Column_list_in_parenthesesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitWith_masking_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CollateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_collate;
    }

	COLLATE() {
	    return this.getToken(SnowflakeParser.COLLATE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCollate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Order_noorderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_order_noorder;
    }

	ORDER() {
	    return this.getToken(SnowflakeParser.ORDER, 0);
	};

	NOORDER() {
	    return this.getToken(SnowflakeParser.NOORDER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOrder_noorder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Default_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_default_value;
    }

	DEFAULT() {
	    return this.getToken(SnowflakeParser.DEFAULT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AUTOINCREMENT() {
	    return this.getToken(SnowflakeParser.AUTOINCREMENT, 0);
	};

	IDENTITY() {
	    return this.getToken(SnowflakeParser.IDENTITY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	start_with() {
	    return this.getTypedRuleContext(Start_withContext,0);
	};

	increment_by() {
	    return this.getTypedRuleContext(Increment_byContext,0);
	};

	order_noorder() {
	    return this.getTypedRuleContext(Order_noorderContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDefault_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Foreign_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_foreign_key;
    }

	FOREIGN() {
	    return this.getToken(SnowflakeParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(SnowflakeParser.KEY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitForeign_key(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Primary_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_primary_key;
    }

	PRIMARY() {
	    return this.getToken(SnowflakeParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(SnowflakeParser.KEY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPrimary_key(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Out_of_line_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_out_of_line_constraint;
    }

	column_list_in_parentheses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_list_in_parenthesesContext);
	    } else {
	        return this.getTypedRuleContext(Column_list_in_parenthesesContext,i);
	    }
	};

	foreign_key() {
	    return this.getTypedRuleContext(Foreign_keyContext,0);
	};

	REFERENCES() {
	    return this.getToken(SnowflakeParser.REFERENCES, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	constraint_properties() {
	    return this.getTypedRuleContext(Constraint_propertiesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(SnowflakeParser.CONSTRAINT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	UNIQUE() {
	    return this.getToken(SnowflakeParser.UNIQUE, 0);
	};

	primary_key() {
	    return this.getTypedRuleContext(Primary_keyContext,0);
	};

	common_constraint_properties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_constraint_propertiesContext);
	    } else {
	        return this.getTypedRuleContext(Common_constraint_propertiesContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOut_of_line_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Full_col_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_full_col_decl;
    }

	col_decl() {
	    return this.getTypedRuleContext(Col_declContext,0);
	};

	collate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CollateContext);
	    } else {
	        return this.getTypedRuleContext(CollateContext,i);
	    }
	};

	inline_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Inline_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Inline_constraintContext,i);
	    }
	};

	null_not_null = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Null_not_nullContext);
	    } else {
	        return this.getTypedRuleContext(Null_not_nullContext,i);
	    }
	};

	with_masking_policy() {
	    return this.getTypedRuleContext(With_masking_policyContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	default_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Default_valueContext);
	    } else {
	        return this.getTypedRuleContext(Default_valueContext,i);
	    }
	};

	NULL_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.NULL_);
	    } else {
	        return this.getToken(SnowflakeParser.NULL_, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFull_col_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_decl_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_decl_item;
    }

	full_col_decl() {
	    return this.getTypedRuleContext(Full_col_declContext,0);
	};

	out_of_line_constraint() {
	    return this.getTypedRuleContext(Out_of_line_constraintContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_decl_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_decl_item_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_decl_item_list;
    }

	column_decl_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_decl_itemContext);
	    } else {
	        return this.getTypedRuleContext(Column_decl_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_decl_item_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_table;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	table_type() {
	    return this.getTypedRuleContext(Table_typeContext,0);
	};

	create_table_clause() {
	    return this.getTypedRuleContext(Create_table_clauseContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_decl_item_list_parenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_decl_item_list_paren;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_decl_item_list() {
	    return this.getTypedRuleContext(Column_decl_item_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_decl_item_list_paren(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_table_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_table_clause;
    }

	column_decl_item_list_paren() {
	    return this.getTypedRuleContext(Column_decl_item_list_parenContext,0);
	};

	stage_file_format() {
	    return this.getTypedRuleContext(Stage_file_formatContext,0);
	};

	STAGE_COPY_OPTIONS() {
	    return this.getToken(SnowflakeParser.STAGE_COPY_OPTIONS, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.EQ);
	    } else {
	        return this.getToken(SnowflakeParser.EQ, i);
	    }
	};


	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	copy_options() {
	    return this.getTypedRuleContext(Copy_optionsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	change_tracking() {
	    return this.getTypedRuleContext(Change_trackingContext,0);
	};

	default_ddl_collation() {
	    return this.getTypedRuleContext(Default_ddl_collationContext,0);
	};

	copy_grants() {
	    return this.getTypedRuleContext(Copy_grantsContext,0);
	};

	comment_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comment_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Comment_clauseContext,i);
	    }
	};

	with_row_access_policy() {
	    return this.getTypedRuleContext(With_row_access_policyContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	cluster_by() {
	    return this.getTypedRuleContext(Cluster_byContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_table_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_table_as_selectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_table_as_select;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	query_statement() {
	    return this.getTypedRuleContext(Query_statementContext,0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	table_type() {
	    return this.getTypedRuleContext(Table_typeContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_decl_item_list() {
	    return this.getTypedRuleContext(Column_decl_item_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	cluster_by() {
	    return this.getTypedRuleContext(Cluster_byContext,0);
	};

	copy_grants() {
	    return this.getTypedRuleContext(Copy_grantsContext,0);
	};

	with_row_access_policy() {
	    return this.getTypedRuleContext(With_row_access_policyContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_table_as_select(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_table_likeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_table_like;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(SnowflakeParser.LIKE, 0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	TRANSIENT() {
	    return this.getToken(SnowflakeParser.TRANSIENT, 0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	cluster_by() {
	    return this.getTypedRuleContext(Cluster_byContext,0);
	};

	copy_grants() {
	    return this.getTypedRuleContext(Copy_grantsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_table_like(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_tagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_tag;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	tag_allowed_values() {
	    return this.getTypedRuleContext(Tag_allowed_valuesContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_tag(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Tag_allowed_valuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_tag_allowed_values;
    }

	ALLOWED_VALUES() {
	    return this.getToken(SnowflakeParser.ALLOWED_VALUES, 0);
	};

	string_list() {
	    return this.getTypedRuleContext(String_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTag_allowed_values(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Session_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_session_parameter;
    }

	ABORT_DETACHED_QUERY() {
	    return this.getToken(SnowflakeParser.ABORT_DETACHED_QUERY, 0);
	};

	ALLOW_CLIENT_MFA_CACHING() {
	    return this.getToken(SnowflakeParser.ALLOW_CLIENT_MFA_CACHING, 0);
	};

	ALLOW_ID_TOKEN() {
	    return this.getToken(SnowflakeParser.ALLOW_ID_TOKEN, 0);
	};

	AUTOCOMMIT() {
	    return this.getToken(SnowflakeParser.AUTOCOMMIT, 0);
	};

	AUTOCOMMIT_API_SUPPORTED() {
	    return this.getToken(SnowflakeParser.AUTOCOMMIT_API_SUPPORTED, 0);
	};

	BINARY_INPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.BINARY_INPUT_FORMAT, 0);
	};

	BINARY_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.BINARY_OUTPUT_FORMAT, 0);
	};

	CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS() {
	    return this.getToken(SnowflakeParser.CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS, 0);
	};

	CLIENT_ENCRYPTION_KEY_SIZE() {
	    return this.getToken(SnowflakeParser.CLIENT_ENCRYPTION_KEY_SIZE, 0);
	};

	CLIENT_MEMORY_LIMIT() {
	    return this.getToken(SnowflakeParser.CLIENT_MEMORY_LIMIT, 0);
	};

	CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX() {
	    return this.getToken(SnowflakeParser.CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX, 0);
	};

	CLIENT_METADATA_USE_SESSION_DATABASE() {
	    return this.getToken(SnowflakeParser.CLIENT_METADATA_USE_SESSION_DATABASE, 0);
	};

	CLIENT_PREFETCH_THREADS() {
	    return this.getToken(SnowflakeParser.CLIENT_PREFETCH_THREADS, 0);
	};

	CLIENT_RESULT_CHUNK_SIZE() {
	    return this.getToken(SnowflakeParser.CLIENT_RESULT_CHUNK_SIZE, 0);
	};

	CLIENT_RESULT_COLUMN_CASE_INSENSITIVE() {
	    return this.getToken(SnowflakeParser.CLIENT_RESULT_COLUMN_CASE_INSENSITIVE, 0);
	};

	CLIENT_SESSION_KEEP_ALIVE() {
	    return this.getToken(SnowflakeParser.CLIENT_SESSION_KEEP_ALIVE, 0);
	};

	CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY() {
	    return this.getToken(SnowflakeParser.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY, 0);
	};

	CLIENT_TIMESTAMP_TYPE_MAPPING() {
	    return this.getToken(SnowflakeParser.CLIENT_TIMESTAMP_TYPE_MAPPING, 0);
	};

	DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	DATE_INPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.DATE_INPUT_FORMAT, 0);
	};

	DATE_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.DATE_OUTPUT_FORMAT, 0);
	};

	DEFAULT_DDL_COLLATION_() {
	    return this.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0);
	};

	ENABLE_INTERNAL_STAGES_PRIVATELINK() {
	    return this.getToken(SnowflakeParser.ENABLE_INTERNAL_STAGES_PRIVATELINK, 0);
	};

	ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION() {
	    return this.getToken(SnowflakeParser.ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION, 0);
	};

	ENFORCE_SESSION_POLICY() {
	    return this.getToken(SnowflakeParser.ENFORCE_SESSION_POLICY, 0);
	};

	ERROR_ON_NONDETERMINISTIC_MERGE() {
	    return this.getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_MERGE, 0);
	};

	ERROR_ON_NONDETERMINISTIC_UPDATE() {
	    return this.getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_UPDATE, 0);
	};

	EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST() {
	    return this.getToken(SnowflakeParser.EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST, 0);
	};

	GEOGRAPHY_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.GEOGRAPHY_OUTPUT_FORMAT, 0);
	};

	GEOMETRY_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.GEOMETRY_OUTPUT_FORMAT, 0);
	};

	INITIAL_REPLICATION_SIZE_LIMIT_IN_TB() {
	    return this.getToken(SnowflakeParser.INITIAL_REPLICATION_SIZE_LIMIT_IN_TB, 0);
	};

	JDBC_TREAT_DECIMAL_AS_INT() {
	    return this.getToken(SnowflakeParser.JDBC_TREAT_DECIMAL_AS_INT, 0);
	};

	JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC() {
	    return this.getToken(SnowflakeParser.JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC, 0);
	};

	JDBC_USE_SESSION_TIMEZONE() {
	    return this.getToken(SnowflakeParser.JDBC_USE_SESSION_TIMEZONE, 0);
	};

	JSON_INDENT() {
	    return this.getToken(SnowflakeParser.JSON_INDENT, 0);
	};

	JS_TREAT_INTEGER_AS_BIGINT() {
	    return this.getToken(SnowflakeParser.JS_TREAT_INTEGER_AS_BIGINT, 0);
	};

	LOCK_TIMEOUT() {
	    return this.getToken(SnowflakeParser.LOCK_TIMEOUT, 0);
	};

	MAX_CONCURRENCY_LEVEL() {
	    return this.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0);
	};

	MAX_DATA_EXTENSION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0);
	};

	MULTI_STATEMENT_COUNT() {
	    return this.getToken(SnowflakeParser.MULTI_STATEMENT_COUNT, 0);
	};

	MIN_DATA_RETENTION_TIME_IN_DAYS() {
	    return this.getToken(SnowflakeParser.MIN_DATA_RETENTION_TIME_IN_DAYS, 0);
	};

	NETWORK_POLICY() {
	    return this.getToken(SnowflakeParser.NETWORK_POLICY, 0);
	};

	SHARE_RESTRICTIONS() {
	    return this.getToken(SnowflakeParser.SHARE_RESTRICTIONS, 0);
	};

	PERIODIC_DATA_REKEYING() {
	    return this.getToken(SnowflakeParser.PERIODIC_DATA_REKEYING, 0);
	};

	PIPE_EXECUTION_PAUSED() {
	    return this.getToken(SnowflakeParser.PIPE_EXECUTION_PAUSED, 0);
	};

	PREVENT_UNLOAD_TO_INLINE_URL() {
	    return this.getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INLINE_URL, 0);
	};

	PREVENT_UNLOAD_TO_INTERNAL_STAGES() {
	    return this.getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INTERNAL_STAGES, 0);
	};

	QUERY_TAG() {
	    return this.getToken(SnowflakeParser.QUERY_TAG, 0);
	};

	QUOTED_IDENTIFIERS_IGNORE_CASE() {
	    return this.getToken(SnowflakeParser.QUOTED_IDENTIFIERS_IGNORE_CASE, 0);
	};

	REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION() {
	    return this.getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION, 0);
	};

	REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION() {
	    return this.getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION, 0);
	};

	ROWS_PER_RESULTSET() {
	    return this.getToken(SnowflakeParser.ROWS_PER_RESULTSET, 0);
	};

	SAML_IDENTITY_PROVIDER() {
	    return this.getToken(SnowflakeParser.SAML_IDENTITY_PROVIDER, 0);
	};

	SIMULATED_DATA_SHARING_CONSUMER() {
	    return this.getToken(SnowflakeParser.SIMULATED_DATA_SHARING_CONSUMER, 0);
	};

	SSO_LOGIN_PAGE() {
	    return this.getToken(SnowflakeParser.SSO_LOGIN_PAGE, 0);
	};

	STATEMENT_QUEUED_TIMEOUT_IN_SECONDS() {
	    return this.getToken(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0);
	};

	STATEMENT_TIMEOUT_IN_SECONDS() {
	    return this.getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0);
	};

	STRICT_JSON_OUTPUT() {
	    return this.getToken(SnowflakeParser.STRICT_JSON_OUTPUT, 0);
	};

	SUSPEND_TASK_AFTER_NUM_FAILURES() {
	    return this.getToken(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES, 0);
	};

	TIMESTAMP_DAY_IS_ALWAYS_24H() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_DAY_IS_ALWAYS_24H, 0);
	};

	TIMESTAMP_INPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_INPUT_FORMAT, 0);
	};

	TIMESTAMP_LTZ_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_LTZ_OUTPUT_FORMAT, 0);
	};

	TIMESTAMP_NTZ_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_NTZ_OUTPUT_FORMAT, 0);
	};

	TIMESTAMP_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_OUTPUT_FORMAT, 0);
	};

	TIMESTAMP_TYPE_MAPPING() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_TYPE_MAPPING, 0);
	};

	TIMESTAMP_TZ_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_TZ_OUTPUT_FORMAT, 0);
	};

	TIMEZONE() {
	    return this.getToken(SnowflakeParser.TIMEZONE, 0);
	};

	TIME_INPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIME_INPUT_FORMAT, 0);
	};

	TIME_OUTPUT_FORMAT() {
	    return this.getToken(SnowflakeParser.TIME_OUTPUT_FORMAT, 0);
	};

	TRANSACTION_ABORT_ON_ERROR() {
	    return this.getToken(SnowflakeParser.TRANSACTION_ABORT_ON_ERROR, 0);
	};

	TRANSACTION_DEFAULT_ISOLATION_LEVEL() {
	    return this.getToken(SnowflakeParser.TRANSACTION_DEFAULT_ISOLATION_LEVEL, 0);
	};

	TWO_DIGIT_CENTURY_START() {
	    return this.getToken(SnowflakeParser.TWO_DIGIT_CENTURY_START, 0);
	};

	UNSUPPORTED_DDL_ACTION() {
	    return this.getToken(SnowflakeParser.UNSUPPORTED_DDL_ACTION, 0);
	};

	USE_CACHED_RESULT() {
	    return this.getToken(SnowflakeParser.USE_CACHED_RESULT, 0);
	};

	USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE() {
	    return this.getToken(SnowflakeParser.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE, 0);
	};

	USER_TASK_TIMEOUT_MS() {
	    return this.getToken(SnowflakeParser.USER_TASK_TIMEOUT_MS, 0);
	};

	WEEK_OF_YEAR_POLICY() {
	    return this.getToken(SnowflakeParser.WEEK_OF_YEAR_POLICY, 0);
	};

	WEEK_START() {
	    return this.getToken(SnowflakeParser.WEEK_START, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSession_parameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Session_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_session_parameter_list;
    }

	session_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Session_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Session_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSession_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Session_params_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_session_params_list;
    }

	session_params = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Session_paramsContext);
	    } else {
	        return this.getTypedRuleContext(Session_paramsContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSession_params_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_taskContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_task;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	object_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_nameContext);
	    } else {
	        return this.getTypedRuleContext(Object_nameContext,i);
	    }
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	sql() {
	    return this.getTypedRuleContext(SqlContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	task_parameters = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Task_parametersContext);
	    } else {
	        return this.getTypedRuleContext(Task_parametersContext,i);
	    }
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	copy_grants() {
	    return this.getTypedRuleContext(Copy_grantsContext,0);
	};

	AFTER() {
	    return this.getToken(SnowflakeParser.AFTER, 0);
	};

	WHEN() {
	    return this.getToken(SnowflakeParser.WHEN, 0);
	};

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_task(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Task_parametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_task_parameters;
    }

	task_compute() {
	    return this.getTypedRuleContext(Task_computeContext,0);
	};

	task_schedule() {
	    return this.getTypedRuleContext(Task_scheduleContext,0);
	};

	task_overlap() {
	    return this.getTypedRuleContext(Task_overlapContext,0);
	};

	session_params_list() {
	    return this.getTypedRuleContext(Session_params_listContext,0);
	};

	task_timeout() {
	    return this.getTypedRuleContext(Task_timeoutContext,0);
	};

	task_suspend_after_failure_number() {
	    return this.getTypedRuleContext(Task_suspend_after_failure_numberContext,0);
	};

	task_error_integration() {
	    return this.getTypedRuleContext(Task_error_integrationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTask_parameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Task_computeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_task_compute;
    }

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE() {
	    return this.getToken(SnowflakeParser.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE, 0);
	};

	wh_common_size() {
	    return this.getTypedRuleContext(Wh_common_sizeContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTask_compute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Task_scheduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_task_schedule;
    }

	SCHEDULE() {
	    return this.getToken(SnowflakeParser.SCHEDULE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTask_schedule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Task_timeoutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_task_timeout;
    }

	USER_TASK_TIMEOUT_MS() {
	    return this.getToken(SnowflakeParser.USER_TASK_TIMEOUT_MS, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTask_timeout(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Task_suspend_after_failure_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_task_suspend_after_failure_number;
    }

	SUSPEND_TASK_AFTER_NUM_FAILURES() {
	    return this.getToken(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTask_suspend_after_failure_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Task_error_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_task_error_integration;
    }

	ERROR_INTEGRATION() {
	    return this.getToken(SnowflakeParser.ERROR_INTEGRATION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTask_error_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Task_overlapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_task_overlap;
    }

	ALLOW_OVERLAPPING_EXECUTION() {
	    return this.getToken(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTask_overlap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_sql;
    }

	EXECUTE() {
	    return this.getToken(SnowflakeParser.EXECUTE, 0);
	};

	IMMEDIATE() {
	    return this.getToken(SnowflakeParser.IMMEDIATE, 0);
	};

	DBL_DOLLAR() {
	    return this.getToken(SnowflakeParser.DBL_DOLLAR, 0);
	};

	sql_command() {
	    return this.getTypedRuleContext(Sql_commandContext,0);
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_call;
    }

	CALL() {
	    return this.getToken(SnowflakeParser.CALL, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_userContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_user;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	object_properties() {
	    return this.getTypedRuleContext(Object_propertiesContext,0);
	};

	object_params() {
	    return this.getTypedRuleContext(Object_paramsContext,0);
	};

	session_params() {
	    return this.getTypedRuleContext(Session_paramsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_user(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class View_colContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_view_col;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	with_masking_policy() {
	    return this.getTypedRuleContext(With_masking_policyContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitView_col(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_viewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_view;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	query_statement() {
	    return this.getTypedRuleContext(Query_statementContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	SECURE() {
	    return this.getToken(SnowflakeParser.SECURE, 0);
	};

	RECURSIVE() {
	    return this.getToken(SnowflakeParser.RECURSIVE, 0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_list_with_comment() {
	    return this.getTypedRuleContext(Column_list_with_commentContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	view_col = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(View_colContext);
	    } else {
	        return this.getTypedRuleContext(View_colContext,i);
	    }
	};

	with_row_access_policy() {
	    return this.getTypedRuleContext(With_row_access_policyContext,0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	copy_grants() {
	    return this.getTypedRuleContext(Copy_grantsContext,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_view(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_warehouseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_create_warehouse;
    }

	CREATE() {
	    return this.getToken(SnowflakeParser.CREATE, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	id_fn() {
	    return this.getTypedRuleContext(Id_fnContext,0);
	};

	or_replace() {
	    return this.getTypedRuleContext(Or_replaceContext,0);
	};

	if_not_exists() {
	    return this.getTypedRuleContext(If_not_existsContext,0);
	};

	wh_params = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Wh_paramsContext);
	    } else {
	        return this.getTypedRuleContext(Wh_paramsContext,i);
	    }
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	wh_properties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Wh_propertiesContext);
	    } else {
	        return this.getTypedRuleContext(Wh_propertiesContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCreate_warehouse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Wh_common_sizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_wh_common_size;
    }

	XSMALL() {
	    return this.getToken(SnowflakeParser.XSMALL, 0);
	};

	SMALL() {
	    return this.getToken(SnowflakeParser.SMALL, 0);
	};

	MEDIUM() {
	    return this.getToken(SnowflakeParser.MEDIUM, 0);
	};

	LARGE() {
	    return this.getToken(SnowflakeParser.LARGE, 0);
	};

	XLARGE() {
	    return this.getToken(SnowflakeParser.XLARGE, 0);
	};

	XXLARGE() {
	    return this.getToken(SnowflakeParser.XXLARGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitWh_common_size(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Wh_extra_sizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_wh_extra_size;
    }

	XXXLARGE() {
	    return this.getToken(SnowflakeParser.XXXLARGE, 0);
	};

	X4LARGE() {
	    return this.getToken(SnowflakeParser.X4LARGE, 0);
	};

	X5LARGE() {
	    return this.getToken(SnowflakeParser.X5LARGE, 0);
	};

	X6LARGE() {
	    return this.getToken(SnowflakeParser.X6LARGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitWh_extra_size(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Wh_propertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_wh_properties;
    }

	WAREHOUSE_SIZE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE_SIZE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	wh_common_size() {
	    return this.getTypedRuleContext(Wh_common_sizeContext,0);
	};

	wh_extra_size() {
	    return this.getTypedRuleContext(Wh_extra_sizeContext,0);
	};

	ID2() {
	    return this.getToken(SnowflakeParser.ID2, 0);
	};

	WAREHOUSE_TYPE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE_TYPE, 0);
	};

	STANDARD() {
	    return this.getToken(SnowflakeParser.STANDARD, 0);
	};

	SNOWPARK_OPTIMIZED() {
	    return this.getToken(SnowflakeParser.SNOWPARK_OPTIMIZED, 0);
	};

	MAX_CLUSTER_COUNT() {
	    return this.getToken(SnowflakeParser.MAX_CLUSTER_COUNT, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	MIN_CLUSTER_COUNT() {
	    return this.getToken(SnowflakeParser.MIN_CLUSTER_COUNT, 0);
	};

	SCALING_POLICY() {
	    return this.getToken(SnowflakeParser.SCALING_POLICY, 0);
	};

	ECONOMY() {
	    return this.getToken(SnowflakeParser.ECONOMY, 0);
	};

	AUTO_SUSPEND() {
	    return this.getToken(SnowflakeParser.AUTO_SUSPEND, 0);
	};

	NULL_() {
	    return this.getToken(SnowflakeParser.NULL_, 0);
	};

	AUTO_RESUME() {
	    return this.getToken(SnowflakeParser.AUTO_RESUME, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	INITIALLY_SUSPENDED() {
	    return this.getToken(SnowflakeParser.INITIALLY_SUSPENDED, 0);
	};

	RESOURCE_MONITOR() {
	    return this.getToken(SnowflakeParser.RESOURCE_MONITOR, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	comment_clause() {
	    return this.getTypedRuleContext(Comment_clauseContext,0);
	};

	ENABLE_QUERY_ACCELERATION() {
	    return this.getToken(SnowflakeParser.ENABLE_QUERY_ACCELERATION, 0);
	};

	QUERY_ACCELERATION_MAX_SCALE_FACTOR() {
	    return this.getToken(SnowflakeParser.QUERY_ACCELERATION_MAX_SCALE_FACTOR, 0);
	};

	MAX_CONCURRENCY_LEVEL() {
	    return this.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitWh_properties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Wh_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_wh_params;
    }

	MAX_CONCURRENCY_LEVEL() {
	    return this.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	STATEMENT_QUEUED_TIMEOUT_IN_SECONDS() {
	    return this.getToken(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0);
	};

	STATEMENT_TIMEOUT_IN_SECONDS() {
	    return this.getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0);
	};

	with_tags() {
	    return this.getTypedRuleContext(With_tagsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitWh_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Trigger_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_trigger_definition;
    }

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	PERCENT() {
	    return this.getToken(SnowflakeParser.PERCENT, 0);
	};

	DO() {
	    return this.getToken(SnowflakeParser.DO, 0);
	};

	SUSPEND() {
	    return this.getToken(SnowflakeParser.SUSPEND, 0);
	};

	SUSPEND_IMMEDIATE() {
	    return this.getToken(SnowflakeParser.SUSPEND_IMMEDIATE, 0);
	};

	NOTIFY() {
	    return this.getToken(SnowflakeParser.NOTIFY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTrigger_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_type_name;
    }

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	NETWORK() {
	    return this.getToken(SnowflakeParser.NETWORK, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	FILE() {
	    return this.getToken(SnowflakeParser.FILE, 0);
	};

	FORMAT() {
	    return this.getToken(SnowflakeParser.FORMAT, 0);
	};

	STREAM() {
	    return this.getToken(SnowflakeParser.STREAM, 0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	PIPE() {
	    return this.getToken(SnowflakeParser.PIPE, 0);
	};

	FUNCTION() {
	    return this.getToken(SnowflakeParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(SnowflakeParser.PROCEDURE, 0);
	};

	SEQUENCE() {
	    return this.getToken(SnowflakeParser.SEQUENCE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_type_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_type_pluralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_type_plural;
    }

	ALERTS() {
	    return this.getToken(SnowflakeParser.ALERTS, 0);
	};

	DATABASES() {
	    return this.getToken(SnowflakeParser.DATABASES, 0);
	};

	INTEGRATIONS() {
	    return this.getToken(SnowflakeParser.INTEGRATIONS, 0);
	};

	POLICIES() {
	    return this.getToken(SnowflakeParser.POLICIES, 0);
	};

	ROLES() {
	    return this.getToken(SnowflakeParser.ROLES, 0);
	};

	SCHEMAS() {
	    return this.getToken(SnowflakeParser.SCHEMAS, 0);
	};

	STAGES() {
	    return this.getToken(SnowflakeParser.STAGES, 0);
	};

	STREAMS() {
	    return this.getToken(SnowflakeParser.STREAMS, 0);
	};

	TABLES() {
	    return this.getToken(SnowflakeParser.TABLES, 0);
	};

	TAGS() {
	    return this.getToken(SnowflakeParser.TAGS, 0);
	};

	TASKS() {
	    return this.getToken(SnowflakeParser.TASKS, 0);
	};

	USERS() {
	    return this.getToken(SnowflakeParser.USERS, 0);
	};

	VIEWS() {
	    return this.getToken(SnowflakeParser.VIEWS, 0);
	};

	WAREHOUSES() {
	    return this.getToken(SnowflakeParser.WAREHOUSES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_type_plural(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_command;
    }

	drop_object() {
	    return this.getTypedRuleContext(Drop_objectContext,0);
	};

	drop_alert() {
	    return this.getTypedRuleContext(Drop_alertContext,0);
	};

	drop_connection() {
	    return this.getTypedRuleContext(Drop_connectionContext,0);
	};

	drop_database() {
	    return this.getTypedRuleContext(Drop_databaseContext,0);
	};

	drop_dynamic_table() {
	    return this.getTypedRuleContext(Drop_dynamic_tableContext,0);
	};

	drop_external_table() {
	    return this.getTypedRuleContext(Drop_external_tableContext,0);
	};

	drop_failover_group() {
	    return this.getTypedRuleContext(Drop_failover_groupContext,0);
	};

	drop_file_format() {
	    return this.getTypedRuleContext(Drop_file_formatContext,0);
	};

	drop_function() {
	    return this.getTypedRuleContext(Drop_functionContext,0);
	};

	drop_integration() {
	    return this.getTypedRuleContext(Drop_integrationContext,0);
	};

	drop_managed_account() {
	    return this.getTypedRuleContext(Drop_managed_accountContext,0);
	};

	drop_masking_policy() {
	    return this.getTypedRuleContext(Drop_masking_policyContext,0);
	};

	drop_materialized_view() {
	    return this.getTypedRuleContext(Drop_materialized_viewContext,0);
	};

	drop_network_policy() {
	    return this.getTypedRuleContext(Drop_network_policyContext,0);
	};

	drop_password_policy() {
	    return this.getTypedRuleContext(Drop_password_policyContext,0);
	};

	drop_pipe() {
	    return this.getTypedRuleContext(Drop_pipeContext,0);
	};

	drop_procedure() {
	    return this.getTypedRuleContext(Drop_procedureContext,0);
	};

	drop_replication_group() {
	    return this.getTypedRuleContext(Drop_replication_groupContext,0);
	};

	drop_resource_monitor() {
	    return this.getTypedRuleContext(Drop_resource_monitorContext,0);
	};

	drop_role() {
	    return this.getTypedRuleContext(Drop_roleContext,0);
	};

	drop_row_access_policy() {
	    return this.getTypedRuleContext(Drop_row_access_policyContext,0);
	};

	drop_schema() {
	    return this.getTypedRuleContext(Drop_schemaContext,0);
	};

	drop_sequence() {
	    return this.getTypedRuleContext(Drop_sequenceContext,0);
	};

	drop_session_policy() {
	    return this.getTypedRuleContext(Drop_session_policyContext,0);
	};

	drop_share() {
	    return this.getTypedRuleContext(Drop_shareContext,0);
	};

	drop_stage() {
	    return this.getTypedRuleContext(Drop_stageContext,0);
	};

	drop_stream() {
	    return this.getTypedRuleContext(Drop_streamContext,0);
	};

	drop_table() {
	    return this.getTypedRuleContext(Drop_tableContext,0);
	};

	drop_tag() {
	    return this.getTypedRuleContext(Drop_tagContext,0);
	};

	drop_task() {
	    return this.getTypedRuleContext(Drop_taskContext,0);
	};

	drop_user() {
	    return this.getTypedRuleContext(Drop_userContext,0);
	};

	drop_view() {
	    return this.getTypedRuleContext(Drop_viewContext,0);
	};

	drop_warehouse() {
	    return this.getTypedRuleContext(Drop_warehouseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_objectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_object;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	object_type() {
	    return this.getTypedRuleContext(Object_typeContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	cascade_restrict() {
	    return this.getTypedRuleContext(Cascade_restrictContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_object(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_alertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_alert;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	ALERT() {
	    return this.getToken(SnowflakeParser.ALERT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_alert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_connectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_connection;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	CONNECTION() {
	    return this.getToken(SnowflakeParser.CONNECTION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_connection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_databaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_database;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	cascade_restrict() {
	    return this.getTypedRuleContext(Cascade_restrictContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_database(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_dynamic_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_dynamic_table;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	DYNAMIC() {
	    return this.getToken(SnowflakeParser.DYNAMIC, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_dynamic_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_external_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_external_table;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	EXTERNAL() {
	    return this.getToken(SnowflakeParser.EXTERNAL, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	cascade_restrict() {
	    return this.getTypedRuleContext(Cascade_restrictContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_external_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_failover_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_failover_group;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	FAILOVER() {
	    return this.getToken(SnowflakeParser.FAILOVER, 0);
	};

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_failover_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_file_formatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_file_format;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	FILE() {
	    return this.getToken(SnowflakeParser.FILE, 0);
	};

	FORMAT() {
	    return this.getToken(SnowflakeParser.FORMAT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_file_format(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_function;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(SnowflakeParser.FUNCTION, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	arg_types() {
	    return this.getTypedRuleContext(Arg_typesContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_integration;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	API() {
	    return this.getToken(SnowflakeParser.API, 0);
	};

	NOTIFICATION() {
	    return this.getToken(SnowflakeParser.NOTIFICATION, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	STORAGE() {
	    return this.getToken(SnowflakeParser.STORAGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_managed_accountContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_managed_account;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	MANAGED() {
	    return this.getToken(SnowflakeParser.MANAGED, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_managed_account(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_masking_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_masking_policy;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_masking_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_materialized_viewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_materialized_view;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SnowflakeParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_materialized_view(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_network_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_network_policy;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	NETWORK() {
	    return this.getToken(SnowflakeParser.NETWORK, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_network_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_pipeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_pipe;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	PIPE() {
	    return this.getToken(SnowflakeParser.PIPE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_pipe(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_procedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_procedure;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	PROCEDURE() {
	    return this.getToken(SnowflakeParser.PROCEDURE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	arg_types() {
	    return this.getTypedRuleContext(Arg_typesContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_procedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_replication_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_replication_group;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	REPLICATION() {
	    return this.getToken(SnowflakeParser.REPLICATION, 0);
	};

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_replication_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_resource_monitorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_resource_monitor;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	RESOURCE() {
	    return this.getToken(SnowflakeParser.RESOURCE, 0);
	};

	MONITOR() {
	    return this.getToken(SnowflakeParser.MONITOR, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_resource_monitor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_role;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_row_access_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_row_access_policy;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_row_access_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_schema;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	cascade_restrict() {
	    return this.getTypedRuleContext(Cascade_restrictContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_schema(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_sequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_sequence;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	SEQUENCE() {
	    return this.getToken(SnowflakeParser.SEQUENCE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	cascade_restrict() {
	    return this.getTypedRuleContext(Cascade_restrictContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_sequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_session_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_session_policy;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_session_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_password_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_password_policy;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	PASSWORD() {
	    return this.getToken(SnowflakeParser.PASSWORD, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_password_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_shareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_share;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	SHARE() {
	    return this.getToken(SnowflakeParser.SHARE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_share(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_streamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_stream;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	STREAM() {
	    return this.getToken(SnowflakeParser.STREAM, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_stream(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_table;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	cascade_restrict() {
	    return this.getTypedRuleContext(Cascade_restrictContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_tagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_tag;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_tag(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_taskContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_task;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_task(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_userContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_user;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_user(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_viewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_view;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_view(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_warehouseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_drop_warehouse;
    }

	DROP() {
	    return this.getToken(SnowflakeParser.DROP, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	id_fn() {
	    return this.getTypedRuleContext(Id_fnContext,0);
	};

	if_exists() {
	    return this.getTypedRuleContext(If_existsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDrop_warehouse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cascade_restrictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_cascade_restrict;
    }

	CASCADE() {
	    return this.getToken(SnowflakeParser.CASCADE, 0);
	};

	RESTRICT() {
	    return this.getToken(SnowflakeParser.RESTRICT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCascade_restrict(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arg_typesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_arg_types;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	data_type_list() {
	    return this.getTypedRuleContext(Data_type_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitArg_types(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Undrop_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_undrop_command;
    }

	undrop_database() {
	    return this.getTypedRuleContext(Undrop_databaseContext,0);
	};

	undrop_schema() {
	    return this.getTypedRuleContext(Undrop_schemaContext,0);
	};

	undrop_table() {
	    return this.getTypedRuleContext(Undrop_tableContext,0);
	};

	undrop_tag() {
	    return this.getTypedRuleContext(Undrop_tagContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUndrop_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Undrop_databaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_undrop_database;
    }

	UNDROP() {
	    return this.getToken(SnowflakeParser.UNDROP, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUndrop_database(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Undrop_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_undrop_schema;
    }

	UNDROP() {
	    return this.getToken(SnowflakeParser.UNDROP, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUndrop_schema(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Undrop_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_undrop_table;
    }

	UNDROP() {
	    return this.getToken(SnowflakeParser.UNDROP, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUndrop_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Undrop_tagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_undrop_tag;
    }

	UNDROP() {
	    return this.getToken(SnowflakeParser.UNDROP, 0);
	};

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUndrop_tag(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Use_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_use_command;
    }

	use_database() {
	    return this.getTypedRuleContext(Use_databaseContext,0);
	};

	use_role() {
	    return this.getTypedRuleContext(Use_roleContext,0);
	};

	use_schema() {
	    return this.getTypedRuleContext(Use_schemaContext,0);
	};

	use_secondary_roles() {
	    return this.getTypedRuleContext(Use_secondary_rolesContext,0);
	};

	use_warehouse() {
	    return this.getTypedRuleContext(Use_warehouseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUse_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Use_databaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_use_database;
    }

	USE() {
	    return this.getToken(SnowflakeParser.USE, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUse_database(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Use_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_use_role;
    }

	USE() {
	    return this.getToken(SnowflakeParser.USE, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUse_role(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Use_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_use_schema;
    }

	USE() {
	    return this.getToken(SnowflakeParser.USE, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	DOT() {
	    return this.getToken(SnowflakeParser.DOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUse_schema(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Use_secondary_rolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_use_secondary_roles;
    }

	USE() {
	    return this.getToken(SnowflakeParser.USE, 0);
	};

	SECONDARY() {
	    return this.getToken(SnowflakeParser.SECONDARY, 0);
	};

	ROLES() {
	    return this.getToken(SnowflakeParser.ROLES, 0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	NONE() {
	    return this.getToken(SnowflakeParser.NONE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUse_secondary_roles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Use_warehouseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_use_warehouse;
    }

	USE() {
	    return this.getToken(SnowflakeParser.USE, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	id_fn() {
	    return this.getTypedRuleContext(Id_fnContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUse_warehouse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comment_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_comment_clause;
    }

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitComment_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class If_suspendedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_if_suspended;
    }

	IF() {
	    return this.getToken(SnowflakeParser.IF, 0);
	};

	SUSPENDED() {
	    return this.getToken(SnowflakeParser.SUSPENDED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIf_suspended(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class If_existsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_if_exists;
    }

	IF() {
	    return this.getToken(SnowflakeParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SnowflakeParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIf_exists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class If_not_existsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_if_not_exists;
    }

	IF() {
	    return this.getToken(SnowflakeParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SnowflakeParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SnowflakeParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIf_not_exists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Or_replaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_or_replace;
    }

	OR() {
	    return this.getToken(SnowflakeParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SnowflakeParser.REPLACE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOr_replace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescribeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe;
    }

	DESC() {
	    return this.getToken(SnowflakeParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(SnowflakeParser.DESCRIBE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_command;
    }

	describe_alert() {
	    return this.getTypedRuleContext(Describe_alertContext,0);
	};

	describe_database() {
	    return this.getTypedRuleContext(Describe_databaseContext,0);
	};

	describe_dynamic_table() {
	    return this.getTypedRuleContext(Describe_dynamic_tableContext,0);
	};

	describe_event_table() {
	    return this.getTypedRuleContext(Describe_event_tableContext,0);
	};

	describe_external_table() {
	    return this.getTypedRuleContext(Describe_external_tableContext,0);
	};

	describe_file_format() {
	    return this.getTypedRuleContext(Describe_file_formatContext,0);
	};

	describe_function() {
	    return this.getTypedRuleContext(Describe_functionContext,0);
	};

	describe_integration() {
	    return this.getTypedRuleContext(Describe_integrationContext,0);
	};

	describe_masking_policy() {
	    return this.getTypedRuleContext(Describe_masking_policyContext,0);
	};

	describe_materialized_view() {
	    return this.getTypedRuleContext(Describe_materialized_viewContext,0);
	};

	describe_network_policy() {
	    return this.getTypedRuleContext(Describe_network_policyContext,0);
	};

	describe_password_policy() {
	    return this.getTypedRuleContext(Describe_password_policyContext,0);
	};

	describe_pipe() {
	    return this.getTypedRuleContext(Describe_pipeContext,0);
	};

	describe_procedure() {
	    return this.getTypedRuleContext(Describe_procedureContext,0);
	};

	describe_result() {
	    return this.getTypedRuleContext(Describe_resultContext,0);
	};

	describe_row_access_policy() {
	    return this.getTypedRuleContext(Describe_row_access_policyContext,0);
	};

	describe_schema() {
	    return this.getTypedRuleContext(Describe_schemaContext,0);
	};

	describe_search_optimization() {
	    return this.getTypedRuleContext(Describe_search_optimizationContext,0);
	};

	describe_sequence() {
	    return this.getTypedRuleContext(Describe_sequenceContext,0);
	};

	describe_session_policy() {
	    return this.getTypedRuleContext(Describe_session_policyContext,0);
	};

	describe_share() {
	    return this.getTypedRuleContext(Describe_shareContext,0);
	};

	describe_stage() {
	    return this.getTypedRuleContext(Describe_stageContext,0);
	};

	describe_stream() {
	    return this.getTypedRuleContext(Describe_streamContext,0);
	};

	describe_table() {
	    return this.getTypedRuleContext(Describe_tableContext,0);
	};

	describe_task() {
	    return this.getTypedRuleContext(Describe_taskContext,0);
	};

	describe_transaction() {
	    return this.getTypedRuleContext(Describe_transactionContext,0);
	};

	describe_user() {
	    return this.getTypedRuleContext(Describe_userContext,0);
	};

	describe_view() {
	    return this.getTypedRuleContext(Describe_viewContext,0);
	};

	describe_warehouse() {
	    return this.getTypedRuleContext(Describe_warehouseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_alertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_alert;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	ALERT() {
	    return this.getToken(SnowflakeParser.ALERT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_alert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_databaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_database;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_database(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_dynamic_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_dynamic_table;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	DYNAMIC() {
	    return this.getToken(SnowflakeParser.DYNAMIC, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_dynamic_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_event_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_event_table;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	EVENT() {
	    return this.getToken(SnowflakeParser.EVENT, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_event_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_external_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_external_table;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	EXTERNAL() {
	    return this.getToken(SnowflakeParser.EXTERNAL, 0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	COLUMNS() {
	    return this.getToken(SnowflakeParser.COLUMNS, 0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_external_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_file_formatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_file_format;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	FILE() {
	    return this.getToken(SnowflakeParser.FILE, 0);
	};

	FORMAT() {
	    return this.getToken(SnowflakeParser.FORMAT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_file_format(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_function;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	FUNCTION() {
	    return this.getToken(SnowflakeParser.FUNCTION, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	arg_types() {
	    return this.getTypedRuleContext(Arg_typesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_integrationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_integration;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	API() {
	    return this.getToken(SnowflakeParser.API, 0);
	};

	NOTIFICATION() {
	    return this.getToken(SnowflakeParser.NOTIFICATION, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	STORAGE() {
	    return this.getToken(SnowflakeParser.STORAGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_integration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_masking_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_masking_policy;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_masking_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_materialized_viewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_materialized_view;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	MATERIALIZED() {
	    return this.getToken(SnowflakeParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_materialized_view(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_network_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_network_policy;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	NETWORK() {
	    return this.getToken(SnowflakeParser.NETWORK, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_network_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_pipeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_pipe;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	PIPE() {
	    return this.getToken(SnowflakeParser.PIPE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_pipe(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_procedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_procedure;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	PROCEDURE() {
	    return this.getToken(SnowflakeParser.PROCEDURE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	arg_types() {
	    return this.getTypedRuleContext(Arg_typesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_procedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_resultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_result;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	RESULT() {
	    return this.getToken(SnowflakeParser.RESULT, 0);
	};

	STRING() {
	    return this.getToken(SnowflakeParser.STRING, 0);
	};

	LAST_QUERY_ID() {
	    return this.getToken(SnowflakeParser.LAST_QUERY_ID, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_result(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_row_access_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_row_access_policy;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_row_access_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_schema;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_schema(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_search_optimizationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_search_optimization;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	SEARCH() {
	    return this.getToken(SnowflakeParser.SEARCH, 0);
	};

	OPTIMIZATION() {
	    return this.getToken(SnowflakeParser.OPTIMIZATION, 0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_search_optimization(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_sequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_sequence;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	SEQUENCE() {
	    return this.getToken(SnowflakeParser.SEQUENCE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_sequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_session_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_session_policy;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_session_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_password_policyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_password_policy;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	PASSWORD() {
	    return this.getToken(SnowflakeParser.PASSWORD, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_password_policy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_shareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_share;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	SHARE() {
	    return this.getToken(SnowflakeParser.SHARE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_share(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_streamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_stream;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	STREAM() {
	    return this.getToken(SnowflakeParser.STREAM, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_stream(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_table;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	COLUMNS() {
	    return this.getToken(SnowflakeParser.COLUMNS, 0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_taskContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_task;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_task(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_transactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_transaction;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	TRANSACTION() {
	    return this.getToken(SnowflakeParser.TRANSACTION, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_transaction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_userContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_user;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_user(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_viewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_view;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_view(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Describe_warehouseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_describe_warehouse;
    }

	describe() {
	    return this.getTypedRuleContext(DescribeContext,0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDescribe_warehouse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_command;
    }

	show_alerts() {
	    return this.getTypedRuleContext(Show_alertsContext,0);
	};

	show_channels() {
	    return this.getTypedRuleContext(Show_channelsContext,0);
	};

	show_columns() {
	    return this.getTypedRuleContext(Show_columnsContext,0);
	};

	show_connections() {
	    return this.getTypedRuleContext(Show_connectionsContext,0);
	};

	show_databases() {
	    return this.getTypedRuleContext(Show_databasesContext,0);
	};

	show_databases_in_failover_group() {
	    return this.getTypedRuleContext(Show_databases_in_failover_groupContext,0);
	};

	show_databases_in_replication_group() {
	    return this.getTypedRuleContext(Show_databases_in_replication_groupContext,0);
	};

	show_delegated_authorizations() {
	    return this.getTypedRuleContext(Show_delegated_authorizationsContext,0);
	};

	show_dynamic_tables() {
	    return this.getTypedRuleContext(Show_dynamic_tablesContext,0);
	};

	show_event_tables() {
	    return this.getTypedRuleContext(Show_event_tablesContext,0);
	};

	show_external_functions() {
	    return this.getTypedRuleContext(Show_external_functionsContext,0);
	};

	show_external_tables() {
	    return this.getTypedRuleContext(Show_external_tablesContext,0);
	};

	show_failover_groups() {
	    return this.getTypedRuleContext(Show_failover_groupsContext,0);
	};

	show_file_formats() {
	    return this.getTypedRuleContext(Show_file_formatsContext,0);
	};

	show_functions() {
	    return this.getTypedRuleContext(Show_functionsContext,0);
	};

	show_global_accounts() {
	    return this.getTypedRuleContext(Show_global_accountsContext,0);
	};

	show_grants() {
	    return this.getTypedRuleContext(Show_grantsContext,0);
	};

	show_integrations() {
	    return this.getTypedRuleContext(Show_integrationsContext,0);
	};

	show_locks() {
	    return this.getTypedRuleContext(Show_locksContext,0);
	};

	show_managed_accounts() {
	    return this.getTypedRuleContext(Show_managed_accountsContext,0);
	};

	show_masking_policies() {
	    return this.getTypedRuleContext(Show_masking_policiesContext,0);
	};

	show_materialized_views() {
	    return this.getTypedRuleContext(Show_materialized_viewsContext,0);
	};

	show_network_policies() {
	    return this.getTypedRuleContext(Show_network_policiesContext,0);
	};

	show_objects() {
	    return this.getTypedRuleContext(Show_objectsContext,0);
	};

	show_organization_accounts() {
	    return this.getTypedRuleContext(Show_organization_accountsContext,0);
	};

	show_parameters() {
	    return this.getTypedRuleContext(Show_parametersContext,0);
	};

	show_password_policies() {
	    return this.getTypedRuleContext(Show_password_policiesContext,0);
	};

	show_pipes() {
	    return this.getTypedRuleContext(Show_pipesContext,0);
	};

	show_primary_keys() {
	    return this.getTypedRuleContext(Show_primary_keysContext,0);
	};

	show_procedures() {
	    return this.getTypedRuleContext(Show_proceduresContext,0);
	};

	show_regions() {
	    return this.getTypedRuleContext(Show_regionsContext,0);
	};

	show_replication_accounts() {
	    return this.getTypedRuleContext(Show_replication_accountsContext,0);
	};

	show_replication_databases() {
	    return this.getTypedRuleContext(Show_replication_databasesContext,0);
	};

	show_replication_groups() {
	    return this.getTypedRuleContext(Show_replication_groupsContext,0);
	};

	show_resource_monitors() {
	    return this.getTypedRuleContext(Show_resource_monitorsContext,0);
	};

	show_roles() {
	    return this.getTypedRuleContext(Show_rolesContext,0);
	};

	show_row_access_policies() {
	    return this.getTypedRuleContext(Show_row_access_policiesContext,0);
	};

	show_schemas() {
	    return this.getTypedRuleContext(Show_schemasContext,0);
	};

	show_sequences() {
	    return this.getTypedRuleContext(Show_sequencesContext,0);
	};

	show_session_policies() {
	    return this.getTypedRuleContext(Show_session_policiesContext,0);
	};

	show_shares() {
	    return this.getTypedRuleContext(Show_sharesContext,0);
	};

	show_shares_in_failover_group() {
	    return this.getTypedRuleContext(Show_shares_in_failover_groupContext,0);
	};

	show_shares_in_replication_group() {
	    return this.getTypedRuleContext(Show_shares_in_replication_groupContext,0);
	};

	show_stages() {
	    return this.getTypedRuleContext(Show_stagesContext,0);
	};

	show_streams() {
	    return this.getTypedRuleContext(Show_streamsContext,0);
	};

	show_tables() {
	    return this.getTypedRuleContext(Show_tablesContext,0);
	};

	show_tags() {
	    return this.getTypedRuleContext(Show_tagsContext,0);
	};

	show_tasks() {
	    return this.getTypedRuleContext(Show_tasksContext,0);
	};

	show_transactions() {
	    return this.getTypedRuleContext(Show_transactionsContext,0);
	};

	show_user_functions() {
	    return this.getTypedRuleContext(Show_user_functionsContext,0);
	};

	show_users() {
	    return this.getTypedRuleContext(Show_usersContext,0);
	};

	show_variables() {
	    return this.getTypedRuleContext(Show_variablesContext,0);
	};

	show_views() {
	    return this.getTypedRuleContext(Show_viewsContext,0);
	};

	show_warehouses() {
	    return this.getTypedRuleContext(Show_warehousesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_command(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_alertsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_alerts;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	ALERTS() {
	    return this.getToken(SnowflakeParser.ALERTS, 0);
	};

	TERSE() {
	    return this.getToken(SnowflakeParser.TERSE, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	starts_with() {
	    return this.getTypedRuleContext(Starts_withContext,0);
	};

	limit_rows() {
	    return this.getTypedRuleContext(Limit_rowsContext,0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_alerts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_channelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_channels;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	CHANNELS() {
	    return this.getToken(SnowflakeParser.CHANNELS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_channels(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_columnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_columns;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	COLUMNS() {
	    return this.getToken(SnowflakeParser.COLUMNS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	VIEW() {
	    return this.getToken(SnowflakeParser.VIEW, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_columns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_connectionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_connections;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	CONNECTIONS() {
	    return this.getToken(SnowflakeParser.CONNECTIONS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_connections(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Starts_withContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_starts_with;
    }

	STARTS() {
	    return this.getToken(SnowflakeParser.STARTS, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitStarts_with(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Limit_rowsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_limit_rows;
    }

	LIMIT() {
	    return this.getToken(SnowflakeParser.LIMIT, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitLimit_rows(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_databasesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_databases;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	DATABASES() {
	    return this.getToken(SnowflakeParser.DATABASES, 0);
	};

	TERSE() {
	    return this.getToken(SnowflakeParser.TERSE, 0);
	};

	HISTORY() {
	    return this.getToken(SnowflakeParser.HISTORY, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	starts_with() {
	    return this.getTypedRuleContext(Starts_withContext,0);
	};

	limit_rows() {
	    return this.getTypedRuleContext(Limit_rowsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_databases(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_databases_in_failover_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_databases_in_failover_group;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	DATABASES() {
	    return this.getToken(SnowflakeParser.DATABASES, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	FAILOVER() {
	    return this.getToken(SnowflakeParser.FAILOVER, 0);
	};

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_databases_in_failover_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_databases_in_replication_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_databases_in_replication_group;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	DATABASES() {
	    return this.getToken(SnowflakeParser.DATABASES, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	REPLICATION() {
	    return this.getToken(SnowflakeParser.REPLICATION, 0);
	};

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_databases_in_replication_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_delegated_authorizationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_delegated_authorizations;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	DELEGATED() {
	    return this.getToken(SnowflakeParser.DELEGATED, 0);
	};

	AUTHORIZATIONS() {
	    return this.getToken(SnowflakeParser.AUTHORIZATIONS, 0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(SnowflakeParser.INTEGRATION, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_delegated_authorizations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_dynamic_tablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_dynamic_tables;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	DYNAMIC() {
	    return this.getToken(SnowflakeParser.DYNAMIC, 0);
	};

	TABLES() {
	    return this.getToken(SnowflakeParser.TABLES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	starts_with() {
	    return this.getTypedRuleContext(Starts_withContext,0);
	};

	limit_rows() {
	    return this.getTypedRuleContext(Limit_rowsContext,0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_dynamic_tables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_event_tablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_event_tables;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	EVENT() {
	    return this.getToken(SnowflakeParser.EVENT, 0);
	};

	TABLES() {
	    return this.getToken(SnowflakeParser.TABLES, 0);
	};

	TERSE() {
	    return this.getToken(SnowflakeParser.TERSE, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	starts_with() {
	    return this.getTypedRuleContext(Starts_withContext,0);
	};

	limit_rows() {
	    return this.getTypedRuleContext(Limit_rowsContext,0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_event_tables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_external_functionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_external_functions;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	EXTERNAL() {
	    return this.getToken(SnowflakeParser.EXTERNAL, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SnowflakeParser.FUNCTIONS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_external_functions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_external_tablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_external_tables;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	EXTERNAL() {
	    return this.getToken(SnowflakeParser.EXTERNAL, 0);
	};

	TABLES() {
	    return this.getToken(SnowflakeParser.TABLES, 0);
	};

	TERSE() {
	    return this.getToken(SnowflakeParser.TERSE, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	starts_with() {
	    return this.getTypedRuleContext(Starts_withContext,0);
	};

	limit_rows() {
	    return this.getTypedRuleContext(Limit_rowsContext,0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_external_tables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_failover_groupsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_failover_groups;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	FAILOVER() {
	    return this.getToken(SnowflakeParser.FAILOVER, 0);
	};

	GROUPS() {
	    return this.getToken(SnowflakeParser.GROUPS, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_failover_groups(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_file_formatsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_file_formats;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	FILE() {
	    return this.getToken(SnowflakeParser.FILE, 0);
	};

	FORMATS() {
	    return this.getToken(SnowflakeParser.FORMATS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_file_formats(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_functionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_functions;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SnowflakeParser.FUNCTIONS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_functions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_global_accountsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_global_accounts;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	GLOBAL() {
	    return this.getToken(SnowflakeParser.GLOBAL, 0);
	};

	ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ACCOUNTS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_global_accounts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_grantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_grants;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	GRANTS() {
	    return this.getToken(SnowflakeParser.GRANTS, 0);
	};

	show_grants_opts() {
	    return this.getTypedRuleContext(Show_grants_optsContext,0);
	};

	FUTURE() {
	    return this.getToken(SnowflakeParser.FUTURE, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_grants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_grants_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_grants_opts;
    }

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	object_type() {
	    return this.getTypedRuleContext(Object_typeContext,0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	SHARE() {
	    return this.getToken(SnowflakeParser.SHARE, 0);
	};

	OF() {
	    return this.getToken(SnowflakeParser.OF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_grants_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_integrationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_integrations;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	INTEGRATIONS() {
	    return this.getToken(SnowflakeParser.INTEGRATIONS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	API() {
	    return this.getToken(SnowflakeParser.API, 0);
	};

	NOTIFICATION() {
	    return this.getToken(SnowflakeParser.NOTIFICATION, 0);
	};

	SECURITY() {
	    return this.getToken(SnowflakeParser.SECURITY, 0);
	};

	STORAGE() {
	    return this.getToken(SnowflakeParser.STORAGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_integrations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_locksContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_locks;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	LOCKS() {
	    return this.getToken(SnowflakeParser.LOCKS, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_locks(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_managed_accountsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_managed_accounts;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	MANAGED() {
	    return this.getToken(SnowflakeParser.MANAGED, 0);
	};

	ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ACCOUNTS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_managed_accounts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_masking_policiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_masking_policies;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	MASKING() {
	    return this.getToken(SnowflakeParser.MASKING, 0);
	};

	POLICIES() {
	    return this.getToken(SnowflakeParser.POLICIES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_masking_policies(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class In_objContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_in_obj;
    }

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIn_obj(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class In_obj_2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_in_obj_2;
    }

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIn_obj_2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_materialized_viewsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_materialized_views;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SnowflakeParser.MATERIALIZED, 0);
	};

	VIEWS() {
	    return this.getToken(SnowflakeParser.VIEWS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_materialized_views(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_network_policiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_network_policies;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	NETWORK() {
	    return this.getToken(SnowflakeParser.NETWORK, 0);
	};

	POLICIES() {
	    return this.getToken(SnowflakeParser.POLICIES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_network_policies(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_objectsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_objects;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	OBJECTS() {
	    return this.getToken(SnowflakeParser.OBJECTS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_objects(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_organization_accountsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_organization_accounts;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	ORGANIZATION() {
	    return this.getToken(SnowflakeParser.ORGANIZATION, 0);
	};

	ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ACCOUNTS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_organization_accounts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class In_forContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_in_for;
    }

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	FOR() {
	    return this.getToken(SnowflakeParser.FOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIn_for(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_parametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_parameters;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	PARAMETERS() {
	    return this.getToken(SnowflakeParser.PARAMETERS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_for() {
	    return this.getTypedRuleContext(In_forContext,0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	TASK() {
	    return this.getToken(SnowflakeParser.TASK, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_parameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_pipesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_pipes;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	PIPES() {
	    return this.getToken(SnowflakeParser.PIPES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_pipes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_primary_keysContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_primary_keys;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	PRIMARY() {
	    return this.getToken(SnowflakeParser.PRIMARY, 0);
	};

	KEYS() {
	    return this.getToken(SnowflakeParser.KEYS, 0);
	};

	TERSE() {
	    return this.getToken(SnowflakeParser.TERSE, 0);
	};

	in_obj_2() {
	    return this.getTypedRuleContext(In_obj_2Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_primary_keys(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_proceduresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_procedures;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	PROCEDURES() {
	    return this.getToken(SnowflakeParser.PROCEDURES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_procedures(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_regionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_regions;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	REGIONS() {
	    return this.getToken(SnowflakeParser.REGIONS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_regions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_replication_accountsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_replication_accounts;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	REPLICATION() {
	    return this.getToken(SnowflakeParser.REPLICATION, 0);
	};

	ACCOUNTS() {
	    return this.getToken(SnowflakeParser.ACCOUNTS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_replication_accounts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_replication_databasesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_replication_databases;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	REPLICATION() {
	    return this.getToken(SnowflakeParser.REPLICATION, 0);
	};

	DATABASES() {
	    return this.getToken(SnowflakeParser.DATABASES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	PRIMARY() {
	    return this.getToken(SnowflakeParser.PRIMARY, 0);
	};

	account_identifier() {
	    return this.getTypedRuleContext(Account_identifierContext,0);
	};

	DOT() {
	    return this.getToken(SnowflakeParser.DOT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_replication_databases(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_replication_groupsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_replication_groups;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	REPLICATION() {
	    return this.getToken(SnowflakeParser.REPLICATION, 0);
	};

	GROUPS() {
	    return this.getToken(SnowflakeParser.GROUPS, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_replication_groups(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_resource_monitorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_resource_monitors;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	RESOURCE() {
	    return this.getToken(SnowflakeParser.RESOURCE, 0);
	};

	MONITORS() {
	    return this.getToken(SnowflakeParser.MONITORS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_resource_monitors(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_rolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_roles;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	ROLES() {
	    return this.getToken(SnowflakeParser.ROLES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_roles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_row_access_policiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_row_access_policies;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ACCESS() {
	    return this.getToken(SnowflakeParser.ACCESS, 0);
	};

	POLICIES() {
	    return this.getToken(SnowflakeParser.POLICIES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_row_access_policies(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_schemasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_schemas;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	SCHEMAS() {
	    return this.getToken(SnowflakeParser.SCHEMAS, 0);
	};

	TERSE() {
	    return this.getToken(SnowflakeParser.TERSE, 0);
	};

	HISTORY() {
	    return this.getToken(SnowflakeParser.HISTORY, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	starts_with() {
	    return this.getTypedRuleContext(Starts_withContext,0);
	};

	limit_rows() {
	    return this.getTypedRuleContext(Limit_rowsContext,0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_schemas(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_sequencesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_sequences;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	SEQUENCES() {
	    return this.getToken(SnowflakeParser.SEQUENCES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_sequences(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_session_policiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_session_policies;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	POLICIES() {
	    return this.getToken(SnowflakeParser.POLICIES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_session_policies(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_password_policiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_password_policies;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	PASSWORD() {
	    return this.getToken(SnowflakeParser.PASSWORD, 0);
	};

	POLICIES() {
	    return this.getToken(SnowflakeParser.POLICIES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_password_policies(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_sharesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_shares;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	SHARES() {
	    return this.getToken(SnowflakeParser.SHARES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_shares(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_shares_in_failover_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_shares_in_failover_group;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	SHARES() {
	    return this.getToken(SnowflakeParser.SHARES, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	FAILOVER() {
	    return this.getToken(SnowflakeParser.FAILOVER, 0);
	};

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_shares_in_failover_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_shares_in_replication_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_shares_in_replication_group;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	SHARES() {
	    return this.getToken(SnowflakeParser.SHARES, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	REPLICATION() {
	    return this.getToken(SnowflakeParser.REPLICATION, 0);
	};

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_shares_in_replication_group(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_streamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_streams;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	STREAMS() {
	    return this.getToken(SnowflakeParser.STREAMS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_streams(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_tablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_tables;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	TABLES() {
	    return this.getToken(SnowflakeParser.TABLES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_tables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_tagsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_tags;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	TAGS() {
	    return this.getToken(SnowflakeParser.TAGS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_tags(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_tasksContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_tasks;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	TASKS() {
	    return this.getToken(SnowflakeParser.TASKS, 0);
	};

	TERSE() {
	    return this.getToken(SnowflakeParser.TERSE, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	starts_with() {
	    return this.getTypedRuleContext(Starts_withContext,0);
	};

	limit_rows() {
	    return this.getTypedRuleContext(Limit_rowsContext,0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_tasks(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_transactionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_transactions;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	TRANSACTIONS() {
	    return this.getToken(SnowflakeParser.TRANSACTIONS, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_transactions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_user_functionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_user_functions;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SnowflakeParser.FUNCTIONS, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	in_obj() {
	    return this.getTypedRuleContext(In_objContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_user_functions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_usersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_users;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	USERS() {
	    return this.getToken(SnowflakeParser.USERS, 0);
	};

	TERSE() {
	    return this.getToken(SnowflakeParser.TERSE, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	STARTS() {
	    return this.getToken(SnowflakeParser.STARTS, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	LIMIT() {
	    return this.getToken(SnowflakeParser.LIMIT, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_users(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_variablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_variables;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	VARIABLES() {
	    return this.getToken(SnowflakeParser.VARIABLES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_variables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_viewsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_views;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	VIEWS() {
	    return this.getToken(SnowflakeParser.VIEWS, 0);
	};

	TERSE() {
	    return this.getToken(SnowflakeParser.TERSE, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	starts_with() {
	    return this.getTypedRuleContext(Starts_withContext,0);
	};

	limit_rows() {
	    return this.getTypedRuleContext(Limit_rowsContext,0);
	};

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	DATABASE() {
	    return this.getToken(SnowflakeParser.DATABASE, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	SCHEMA() {
	    return this.getToken(SnowflakeParser.SCHEMA, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_views(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Show_warehousesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_show_warehouses;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	WAREHOUSES() {
	    return this.getToken(SnowflakeParser.WAREHOUSES, 0);
	};

	like_pattern() {
	    return this.getTypedRuleContext(Like_patternContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitShow_warehouses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Like_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_like_pattern;
    }

	LIKE() {
	    return this.getToken(SnowflakeParser.LIKE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitLike_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Account_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_account_identifier;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAccount_identifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Schema_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_schema_name;
        this.d = null;
        this.s = null;
    }

	DOT() {
	    return this.getToken(SnowflakeParser.DOT, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSchema_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_type;
    }

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	PARAMETERS() {
	    return this.getToken(SnowflakeParser.PARAMETERS, 0);
	};

	DATABASES() {
	    return this.getToken(SnowflakeParser.DATABASES, 0);
	};

	INTEGRATIONS() {
	    return this.getToken(SnowflakeParser.INTEGRATIONS, 0);
	};

	NETWORK() {
	    return this.getToken(SnowflakeParser.NETWORK, 0);
	};

	POLICIES() {
	    return this.getToken(SnowflakeParser.POLICIES, 0);
	};

	RESOURCE() {
	    return this.getToken(SnowflakeParser.RESOURCE, 0);
	};

	MONITORS() {
	    return this.getToken(SnowflakeParser.MONITORS, 0);
	};

	ROLES() {
	    return this.getToken(SnowflakeParser.ROLES, 0);
	};

	SHARES() {
	    return this.getToken(SnowflakeParser.SHARES, 0);
	};

	USERS() {
	    return this.getToken(SnowflakeParser.USERS, 0);
	};

	WAREHOUSES() {
	    return this.getToken(SnowflakeParser.WAREHOUSES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_type_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_type_list;
    }

	object_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_typeContext);
	    } else {
	        return this.getTypedRuleContext(Object_typeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_type_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Tag_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_tag_value;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTag_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arg_data_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_arg_data_type;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitArg_data_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arg_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_arg_name;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitArg_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_param_name;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitParam_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Region_group_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_region_group_id;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRegion_group_id(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Snowflake_region_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_snowflake_region_id;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSnowflake_region_id(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_string;
    }

	STRING() {
	    return this.getToken(SnowflakeParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class String_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_string_list;
    }

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitString_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Id_fnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_id_fn;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	IDENTIFIER() {
	    return this.getToken(SnowflakeParser.IDENTIFIER, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitId_fn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Id_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_id_;
    }

	ID() {
	    return this.getToken(SnowflakeParser.ID, 0);
	};

	ID2() {
	    return this.getToken(SnowflakeParser.ID2, 0);
	};

	DOUBLE_QUOTE_ID() {
	    return this.getToken(SnowflakeParser.DOUBLE_QUOTE_ID, 0);
	};

	DOUBLE_QUOTE_BLANK() {
	    return this.getToken(SnowflakeParser.DOUBLE_QUOTE_BLANK, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	non_reserved_words() {
	    return this.getTypedRuleContext(Non_reserved_wordsContext,0);
	};

	object_type_plural() {
	    return this.getTypedRuleContext(Object_type_pluralContext,0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	builtin_function() {
	    return this.getTypedRuleContext(Builtin_functionContext,0);
	};

	unary_or_binary_builtin_function() {
	    return this.getTypedRuleContext(Unary_or_binary_builtin_functionContext,0);
	};

	binary_builtin_function() {
	    return this.getTypedRuleContext(Binary_builtin_functionContext,0);
	};

	binary_or_ternary_builtin_function() {
	    return this.getTypedRuleContext(Binary_or_ternary_builtin_functionContext,0);
	};

	ternary_builtin_function() {
	    return this.getTypedRuleContext(Ternary_builtin_functionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitId_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_keyword;
    }

	ACCOUNT() {
	    return this.getToken(SnowflakeParser.ACCOUNT, 0);
	};

	ALERT() {
	    return this.getToken(SnowflakeParser.ALERT, 0);
	};

	ACTION() {
	    return this.getToken(SnowflakeParser.ACTION, 0);
	};

	AT_KEYWORD() {
	    return this.getToken(SnowflakeParser.AT_KEYWORD, 0);
	};

	CLUSTER() {
	    return this.getToken(SnowflakeParser.CLUSTER, 0);
	};

	COMMENT() {
	    return this.getToken(SnowflakeParser.COMMENT, 0);
	};

	CONDITION() {
	    return this.getToken(SnowflakeParser.CONDITION, 0);
	};

	COPY_OPTIONS_() {
	    return this.getToken(SnowflakeParser.COPY_OPTIONS_, 0);
	};

	DIRECTION() {
	    return this.getToken(SnowflakeParser.DIRECTION, 0);
	};

	EMAIL() {
	    return this.getToken(SnowflakeParser.EMAIL, 0);
	};

	FIRST_VALUE() {
	    return this.getToken(SnowflakeParser.FIRST_VALUE, 0);
	};

	FLATTEN() {
	    return this.getToken(SnowflakeParser.FLATTEN, 0);
	};

	FUNCTION() {
	    return this.getToken(SnowflakeParser.FUNCTION, 0);
	};

	IF() {
	    return this.getToken(SnowflakeParser.IF, 0);
	};

	JOIN() {
	    return this.getToken(SnowflakeParser.JOIN, 0);
	};

	KEY() {
	    return this.getToken(SnowflakeParser.KEY, 0);
	};

	LANGUAGE() {
	    return this.getToken(SnowflakeParser.LANGUAGE, 0);
	};

	LENGTH() {
	    return this.getToken(SnowflakeParser.LENGTH, 0);
	};

	MAX_CONCURRENCY_LEVEL() {
	    return this.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0);
	};

	MODE() {
	    return this.getToken(SnowflakeParser.MODE, 0);
	};

	NOORDER() {
	    return this.getToken(SnowflakeParser.NOORDER, 0);
	};

	ORDER() {
	    return this.getToken(SnowflakeParser.ORDER, 0);
	};

	OUTER() {
	    return this.getToken(SnowflakeParser.OUTER, 0);
	};

	POLICY() {
	    return this.getToken(SnowflakeParser.POLICY, 0);
	};

	RECURSIVE() {
	    return this.getToken(SnowflakeParser.RECURSIVE, 0);
	};

	REGION() {
	    return this.getToken(SnowflakeParser.REGION, 0);
	};

	ROLE() {
	    return this.getToken(SnowflakeParser.ROLE, 0);
	};

	ROLLUP() {
	    return this.getToken(SnowflakeParser.ROLLUP, 0);
	};

	ROW_NUMBER() {
	    return this.getToken(SnowflakeParser.ROW_NUMBER, 0);
	};

	SEQUENCE() {
	    return this.getToken(SnowflakeParser.SEQUENCE, 0);
	};

	SESSION() {
	    return this.getToken(SnowflakeParser.SESSION, 0);
	};

	STAGE() {
	    return this.getToken(SnowflakeParser.STAGE, 0);
	};

	TAG() {
	    return this.getToken(SnowflakeParser.TAG, 0);
	};

	TARGET_LAG() {
	    return this.getToken(SnowflakeParser.TARGET_LAG, 0);
	};

	TEMP() {
	    return this.getToken(SnowflakeParser.TEMP, 0);
	};

	TYPE() {
	    return this.getToken(SnowflakeParser.TYPE, 0);
	};

	USER() {
	    return this.getToken(SnowflakeParser.USER, 0);
	};

	VALUE() {
	    return this.getToken(SnowflakeParser.VALUE, 0);
	};

	VALUES() {
	    return this.getToken(SnowflakeParser.VALUES, 0);
	};

	WAREHOUSE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE, 0);
	};

	WAREHOUSE_TYPE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE_TYPE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Non_reserved_wordsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_non_reserved_words;
    }

	ACCOUNTADMIN() {
	    return this.getToken(SnowflakeParser.ACCOUNTADMIN, 0);
	};

	AES() {
	    return this.getToken(SnowflakeParser.AES, 0);
	};

	ARRAY_AGG() {
	    return this.getToken(SnowflakeParser.ARRAY_AGG, 0);
	};

	CHECKSUM() {
	    return this.getToken(SnowflakeParser.CHECKSUM, 0);
	};

	COLLECTION() {
	    return this.getToken(SnowflakeParser.COLLECTION, 0);
	};

	CONFIGURATION() {
	    return this.getToken(SnowflakeParser.CONFIGURATION, 0);
	};

	DATA() {
	    return this.getToken(SnowflakeParser.DATA, 0);
	};

	DEFINITION() {
	    return this.getToken(SnowflakeParser.DEFINITION, 0);
	};

	DELTA() {
	    return this.getToken(SnowflakeParser.DELTA, 0);
	};

	DOWNSTREAM() {
	    return this.getToken(SnowflakeParser.DOWNSTREAM, 0);
	};

	DYNAMIC() {
	    return this.getToken(SnowflakeParser.DYNAMIC, 0);
	};

	EDITION() {
	    return this.getToken(SnowflakeParser.EDITION, 0);
	};

	EMAIL() {
	    return this.getToken(SnowflakeParser.EMAIL, 0);
	};

	EVENT() {
	    return this.getToken(SnowflakeParser.EVENT, 0);
	};

	EXPIRY_DATE() {
	    return this.getToken(SnowflakeParser.EXPIRY_DATE, 0);
	};

	EXPR() {
	    return this.getToken(SnowflakeParser.EXPR, 0);
	};

	FIRST_NAME() {
	    return this.getToken(SnowflakeParser.FIRST_NAME, 0);
	};

	FIRST_VALUE() {
	    return this.getToken(SnowflakeParser.FIRST_VALUE, 0);
	};

	GLOBAL() {
	    return this.getToken(SnowflakeParser.GLOBAL, 0);
	};

	IDENTIFIER() {
	    return this.getToken(SnowflakeParser.IDENTIFIER, 0);
	};

	IDENTITY() {
	    return this.getToken(SnowflakeParser.IDENTITY, 0);
	};

	INDEX() {
	    return this.getToken(SnowflakeParser.INDEX, 0);
	};

	INPUT() {
	    return this.getToken(SnowflakeParser.INPUT, 0);
	};

	INTERVAL() {
	    return this.getToken(SnowflakeParser.INTERVAL, 0);
	};

	JAVASCRIPT() {
	    return this.getToken(SnowflakeParser.JAVASCRIPT, 0);
	};

	LAST_NAME() {
	    return this.getToken(SnowflakeParser.LAST_NAME, 0);
	};

	LAST_QUERY_ID() {
	    return this.getToken(SnowflakeParser.LAST_QUERY_ID, 0);
	};

	LEAD() {
	    return this.getToken(SnowflakeParser.LEAD, 0);
	};

	LOCAL() {
	    return this.getToken(SnowflakeParser.LOCAL, 0);
	};

	NAME() {
	    return this.getToken(SnowflakeParser.NAME, 0);
	};

	NETWORK() {
	    return this.getToken(SnowflakeParser.NETWORK, 0);
	};

	OFFSET() {
	    return this.getToken(SnowflakeParser.OFFSET, 0);
	};

	ONE() {
	    return this.getToken(SnowflakeParser.ONE, 0);
	};

	OPTION() {
	    return this.getToken(SnowflakeParser.OPTION, 0);
	};

	ORGADMIN() {
	    return this.getToken(SnowflakeParser.ORGADMIN, 0);
	};

	OUTBOUND() {
	    return this.getToken(SnowflakeParser.OUTBOUND, 0);
	};

	PARTITION() {
	    return this.getToken(SnowflakeParser.PARTITION, 0);
	};

	PASSWORD() {
	    return this.getToken(SnowflakeParser.PASSWORD, 0);
	};

	PASSWORD_HISTORY() {
	    return this.getToken(SnowflakeParser.PASSWORD_HISTORY, 0);
	};

	PASSWORD_LOCKOUT_TIME_MINS() {
	    return this.getToken(SnowflakeParser.PASSWORD_LOCKOUT_TIME_MINS, 0);
	};

	PASSWORD_MAX_AGE_DAYS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MAX_AGE_DAYS, 0);
	};

	PASSWORD_MAX_LENGTH() {
	    return this.getToken(SnowflakeParser.PASSWORD_MAX_LENGTH, 0);
	};

	PASSWORD_MAX_RETRIES() {
	    return this.getToken(SnowflakeParser.PASSWORD_MAX_RETRIES, 0);
	};

	PASSWORD_MIN_AGE_DAYS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_AGE_DAYS, 0);
	};

	PASSWORD_MIN_LENGTH() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_LENGTH, 0);
	};

	PASSWORD_MIN_LOWER_CASE_CHARS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_LOWER_CASE_CHARS, 0);
	};

	PASSWORD_MIN_NUMERIC_CHARS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_NUMERIC_CHARS, 0);
	};

	PASSWORD_MIN_SPECIAL_CHARS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_SPECIAL_CHARS, 0);
	};

	PASSWORD_MIN_UPPER_CASE_CHARS() {
	    return this.getToken(SnowflakeParser.PASSWORD_MIN_UPPER_CASE_CHARS, 0);
	};

	PATH_() {
	    return this.getToken(SnowflakeParser.PATH_, 0);
	};

	PATTERN() {
	    return this.getToken(SnowflakeParser.PATTERN, 0);
	};

	PORT() {
	    return this.getToken(SnowflakeParser.PORT, 0);
	};

	PROCEDURE_NAME() {
	    return this.getToken(SnowflakeParser.PROCEDURE_NAME, 0);
	};

	PROPERTY() {
	    return this.getToken(SnowflakeParser.PROPERTY, 0);
	};

	PROVIDER() {
	    return this.getToken(SnowflakeParser.PROVIDER, 0);
	};

	PUBLIC() {
	    return this.getToken(SnowflakeParser.PUBLIC, 0);
	};

	RANK() {
	    return this.getToken(SnowflakeParser.RANK, 0);
	};

	RESOURCE() {
	    return this.getToken(SnowflakeParser.RESOURCE, 0);
	};

	RESOURCES() {
	    return this.getToken(SnowflakeParser.RESOURCES, 0);
	};

	RESPECT() {
	    return this.getToken(SnowflakeParser.RESPECT, 0);
	};

	RESTRICT() {
	    return this.getToken(SnowflakeParser.RESTRICT, 0);
	};

	RESULT() {
	    return this.getToken(SnowflakeParser.RESULT, 0);
	};

	ROUNDING_MODE() {
	    return this.getToken(SnowflakeParser.ROUNDING_MODE, 0);
	};

	SCALE() {
	    return this.getToken(SnowflakeParser.SCALE, 0);
	};

	SECURITYADMIN() {
	    return this.getToken(SnowflakeParser.SECURITYADMIN, 0);
	};

	SOURCE() {
	    return this.getToken(SnowflakeParser.SOURCE, 0);
	};

	STATE() {
	    return this.getToken(SnowflakeParser.STATE, 0);
	};

	STATS() {
	    return this.getToken(SnowflakeParser.STATS, 0);
	};

	SYSADMIN() {
	    return this.getToken(SnowflakeParser.SYSADMIN, 0);
	};

	TIMEZONE() {
	    return this.getToken(SnowflakeParser.TIMEZONE, 0);
	};

	URL() {
	    return this.getToken(SnowflakeParser.URL, 0);
	};

	USERADMIN() {
	    return this.getToken(SnowflakeParser.USERADMIN, 0);
	};

	VALUE() {
	    return this.getToken(SnowflakeParser.VALUE, 0);
	};

	VALUES() {
	    return this.getToken(SnowflakeParser.VALUES, 0);
	};

	VERSION() {
	    return this.getToken(SnowflakeParser.VERSION, 0);
	};

	WAREHOUSE_TYPE() {
	    return this.getToken(SnowflakeParser.WAREHOUSE_TYPE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitNon_reserved_words(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Builtin_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_builtin_function;
    }

	SUM() {
	    return this.getToken(SnowflakeParser.SUM, 0);
	};

	AVG() {
	    return this.getToken(SnowflakeParser.AVG, 0);
	};

	MIN() {
	    return this.getToken(SnowflakeParser.MIN, 0);
	};

	COUNT() {
	    return this.getToken(SnowflakeParser.COUNT, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(SnowflakeParser.CURRENT_TIMESTAMP, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(SnowflakeParser.CURRENT_DATE, 0);
	};

	UPPER() {
	    return this.getToken(SnowflakeParser.UPPER, 0);
	};

	LOWER() {
	    return this.getToken(SnowflakeParser.LOWER, 0);
	};

	TO_BOOLEAN() {
	    return this.getToken(SnowflakeParser.TO_BOOLEAN, 0);
	};

	IDENTIFIER() {
	    return this.getToken(SnowflakeParser.IDENTIFIER, 0);
	};

	FLATTEN() {
	    return this.getToken(SnowflakeParser.FLATTEN, 0);
	};

	SPLIT_TO_TABLE() {
	    return this.getToken(SnowflakeParser.SPLIT_TO_TABLE, 0);
	};

	CAST() {
	    return this.getToken(SnowflakeParser.CAST, 0);
	};

	TRY_CAST() {
	    return this.getToken(SnowflakeParser.TRY_CAST, 0);
	};

	ANY_VALUE() {
	    return this.getToken(SnowflakeParser.ANY_VALUE, 0);
	};

	GETDATE() {
	    return this.getToken(SnowflakeParser.GETDATE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitBuiltin_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unary_or_binary_builtin_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_unary_or_binary_builtin_function;
    }

	FLOOR() {
	    return this.getToken(SnowflakeParser.FLOOR, 0);
	};

	TRUNCATE() {
	    return this.getToken(SnowflakeParser.TRUNCATE, 0);
	};

	TRUNC() {
	    return this.getToken(SnowflakeParser.TRUNC, 0);
	};

	CEIL() {
	    return this.getToken(SnowflakeParser.CEIL, 0);
	};

	ROUND() {
	    return this.getToken(SnowflakeParser.ROUND, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitUnary_or_binary_builtin_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Binary_builtin_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_binary_builtin_function;
        this.ifnull = null;
        this.to_date = null;
    }

	IFNULL() {
	    return this.getToken(SnowflakeParser.IFNULL, 0);
	};

	NVL() {
	    return this.getToken(SnowflakeParser.NVL, 0);
	};

	GET() {
	    return this.getToken(SnowflakeParser.GET, 0);
	};

	LEFT() {
	    return this.getToken(SnowflakeParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(SnowflakeParser.RIGHT, 0);
	};

	DATE_PART() {
	    return this.getToken(SnowflakeParser.DATE_PART, 0);
	};

	TO_DATE() {
	    return this.getToken(SnowflakeParser.TO_DATE, 0);
	};

	DATE() {
	    return this.getToken(SnowflakeParser.DATE, 0);
	};

	SPLIT() {
	    return this.getToken(SnowflakeParser.SPLIT, 0);
	};

	NULLIF() {
	    return this.getToken(SnowflakeParser.NULLIF, 0);
	};

	EQUAL_NULL() {
	    return this.getToken(SnowflakeParser.EQUAL_NULL, 0);
	};

	CONTAINS() {
	    return this.getToken(SnowflakeParser.CONTAINS, 0);
	};

	COLLATE() {
	    return this.getToken(SnowflakeParser.COLLATE, 0);
	};

	TO_TIMESTAMP() {
	    return this.getToken(SnowflakeParser.TO_TIMESTAMP, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitBinary_builtin_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Binary_or_ternary_builtin_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_binary_or_ternary_builtin_function;
        this.substring = null;
    }

	CHARINDEX() {
	    return this.getToken(SnowflakeParser.CHARINDEX, 0);
	};

	REPLACE() {
	    return this.getToken(SnowflakeParser.REPLACE, 0);
	};

	SUBSTRING() {
	    return this.getToken(SnowflakeParser.SUBSTRING, 0);
	};

	SUBSTR() {
	    return this.getToken(SnowflakeParser.SUBSTR, 0);
	};

	LIKE() {
	    return this.getToken(SnowflakeParser.LIKE, 0);
	};

	ILIKE() {
	    return this.getToken(SnowflakeParser.ILIKE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitBinary_or_ternary_builtin_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ternary_builtin_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_ternary_builtin_function;
        this.dateadd = null;
        this.datefiff = null;
    }

	DATEADD() {
	    return this.getToken(SnowflakeParser.DATEADD, 0);
	};

	TIMEADD() {
	    return this.getToken(SnowflakeParser.TIMEADD, 0);
	};

	TIMESTAMPADD() {
	    return this.getToken(SnowflakeParser.TIMESTAMPADD, 0);
	};

	DATEDIFF() {
	    return this.getToken(SnowflakeParser.DATEDIFF, 0);
	};

	TIMEDIFF() {
	    return this.getToken(SnowflakeParser.TIMEDIFF, 0);
	};

	TIMESTAMPDIFF() {
	    return this.getToken(SnowflakeParser.TIMESTAMPDIFF, 0);
	};

	SPLIT_PART() {
	    return this.getToken(SnowflakeParser.SPLIT_PART, 0);
	};

	NVL2() {
	    return this.getToken(SnowflakeParser.NVL2, 0);
	};

	IFF() {
	    return this.getToken(SnowflakeParser.IFF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTernary_builtin_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class List_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_list_function;
    }

	CONCAT() {
	    return this.getToken(SnowflakeParser.CONCAT, 0);
	};

	CONCAT_WS() {
	    return this.getToken(SnowflakeParser.CONCAT_WS, 0);
	};

	COALESCE() {
	    return this.getToken(SnowflakeParser.COALESCE, 0);
	};

	HASH() {
	    return this.getToken(SnowflakeParser.HASH, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitList_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_pattern;
    }

	PATTERN() {
	    return this.getToken(SnowflakeParser.PATTERN, 0);
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_name;
    }

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	DOT() {
	    return this.getToken(SnowflakeParser.DOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_list;
    }

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_list_with_commentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_list_with_comment;
    }

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMENT);
	    } else {
	        return this.getToken(SnowflakeParser.COMMENT, i);
	    }
	};


	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_list_with_comment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_name;
        this.d = null;
        this.s = null;
        this.o = null;
    }

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.DOT);
	    } else {
	        return this.getToken(SnowflakeParser.DOT, i);
	    }
	};


	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_name_or_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_name_or_identifier;
    }

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(SnowflakeParser.IDENTIFIER, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_name_or_identifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_num;
    }

	DECIMAL() {
	    return this.getToken(SnowflakeParser.DECIMAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitNum(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_expr_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExpr_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_list_sortedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_expr_list_sorted;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	asc_desc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Asc_descContext);
	    } else {
	        return this.getTypedRuleContext(Asc_descContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExpr_list_sorted(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_expr;
        this.op = null;
    }

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	DOT() {
	    return this.getToken(SnowflakeParser.DOT, 0);
	};

	NEXTVAL() {
	    return this.getToken(SnowflakeParser.NEXTVAL, 0);
	};

	case_expression() {
	    return this.getTypedRuleContext(Case_expressionContext,0);
	};

	iff_expr() {
	    return this.getTypedRuleContext(Iff_exprContext,0);
	};

	bracket_expression() {
	    return this.getTypedRuleContext(Bracket_expressionContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(SnowflakeParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SnowflakeParser.MINUS, 0);
	};

	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.NOT);
	    } else {
	        return this.getToken(SnowflakeParser.NOT, i);
	    }
	};


	arr_literal() {
	    return this.getTypedRuleContext(Arr_literalContext,0);
	};

	cast_expr() {
	    return this.getTypedRuleContext(Cast_exprContext,0);
	};

	try_cast_expr() {
	    return this.getTypedRuleContext(Try_cast_exprContext,0);
	};

	json_literal() {
	    return this.getTypedRuleContext(Json_literalContext,0);
	};

	trim_expression() {
	    return this.getTypedRuleContext(Trim_expressionContext,0);
	};

	function_call() {
	    return this.getTypedRuleContext(Function_callContext,0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	primitive_expression() {
	    return this.getTypedRuleContext(Primitive_expressionContext,0);
	};

	COLON() {
	    return this.getToken(SnowflakeParser.COLON, 0);
	};

	STAR() {
	    return this.getToken(SnowflakeParser.STAR, 0);
	};

	DIVIDE() {
	    return this.getToken(SnowflakeParser.DIVIDE, 0);
	};

	MODULE() {
	    return this.getToken(SnowflakeParser.MODULE, 0);
	};

	PIPE_PIPE() {
	    return this.getToken(SnowflakeParser.PIPE_PIPE, 0);
	};

	comparison_operator() {
	    return this.getTypedRuleContext(Comparison_operatorContext,0);
	};

	AND() {
	    return this.getToken(SnowflakeParser.AND, 0);
	};

	OR() {
	    return this.getToken(SnowflakeParser.OR, 0);
	};

	RLIKE() {
	    return this.getToken(SnowflakeParser.RLIKE, 0);
	};

	LSB() {
	    return this.getToken(SnowflakeParser.LSB, 0);
	};

	RSB() {
	    return this.getToken(SnowflakeParser.RSB, 0);
	};

	VALUE() {
	    return this.getToken(SnowflakeParser.VALUE, 0);
	};

	COLLATE() {
	    return this.getToken(SnowflakeParser.COLLATE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	over_clause() {
	    return this.getTypedRuleContext(Over_clauseContext,0);
	};

	COLON_COLON() {
	    return this.getToken(SnowflakeParser.COLON_COLON, 0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	IS() {
	    return this.getToken(SnowflakeParser.IS, 0);
	};

	null_not_null() {
	    return this.getTypedRuleContext(Null_not_nullContext,0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	LIKE() {
	    return this.getToken(SnowflakeParser.LIKE, 0);
	};

	ILIKE() {
	    return this.getToken(SnowflakeParser.ILIKE, 0);
	};

	ESCAPE() {
	    return this.getToken(SnowflakeParser.ESCAPE, 0);
	};

	ANY() {
	    return this.getToken(SnowflakeParser.ANY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Iff_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_iff_expr;
    }

	IFF() {
	    return this.getToken(SnowflakeParser.IFF, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIff_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Trim_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_trim_expression;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	TRIM() {
	    return this.getToken(SnowflakeParser.TRIM, 0);
	};

	LTRIM() {
	    return this.getToken(SnowflakeParser.LTRIM, 0);
	};

	RTRIM() {
	    return this.getToken(SnowflakeParser.RTRIM, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTrim_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Try_cast_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_try_cast_expr;
    }

	TRY_CAST() {
	    return this.getToken(SnowflakeParser.TRY_CAST, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTry_cast_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cast_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_cast_expr;
    }

	CAST() {
	    return this.getToken(SnowflakeParser.CAST, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SnowflakeParser.TIMESTAMP, 0);
	};

	DATE() {
	    return this.getToken(SnowflakeParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(SnowflakeParser.TIME, 0);
	};

	INTERVAL() {
	    return this.getToken(SnowflakeParser.INTERVAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCast_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Json_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_json_literal;
    }

	LCB() {
	    return this.getToken(SnowflakeParser.LCB, 0);
	};

	kv_pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Kv_pairContext);
	    } else {
	        return this.getTypedRuleContext(Kv_pairContext,i);
	    }
	};

	RCB() {
	    return this.getToken(SnowflakeParser.RCB, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitJson_literal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Kv_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_kv_pair;
        this.key = null;
    }

	COLON() {
	    return this.getToken(SnowflakeParser.COLON, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	STRING() {
	    return this.getToken(SnowflakeParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitKv_pair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_value;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arr_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_arr_literal;
    }

	LSB() {
	    return this.getToken(SnowflakeParser.LSB, 0);
	};

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	RSB() {
	    return this.getToken(SnowflakeParser.RSB, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitArr_literal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Data_type_sizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_data_type_size;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitData_type_size(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Data_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_data_type;
        this.int_alias = null;
        this.number_alias = null;
        this.float_alias = null;
        this.char_alias = null;
        this.varchar_alias = null;
        this.binary_alias = null;
    }

	INT() {
	    return this.getToken(SnowflakeParser.INT, 0);
	};

	INTEGER() {
	    return this.getToken(SnowflakeParser.INTEGER, 0);
	};

	SMALLINT() {
	    return this.getToken(SnowflakeParser.SMALLINT, 0);
	};

	TINYINT() {
	    return this.getToken(SnowflakeParser.TINYINT, 0);
	};

	BYTEINT() {
	    return this.getToken(SnowflakeParser.BYTEINT, 0);
	};

	BIGINT() {
	    return this.getToken(SnowflakeParser.BIGINT, 0);
	};

	NUMBER() {
	    return this.getToken(SnowflakeParser.NUMBER, 0);
	};

	NUMERIC() {
	    return this.getToken(SnowflakeParser.NUMERIC, 0);
	};

	DECIMAL_() {
	    return this.getToken(SnowflakeParser.DECIMAL_, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	FLOAT_() {
	    return this.getToken(SnowflakeParser.FLOAT_, 0);
	};

	FLOAT4() {
	    return this.getToken(SnowflakeParser.FLOAT4, 0);
	};

	FLOAT8() {
	    return this.getToken(SnowflakeParser.FLOAT8, 0);
	};

	DOUBLE() {
	    return this.getToken(SnowflakeParser.DOUBLE, 0);
	};

	DOUBLE_PRECISION() {
	    return this.getToken(SnowflakeParser.DOUBLE_PRECISION, 0);
	};

	REAL_() {
	    return this.getToken(SnowflakeParser.REAL_, 0);
	};

	BOOLEAN() {
	    return this.getToken(SnowflakeParser.BOOLEAN, 0);
	};

	DATE() {
	    return this.getToken(SnowflakeParser.DATE, 0);
	};

	DATETIME() {
	    return this.getToken(SnowflakeParser.DATETIME, 0);
	};

	data_type_size() {
	    return this.getTypedRuleContext(Data_type_sizeContext,0);
	};

	TIME() {
	    return this.getToken(SnowflakeParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SnowflakeParser.TIMESTAMP, 0);
	};

	TIMESTAMP_LTZ() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_LTZ, 0);
	};

	TIMESTAMP_NTZ() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_NTZ, 0);
	};

	TIMESTAMP_TZ() {
	    return this.getToken(SnowflakeParser.TIMESTAMP_TZ, 0);
	};

	CHAR() {
	    return this.getToken(SnowflakeParser.CHAR, 0);
	};

	NCHAR() {
	    return this.getToken(SnowflakeParser.NCHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(SnowflakeParser.CHARACTER, 0);
	};

	CHAR_VARYING() {
	    return this.getToken(SnowflakeParser.CHAR_VARYING, 0);
	};

	NCHAR_VARYING() {
	    return this.getToken(SnowflakeParser.NCHAR_VARYING, 0);
	};

	NVARCHAR2() {
	    return this.getToken(SnowflakeParser.NVARCHAR2, 0);
	};

	NVARCHAR() {
	    return this.getToken(SnowflakeParser.NVARCHAR, 0);
	};

	STRING_() {
	    return this.getToken(SnowflakeParser.STRING_, 0);
	};

	TEXT() {
	    return this.getToken(SnowflakeParser.TEXT, 0);
	};

	VARCHAR() {
	    return this.getToken(SnowflakeParser.VARCHAR, 0);
	};

	BINARY() {
	    return this.getToken(SnowflakeParser.BINARY, 0);
	};

	VARBINARY() {
	    return this.getToken(SnowflakeParser.VARBINARY, 0);
	};

	VARIANT() {
	    return this.getToken(SnowflakeParser.VARIANT, 0);
	};

	OBJECT() {
	    return this.getToken(SnowflakeParser.OBJECT, 0);
	};

	ARRAY() {
	    return this.getToken(SnowflakeParser.ARRAY, 0);
	};

	GEOGRAPHY() {
	    return this.getToken(SnowflakeParser.GEOGRAPHY, 0);
	};

	GEOMETRY() {
	    return this.getToken(SnowflakeParser.GEOMETRY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitData_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Primitive_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_primitive_expression;
    }

	DEFAULT() {
	    return this.getToken(SnowflakeParser.DEFAULT, 0);
	};

	NULL_() {
	    return this.getToken(SnowflakeParser.NULL_, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.DOT);
	    } else {
	        return this.getToken(SnowflakeParser.DOT, i);
	    }
	};


	full_column_name() {
	    return this.getTypedRuleContext(Full_column_nameContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	BOTH_Q() {
	    return this.getToken(SnowflakeParser.BOTH_Q, 0);
	};

	ARRAY_Q() {
	    return this.getToken(SnowflakeParser.ARRAY_Q, 0);
	};

	OBJECT_Q() {
	    return this.getToken(SnowflakeParser.OBJECT_Q, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPrimitive_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Order_by_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_order_by_expr;
    }

	ORDER() {
	    return this.getToken(SnowflakeParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	expr_list_sorted() {
	    return this.getTypedRuleContext(Expr_list_sortedContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOrder_by_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Asc_descContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_asc_desc;
    }

	ASC() {
	    return this.getToken(SnowflakeParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SnowflakeParser.DESC, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAsc_desc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Over_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_over_clause;
    }

	OVER() {
	    return this.getToken(SnowflakeParser.OVER, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	partition_by() {
	    return this.getTypedRuleContext(Partition_byContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	order_by_expr() {
	    return this.getTypedRuleContext(Order_by_exprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOver_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_callContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_function_call;
        this.to_date = null;
        this.length = null;
    }

	round_expr() {
	    return this.getTypedRuleContext(Round_exprContext,0);
	};

	unary_or_binary_builtin_function() {
	    return this.getTypedRuleContext(Unary_or_binary_builtin_functionContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	binary_builtin_function() {
	    return this.getTypedRuleContext(Binary_builtin_functionContext,0);
	};

	binary_or_ternary_builtin_function() {
	    return this.getTypedRuleContext(Binary_or_ternary_builtin_functionContext,0);
	};

	ternary_builtin_function() {
	    return this.getTypedRuleContext(Ternary_builtin_functionContext,0);
	};

	ranking_windowed_function() {
	    return this.getTypedRuleContext(Ranking_windowed_functionContext,0);
	};

	aggregate_function() {
	    return this.getTypedRuleContext(Aggregate_functionContext,0);
	};

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	param_assoc_list() {
	    return this.getTypedRuleContext(Param_assoc_listContext,0);
	};

	list_function() {
	    return this.getTypedRuleContext(List_functionContext,0);
	};

	TO_DATE() {
	    return this.getToken(SnowflakeParser.TO_DATE, 0);
	};

	DATE() {
	    return this.getToken(SnowflakeParser.DATE, 0);
	};

	LENGTH() {
	    return this.getToken(SnowflakeParser.LENGTH, 0);
	};

	LEN() {
	    return this.getToken(SnowflakeParser.LEN, 0);
	};

	TO_BOOLEAN() {
	    return this.getToken(SnowflakeParser.TO_BOOLEAN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFunction_call(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_assoc_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_param_assoc_list;
    }

	param_assoc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_assocContext);
	    } else {
	        return this.getTypedRuleContext(Param_assocContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitParam_assoc_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_param_assoc;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	ASSOC() {
	    return this.getToken(SnowflakeParser.ASSOC, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitParam_assoc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ignore_or_repect_nullsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_ignore_or_repect_nulls;
    }

	NULLS() {
	    return this.getToken(SnowflakeParser.NULLS, 0);
	};

	IGNORE() {
	    return this.getToken(SnowflakeParser.IGNORE, 0);
	};

	RESPECT() {
	    return this.getToken(SnowflakeParser.RESPECT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitIgnore_or_repect_nulls(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ranking_windowed_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_ranking_windowed_function;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	over_clause() {
	    return this.getTypedRuleContext(Over_clauseContext,0);
	};

	RANK() {
	    return this.getToken(SnowflakeParser.RANK, 0);
	};

	DENSE_RANK() {
	    return this.getToken(SnowflakeParser.DENSE_RANK, 0);
	};

	ROW_NUMBER() {
	    return this.getToken(SnowflakeParser.ROW_NUMBER, 0);
	};

	NTILE() {
	    return this.getToken(SnowflakeParser.NTILE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	LEAD() {
	    return this.getToken(SnowflakeParser.LEAD, 0);
	};

	LAG() {
	    return this.getToken(SnowflakeParser.LAG, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	ignore_or_repect_nulls() {
	    return this.getTypedRuleContext(Ignore_or_repect_nullsContext,0);
	};

	FIRST_VALUE() {
	    return this.getToken(SnowflakeParser.FIRST_VALUE, 0);
	};

	LAST_VALUE() {
	    return this.getToken(SnowflakeParser.LAST_VALUE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRanking_windowed_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Aggregate_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_aggregate_function;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	DISTINCT() {
	    return this.getToken(SnowflakeParser.DISTINCT, 0);
	};

	STAR() {
	    return this.getToken(SnowflakeParser.STAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	LISTAGG() {
	    return this.getToken(SnowflakeParser.LISTAGG, 0);
	};

	ARRAY_AGG() {
	    return this.getToken(SnowflakeParser.ARRAY_AGG, 0);
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WITHIN() {
	    return this.getToken(SnowflakeParser.WITHIN, 0);
	};

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAggregate_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_literal;
    }

	STRING() {
	    return this.getToken(SnowflakeParser.STRING, 0);
	};

	DECIMAL() {
	    return this.getToken(SnowflakeParser.DECIMAL, 0);
	};

	sign() {
	    return this.getTypedRuleContext(SignContext,0);
	};

	REAL() {
	    return this.getToken(SnowflakeParser.REAL, 0);
	};

	FLOAT() {
	    return this.getToken(SnowflakeParser.FLOAT, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	NULL_() {
	    return this.getToken(SnowflakeParser.NULL_, 0);
	};

	AT_Q() {
	    return this.getToken(SnowflakeParser.AT_Q, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_sign;
    }

	PLUS() {
	    return this.getToken(SnowflakeParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SnowflakeParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Full_column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_full_column_name;
        this.db_name = null;
        this.schema = null;
        this.tab_name = null;
        this.col_name = null;
    }

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.DOT);
	    } else {
	        return this.getToken(SnowflakeParser.DOT, i);
	    }
	};


	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFull_column_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Bracket_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_bracket_expression;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitBracket_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Case_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_case_expression;
    }

	CASE() {
	    return this.getToken(SnowflakeParser.CASE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	END() {
	    return this.getToken(SnowflakeParser.END, 0);
	};

	switch_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Switch_sectionContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(SnowflakeParser.ELSE, 0);
	};

	switch_search_condition_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_search_condition_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Switch_search_condition_sectionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCase_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_search_condition_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_switch_search_condition_section;
    }

	WHEN() {
	    return this.getToken(SnowflakeParser.WHEN, 0);
	};

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	THEN() {
	    return this.getToken(SnowflakeParser.THEN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSwitch_search_condition_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_switch_section;
    }

	WHEN() {
	    return this.getToken(SnowflakeParser.WHEN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	THEN() {
	    return this.getToken(SnowflakeParser.THEN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSwitch_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Query_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_query_statement;
    }

	select_statement() {
	    return this.getTypedRuleContext(Select_statementContext,0);
	};

	with_expression() {
	    return this.getTypedRuleContext(With_expressionContext,0);
	};

	set_operators = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_operatorsContext);
	    } else {
	        return this.getTypedRuleContext(Set_operatorsContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitQuery_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_with_expression;
    }

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	common_table_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_table_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Common_table_expressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitWith_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Common_table_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_common_table_expression;
        this.columns = null;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	select_statement() {
	    return this.getTypedRuleContext(Select_statementContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	set_operators = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_operatorsContext);
	    } else {
	        return this.getTypedRuleContext(Set_operatorsContext,i);
	    }
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitCommon_table_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_select_statement;
    }

	select_clause() {
	    return this.getTypedRuleContext(Select_clauseContext,0);
	};

	select_optional_clauses() {
	    return this.getTypedRuleContext(Select_optional_clausesContext,0);
	};

	limit_clause() {
	    return this.getTypedRuleContext(Limit_clauseContext,0);
	};

	select_top_clause() {
	    return this.getTypedRuleContext(Select_top_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSelect_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_operatorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_set_operators;
    }

	select_statement() {
	    return this.getTypedRuleContext(Select_statementContext,0);
	};

	UNION() {
	    return this.getToken(SnowflakeParser.UNION, 0);
	};

	EXCEPT() {
	    return this.getToken(SnowflakeParser.EXCEPT, 0);
	};

	MINUS_() {
	    return this.getToken(SnowflakeParser.MINUS_, 0);
	};

	INTERSECT() {
	    return this.getToken(SnowflakeParser.INTERSECT, 0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSet_operators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_optional_clausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_select_optional_clauses;
    }

	into_clause() {
	    return this.getTypedRuleContext(Into_clauseContext,0);
	};

	from_clause() {
	    return this.getTypedRuleContext(From_clauseContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	group_by_clause() {
	    return this.getTypedRuleContext(Group_by_clauseContext,0);
	};

	having_clause() {
	    return this.getTypedRuleContext(Having_clauseContext,0);
	};

	qualify_clause() {
	    return this.getTypedRuleContext(Qualify_clauseContext,0);
	};

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSelect_optional_clauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_select_clause;
    }

	SELECT() {
	    return this.getToken(SnowflakeParser.SELECT, 0);
	};

	select_list_no_top() {
	    return this.getTypedRuleContext(Select_list_no_topContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSelect_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_top_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_select_top_clause;
    }

	SELECT() {
	    return this.getToken(SnowflakeParser.SELECT, 0);
	};

	select_list_top() {
	    return this.getTypedRuleContext(Select_list_topContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSelect_top_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_list_no_topContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_select_list_no_top;
    }

	select_list() {
	    return this.getTypedRuleContext(Select_listContext,0);
	};

	all_distinct() {
	    return this.getTypedRuleContext(All_distinctContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSelect_list_no_top(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_list_topContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_select_list_top;
    }

	select_list() {
	    return this.getTypedRuleContext(Select_listContext,0);
	};

	all_distinct() {
	    return this.getTypedRuleContext(All_distinctContext,0);
	};

	top_clause() {
	    return this.getTypedRuleContext(Top_clauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSelect_list_top(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_select_list;
    }

	select_list_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_list_elemContext);
	    } else {
	        return this.getTypedRuleContext(Select_list_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSelect_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_list_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_select_list_elem;
    }

	column_elem() {
	    return this.getTypedRuleContext(Column_elemContext,0);
	};

	as_alias() {
	    return this.getTypedRuleContext(As_aliasContext,0);
	};

	column_elem_star() {
	    return this.getTypedRuleContext(Column_elem_starContext,0);
	};

	expression_elem() {
	    return this.getTypedRuleContext(Expression_elemContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSelect_list_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_elem_starContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_elem_star;
    }

	STAR() {
	    return this.getToken(SnowflakeParser.STAR, 0);
	};

	object_name_or_alias() {
	    return this.getTypedRuleContext(Object_name_or_aliasContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_elem_star(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_elem;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	object_name_or_alias() {
	    return this.getTypedRuleContext(Object_name_or_aliasContext,0);
	};

	DOLLAR() {
	    return this.getToken(SnowflakeParser.DOLLAR, 0);
	};

	column_position() {
	    return this.getTypedRuleContext(Column_positionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_name_or_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_name_or_alias;
    }

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	DOT() {
	    return this.getToken(SnowflakeParser.DOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_name_or_alias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class As_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_as_alias;
    }

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	AS() {
	    return this.getToken(SnowflakeParser.AS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAs_alias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expression_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_expression_elem;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExpression_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_positionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_position;
    }

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_position(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class All_distinctContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_all_distinct;
    }

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(SnowflakeParser.DISTINCT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAll_distinct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Top_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_top_clause;
    }

	TOP() {
	    return this.getToken(SnowflakeParser.TOP, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTop_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Into_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_into_clause;
    }

	INTO() {
	    return this.getToken(SnowflakeParser.INTO, 0);
	};

	var_list() {
	    return this.getTypedRuleContext(Var_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitInto_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Var_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_var_list;
    }

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarContext);
	    } else {
	        return this.getTypedRuleContext(VarContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitVar_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_var;
    }

	COLON() {
	    return this.getToken(SnowflakeParser.COLON, 0);
	};

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class From_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_from_clause;
    }

	FROM() {
	    return this.getToken(SnowflakeParser.FROM, 0);
	};

	table_sources() {
	    return this.getTypedRuleContext(Table_sourcesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFrom_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_sourcesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_table_sources;
    }

	table_source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_sourceContext);
	    } else {
	        return this.getTypedRuleContext(Table_sourceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTable_sources(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_table_source;
    }

	table_source_item_joined() {
	    return this.getTypedRuleContext(Table_source_item_joinedContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTable_source(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_source_item_joinedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_table_source_item_joined;
    }

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	join_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Join_clauseContext,i);
	    }
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	table_source_item_joined() {
	    return this.getTypedRuleContext(Table_source_item_joinedContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitTable_source_item_joined(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_object_ref;
    }

	object_name() {
	    return this.getTypedRuleContext(Object_nameContext,0);
	};

	at_before() {
	    return this.getTypedRuleContext(At_beforeContext,0);
	};

	changes() {
	    return this.getTypedRuleContext(ChangesContext,0);
	};

	match_recognize() {
	    return this.getTypedRuleContext(Match_recognizeContext,0);
	};

	pivot_unpivot() {
	    return this.getTypedRuleContext(Pivot_unpivotContext,0);
	};

	as_alias() {
	    return this.getTypedRuleContext(As_aliasContext,0);
	};

	column_list_in_parentheses() {
	    return this.getTypedRuleContext(Column_list_in_parenthesesContext,0);
	};

	sample() {
	    return this.getTypedRuleContext(SampleContext,0);
	};

	START() {
	    return this.getToken(SnowflakeParser.START, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	CONNECT() {
	    return this.getToken(SnowflakeParser.CONNECT, 0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	prior_list() {
	    return this.getTypedRuleContext(Prior_listContext,0);
	};

	TABLE() {
	    return this.getToken(SnowflakeParser.TABLE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	function_call() {
	    return this.getTypedRuleContext(Function_callContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	values_table() {
	    return this.getTypedRuleContext(Values_tableContext,0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	LATERAL() {
	    return this.getToken(SnowflakeParser.LATERAL, 0);
	};

	flatten_table() {
	    return this.getTypedRuleContext(Flatten_tableContext,0);
	};

	splited_table() {
	    return this.getTypedRuleContext(Splited_tableContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitObject_ref(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Flatten_table_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_flatten_table_option;
    }

	PATH_() {
	    return this.getToken(SnowflakeParser.PATH_, 0);
	};

	ASSOC() {
	    return this.getToken(SnowflakeParser.ASSOC, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	OUTER() {
	    return this.getToken(SnowflakeParser.OUTER, 0);
	};

	true_false() {
	    return this.getTypedRuleContext(True_falseContext,0);
	};

	RECURSIVE() {
	    return this.getToken(SnowflakeParser.RECURSIVE, 0);
	};

	MODE() {
	    return this.getToken(SnowflakeParser.MODE, 0);
	};

	ARRAY_Q() {
	    return this.getToken(SnowflakeParser.ARRAY_Q, 0);
	};

	OBJECT_Q() {
	    return this.getToken(SnowflakeParser.OBJECT_Q, 0);
	};

	BOTH_Q() {
	    return this.getToken(SnowflakeParser.BOTH_Q, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFlatten_table_option(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Flatten_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_flatten_table;
    }

	FLATTEN() {
	    return this.getToken(SnowflakeParser.FLATTEN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	INPUT() {
	    return this.getToken(SnowflakeParser.INPUT, 0);
	};

	ASSOC() {
	    return this.getToken(SnowflakeParser.ASSOC, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	flatten_table_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Flatten_table_optionContext);
	    } else {
	        return this.getTypedRuleContext(Flatten_table_optionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFlatten_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Splited_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_splited_table;
    }

	SPLIT_TO_TABLE() {
	    return this.getToken(SnowflakeParser.SPLIT_TO_TABLE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(SnowflakeParser.COMMA, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSplited_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Prior_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_prior_list;
    }

	prior_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Prior_itemContext);
	    } else {
	        return this.getTypedRuleContext(Prior_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPrior_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Prior_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_prior_item;
    }

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	PRIOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.PRIOR);
	    } else {
	        return this.getToken(SnowflakeParser.PRIOR, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPrior_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Outer_joinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_outer_join;
    }

	LEFT() {
	    return this.getToken(SnowflakeParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(SnowflakeParser.RIGHT, 0);
	};

	FULL() {
	    return this.getToken(SnowflakeParser.FULL, 0);
	};

	OUTER() {
	    return this.getToken(SnowflakeParser.OUTER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOuter_join(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_join_type;
    }

	INNER() {
	    return this.getToken(SnowflakeParser.INNER, 0);
	};

	outer_join() {
	    return this.getTypedRuleContext(Outer_joinContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitJoin_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_join_clause;
    }

	JOIN() {
	    return this.getToken(SnowflakeParser.JOIN, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	join_type() {
	    return this.getTypedRuleContext(Join_typeContext,0);
	};

	ON() {
	    return this.getToken(SnowflakeParser.ON, 0);
	};

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	USING() {
	    return this.getToken(SnowflakeParser.USING, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	NATURAL() {
	    return this.getToken(SnowflakeParser.NATURAL, 0);
	};

	outer_join() {
	    return this.getTypedRuleContext(Outer_joinContext,0);
	};

	CROSS() {
	    return this.getToken(SnowflakeParser.CROSS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitJoin_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class At_beforeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_at_before;
    }

	AT_KEYWORD() {
	    return this.getToken(SnowflakeParser.AT_KEYWORD, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SnowflakeParser.TIMESTAMP, 0);
	};

	ASSOC() {
	    return this.getToken(SnowflakeParser.ASSOC, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	OFFSET() {
	    return this.getToken(SnowflakeParser.OFFSET, 0);
	};

	STATEMENT() {
	    return this.getToken(SnowflakeParser.STATEMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	STREAM() {
	    return this.getToken(SnowflakeParser.STREAM, 0);
	};

	BEFORE() {
	    return this.getToken(SnowflakeParser.BEFORE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAt_before(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_end;
    }

	END() {
	    return this.getToken(SnowflakeParser.END, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SnowflakeParser.TIMESTAMP, 0);
	};

	ASSOC() {
	    return this.getToken(SnowflakeParser.ASSOC, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	OFFSET() {
	    return this.getToken(SnowflakeParser.OFFSET, 0);
	};

	STATEMENT() {
	    return this.getToken(SnowflakeParser.STATEMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitEnd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChangesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_changes;
    }

	CHANGES() {
	    return this.getToken(SnowflakeParser.CHANGES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	INFORMATION() {
	    return this.getToken(SnowflakeParser.INFORMATION, 0);
	};

	ASSOC() {
	    return this.getToken(SnowflakeParser.ASSOC, 0);
	};

	default_append_only() {
	    return this.getTypedRuleContext(Default_append_onlyContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	at_before() {
	    return this.getTypedRuleContext(At_beforeContext,0);
	};

	end() {
	    return this.getTypedRuleContext(EndContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitChanges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Default_append_onlyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_default_append_only;
    }

	DEFAULT() {
	    return this.getToken(SnowflakeParser.DEFAULT, 0);
	};

	APPEND_ONLY() {
	    return this.getToken(SnowflakeParser.APPEND_ONLY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDefault_append_only(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Partition_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_partition_by;
    }

	PARTITION() {
	    return this.getToken(SnowflakeParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPartition_by(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_alias;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_alias_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_expr_alias_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	alias = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AliasContext);
	    } else {
	        return this.getTypedRuleContext(AliasContext,i);
	    }
	};

	AS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.AS);
	    } else {
	        return this.getToken(SnowflakeParser.AS, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExpr_alias_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MeasuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_measures;
    }

	MEASURES() {
	    return this.getToken(SnowflakeParser.MEASURES, 0);
	};

	expr_alias_list() {
	    return this.getTypedRuleContext(Expr_alias_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitMeasures(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Match_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_match_opts;
    }

	SHOW() {
	    return this.getToken(SnowflakeParser.SHOW, 0);
	};

	EMPTY_() {
	    return this.getToken(SnowflakeParser.EMPTY_, 0);
	};

	MATCHES() {
	    return this.getToken(SnowflakeParser.MATCHES, 0);
	};

	OMIT() {
	    return this.getToken(SnowflakeParser.OMIT, 0);
	};

	WITH() {
	    return this.getToken(SnowflakeParser.WITH, 0);
	};

	UNMATCHED() {
	    return this.getToken(SnowflakeParser.UNMATCHED, 0);
	};

	ROWS() {
	    return this.getToken(SnowflakeParser.ROWS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitMatch_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Row_matchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_row_match;
    }

	ONE() {
	    return this.getToken(SnowflakeParser.ONE, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	PER() {
	    return this.getToken(SnowflakeParser.PER, 0);
	};

	MATCH() {
	    return this.getToken(SnowflakeParser.MATCH, 0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	ROWS() {
	    return this.getToken(SnowflakeParser.ROWS, 0);
	};

	match_opts() {
	    return this.getTypedRuleContext(Match_optsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRow_match(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class First_lastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_first_last;
    }

	FIRST() {
	    return this.getToken(SnowflakeParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(SnowflakeParser.LAST, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFirst_last(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_symbol;
    }

	DUMMY() {
	    return this.getToken(SnowflakeParser.DUMMY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSymbol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class After_matchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_after_match;
    }

	AFTER() {
	    return this.getToken(SnowflakeParser.AFTER, 0);
	};

	MATCH() {
	    return this.getToken(SnowflakeParser.MATCH, 0);
	};

	SKIP_() {
	    return this.getToken(SnowflakeParser.SKIP_, 0);
	};

	PAST() {
	    return this.getToken(SnowflakeParser.PAST, 0);
	};

	LAST() {
	    return this.getToken(SnowflakeParser.LAST, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	TO() {
	    return this.getToken(SnowflakeParser.TO, 0);
	};

	NEXT() {
	    return this.getToken(SnowflakeParser.NEXT, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	first_last() {
	    return this.getTypedRuleContext(First_lastContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitAfter_match(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Symbol_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_symbol_list;
    }

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	AS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.AS);
	    } else {
	        return this.getToken(SnowflakeParser.AS, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSymbol_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_define;
    }

	DEFINE() {
	    return this.getToken(SnowflakeParser.DEFINE, 0);
	};

	symbol_list() {
	    return this.getTypedRuleContext(Symbol_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitDefine(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Match_recognizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_match_recognize;
    }

	MATCH_RECOGNIZE() {
	    return this.getToken(SnowflakeParser.MATCH_RECOGNIZE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	partition_by() {
	    return this.getTypedRuleContext(Partition_byContext,0);
	};

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	measures() {
	    return this.getTypedRuleContext(MeasuresContext,0);
	};

	row_match() {
	    return this.getTypedRuleContext(Row_matchContext,0);
	};

	after_match() {
	    return this.getTypedRuleContext(After_matchContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	define() {
	    return this.getTypedRuleContext(DefineContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitMatch_recognize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pivot_unpivotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_pivot_unpivot;
    }

	PIVOT() {
	    return this.getToken(SnowflakeParser.PIVOT, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.LR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.LR_BRACKET, i);
	    }
	};


	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.RR_BRACKET);
	    } else {
	        return this.getToken(SnowflakeParser.RR_BRACKET, i);
	    }
	};


	FOR() {
	    return this.getToken(SnowflakeParser.FOR, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	as_alias() {
	    return this.getTypedRuleContext(As_aliasContext,0);
	};

	column_alias_list_in_brackets() {
	    return this.getTypedRuleContext(Column_alias_list_in_bracketsContext,0);
	};

	UNPIVOT() {
	    return this.getToken(SnowflakeParser.UNPIVOT, 0);
	};

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPivot_unpivot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_alias_list_in_bracketsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_column_alias_list_in_brackets;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	id_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Id_Context);
	    } else {
	        return this.getTypedRuleContext(Id_Context,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitColumn_alias_list_in_brackets(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_list_in_parenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_expr_list_in_parentheses;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitExpr_list_in_parentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Values_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_values_table;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	values_table_body() {
	    return this.getTypedRuleContext(Values_table_bodyContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	as_alias() {
	    return this.getTypedRuleContext(As_aliasContext,0);
	};

	column_alias_list_in_brackets() {
	    return this.getTypedRuleContext(Column_alias_list_in_bracketsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitValues_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Values_table_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_values_table_body;
    }

	VALUES() {
	    return this.getToken(SnowflakeParser.VALUES, 0);
	};

	expr_list_in_parentheses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr_list_in_parenthesesContext);
	    } else {
	        return this.getTypedRuleContext(Expr_list_in_parenthesesContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitValues_table_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sample_methodContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_sample_method;
        this.row_sampling = null;
        this.block_sampling = null;
    }

	BERNOULLI() {
	    return this.getToken(SnowflakeParser.BERNOULLI, 0);
	};

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	SYSTEM() {
	    return this.getToken(SnowflakeParser.SYSTEM, 0);
	};

	BLOCK() {
	    return this.getToken(SnowflakeParser.BLOCK, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSample_method(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Repeatable_seedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_repeatable_seed;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	REPEATABLE() {
	    return this.getToken(SnowflakeParser.REPEATABLE, 0);
	};

	SEED() {
	    return this.getToken(SnowflakeParser.SEED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRepeatable_seed(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sample_optsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_sample_opts;
    }

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	ROWS() {
	    return this.getToken(SnowflakeParser.ROWS, 0);
	};

	repeatable_seed() {
	    return this.getTypedRuleContext(Repeatable_seedContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSample_opts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SampleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_sample;
    }

	sample_opts() {
	    return this.getTypedRuleContext(Sample_optsContext,0);
	};

	SAMPLE() {
	    return this.getToken(SnowflakeParser.SAMPLE, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(SnowflakeParser.TABLESAMPLE, 0);
	};

	sample_method() {
	    return this.getTypedRuleContext(Sample_methodContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSample(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Search_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_search_condition;
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	search_condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Search_conditionContext);
	    } else {
	        return this.getTypedRuleContext(Search_conditionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.NOT);
	    } else {
	        return this.getToken(SnowflakeParser.NOT, i);
	    }
	};


	AND() {
	    return this.getToken(SnowflakeParser.AND, 0);
	};

	OR() {
	    return this.getToken(SnowflakeParser.OR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSearch_condition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comparison_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_comparison_operator;
    }

	EQ() {
	    return this.getToken(SnowflakeParser.EQ, 0);
	};

	GT() {
	    return this.getToken(SnowflakeParser.GT, 0);
	};

	LT() {
	    return this.getToken(SnowflakeParser.LT, 0);
	};

	LE() {
	    return this.getToken(SnowflakeParser.LE, 0);
	};

	GE() {
	    return this.getToken(SnowflakeParser.GE, 0);
	};

	LTGT() {
	    return this.getToken(SnowflakeParser.LTGT, 0);
	};

	NE() {
	    return this.getToken(SnowflakeParser.NE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitComparison_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Null_not_nullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_null_not_null;
    }

	NULL_() {
	    return this.getToken(SnowflakeParser.NULL_, 0);
	};

	NOT() {
	    return this.getToken(SnowflakeParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitNull_not_null(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_subquery;
    }

	query_statement() {
	    return this.getTypedRuleContext(Query_statementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitSubquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_predicate;
    }

	EXISTS() {
	    return this.getToken(SnowflakeParser.EXISTS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	comparison_operator() {
	    return this.getTypedRuleContext(Comparison_operatorContext,0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	SOME() {
	    return this.getToken(SnowflakeParser.SOME, 0);
	};

	ANY() {
	    return this.getToken(SnowflakeParser.ANY, 0);
	};

	BETWEEN() {
	    return this.getToken(SnowflakeParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(SnowflakeParser.AND, 0);
	};

	NOT() {
	    return this.getToken(SnowflakeParser.NOT, 0);
	};

	IN() {
	    return this.getToken(SnowflakeParser.IN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	LIKE() {
	    return this.getToken(SnowflakeParser.LIKE, 0);
	};

	ILIKE() {
	    return this.getToken(SnowflakeParser.ILIKE, 0);
	};

	ESCAPE() {
	    return this.getToken(SnowflakeParser.ESCAPE, 0);
	};

	RLIKE() {
	    return this.getToken(SnowflakeParser.RLIKE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	IS() {
	    return this.getToken(SnowflakeParser.IS, 0);
	};

	null_not_null() {
	    return this.getTypedRuleContext(Null_not_nullContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Where_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_where_clause;
    }

	WHERE() {
	    return this.getToken(SnowflakeParser.WHERE, 0);
	};

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitWhere_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Group_by_elemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_group_by_elem;
    }

	column_elem() {
	    return this.getTypedRuleContext(Column_elemContext,0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	expression_elem() {
	    return this.getTypedRuleContext(Expression_elemContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGroup_by_elem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Group_by_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_group_by_list;
    }

	group_by_elem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Group_by_elemContext);
	    } else {
	        return this.getTypedRuleContext(Group_by_elemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGroup_by_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Group_by_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_group_by_clause;
    }

	GROUP() {
	    return this.getToken(SnowflakeParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	group_by_list() {
	    return this.getTypedRuleContext(Group_by_listContext,0);
	};

	having_clause() {
	    return this.getTypedRuleContext(Having_clauseContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	CUBE() {
	    return this.getToken(SnowflakeParser.CUBE, 0);
	};

	GROUPING() {
	    return this.getToken(SnowflakeParser.GROUPING, 0);
	};

	SETS() {
	    return this.getToken(SnowflakeParser.SETS, 0);
	};

	ROLLUP() {
	    return this.getToken(SnowflakeParser.ROLLUP, 0);
	};

	ALL() {
	    return this.getToken(SnowflakeParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitGroup_by_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Having_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_having_clause;
    }

	HAVING() {
	    return this.getToken(SnowflakeParser.HAVING, 0);
	};

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitHaving_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qualify_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_qualify_clause;
    }

	QUALIFY() {
	    return this.getToken(SnowflakeParser.QUALIFY, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitQualify_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Order_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_order_item;
    }

	id_() {
	    return this.getTypedRuleContext(Id_Context,0);
	};

	num() {
	    return this.getTypedRuleContext(NumContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	NULLS() {
	    return this.getToken(SnowflakeParser.NULLS, 0);
	};

	ASC() {
	    return this.getToken(SnowflakeParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SnowflakeParser.DESC, 0);
	};

	FIRST() {
	    return this.getToken(SnowflakeParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(SnowflakeParser.LAST, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOrder_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Order_by_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_order_by_clause;
    }

	ORDER() {
	    return this.getToken(SnowflakeParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SnowflakeParser.BY, 0);
	};

	order_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Order_itemContext);
	    } else {
	        return this.getTypedRuleContext(Order_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitOrder_by_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Row_rowsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_row_rows;
    }

	ROW() {
	    return this.getToken(SnowflakeParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(SnowflakeParser.ROWS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRow_rows(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class First_nextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_first_next;
    }

	FIRST() {
	    return this.getToken(SnowflakeParser.FIRST, 0);
	};

	NEXT() {
	    return this.getToken(SnowflakeParser.NEXT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitFirst_next(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Limit_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_limit_clause;
    }

	LIMIT() {
	    return this.getToken(SnowflakeParser.LIMIT, 0);
	};

	num = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumContext);
	    } else {
	        return this.getTypedRuleContext(NumContext,i);
	    }
	};

	OFFSET() {
	    return this.getToken(SnowflakeParser.OFFSET, 0);
	};

	FETCH() {
	    return this.getToken(SnowflakeParser.FETCH, 0);
	};

	row_rows = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_rowsContext);
	    } else {
	        return this.getTypedRuleContext(Row_rowsContext,i);
	    }
	};

	first_next() {
	    return this.getTypedRuleContext(First_nextContext,0);
	};

	ONLY() {
	    return this.getToken(SnowflakeParser.ONLY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitLimit_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Round_modeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_round_mode;
    }

	HALF_AWAY_FROM_ZERO_Q() {
	    return this.getToken(SnowflakeParser.HALF_AWAY_FROM_ZERO_Q, 0);
	};

	HALF_TO_EVEN_Q() {
	    return this.getToken(SnowflakeParser.HALF_TO_EVEN_Q, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRound_mode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Round_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SnowflakeParser.RULE_round_expr;
    }

	ROUND() {
	    return this.getToken(SnowflakeParser.ROUND, 0);
	};

	LR_BRACKET() {
	    return this.getToken(SnowflakeParser.LR_BRACKET, 0);
	};

	EXPR() {
	    return this.getToken(SnowflakeParser.EXPR, 0);
	};

	ASSOC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ASSOC);
	    } else {
	        return this.getToken(SnowflakeParser.ASSOC, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.COMMA);
	    } else {
	        return this.getToken(SnowflakeParser.COMMA, i);
	    }
	};


	SCALE() {
	    return this.getToken(SnowflakeParser.SCALE, 0);
	};

	RR_BRACKET() {
	    return this.getToken(SnowflakeParser.RR_BRACKET, 0);
	};

	ROUNDING_MODE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SnowflakeParser.ROUNDING_MODE);
	    } else {
	        return this.getToken(SnowflakeParser.ROUNDING_MODE, i);
	    }
	};


	round_mode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Round_modeContext);
	    } else {
	        return this.getTypedRuleContext(Round_modeContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SnowflakeParserVisitor ) {
	        return visitor.visitRound_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




SnowflakeParser.Snowflake_fileContext = Snowflake_fileContext; 
SnowflakeParser.BatchContext = BatchContext; 
SnowflakeParser.Sql_commandContext = Sql_commandContext; 
SnowflakeParser.Ddl_commandContext = Ddl_commandContext; 
SnowflakeParser.Dml_commandContext = Dml_commandContext; 
SnowflakeParser.Insert_statementContext = Insert_statementContext; 
SnowflakeParser.Insert_multi_table_statementContext = Insert_multi_table_statementContext; 
SnowflakeParser.Into_clause2Context = Into_clause2Context; 
SnowflakeParser.Values_listContext = Values_listContext; 
SnowflakeParser.Value_itemContext = Value_itemContext; 
SnowflakeParser.Merge_statementContext = Merge_statementContext; 
SnowflakeParser.Merge_matchesContext = Merge_matchesContext; 
SnowflakeParser.Merge_condContext = Merge_condContext; 
SnowflakeParser.Merge_update_deleteContext = Merge_update_deleteContext; 
SnowflakeParser.Merge_insertContext = Merge_insertContext; 
SnowflakeParser.Update_statementContext = Update_statementContext; 
SnowflakeParser.Table_or_queryContext = Table_or_queryContext; 
SnowflakeParser.Delete_statementContext = Delete_statementContext; 
SnowflakeParser.Values_builderContext = Values_builderContext; 
SnowflakeParser.Other_commandContext = Other_commandContext; 
SnowflakeParser.Begin_txnContext = Begin_txnContext; 
SnowflakeParser.Copy_into_tableContext = Copy_into_tableContext; 
SnowflakeParser.External_locationContext = External_locationContext; 
SnowflakeParser.FilesContext = FilesContext; 
SnowflakeParser.File_formatContext = File_formatContext; 
SnowflakeParser.Format_nameContext = Format_nameContext; 
SnowflakeParser.Format_typeContext = Format_typeContext; 
SnowflakeParser.Stage_file_formatContext = Stage_file_formatContext; 
SnowflakeParser.Copy_into_locationContext = Copy_into_locationContext; 
SnowflakeParser.CommentContext = CommentContext; 
SnowflakeParser.Function_signatureContext = Function_signatureContext; 
SnowflakeParser.CommitContext = CommitContext; 
SnowflakeParser.Execute_immediateContext = Execute_immediateContext; 
SnowflakeParser.Execute_taskContext = Execute_taskContext; 
SnowflakeParser.ExplainContext = ExplainContext; 
SnowflakeParser.ParallelContext = ParallelContext; 
SnowflakeParser.Get_dmlContext = Get_dmlContext; 
SnowflakeParser.Grant_ownershipContext = Grant_ownershipContext; 
SnowflakeParser.Grant_to_roleContext = Grant_to_roleContext; 
SnowflakeParser.Global_privilegesContext = Global_privilegesContext; 
SnowflakeParser.Global_privilegeContext = Global_privilegeContext; 
SnowflakeParser.Account_object_privilegesContext = Account_object_privilegesContext; 
SnowflakeParser.Account_object_privilegeContext = Account_object_privilegeContext; 
SnowflakeParser.Schema_privilegesContext = Schema_privilegesContext; 
SnowflakeParser.Schema_privilegeContext = Schema_privilegeContext; 
SnowflakeParser.Schema_object_privilegesContext = Schema_object_privilegesContext; 
SnowflakeParser.Schema_object_privilegeContext = Schema_object_privilegeContext; 
SnowflakeParser.Grant_to_shareContext = Grant_to_shareContext; 
SnowflakeParser.Object_privilegeContext = Object_privilegeContext; 
SnowflakeParser.Grant_roleContext = Grant_roleContext; 
SnowflakeParser.Role_nameContext = Role_nameContext; 
SnowflakeParser.System_defined_roleContext = System_defined_roleContext; 
SnowflakeParser.ListContext = ListContext; 
SnowflakeParser.User_stageContext = User_stageContext; 
SnowflakeParser.Table_stageContext = Table_stageContext; 
SnowflakeParser.Named_stageContext = Named_stageContext; 
SnowflakeParser.Stage_pathContext = Stage_pathContext; 
SnowflakeParser.PutContext = PutContext; 
SnowflakeParser.RemoveContext = RemoveContext; 
SnowflakeParser.Revoke_from_roleContext = Revoke_from_roleContext; 
SnowflakeParser.Revoke_from_shareContext = Revoke_from_shareContext; 
SnowflakeParser.Revoke_roleContext = Revoke_roleContext; 
SnowflakeParser.RollbackContext = RollbackContext; 
SnowflakeParser.SetContext = SetContext; 
SnowflakeParser.Truncate_materialized_viewContext = Truncate_materialized_viewContext; 
SnowflakeParser.Truncate_tableContext = Truncate_tableContext; 
SnowflakeParser.UnsetContext = UnsetContext; 
SnowflakeParser.Alter_commandContext = Alter_commandContext; 
SnowflakeParser.Account_paramsContext = Account_paramsContext; 
SnowflakeParser.Object_paramsContext = Object_paramsContext; 
SnowflakeParser.Default_ddl_collationContext = Default_ddl_collationContext; 
SnowflakeParser.Object_propertiesContext = Object_propertiesContext; 
SnowflakeParser.Session_paramsContext = Session_paramsContext; 
SnowflakeParser.Alter_accountContext = Alter_accountContext; 
SnowflakeParser.Enabled_true_falseContext = Enabled_true_falseContext; 
SnowflakeParser.Alter_alertContext = Alter_alertContext; 
SnowflakeParser.Resume_suspendContext = Resume_suspendContext; 
SnowflakeParser.Alert_set_clauseContext = Alert_set_clauseContext; 
SnowflakeParser.Alert_unset_clauseContext = Alert_unset_clauseContext; 
SnowflakeParser.Alter_api_integrationContext = Alter_api_integrationContext; 
SnowflakeParser.Api_integration_propertyContext = Api_integration_propertyContext; 
SnowflakeParser.Alter_connectionContext = Alter_connectionContext; 
SnowflakeParser.Alter_databaseContext = Alter_databaseContext; 
SnowflakeParser.Database_propertyContext = Database_propertyContext; 
SnowflakeParser.Account_id_listContext = Account_id_listContext; 
SnowflakeParser.Alter_dynamic_tableContext = Alter_dynamic_tableContext; 
SnowflakeParser.Alter_external_tableContext = Alter_external_tableContext; 
SnowflakeParser.Ignore_edition_checkContext = Ignore_edition_checkContext; 
SnowflakeParser.Replication_scheduleContext = Replication_scheduleContext; 
SnowflakeParser.Db_name_listContext = Db_name_listContext; 
SnowflakeParser.Share_name_listContext = Share_name_listContext; 
SnowflakeParser.Full_acct_listContext = Full_acct_listContext; 
SnowflakeParser.Alter_failover_groupContext = Alter_failover_groupContext; 
SnowflakeParser.Alter_file_formatContext = Alter_file_formatContext; 
SnowflakeParser.Alter_functionContext = Alter_functionContext; 
SnowflakeParser.Alter_function_signatureContext = Alter_function_signatureContext; 
SnowflakeParser.Data_type_listContext = Data_type_listContext; 
SnowflakeParser.Alter_masking_policyContext = Alter_masking_policyContext; 
SnowflakeParser.Alter_materialized_viewContext = Alter_materialized_viewContext; 
SnowflakeParser.Alter_network_policyContext = Alter_network_policyContext; 
SnowflakeParser.Alter_notification_integrationContext = Alter_notification_integrationContext; 
SnowflakeParser.Alter_pipeContext = Alter_pipeContext; 
SnowflakeParser.Alter_procedureContext = Alter_procedureContext; 
SnowflakeParser.Alter_replication_groupContext = Alter_replication_groupContext; 
SnowflakeParser.Credit_quotaContext = Credit_quotaContext; 
SnowflakeParser.FrequencyContext = FrequencyContext; 
SnowflakeParser.Notify_usersContext = Notify_usersContext; 
SnowflakeParser.TriggerDefinitionContext = TriggerDefinitionContext; 
SnowflakeParser.Alter_resource_monitorContext = Alter_resource_monitorContext; 
SnowflakeParser.Alter_roleContext = Alter_roleContext; 
SnowflakeParser.Alter_row_access_policyContext = Alter_row_access_policyContext; 
SnowflakeParser.Alter_schemaContext = Alter_schemaContext; 
SnowflakeParser.Schema_propertyContext = Schema_propertyContext; 
SnowflakeParser.Alter_sequenceContext = Alter_sequenceContext; 
SnowflakeParser.Alter_security_integration_external_oauthContext = Alter_security_integration_external_oauthContext; 
SnowflakeParser.Security_integration_external_oauth_propertyContext = Security_integration_external_oauth_propertyContext; 
SnowflakeParser.Alter_security_integration_snowflake_oauthContext = Alter_security_integration_snowflake_oauthContext; 
SnowflakeParser.Security_integration_snowflake_oauth_propertyContext = Security_integration_snowflake_oauth_propertyContext; 
SnowflakeParser.Alter_security_integration_saml2Context = Alter_security_integration_saml2Context; 
SnowflakeParser.Alter_security_integration_scimContext = Alter_security_integration_scimContext; 
SnowflakeParser.Security_integration_scim_propertyContext = Security_integration_scim_propertyContext; 
SnowflakeParser.Alter_sessionContext = Alter_sessionContext; 
SnowflakeParser.Alter_session_policyContext = Alter_session_policyContext; 
SnowflakeParser.Alter_password_policyContext = Alter_password_policyContext; 
SnowflakeParser.Alter_shareContext = Alter_shareContext; 
SnowflakeParser.Alter_storage_integrationContext = Alter_storage_integrationContext; 
SnowflakeParser.Alter_streamContext = Alter_streamContext; 
SnowflakeParser.Alter_tableContext = Alter_tableContext; 
SnowflakeParser.Clustering_actionContext = Clustering_actionContext; 
SnowflakeParser.Table_column_actionContext = Table_column_actionContext; 
SnowflakeParser.Alter_column_clauseContext = Alter_column_clauseContext; 
SnowflakeParser.Inline_constraintContext = Inline_constraintContext; 
SnowflakeParser.Enforced_not_enforcedContext = Enforced_not_enforcedContext; 
SnowflakeParser.Deferrable_not_deferrableContext = Deferrable_not_deferrableContext; 
SnowflakeParser.Initially_deferred_or_immediateContext = Initially_deferred_or_immediateContext; 
SnowflakeParser.Common_constraint_propertiesContext = Common_constraint_propertiesContext; 
SnowflakeParser.On_updateContext = On_updateContext; 
SnowflakeParser.On_deleteContext = On_deleteContext; 
SnowflakeParser.Foreign_key_matchContext = Foreign_key_matchContext; 
SnowflakeParser.On_actionContext = On_actionContext; 
SnowflakeParser.Constraint_propertiesContext = Constraint_propertiesContext; 
SnowflakeParser.Ext_table_column_actionContext = Ext_table_column_actionContext; 
SnowflakeParser.Constraint_actionContext = Constraint_actionContext; 
SnowflakeParser.Search_optimization_actionContext = Search_optimization_actionContext; 
SnowflakeParser.Search_method_with_targetContext = Search_method_with_targetContext; 
SnowflakeParser.Alter_table_alter_columnContext = Alter_table_alter_columnContext; 
SnowflakeParser.Alter_column_decl_listContext = Alter_column_decl_listContext; 
SnowflakeParser.Alter_column_declContext = Alter_column_declContext; 
SnowflakeParser.Alter_column_optsContext = Alter_column_optsContext; 
SnowflakeParser.Column_set_tagsContext = Column_set_tagsContext; 
SnowflakeParser.Column_unset_tagsContext = Column_unset_tagsContext; 
SnowflakeParser.Alter_tagContext = Alter_tagContext; 
SnowflakeParser.Alter_taskContext = Alter_taskContext; 
SnowflakeParser.Alter_userContext = Alter_userContext; 
SnowflakeParser.Alter_viewContext = Alter_viewContext; 
SnowflakeParser.Alter_modifyContext = Alter_modifyContext; 
SnowflakeParser.Alter_warehouseContext = Alter_warehouseContext; 
SnowflakeParser.Alter_connection_optsContext = Alter_connection_optsContext; 
SnowflakeParser.Alter_user_optsContext = Alter_user_optsContext; 
SnowflakeParser.Alter_tag_optsContext = Alter_tag_optsContext; 
SnowflakeParser.Alter_network_policy_optsContext = Alter_network_policy_optsContext; 
SnowflakeParser.Alter_warehouse_optsContext = Alter_warehouse_optsContext; 
SnowflakeParser.Alter_account_optsContext = Alter_account_optsContext; 
SnowflakeParser.Set_tagsContext = Set_tagsContext; 
SnowflakeParser.Tag_decl_listContext = Tag_decl_listContext; 
SnowflakeParser.Unset_tagsContext = Unset_tagsContext; 
SnowflakeParser.Create_commandContext = Create_commandContext; 
SnowflakeParser.Create_accountContext = Create_accountContext; 
SnowflakeParser.Create_alertContext = Create_alertContext; 
SnowflakeParser.Alert_conditionContext = Alert_conditionContext; 
SnowflakeParser.Alert_actionContext = Alert_actionContext; 
SnowflakeParser.Create_api_integrationContext = Create_api_integrationContext; 
SnowflakeParser.Create_object_cloneContext = Create_object_cloneContext; 
SnowflakeParser.Create_connectionContext = Create_connectionContext; 
SnowflakeParser.Create_databaseContext = Create_databaseContext; 
SnowflakeParser.Clone_at_beforeContext = Clone_at_beforeContext; 
SnowflakeParser.At_before1Context = At_before1Context; 
SnowflakeParser.Header_declContext = Header_declContext; 
SnowflakeParser.Compression_typeContext = Compression_typeContext; 
SnowflakeParser.CompressionContext = CompressionContext; 
SnowflakeParser.Create_dynamic_tableContext = Create_dynamic_tableContext; 
SnowflakeParser.Create_event_tableContext = Create_event_tableContext; 
SnowflakeParser.Create_external_functionContext = Create_external_functionContext; 
SnowflakeParser.Create_external_tableContext = Create_external_tableContext; 
SnowflakeParser.External_table_column_declContext = External_table_column_declContext; 
SnowflakeParser.External_table_column_decl_listContext = External_table_column_decl_listContext; 
SnowflakeParser.Full_acctContext = Full_acctContext; 
SnowflakeParser.Integration_type_nameContext = Integration_type_nameContext; 
SnowflakeParser.Create_failover_groupContext = Create_failover_groupContext; 
SnowflakeParser.Type_fileformatContext = Type_fileformatContext; 
SnowflakeParser.Create_file_formatContext = Create_file_formatContext; 
SnowflakeParser.Arg_declContext = Arg_declContext; 
SnowflakeParser.Arg_default_value_clauseContext = Arg_default_value_clauseContext; 
SnowflakeParser.Col_declContext = Col_declContext; 
SnowflakeParser.Virtual_column_declContext = Virtual_column_declContext; 
SnowflakeParser.Function_definitionContext = Function_definitionContext; 
SnowflakeParser.Create_functionContext = Create_functionContext; 
SnowflakeParser.Create_managed_accountContext = Create_managed_accountContext; 
SnowflakeParser.Create_masking_policyContext = Create_masking_policyContext; 
SnowflakeParser.Tag_declContext = Tag_declContext; 
SnowflakeParser.Column_list_in_parenthesesContext = Column_list_in_parenthesesContext; 
SnowflakeParser.Create_materialized_viewContext = Create_materialized_viewContext; 
SnowflakeParser.Create_network_policyContext = Create_network_policyContext; 
SnowflakeParser.Cloud_provider_params_autoContext = Cloud_provider_params_autoContext; 
SnowflakeParser.Cloud_provider_params_pushContext = Cloud_provider_params_pushContext; 
SnowflakeParser.Create_notification_integrationContext = Create_notification_integrationContext; 
SnowflakeParser.Create_pipeContext = Create_pipeContext; 
SnowflakeParser.Caller_ownerContext = Caller_ownerContext; 
SnowflakeParser.Executa_asContext = Executa_asContext; 
SnowflakeParser.Procedure_definitionContext = Procedure_definitionContext; 
SnowflakeParser.Not_nullContext = Not_nullContext; 
SnowflakeParser.Create_procedureContext = Create_procedureContext; 
SnowflakeParser.Create_replication_groupContext = Create_replication_groupContext; 
SnowflakeParser.Create_resource_monitorContext = Create_resource_monitorContext; 
SnowflakeParser.Create_roleContext = Create_roleContext; 
SnowflakeParser.Create_row_access_policyContext = Create_row_access_policyContext; 
SnowflakeParser.Create_schemaContext = Create_schemaContext; 
SnowflakeParser.Create_security_integration_external_oauthContext = Create_security_integration_external_oauthContext; 
SnowflakeParser.Implicit_noneContext = Implicit_noneContext; 
SnowflakeParser.Create_security_integration_snowflake_oauthContext = Create_security_integration_snowflake_oauthContext; 
SnowflakeParser.Create_security_integration_saml2Context = Create_security_integration_saml2Context; 
SnowflakeParser.Create_security_integration_scimContext = Create_security_integration_scimContext; 
SnowflakeParser.Network_policyContext = Network_policyContext; 
SnowflakeParser.Partner_applicationContext = Partner_applicationContext; 
SnowflakeParser.Start_withContext = Start_withContext; 
SnowflakeParser.Increment_byContext = Increment_byContext; 
SnowflakeParser.Create_sequenceContext = Create_sequenceContext; 
SnowflakeParser.Create_session_policyContext = Create_session_policyContext; 
SnowflakeParser.Session_policy_paramsContext = Session_policy_paramsContext; 
SnowflakeParser.Session_policy_param_nameContext = Session_policy_param_nameContext; 
SnowflakeParser.Create_password_policyContext = Create_password_policyContext; 
SnowflakeParser.Password_policy_paramsContext = Password_policy_paramsContext; 
SnowflakeParser.Password_policy_param_nameContext = Password_policy_param_nameContext; 
SnowflakeParser.Create_shareContext = Create_shareContext; 
SnowflakeParser.CharacterContext = CharacterContext; 
SnowflakeParser.Format_type_optionsContext = Format_type_optionsContext; 
SnowflakeParser.Copy_optionsContext = Copy_optionsContext; 
SnowflakeParser.Stage_encryption_opts_internalContext = Stage_encryption_opts_internalContext; 
SnowflakeParser.Stage_typeContext = Stage_typeContext; 
SnowflakeParser.Stage_master_keyContext = Stage_master_keyContext; 
SnowflakeParser.Stage_kms_keyContext = Stage_kms_keyContext; 
SnowflakeParser.Stage_encryption_opts_awsContext = Stage_encryption_opts_awsContext; 
SnowflakeParser.Aws_tokenContext = Aws_tokenContext; 
SnowflakeParser.Aws_key_idContext = Aws_key_idContext; 
SnowflakeParser.Aws_secret_keyContext = Aws_secret_keyContext; 
SnowflakeParser.Aws_roleContext = Aws_roleContext; 
SnowflakeParser.Azure_encryption_valueContext = Azure_encryption_valueContext; 
SnowflakeParser.Stage_encryption_opts_azContext = Stage_encryption_opts_azContext; 
SnowflakeParser.Storage_integration_eq_idContext = Storage_integration_eq_idContext; 
SnowflakeParser.Az_credential_or_storage_integrationContext = Az_credential_or_storage_integrationContext; 
SnowflakeParser.Gcp_encryption_valueContext = Gcp_encryption_valueContext; 
SnowflakeParser.Stage_encryption_opts_gcpContext = Stage_encryption_opts_gcpContext; 
SnowflakeParser.Aws_credential_or_storage_integrationContext = Aws_credential_or_storage_integrationContext; 
SnowflakeParser.External_stage_paramsContext = External_stage_paramsContext; 
SnowflakeParser.True_falseContext = True_falseContext; 
SnowflakeParser.EnableContext = EnableContext; 
SnowflakeParser.Refresh_on_createContext = Refresh_on_createContext; 
SnowflakeParser.Auto_refreshContext = Auto_refreshContext; 
SnowflakeParser.Notification_integrationContext = Notification_integrationContext; 
SnowflakeParser.Directory_table_internal_paramsContext = Directory_table_internal_paramsContext; 
SnowflakeParser.Directory_table_external_paramsContext = Directory_table_external_paramsContext; 
SnowflakeParser.Create_stageContext = Create_stageContext; 
SnowflakeParser.Alter_stageContext = Alter_stageContext; 
SnowflakeParser.Drop_stageContext = Drop_stageContext; 
SnowflakeParser.Describe_stageContext = Describe_stageContext; 
SnowflakeParser.Show_stagesContext = Show_stagesContext; 
SnowflakeParser.Cloud_provider_paramsContext = Cloud_provider_paramsContext; 
SnowflakeParser.Cloud_provider_params2Context = Cloud_provider_params2Context; 
SnowflakeParser.Cloud_provider_params3Context = Cloud_provider_params3Context; 
SnowflakeParser.Create_storage_integrationContext = Create_storage_integrationContext; 
SnowflakeParser.Copy_grantsContext = Copy_grantsContext; 
SnowflakeParser.Append_onlyContext = Append_onlyContext; 
SnowflakeParser.Insert_onlyContext = Insert_onlyContext; 
SnowflakeParser.Show_initial_rowsContext = Show_initial_rowsContext; 
SnowflakeParser.Stream_timeContext = Stream_timeContext; 
SnowflakeParser.Create_streamContext = Create_streamContext; 
SnowflakeParser.TemporaryContext = TemporaryContext; 
SnowflakeParser.Table_typeContext = Table_typeContext; 
SnowflakeParser.With_tagsContext = With_tagsContext; 
SnowflakeParser.With_row_access_policyContext = With_row_access_policyContext; 
SnowflakeParser.Cluster_byContext = Cluster_byContext; 
SnowflakeParser.Change_trackingContext = Change_trackingContext; 
SnowflakeParser.With_masking_policyContext = With_masking_policyContext; 
SnowflakeParser.CollateContext = CollateContext; 
SnowflakeParser.Order_noorderContext = Order_noorderContext; 
SnowflakeParser.Default_valueContext = Default_valueContext; 
SnowflakeParser.Foreign_keyContext = Foreign_keyContext; 
SnowflakeParser.Primary_keyContext = Primary_keyContext; 
SnowflakeParser.Out_of_line_constraintContext = Out_of_line_constraintContext; 
SnowflakeParser.Full_col_declContext = Full_col_declContext; 
SnowflakeParser.Column_decl_itemContext = Column_decl_itemContext; 
SnowflakeParser.Column_decl_item_listContext = Column_decl_item_listContext; 
SnowflakeParser.Create_tableContext = Create_tableContext; 
SnowflakeParser.Column_decl_item_list_parenContext = Column_decl_item_list_parenContext; 
SnowflakeParser.Create_table_clauseContext = Create_table_clauseContext; 
SnowflakeParser.Create_table_as_selectContext = Create_table_as_selectContext; 
SnowflakeParser.Create_table_likeContext = Create_table_likeContext; 
SnowflakeParser.Create_tagContext = Create_tagContext; 
SnowflakeParser.Tag_allowed_valuesContext = Tag_allowed_valuesContext; 
SnowflakeParser.Session_parameterContext = Session_parameterContext; 
SnowflakeParser.Session_parameter_listContext = Session_parameter_listContext; 
SnowflakeParser.Session_params_listContext = Session_params_listContext; 
SnowflakeParser.Create_taskContext = Create_taskContext; 
SnowflakeParser.Task_parametersContext = Task_parametersContext; 
SnowflakeParser.Task_computeContext = Task_computeContext; 
SnowflakeParser.Task_scheduleContext = Task_scheduleContext; 
SnowflakeParser.Task_timeoutContext = Task_timeoutContext; 
SnowflakeParser.Task_suspend_after_failure_numberContext = Task_suspend_after_failure_numberContext; 
SnowflakeParser.Task_error_integrationContext = Task_error_integrationContext; 
SnowflakeParser.Task_overlapContext = Task_overlapContext; 
SnowflakeParser.SqlContext = SqlContext; 
SnowflakeParser.CallContext = CallContext; 
SnowflakeParser.Create_userContext = Create_userContext; 
SnowflakeParser.View_colContext = View_colContext; 
SnowflakeParser.Create_viewContext = Create_viewContext; 
SnowflakeParser.Create_warehouseContext = Create_warehouseContext; 
SnowflakeParser.Wh_common_sizeContext = Wh_common_sizeContext; 
SnowflakeParser.Wh_extra_sizeContext = Wh_extra_sizeContext; 
SnowflakeParser.Wh_propertiesContext = Wh_propertiesContext; 
SnowflakeParser.Wh_paramsContext = Wh_paramsContext; 
SnowflakeParser.Trigger_definitionContext = Trigger_definitionContext; 
SnowflakeParser.Object_type_nameContext = Object_type_nameContext; 
SnowflakeParser.Object_type_pluralContext = Object_type_pluralContext; 
SnowflakeParser.Drop_commandContext = Drop_commandContext; 
SnowflakeParser.Drop_objectContext = Drop_objectContext; 
SnowflakeParser.Drop_alertContext = Drop_alertContext; 
SnowflakeParser.Drop_connectionContext = Drop_connectionContext; 
SnowflakeParser.Drop_databaseContext = Drop_databaseContext; 
SnowflakeParser.Drop_dynamic_tableContext = Drop_dynamic_tableContext; 
SnowflakeParser.Drop_external_tableContext = Drop_external_tableContext; 
SnowflakeParser.Drop_failover_groupContext = Drop_failover_groupContext; 
SnowflakeParser.Drop_file_formatContext = Drop_file_formatContext; 
SnowflakeParser.Drop_functionContext = Drop_functionContext; 
SnowflakeParser.Drop_integrationContext = Drop_integrationContext; 
SnowflakeParser.Drop_managed_accountContext = Drop_managed_accountContext; 
SnowflakeParser.Drop_masking_policyContext = Drop_masking_policyContext; 
SnowflakeParser.Drop_materialized_viewContext = Drop_materialized_viewContext; 
SnowflakeParser.Drop_network_policyContext = Drop_network_policyContext; 
SnowflakeParser.Drop_pipeContext = Drop_pipeContext; 
SnowflakeParser.Drop_procedureContext = Drop_procedureContext; 
SnowflakeParser.Drop_replication_groupContext = Drop_replication_groupContext; 
SnowflakeParser.Drop_resource_monitorContext = Drop_resource_monitorContext; 
SnowflakeParser.Drop_roleContext = Drop_roleContext; 
SnowflakeParser.Drop_row_access_policyContext = Drop_row_access_policyContext; 
SnowflakeParser.Drop_schemaContext = Drop_schemaContext; 
SnowflakeParser.Drop_sequenceContext = Drop_sequenceContext; 
SnowflakeParser.Drop_session_policyContext = Drop_session_policyContext; 
SnowflakeParser.Drop_password_policyContext = Drop_password_policyContext; 
SnowflakeParser.Drop_shareContext = Drop_shareContext; 
SnowflakeParser.Drop_streamContext = Drop_streamContext; 
SnowflakeParser.Drop_tableContext = Drop_tableContext; 
SnowflakeParser.Drop_tagContext = Drop_tagContext; 
SnowflakeParser.Drop_taskContext = Drop_taskContext; 
SnowflakeParser.Drop_userContext = Drop_userContext; 
SnowflakeParser.Drop_viewContext = Drop_viewContext; 
SnowflakeParser.Drop_warehouseContext = Drop_warehouseContext; 
SnowflakeParser.Cascade_restrictContext = Cascade_restrictContext; 
SnowflakeParser.Arg_typesContext = Arg_typesContext; 
SnowflakeParser.Undrop_commandContext = Undrop_commandContext; 
SnowflakeParser.Undrop_databaseContext = Undrop_databaseContext; 
SnowflakeParser.Undrop_schemaContext = Undrop_schemaContext; 
SnowflakeParser.Undrop_tableContext = Undrop_tableContext; 
SnowflakeParser.Undrop_tagContext = Undrop_tagContext; 
SnowflakeParser.Use_commandContext = Use_commandContext; 
SnowflakeParser.Use_databaseContext = Use_databaseContext; 
SnowflakeParser.Use_roleContext = Use_roleContext; 
SnowflakeParser.Use_schemaContext = Use_schemaContext; 
SnowflakeParser.Use_secondary_rolesContext = Use_secondary_rolesContext; 
SnowflakeParser.Use_warehouseContext = Use_warehouseContext; 
SnowflakeParser.Comment_clauseContext = Comment_clauseContext; 
SnowflakeParser.If_suspendedContext = If_suspendedContext; 
SnowflakeParser.If_existsContext = If_existsContext; 
SnowflakeParser.If_not_existsContext = If_not_existsContext; 
SnowflakeParser.Or_replaceContext = Or_replaceContext; 
SnowflakeParser.DescribeContext = DescribeContext; 
SnowflakeParser.Describe_commandContext = Describe_commandContext; 
SnowflakeParser.Describe_alertContext = Describe_alertContext; 
SnowflakeParser.Describe_databaseContext = Describe_databaseContext; 
SnowflakeParser.Describe_dynamic_tableContext = Describe_dynamic_tableContext; 
SnowflakeParser.Describe_event_tableContext = Describe_event_tableContext; 
SnowflakeParser.Describe_external_tableContext = Describe_external_tableContext; 
SnowflakeParser.Describe_file_formatContext = Describe_file_formatContext; 
SnowflakeParser.Describe_functionContext = Describe_functionContext; 
SnowflakeParser.Describe_integrationContext = Describe_integrationContext; 
SnowflakeParser.Describe_masking_policyContext = Describe_masking_policyContext; 
SnowflakeParser.Describe_materialized_viewContext = Describe_materialized_viewContext; 
SnowflakeParser.Describe_network_policyContext = Describe_network_policyContext; 
SnowflakeParser.Describe_pipeContext = Describe_pipeContext; 
SnowflakeParser.Describe_procedureContext = Describe_procedureContext; 
SnowflakeParser.Describe_resultContext = Describe_resultContext; 
SnowflakeParser.Describe_row_access_policyContext = Describe_row_access_policyContext; 
SnowflakeParser.Describe_schemaContext = Describe_schemaContext; 
SnowflakeParser.Describe_search_optimizationContext = Describe_search_optimizationContext; 
SnowflakeParser.Describe_sequenceContext = Describe_sequenceContext; 
SnowflakeParser.Describe_session_policyContext = Describe_session_policyContext; 
SnowflakeParser.Describe_password_policyContext = Describe_password_policyContext; 
SnowflakeParser.Describe_shareContext = Describe_shareContext; 
SnowflakeParser.Describe_streamContext = Describe_streamContext; 
SnowflakeParser.Describe_tableContext = Describe_tableContext; 
SnowflakeParser.Describe_taskContext = Describe_taskContext; 
SnowflakeParser.Describe_transactionContext = Describe_transactionContext; 
SnowflakeParser.Describe_userContext = Describe_userContext; 
SnowflakeParser.Describe_viewContext = Describe_viewContext; 
SnowflakeParser.Describe_warehouseContext = Describe_warehouseContext; 
SnowflakeParser.Show_commandContext = Show_commandContext; 
SnowflakeParser.Show_alertsContext = Show_alertsContext; 
SnowflakeParser.Show_channelsContext = Show_channelsContext; 
SnowflakeParser.Show_columnsContext = Show_columnsContext; 
SnowflakeParser.Show_connectionsContext = Show_connectionsContext; 
SnowflakeParser.Starts_withContext = Starts_withContext; 
SnowflakeParser.Limit_rowsContext = Limit_rowsContext; 
SnowflakeParser.Show_databasesContext = Show_databasesContext; 
SnowflakeParser.Show_databases_in_failover_groupContext = Show_databases_in_failover_groupContext; 
SnowflakeParser.Show_databases_in_replication_groupContext = Show_databases_in_replication_groupContext; 
SnowflakeParser.Show_delegated_authorizationsContext = Show_delegated_authorizationsContext; 
SnowflakeParser.Show_dynamic_tablesContext = Show_dynamic_tablesContext; 
SnowflakeParser.Show_event_tablesContext = Show_event_tablesContext; 
SnowflakeParser.Show_external_functionsContext = Show_external_functionsContext; 
SnowflakeParser.Show_external_tablesContext = Show_external_tablesContext; 
SnowflakeParser.Show_failover_groupsContext = Show_failover_groupsContext; 
SnowflakeParser.Show_file_formatsContext = Show_file_formatsContext; 
SnowflakeParser.Show_functionsContext = Show_functionsContext; 
SnowflakeParser.Show_global_accountsContext = Show_global_accountsContext; 
SnowflakeParser.Show_grantsContext = Show_grantsContext; 
SnowflakeParser.Show_grants_optsContext = Show_grants_optsContext; 
SnowflakeParser.Show_integrationsContext = Show_integrationsContext; 
SnowflakeParser.Show_locksContext = Show_locksContext; 
SnowflakeParser.Show_managed_accountsContext = Show_managed_accountsContext; 
SnowflakeParser.Show_masking_policiesContext = Show_masking_policiesContext; 
SnowflakeParser.In_objContext = In_objContext; 
SnowflakeParser.In_obj_2Context = In_obj_2Context; 
SnowflakeParser.Show_materialized_viewsContext = Show_materialized_viewsContext; 
SnowflakeParser.Show_network_policiesContext = Show_network_policiesContext; 
SnowflakeParser.Show_objectsContext = Show_objectsContext; 
SnowflakeParser.Show_organization_accountsContext = Show_organization_accountsContext; 
SnowflakeParser.In_forContext = In_forContext; 
SnowflakeParser.Show_parametersContext = Show_parametersContext; 
SnowflakeParser.Show_pipesContext = Show_pipesContext; 
SnowflakeParser.Show_primary_keysContext = Show_primary_keysContext; 
SnowflakeParser.Show_proceduresContext = Show_proceduresContext; 
SnowflakeParser.Show_regionsContext = Show_regionsContext; 
SnowflakeParser.Show_replication_accountsContext = Show_replication_accountsContext; 
SnowflakeParser.Show_replication_databasesContext = Show_replication_databasesContext; 
SnowflakeParser.Show_replication_groupsContext = Show_replication_groupsContext; 
SnowflakeParser.Show_resource_monitorsContext = Show_resource_monitorsContext; 
SnowflakeParser.Show_rolesContext = Show_rolesContext; 
SnowflakeParser.Show_row_access_policiesContext = Show_row_access_policiesContext; 
SnowflakeParser.Show_schemasContext = Show_schemasContext; 
SnowflakeParser.Show_sequencesContext = Show_sequencesContext; 
SnowflakeParser.Show_session_policiesContext = Show_session_policiesContext; 
SnowflakeParser.Show_password_policiesContext = Show_password_policiesContext; 
SnowflakeParser.Show_sharesContext = Show_sharesContext; 
SnowflakeParser.Show_shares_in_failover_groupContext = Show_shares_in_failover_groupContext; 
SnowflakeParser.Show_shares_in_replication_groupContext = Show_shares_in_replication_groupContext; 
SnowflakeParser.Show_streamsContext = Show_streamsContext; 
SnowflakeParser.Show_tablesContext = Show_tablesContext; 
SnowflakeParser.Show_tagsContext = Show_tagsContext; 
SnowflakeParser.Show_tasksContext = Show_tasksContext; 
SnowflakeParser.Show_transactionsContext = Show_transactionsContext; 
SnowflakeParser.Show_user_functionsContext = Show_user_functionsContext; 
SnowflakeParser.Show_usersContext = Show_usersContext; 
SnowflakeParser.Show_variablesContext = Show_variablesContext; 
SnowflakeParser.Show_viewsContext = Show_viewsContext; 
SnowflakeParser.Show_warehousesContext = Show_warehousesContext; 
SnowflakeParser.Like_patternContext = Like_patternContext; 
SnowflakeParser.Account_identifierContext = Account_identifierContext; 
SnowflakeParser.Schema_nameContext = Schema_nameContext; 
SnowflakeParser.Object_typeContext = Object_typeContext; 
SnowflakeParser.Object_type_listContext = Object_type_listContext; 
SnowflakeParser.Tag_valueContext = Tag_valueContext; 
SnowflakeParser.Arg_data_typeContext = Arg_data_typeContext; 
SnowflakeParser.Arg_nameContext = Arg_nameContext; 
SnowflakeParser.Param_nameContext = Param_nameContext; 
SnowflakeParser.Region_group_idContext = Region_group_idContext; 
SnowflakeParser.Snowflake_region_idContext = Snowflake_region_idContext; 
SnowflakeParser.StringContext = StringContext; 
SnowflakeParser.String_listContext = String_listContext; 
SnowflakeParser.Id_fnContext = Id_fnContext; 
SnowflakeParser.Id_Context = Id_Context; 
SnowflakeParser.KeywordContext = KeywordContext; 
SnowflakeParser.Non_reserved_wordsContext = Non_reserved_wordsContext; 
SnowflakeParser.Builtin_functionContext = Builtin_functionContext; 
SnowflakeParser.Unary_or_binary_builtin_functionContext = Unary_or_binary_builtin_functionContext; 
SnowflakeParser.Binary_builtin_functionContext = Binary_builtin_functionContext; 
SnowflakeParser.Binary_or_ternary_builtin_functionContext = Binary_or_ternary_builtin_functionContext; 
SnowflakeParser.Ternary_builtin_functionContext = Ternary_builtin_functionContext; 
SnowflakeParser.List_functionContext = List_functionContext; 
SnowflakeParser.PatternContext = PatternContext; 
SnowflakeParser.Column_nameContext = Column_nameContext; 
SnowflakeParser.Column_listContext = Column_listContext; 
SnowflakeParser.Column_list_with_commentContext = Column_list_with_commentContext; 
SnowflakeParser.Object_nameContext = Object_nameContext; 
SnowflakeParser.Object_name_or_identifierContext = Object_name_or_identifierContext; 
SnowflakeParser.NumContext = NumContext; 
SnowflakeParser.Expr_listContext = Expr_listContext; 
SnowflakeParser.Expr_list_sortedContext = Expr_list_sortedContext; 
SnowflakeParser.ExprContext = ExprContext; 
SnowflakeParser.Iff_exprContext = Iff_exprContext; 
SnowflakeParser.Trim_expressionContext = Trim_expressionContext; 
SnowflakeParser.Try_cast_exprContext = Try_cast_exprContext; 
SnowflakeParser.Cast_exprContext = Cast_exprContext; 
SnowflakeParser.Json_literalContext = Json_literalContext; 
SnowflakeParser.Kv_pairContext = Kv_pairContext; 
SnowflakeParser.ValueContext = ValueContext; 
SnowflakeParser.Arr_literalContext = Arr_literalContext; 
SnowflakeParser.Data_type_sizeContext = Data_type_sizeContext; 
SnowflakeParser.Data_typeContext = Data_typeContext; 
SnowflakeParser.Primitive_expressionContext = Primitive_expressionContext; 
SnowflakeParser.Order_by_exprContext = Order_by_exprContext; 
SnowflakeParser.Asc_descContext = Asc_descContext; 
SnowflakeParser.Over_clauseContext = Over_clauseContext; 
SnowflakeParser.Function_callContext = Function_callContext; 
SnowflakeParser.Param_assoc_listContext = Param_assoc_listContext; 
SnowflakeParser.Param_assocContext = Param_assocContext; 
SnowflakeParser.Ignore_or_repect_nullsContext = Ignore_or_repect_nullsContext; 
SnowflakeParser.Ranking_windowed_functionContext = Ranking_windowed_functionContext; 
SnowflakeParser.Aggregate_functionContext = Aggregate_functionContext; 
SnowflakeParser.LiteralContext = LiteralContext; 
SnowflakeParser.SignContext = SignContext; 
SnowflakeParser.Full_column_nameContext = Full_column_nameContext; 
SnowflakeParser.Bracket_expressionContext = Bracket_expressionContext; 
SnowflakeParser.Case_expressionContext = Case_expressionContext; 
SnowflakeParser.Switch_search_condition_sectionContext = Switch_search_condition_sectionContext; 
SnowflakeParser.Switch_sectionContext = Switch_sectionContext; 
SnowflakeParser.Query_statementContext = Query_statementContext; 
SnowflakeParser.With_expressionContext = With_expressionContext; 
SnowflakeParser.Common_table_expressionContext = Common_table_expressionContext; 
SnowflakeParser.Select_statementContext = Select_statementContext; 
SnowflakeParser.Set_operatorsContext = Set_operatorsContext; 
SnowflakeParser.Select_optional_clausesContext = Select_optional_clausesContext; 
SnowflakeParser.Select_clauseContext = Select_clauseContext; 
SnowflakeParser.Select_top_clauseContext = Select_top_clauseContext; 
SnowflakeParser.Select_list_no_topContext = Select_list_no_topContext; 
SnowflakeParser.Select_list_topContext = Select_list_topContext; 
SnowflakeParser.Select_listContext = Select_listContext; 
SnowflakeParser.Select_list_elemContext = Select_list_elemContext; 
SnowflakeParser.Column_elem_starContext = Column_elem_starContext; 
SnowflakeParser.Column_elemContext = Column_elemContext; 
SnowflakeParser.Object_name_or_aliasContext = Object_name_or_aliasContext; 
SnowflakeParser.As_aliasContext = As_aliasContext; 
SnowflakeParser.Expression_elemContext = Expression_elemContext; 
SnowflakeParser.Column_positionContext = Column_positionContext; 
SnowflakeParser.All_distinctContext = All_distinctContext; 
SnowflakeParser.Top_clauseContext = Top_clauseContext; 
SnowflakeParser.Into_clauseContext = Into_clauseContext; 
SnowflakeParser.Var_listContext = Var_listContext; 
SnowflakeParser.VarContext = VarContext; 
SnowflakeParser.From_clauseContext = From_clauseContext; 
SnowflakeParser.Table_sourcesContext = Table_sourcesContext; 
SnowflakeParser.Table_sourceContext = Table_sourceContext; 
SnowflakeParser.Table_source_item_joinedContext = Table_source_item_joinedContext; 
SnowflakeParser.Object_refContext = Object_refContext; 
SnowflakeParser.Flatten_table_optionContext = Flatten_table_optionContext; 
SnowflakeParser.Flatten_tableContext = Flatten_tableContext; 
SnowflakeParser.Splited_tableContext = Splited_tableContext; 
SnowflakeParser.Prior_listContext = Prior_listContext; 
SnowflakeParser.Prior_itemContext = Prior_itemContext; 
SnowflakeParser.Outer_joinContext = Outer_joinContext; 
SnowflakeParser.Join_typeContext = Join_typeContext; 
SnowflakeParser.Join_clauseContext = Join_clauseContext; 
SnowflakeParser.At_beforeContext = At_beforeContext; 
SnowflakeParser.EndContext = EndContext; 
SnowflakeParser.ChangesContext = ChangesContext; 
SnowflakeParser.Default_append_onlyContext = Default_append_onlyContext; 
SnowflakeParser.Partition_byContext = Partition_byContext; 
SnowflakeParser.AliasContext = AliasContext; 
SnowflakeParser.Expr_alias_listContext = Expr_alias_listContext; 
SnowflakeParser.MeasuresContext = MeasuresContext; 
SnowflakeParser.Match_optsContext = Match_optsContext; 
SnowflakeParser.Row_matchContext = Row_matchContext; 
SnowflakeParser.First_lastContext = First_lastContext; 
SnowflakeParser.SymbolContext = SymbolContext; 
SnowflakeParser.After_matchContext = After_matchContext; 
SnowflakeParser.Symbol_listContext = Symbol_listContext; 
SnowflakeParser.DefineContext = DefineContext; 
SnowflakeParser.Match_recognizeContext = Match_recognizeContext; 
SnowflakeParser.Pivot_unpivotContext = Pivot_unpivotContext; 
SnowflakeParser.Column_alias_list_in_bracketsContext = Column_alias_list_in_bracketsContext; 
SnowflakeParser.Expr_list_in_parenthesesContext = Expr_list_in_parenthesesContext; 
SnowflakeParser.Values_tableContext = Values_tableContext; 
SnowflakeParser.Values_table_bodyContext = Values_table_bodyContext; 
SnowflakeParser.Sample_methodContext = Sample_methodContext; 
SnowflakeParser.Repeatable_seedContext = Repeatable_seedContext; 
SnowflakeParser.Sample_optsContext = Sample_optsContext; 
SnowflakeParser.SampleContext = SampleContext; 
SnowflakeParser.Search_conditionContext = Search_conditionContext; 
SnowflakeParser.Comparison_operatorContext = Comparison_operatorContext; 
SnowflakeParser.Null_not_nullContext = Null_not_nullContext; 
SnowflakeParser.SubqueryContext = SubqueryContext; 
SnowflakeParser.PredicateContext = PredicateContext; 
SnowflakeParser.Where_clauseContext = Where_clauseContext; 
SnowflakeParser.Group_by_elemContext = Group_by_elemContext; 
SnowflakeParser.Group_by_listContext = Group_by_listContext; 
SnowflakeParser.Group_by_clauseContext = Group_by_clauseContext; 
SnowflakeParser.Having_clauseContext = Having_clauseContext; 
SnowflakeParser.Qualify_clauseContext = Qualify_clauseContext; 
SnowflakeParser.Order_itemContext = Order_itemContext; 
SnowflakeParser.Order_by_clauseContext = Order_by_clauseContext; 
SnowflakeParser.Row_rowsContext = Row_rowsContext; 
SnowflakeParser.First_nextContext = First_nextContext; 
SnowflakeParser.Limit_clauseContext = Limit_clauseContext; 
SnowflakeParser.Round_modeContext = Round_modeContext; 
SnowflakeParser.Round_exprContext = Round_exprContext; 
